<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\math\BigIntegerMath.java">
    <comment type="block">/*
        * Copyright (C) 2011 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>math</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkArgument</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>math</name>.<name>MathPreconditions</name>.
            <name>checkNonNegative</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>math</name>.<name>MathPreconditions</name>.
            <name>checkPositive</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>math</name>.<name>MathPreconditions</name>.
            <name>checkRoundingUnnecessary</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>math</name>.<name>RoundingMode</name>.
            <name>CEILING</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>math</name>.<name>RoundingMode</name>.
            <name>FLOOR</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>math</name>.<name>RoundingMode</name>.
            <name>HALF_EVEN</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtIncompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>VisibleForTesting</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>math</name>.
            <name>BigDecimal</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>math</name>.
            <name>BigInteger</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>math</name>.
            <name>RoundingMode</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>ArrayList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A class for arithmetic on values of type {@code BigInteger}.
        *
        * &lt;p&gt;The implementations of many methods in this class are based on material from Henry S. Warren,
        * Jr.'s &lt;i&gt;Hacker's Delight&lt;/i&gt;, (Addison Wesley, 2002).
        *
        * &lt;p&gt;Similar functionality for {@code int} and for {@code long} can be found in
        * {@link IntMath} and {@link LongMath} respectively.
        *
        * @author Louis Wasserman
        * @since 11.0
        */
    </comment>
    <class>
        <annotation>@
            <name>GwtCompatible</name>
            <argument_list>(emulated = true)</argument_list>
        </annotation>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>BigIntegerMath</name>
        <block>{
            <comment type="javadoc">/**
                * Returns {@code true} if {@code x} represents a power of two.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isPowerOfTwo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BigInteger</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>x</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>x</name>.
                                    <name>signum</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            &gt; 0 &amp;&amp;
                            <call>
                                <name><name>x</name>.
                                    <name>getLowestSetBit</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ==
                            <call>
                                <name><name>x</name>.
                                    <name>bitLength</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            - 1
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode.
                *
                * @throws IllegalArgumentException if {@code x &lt;= 0}
                * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
                * is not a power of two
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("fallthrough")</argument_list>
                    </annotation>
                    <comment type="line">// TODO(kevinb): remove after this warning is disabled globally</comment>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>log2</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BigInteger</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>RoundingMode</name>
                            </type>
                            <name>mode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkPositive</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"x"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>checkNotNull</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>x</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>logFloor</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>x</name>.
                                            <name>bitLength</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>mode</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name>UNNECESSARY</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>checkRoundingUnnecessary</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name>isPowerOfTwo</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>x</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// fall through</comment>
                            </case>
                            <case>case
                                <expr>
                                    <name>DOWN</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>FLOOR</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <name>logFloor</name>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>UP</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>CEILING</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name>isPowerOfTwo</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>x</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ? <name>logFloor</name> : <name>logFloor</name> + 1
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_DOWN</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_UP</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_EVEN</name>
                                </expr>
                                :
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>logFloor</name>
                                            &lt;
                                            <name>SQRT2_PRECOMPUTE_THRESHOLD</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>BigInteger</name>
                                                    </type>
                                                    <name>halfPower</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>SQRT2_PRECOMPUTED_BITS</name>.
                                                                    <name>shiftRight</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>SQRT2_PRECOMPUTE_THRESHOLD</name>
                                                                            -
                                                                            <name>logFloor</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <call>
                                                            <name><name>x</name>.
                                                                <name>compareTo</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>halfPower</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        &lt;= 0
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return
                                                            <expr>
                                                                <name>logFloor</name>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <return>return
                                                            <expr>
                                                                <name>logFloor</name>
                                                                + 1
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <comment type="block">/*
                                    * Since sqrt(2) is irrational, log2(x) - logFloor cannot be exactly 0.5
                                    *
                                    * To determine which side of logFloor.5 the logarithm is, we compare x^2 to 2^(2 *
                                    * logFloor + 1).
                                    */
                                </comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>BigInteger</name>
                                        </type>
                                        <name>x2</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>x</name>.
                                                        <name>pow</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>2</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>logX2Floor</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>x2</name>.
                                                        <name>bitLength</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                - 1
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>(<name>logX2Floor</name> &lt; 2 * <name>logFloor</name> + 1) ? <name>
                                        logFloor
                                    </name> : <name>logFloor</name> + 1
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <default>default:
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>AssertionError</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>

            <comment type="block">/*
                * The maximum number of bits in a square root for which we'll precompute an explicit half power
                * of two. This can be any value, but higher values incur more class load time and linearly
                * increasing memory consumption.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>VisibleForTesting</name>
                        </annotation>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>SQRT2_PRECOMPUTE_THRESHOLD</name> =
                    <init>
                        <expr>256</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>VisibleForTesting</name>
                        </annotation>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>BigInteger</name>
                    </type>
                    <name>SQRT2_PRECOMPUTED_BITS</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>BigInteger</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"16a09e667f3bcc908b2fb1366ea957d3e3adec17512775099da2f590b0667322a"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>16</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Returns the base-10 logarithm of {@code x}, rounded according to the specified rounding mode.
                *
                * @throws IllegalArgumentException if {@code x &lt;= 0}
                * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
                * is not a power of ten
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("fallthrough")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>log10</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BigInteger</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>RoundingMode</name>
                            </type>
                            <name>mode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkPositive</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"x"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>x</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>fitsInLong</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>x</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>LongMath</name>.
                                                <name>log10</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>x</name>.
                                                                <name>longValue</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>mode</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>approxLog10</name> =
                            <init>
                                <expr>
                                    <call>(<name>int</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>log2</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>x</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>FLOOR</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    * <name>LN_2</name> /
                                                    <name>LN_10</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>BigInteger</name>
                            </type>
                            <name>approxPow</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>BigInteger</name>.<name>TEN</name>.
                                            <name>pow</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>approxLog10</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>approxCmp</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>approxPow</name>.
                                            <name>compareTo</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>x</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="block">/*
                        * We adjust approxLog10 and approxPow until they're equal to floor(log10(x)) and
                        * 10^floor(log10(x)).
                        */
                    </comment>

                    <if>if
                        <condition>(
                            <expr>
                                <name>approxCmp</name>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="block">/*
                                    * The code is written so that even completely incorrect approximations will still
                                    yield the
                                    * correct answer eventually, but in practice this branch should almost never be
                                    entered,
                                    * and even then the loop should not run more than once.
                                    */
                                </comment>
                                <do>do
                                    <block>{
                                        <expr_stmt>
                                            <expr><name>approxLog10</name>--
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>approxPow</name>
                                                =
                                                <call>
                                                    <name><name>approxPow</name>.
                                                        <name>divide</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>BigInteger</name>.
                                                                    <name>TEN</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>approxCmp</name>
                                                =
                                                <call>
                                                    <name><name>approxPow</name>.
                                                        <name>compareTo</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>x</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    while
                                    <condition>(
                                        <expr>
                                            <name>approxCmp</name>
                                            &gt; 0
                                        </expr>
                                        )
                                    </condition>
                                    ;
                                </do>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>BigInteger</name>
                                        </type>
                                        <name>nextPow</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>BigInteger</name>.<name>TEN</name>.
                                                        <name>multiply</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>approxPow</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>nextCmp</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>nextPow</name>.
                                                        <name>compareTo</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>x</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <while>while
                                    <condition>(
                                        <expr>
                                            <name>nextCmp</name>
                                            &lt;= 0
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <expr_stmt>
                                            <expr><name>approxLog10</name>++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>approxPow</name>
                                                =
                                                <name>nextPow</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>approxCmp</name>
                                                =
                                                <name>nextCmp</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>nextPow</name>
                                                =
                                                <call>
                                                    <name><name>BigInteger</name>.<name>TEN</name>.
                                                        <name>multiply</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>approxPow</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>nextCmp</name>
                                                =
                                                <call>
                                                    <name><name>nextPow</name>.
                                                        <name>compareTo</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>x</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                }
                            </block>
                        </else>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>floorLog</name> =
                            <init>
                                <expr>
                                    <name>approxLog10</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>BigInteger</name>
                            </type>
                            <name>floorPow</name> =
                            <init>
                                <expr>
                                    <name>approxPow</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>floorCmp</name> =
                            <init>
                                <expr>
                                    <name>approxCmp</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <switch>switch
                        <condition>(
                            <expr>
                                <name>mode</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name>UNNECESSARY</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>checkRoundingUnnecessary</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>floorCmp</name>
                                                        == 0
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// fall through</comment>
                            </case>
                            <case>case
                                <expr>
                                    <name>FLOOR</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>DOWN</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <name>floorLog</name>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>CEILING</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>UP</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>floorPow</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>x</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ? <name>floorLog</name> : <name>floorLog</name> + 1
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_DOWN</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_UP</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_EVEN</name>
                                </expr>
                                :
                                <comment type="line">// Since sqrt(10) is irrational, log10(x) - floorLog can never be
                                    exactly 0.5
                                </comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>BigInteger</name>
                                        </type>
                                        <name>x2</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>x</name>.
                                                        <name>pow</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>2</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>BigInteger</name>
                                        </type>
                                        <name>halfPowerSquared</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>floorPow</name>.
                                                        <name>pow</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>2</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>multiply</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>BigInteger</name>.
                                                                    <name>TEN</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>(
                                        <call>
                                            <name><name>x2</name>.
                                                <name>compareTo</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>halfPowerSquared</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &lt;= 0) ? <name>floorLog</name> : <name>floorLog</name> + 1
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <default>default:
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>AssertionError</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>double</name>
                    </type>
                    <name>LN_10</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Math</name>.
                                    <name>log</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>10</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>double</name>
                    </type>
                    <name>LN_2</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Math</name>.
                                    <name>log</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>2</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Returns the square root of {@code x}, rounded with the specified rounding mode.
                *
                * @throws IllegalArgumentException if {@code x &lt; 0}
                * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and
                * {@code sqrt(x)} is not an integer
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("fallthrough")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>BigInteger</name>
                </type>
                <name>sqrt</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BigInteger</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>RoundingMode</name>
                            </type>
                            <name>mode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNonNegative</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"x"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>x</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>fitsInLong</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>x</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>BigInteger</name>.
                                                <name>valueOf</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>LongMath</name>.
                                                                <name>sqrt</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>x</name>.
                                                                                <name>longValue</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>mode</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>BigInteger</name>
                            </type>
                            <name>sqrtFloor</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>sqrtFloor</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>x</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>mode</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name>UNNECESSARY</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>checkRoundingUnnecessary</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>sqrtFloor</name>.
                                                                <name>pow</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>2</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                        .
                                                        <call>
                                                            <name>equals</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>x</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// fall through</comment>
                            </case>
                            <case>case
                                <expr>
                                    <name>FLOOR</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>DOWN</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <name>sqrtFloor</name>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>CEILING</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>UP</name>
                                </expr>
                                :
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>sqrtFloorInt</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>sqrtFloor</name>.
                                                        <name>intValue</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>boolean</name>
                                        </type>
                                        <name>sqrtFloorIsExact</name> =
                                        <init>
                                            <expr>(<name>sqrtFloorInt</name> * <name>sqrtFloorInt</name> ==
                                                <call>
                                                    <name><name>x</name>.
                                                        <name>intValue</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                )
                                                <comment type="line">// fast check mod 2^32</comment>
                                                &amp;&amp;
                                                <call>
                                                    <name><name>sqrtFloor</name>.
                                                        <name>pow</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>2</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>equals</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>x</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <comment type="line">// slow exact check</comment>
                                <return>return
                                    <expr>
                                        <name>sqrtFloorIsExact</name>
                                        ? <name>sqrtFloor</name> :
                                        <call>
                                            <name><name>sqrtFloor</name>.
                                                <name>add</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>BigInteger</name>.
                                                            <name>ONE</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_DOWN</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_UP</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_EVEN</name>
                                </expr>
                                :
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>BigInteger</name>
                                        </type>
                                        <name>halfSquare</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>sqrtFloor</name>.
                                                        <name>pow</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>2</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>add</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>sqrtFloor</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <comment type="block">/*
                                    * We wish to test whether or not x &lt;= (sqrtFloor + 0.5)^2 = halfSquare + 0.25.
                                    Since both
                                    * x and halfSquare are integers, this is equivalent to testing whether or not x &lt;=
                                    * halfSquare.
                                    */
                                </comment>
                                <return>return
                                    <expr>(
                                        <call>
                                            <name><name>halfSquare</name>.
                                                <name>compareTo</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>x</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &gt;= 0) ? <name>sqrtFloor</name> :
                                        <call>
                                            <name><name>sqrtFloor</name>.
                                                <name>add</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>BigInteger</name>.
                                                            <name>ONE</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <default>default:
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>AssertionError</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>BigInteger</name>
                </type>
                <name>sqrtFloor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BigInteger</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="block">/*
                        * Adapted from Hacker's Delight, Figure 11-1.
                        *
                        * Using DoubleUtils.bigToDouble, getting a double approximation of x is extremely fast, and
                        * then we can get a double approximation of the square root. Then, we iteratively improve this
                        * guess with an application of Newton's method, which sets guess := (guess + (x / guess)) / 2.
                        * This iteration has the following two properties:
                        *
                        * a) every iteration (except potentially the first) has guess &gt;= floor(sqrt(x)). This is
                        * because guess' is the arithmetic mean of guess and x / guess, sqrt(x) is the geometric mean,
                        * and the arithmetic mean is always higher than the geometric mean.
                        *
                        * b) this iteration converges to floor(sqrt(x)). In fact, the number of correct digits doubles
                        * with each iteration, so this algorithm takes O(log(digits)) iterations.
                        *
                        * We start out with a double-precision approximation, which may be higher or lower than the
                        * true value. Therefore, we perform at least one Newton iteration to get a guess that's
                        * definitely &gt;= floor(sqrt(x)), and then continue the iteration until we reach a fixed point.
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>BigInteger</name>
                            </type>
                            <name>sqrt0</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>log2</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>log2</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>x</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>FLOOR</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>log2</name>
                                &lt;
                                <name><name>Double</name>.
                                    <name>MAX_EXPONENT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>sqrt0</name>
                                        =
                                        <call>
                                            <name>sqrtApproxWithDoubles</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>x</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>shift</name> =
                                        <init>
                                            <expr>(<name>log2</name> -
                                                <name><name>DoubleUtils</name>.
                                                    <name>SIGNIFICAND_BITS</name>
                                                </name>
                                                ) &amp; ~1
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <comment type="line">// even!</comment>
                                <comment type="block">/*
                                    * We have that x / 2^shift &lt; 2^54. Our initial approximation to sqrtFloor(x) will
                                    be
                                    * 2^(shift/2) * sqrtApproxWithDoubles(x / 2^shift).
                                    */
                                </comment>
                                <expr_stmt>
                                    <expr>
                                        <name>sqrt0</name>
                                        =
                                        <call>
                                            <name>sqrtApproxWithDoubles</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>x</name>.
                                                                <name>shiftRight</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>shift</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>shiftLeft</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>shift</name>
                                                        &gt;&gt; 1
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>BigInteger</name>
                            </type>
                            <name>sqrt1</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>sqrt0</name>.
                                            <name>add</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>x</name>.
                                                            <name>divide</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>sqrt0</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>shiftRight</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>1</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>sqrt0</name>.
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>sqrt1</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>sqrt0</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <do>do
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>sqrt0</name>
                                    =
                                    <name>sqrt1</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>sqrt1</name>
                                    =
                                    <call>
                                        <name><name>sqrt0</name>.
                                            <name>add</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>x</name>.
                                                            <name>divide</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>sqrt0</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>shiftRight</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>1</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        while
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>sqrt1</name>.
                                        <name>compareTo</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>sqrt0</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        ;
                    </do>
                    <return>return
                        <expr>
                            <name>sqrt0</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>BigInteger</name>
                </type>
                <name>sqrtApproxWithDoubles</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BigInteger</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>DoubleMath</name>.
                                    <name>roundToBigInteger</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>sqrt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>DoubleUtils</name>.
                                                                    <name>bigToDouble</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>x</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>HALF_EVEN</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the result of dividing {@code p} by {@code q}, rounding using the specified
                * {@code RoundingMode}.
                *
                * @throws ArithmeticException if {@code q == 0}, or if {@code mode == UNNECESSARY} and {@code a}
                * is not an integer multiple of {@code b}
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>BigInteger</name>
                </type>
                <name>divide</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BigInteger</name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>BigInteger</name>
                            </type>
                            <name>q</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>RoundingMode</name>
                            </type>
                            <name>mode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>BigDecimal</name>
                            </type>
                            <name>pDec</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>BigDecimal</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>p</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>BigDecimal</name>
                            </type>
                            <name>qDec</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>BigDecimal</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>q</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>pDec</name>.
                                    <name>divide</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>qDec</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>mode</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>toBigIntegerExact</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns {@code n!}, that is, the product of the first {@code n} positive
                * integers, or {@code 1} if {@code n == 0}.
                *
                * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; the result takes &lt;i&gt;O(n log n)&lt;/i&gt; space, so use
                cautiously.
                *
                * &lt;p&gt;This uses an efficient binary recursive algorithm to compute the factorial
                * with balanced multiplies. It also removes all the 2s from the intermediate
                * products (shifting them back in at the end).
                *
                * @throws IllegalArgumentException if {@code n &lt; 0}
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>BigInteger</name>
                </type>
                <name>factorial</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>n</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNonNegative</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"n"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>n</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// If the factorial is small enough, just use LongMath to do it.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>n</name>
                                &lt;
                                <name><name>LongMath</name>.<name>factorials</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>BigInteger</name>.
                                                <name>valueOf</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>LongMath</name>.
                                                            <name>factorials</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>n</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Pre-allocate space for our list of intermediate BigIntegers.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>approxSize</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>IntMath</name>.
                                            <name>divide</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>n</name>
                                                    *
                                                    <call>
                                                        <name><name>IntMath</name>.
                                                            <name>log2</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>n</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>CEILING</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>Long</name>.
                                                        <name>SIZE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>CEILING</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ArrayList</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>BigInteger</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>bignums</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>
                                            <name>ArrayList</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>BigInteger</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>approxSize</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Start from the pre-computed maximum long factorial.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>startingNumber</name> =
                            <init>
                                <expr>
                                    <name><name>LongMath</name>.<name>factorials</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>product</name> =
                            <init>
                                <expr>
                                    <name><name>LongMath</name>.
                                        <name>factorials</name>
                                        <index>[
                                            <expr>
                                                <name>startingNumber</name>
                                                - 1
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Strip off 2s from this value.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>shift</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Long</name>.
                                            <name>numberOfTrailingZeros</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>product</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>product</name>
                            &gt;&gt;=
                            <name>shift</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// Use floor(log2(num)) + 1 to prevent overflow of multiplication.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>productBits</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>LongMath</name>.
                                            <name>log2</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>product</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>FLOOR</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    + 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>bits</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>LongMath</name>.
                                            <name>log2</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>startingNumber</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>FLOOR</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    + 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Check for the next power of two boundary, to save us a CLZ operation.
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>nextPowerOfTwo</name> =
                            <init>
                                <expr>1 &lt;&lt; (<name>bits</name> - 1)
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Iteratively multiply the longs as big as they can go.</comment>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>long</name>
                                </type>
                                <name>num</name> =
                                <init>
                                    <expr>
                                        <name>startingNumber</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>num</name>
                                &lt;=
                                <name>n</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>num</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <comment type="line">// Check to see if the floor(log2(num)) + 1 has changed.</comment>
                            <if>if
                                <condition>(
                                    <expr>(<name>num</name> &amp; <name>nextPowerOfTwo</name>) != 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>nextPowerOfTwo</name>
                                                &lt;&lt;= 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr><name>bits</name>++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <comment type="line">// Get rid of the 2s in num.</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>tz</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>Long</name>.
                                                    <name>numberOfTrailingZeros</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>num</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>normalizedNum</name> =
                                    <init>
                                        <expr>
                                            <name>num</name>
                                            &gt;&gt;
                                            <name>tz</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>shift</name>
                                    +=
                                    <name>tz</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// Adjust floor(log2(num)) + 1.</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>normalizedBits</name> =
                                    <init>
                                        <expr>
                                            <name>bits</name>
                                            -
                                            <name>tz</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <comment type="line">// If it won't fit in a long, then we store off the intermediate
                                product.
                            </comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>normalizedBits</name>
                                        + <name>productBits</name> &gt;=
                                        <name><name>Long</name>.
                                            <name>SIZE</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>bignums</name>.
                                                        <name>add</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>BigInteger</name>.
                                                                        <name>valueOf</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>product</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>product</name>
                                                = 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>productBits</name>
                                                = 0
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>product</name>
                                    *=
                                    <name>normalizedNum</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>productBits</name>
                                    =
                                    <call>
                                        <name><name>LongMath</name>.
                                            <name>log2</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>product</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>FLOOR</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    + 1
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <comment type="line">// Check for leftovers.</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>product</name>
                                &gt; 1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>bignums</name>.
                                                <name>add</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>BigInteger</name>.
                                                                <name>valueOf</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>product</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// Efficiently multiply all the intermediate products together.</comment>
                    <return>return
                        <expr>
                            <call>
                                <name>listProduct</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bignums</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>shiftLeft</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>shift</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>static</specifier>
                    <name>BigInteger</name>
                </type>
                <name>listProduct</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>BigInteger</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>nums</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>listProduct</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>nums</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>nums</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>static</specifier>
                    <name>BigInteger</name>
                </type>
                <name>listProduct</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>BigInteger</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>nums</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>end</name>
                                -
                                <name>start</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case <expr>0</expr>:
                                <return>return
                                    <expr>
                                        <name><name>BigInteger</name>.
                                            <name>ONE</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case <expr>1</expr>:
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>nums</name>.
                                                <name>get</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>start</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case <expr>2</expr>:
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>nums</name>.
                                                <name>get</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>start</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>multiply</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>nums</name>.
                                                                <name>get</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>start</name>
                                                                        + 1
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case <expr>3</expr>:
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>nums</name>.
                                                <name>get</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>start</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>multiply</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>nums</name>.
                                                                <name>get</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>start</name>
                                                                        + 1
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>multiply</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>nums</name>.
                                                                <name>get</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>start</name>
                                                                        + 2
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <default>default:
                                <comment type="line">// Otherwise, split the list in half and recursively do this.
                                </comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>m</name> =
                                        <init>
                                            <expr>(<name>end</name> + <name>start</name>) &gt;&gt;&gt; 1
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name>listProduct</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>nums</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>start</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>m</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>multiply</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name>listProduct</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>nums</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>m</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>end</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and
                * {@code k}, that is, {@code n! / (k! (n - k)!)}.
                *
                * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; the result can take as much as &lt;i&gt;O(k log n)&lt;/i&gt;
                space.
                *
                * @throws IllegalArgumentException if {@code n &lt; 0}, {@code k &lt; 0}, or {@code k &gt; n}
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>BigInteger</name>
                </type>
                <name>binomial</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>n</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>k</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNonNegative</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"n"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>n</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNonNegative</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"k"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>k</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>k</name>
                                            &lt;=
                                            <name>n</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"k (%s) &gt; n (%s)"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>k</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>n</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>k</name>
                                &gt; (<name>n</name> &gt;&gt; 1)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>k</name>
                                        = <name>n</name> -
                                        <name>k</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>k</name>
                                &lt;
                                <name><name>LongMath</name>.<name>biggestBinomials</name>.
                                    <name>length</name>
                                </name>
                                &amp;&amp; <name>n</name> &lt;=
                                <name><name>LongMath</name>.
                                    <name>biggestBinomials</name>
                                    <index>[
                                        <expr>
                                            <name>k</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>BigInteger</name>.
                                                <name>valueOf</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>LongMath</name>.
                                                                <name>binomial</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>n</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>k</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>BigInteger</name>
                            </type>
                            <name>accum</name> =
                            <init>
                                <expr>
                                    <name><name>BigInteger</name>.
                                        <name>ONE</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>numeratorAccum</name> =
                            <init>
                                <expr>
                                    <name>n</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>denominatorAccum</name> =
                            <init>
                                <expr>1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>bits</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>LongMath</name>.
                                            <name>log2</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>n</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>RoundingMode</name>.
                                                        <name>CEILING</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>numeratorBits</name> =
                            <init>
                                <expr>
                                    <name>bits</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>1</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>k</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>p</name> =
                                    <init>
                                        <expr>
                                            <name>n</name>
                                            -
                                            <name>i</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>q</name> =
                                    <init>
                                        <expr>
                                            <name>i</name>
                                            + 1
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <comment type="line">// log2(p) &gt;= bits - 1, because p &gt;= n/2</comment>

                            <if>if
                                <condition>(
                                    <expr>
                                        <name>numeratorBits</name>
                                        + <name>bits</name> &gt;=
                                        <name><name>Long</name>.
                                            <name>SIZE</name>
                                        </name>
                                        - 1
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// The numerator is as big as it can get without risking
                                            overflow.
                                        </comment>
                                        <comment type="line">// Multiply numeratorAccum / denominatorAccum into accum.
                                        </comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>accum</name>
                                                =
                                                <call>
                                                    <name>
                                                        <name>accum</name>
                                                        .
                                                        <name>multiply</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>BigInteger</name>.
                                                                        <name>valueOf</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>numeratorAccum</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>divide</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>BigInteger</name>.
                                                                        <name>valueOf</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>denominatorAccum</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>numeratorAccum</name>
                                                =
                                                <name>p</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>denominatorAccum</name>
                                                =
                                                <name>q</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>numeratorBits</name>
                                                =
                                                <name>bits</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <comment type="line">// We can definitely multiply into the long accumulators
                                            without overflowing them.
                                        </comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>numeratorAccum</name>
                                                *=
                                                <name>p</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>denominatorAccum</name>
                                                *=
                                                <name>q</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>numeratorBits</name>
                                                +=
                                                <name>bits</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name>
                                    <name>accum</name>
                                    .
                                    <name>multiply</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>BigInteger</name>.
                                                    <name>valueOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>numeratorAccum</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>divide</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>BigInteger</name>.
                                                    <name>valueOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>denominatorAccum</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Returns true if BigInteger.valueOf(x.longValue()).equals(x).</comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>fitsInLong</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BigInteger</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>x</name>.
                                    <name>bitLength</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            &lt;=
                            <name><name>Long</name>.
                                <name>SIZE</name>
                            </name>
                            - 1
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <constructor>
                <specifier>private</specifier>
                <name>BigIntegerMath</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>
            }
        </block>
    </class>
</unit>
