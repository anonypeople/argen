<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\BinaryTreeTraverser.java">
    <comment type="block">/*
        * Copyright (C) 2012 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Optional</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>ArrayDeque</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>BitSet</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Deque</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A variant of {@link TreeTraverser} for binary trees, providing additional traversals specific to
        * binary trees.
        *
        * @author Louis Wasserman
        * @since 15.0
        */
    </comment>
    <class>
        <annotation>@
            <name>Beta</name>
        </annotation>
        <annotation>@
            <name>GwtCompatible</name>
            <argument_list>(emulated = true)</argument_list>
        </annotation>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class
        <name>
            <name>BinaryTreeTraverser</name>
            <argument_list>&lt;
                <argument>
                    <name>T</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>TreeTraverser</name>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <comment type="line">// TODO(lowasser): make this GWT-compatible when we've checked in ArrayDeque and BitSet
                emulation
            </comment>

            <comment type="javadoc">/**
                * Returns the left child of the specified node, or {@link Optional#absent()} if the specified
                * node has no left child.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>
                        <name>Optional</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>leftChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>root</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the right child of the specified node, or {@link Optional#absent()} if the specified
                * node has no right child.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>
                        <name>Optional</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>rightChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>root</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the children of this node, in left-to-right order.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>
                        <name>Iterable</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>children</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>T</name>
                            </type>
                            <name>root</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>root</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>new
                            <class>
                                <super>
                                    <name>
                                        <name>FluentIterable</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>T</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </super>
                                <argument_list>()</argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>
                                                <name>Iterator</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>T</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>iterator</name>
                                        <parameter_list>()</parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>new
                                                    <class>
                                                        <super>
                                                            <name>
                                                                <name>AbstractIterator</name>
                                                                <argument_list>&lt;
                                                                    <argument>
                                                                        <name>T</name>
                                                                    </argument>
                                                                    &gt;
                                                                </argument_list>
                                                            </name>
                                                        </super>
                                                        <argument_list>()</argument_list>
                                                        <block>{
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <name>boolean</name>
                                                                    </type>
                                                                    <name>doneLeft</name>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <name>boolean</name>
                                                                    </type>
                                                                    <name>doneRight</name>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>

                                                            <function>
                                                                <type>
                                                                    <annotation>@
                                                                        <name>Override</name>
                                                                    </annotation>
                                                                    <specifier>protected</specifier>
                                                                    <name>T</name>
                                                                </type>
                                                                <name>computeNext</name>
                                                                <parameter_list>()</parameter_list>
                                                                <block>{
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>!
                                                                                <name>doneLeft</name>
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <name>doneLeft</name>
                                                                                        = true
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                <decl_stmt>
                                                                                    <decl>
                                                                                        <type>
                                                                                            <name>
                                                                                                <name>Optional</name>
                                                                                                <argument_list>&lt;
                                                                                                    <argument>
                                                                                                        <name>T</name>
                                                                                                    </argument>
                                                                                                    &gt;
                                                                                                </argument_list>
                                                                                            </name>
                                                                                        </type>
                                                                                        <name>left</name> =
                                                                                        <init>
                                                                                            <expr>
                                                                                                <call>
                                                                                                    <name>leftChild
                                                                                                    </name>
                                                                                                    <argument_list>(
                                                                                                        <argument>
                                                                                                            <expr>
                                                                                                                <name>
                                                                                                                    root
                                                                                                                </name>
                                                                                                            </expr>
                                                                                                        </argument>
                                                                                                        )
                                                                                                    </argument_list>
                                                                                                </call>
                                                                                            </expr>
                                                                                        </init>
                                                                                    </decl>
                                                                                    ;
                                                                                </decl_stmt>
                                                                                <if>if
                                                                                    <condition>(
                                                                                        <expr>
                                                                                            <call>
                                                                                                <name><name>left</name>.
                                                                                                    <name>isPresent
                                                                                                    </name>
                                                                                                </name>
                                                                                                <argument_list>()
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                        )
                                                                                    </condition>
                                                                                    <then>
                                                                                        <block>{
                                                                                            <return>return
                                                                                                <expr>
                                                                                                    <call>
                                                                                                        <name><name>
                                                                                                            left</name>.
                                                                                                            <name>get
                                                                                                            </name>
                                                                                                        </name>
                                                                                                        <argument_list>
                                                                                                            ()
                                                                                                        </argument_list>
                                                                                                    </call>
                                                                                                </expr>
                                                                                                ;
                                                                                            </return>
                                                                                            }
                                                                                        </block>
                                                                                    </then>
                                                                                </if>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                    </if>
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>!
                                                                                <name>doneRight</name>
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <name>doneRight</name>
                                                                                        = true
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                <decl_stmt>
                                                                                    <decl>
                                                                                        <type>
                                                                                            <name>
                                                                                                <name>Optional</name>
                                                                                                <argument_list>&lt;
                                                                                                    <argument>
                                                                                                        <name>T</name>
                                                                                                    </argument>
                                                                                                    &gt;
                                                                                                </argument_list>
                                                                                            </name>
                                                                                        </type>
                                                                                        <name>right</name> =
                                                                                        <init>
                                                                                            <expr>
                                                                                                <call>
                                                                                                    <name>rightChild
                                                                                                    </name>
                                                                                                    <argument_list>(
                                                                                                        <argument>
                                                                                                            <expr>
                                                                                                                <name>
                                                                                                                    root
                                                                                                                </name>
                                                                                                            </expr>
                                                                                                        </argument>
                                                                                                        )
                                                                                                    </argument_list>
                                                                                                </call>
                                                                                            </expr>
                                                                                        </init>
                                                                                    </decl>
                                                                                    ;
                                                                                </decl_stmt>
                                                                                <if>if
                                                                                    <condition>(
                                                                                        <expr>
                                                                                            <call>
                                                                                                <name><name>right</name>
                                                                                                    .
                                                                                                    <name>isPresent
                                                                                                    </name>
                                                                                                </name>
                                                                                                <argument_list>()
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                        )
                                                                                    </condition>
                                                                                    <then>
                                                                                        <block>{
                                                                                            <return>return
                                                                                                <expr>
                                                                                                    <call>
                                                                                                        <name><name>
                                                                                                            right</name>
                                                                                                            .
                                                                                                            <name>get
                                                                                                            </name>
                                                                                                        </name>
                                                                                                        <argument_list>
                                                                                                            ()
                                                                                                        </argument_list>
                                                                                                    </call>
                                                                                                </expr>
                                                                                                ;
                                                                                            </return>
                                                                                            }
                                                                                        </block>
                                                                                    </then>
                                                                                </if>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                    </if>
                                                                    <return>return
                                                                        <expr>
                                                                            <call>
                                                                                <name>endOfData</name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </return>
                                                                    }
                                                                </block>
                                                            </function>
                                                            }
                                                        </block>
                                                    </class>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>UnmodifiableIterator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>preOrderIterator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>root</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>PreOrderIterator</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>root</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="block">/*
                * Optimized implementation of preOrderIterator for binary trees.
                */
            </comment>
            <class>
                <specifier>private</specifier>
                <specifier>final</specifier> class <name>PreOrderIterator</name>
                <super>
                    <extends>extends
                        <name>
                            <name>UnmodifiableIterator</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>T</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                    <implements>implements
                        <name>
                            <name>PeekingIterator</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>T</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </implements>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>
                                    <name>Deque</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>stack</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>PreOrderIterator</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>T</name>
                                    </type>
                                    <name>root</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>stack</name>
                                    </name>
                                    = new
                                    <call>
                                        <name>
                                            <name>ArrayDeque</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>T</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>stack</name>.
                                            <name>addLast</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>root</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>hasNext</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>!
                                    <call>
                                        <name><name>stack</name>.
                                            <name>isEmpty</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>T</name>
                        </type>
                        <name>next</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>T</name>
                                    </type>
                                    <name>result</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>stack</name>.
                                                    <name>removeLast</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>pushIfPresent</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>stack</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>rightChild</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>result</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>pushIfPresent</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>stack</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>leftChild</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>result</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>result</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>T</name>
                        </type>
                        <name>peek</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>stack</name>.
                                            <name>getLast</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>UnmodifiableIterator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>postOrderIterator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>root</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>PostOrderIterator</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>root</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="block">/*
                * Optimized implementation of postOrderIterator for binary trees.
                */
            </comment>
            <class>
                <specifier>private</specifier>
                <specifier>final</specifier> class <name>PostOrderIterator</name>
                <super>
                    <extends>extends
                        <name>
                            <name>UnmodifiableIterator</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>T</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>
                                    <name>Deque</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>stack</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>BitSet</name>
                            </type>
                            <name>hasExpanded</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>PostOrderIterator</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>T</name>
                                    </type>
                                    <name>root</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>stack</name>
                                    </name>
                                    = new
                                    <call>
                                        <name>
                                            <name>ArrayDeque</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>T</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>stack</name>.
                                            <name>addLast</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>root</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>hasExpanded</name>
                                    </name>
                                    = new
                                    <call>
                                        <name>BitSet</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>hasNext</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>!
                                    <call>
                                        <name><name>stack</name>.
                                            <name>isEmpty</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>T</name>
                        </type>
                        <name>next</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <while>while
                                <condition>(<expr>true</expr>)
                                </condition>
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>T</name>
                                            </type>
                                            <name>node</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>stack</name>.
                                                            <name>getLast</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>boolean</name>
                                            </type>
                                            <name>expandedNode</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>hasExpanded</name>.
                                                            <name>get</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>stack</name>.
                                                                            <name>size</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                    - 1
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>expandedNode</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>stack</name>.
                                                                <name>removeLast</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>hasExpanded</name>.
                                                                <name>clear</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>stack</name>.
                                                                                <name>size</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <return>return
                                                    <expr>
                                                        <name>node</name>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>hasExpanded</name>.
                                                                <name>set</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>stack</name>.
                                                                                <name>size</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                        - 1
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>pushIfPresent</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>stack</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name>rightChild</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>node</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>pushIfPresent</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>stack</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name>leftChild</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>node</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                    }
                                </block>
                            </while>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="line">// TODO(lowasser): see if any significant optimizations are possible for
                breadthFirstIterator
            </comment>

            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>
                        <name>FluentIterable</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>inOrderTraversal</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>T</name>
                            </type>
                            <name>root</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>root</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>new
                            <class>
                                <super>
                                    <name>
                                        <name>FluentIterable</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>T</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </super>
                                <argument_list>()</argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>
                                                <name>UnmodifiableIterator</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>T</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>iterator</name>
                                        <parameter_list>()</parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>new
                                                    <call>
                                                        <name>InOrderIterator</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>root</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <class>
                <specifier>private</specifier>
                <specifier>final</specifier> class <name>InOrderIterator</name>
                <super>
                    <extends>extends
                        <name>
                            <name>AbstractIterator</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>T</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>
                                    <name>Deque</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>stack</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>BitSet</name>
                            </type>
                            <name>hasExpandedLeft</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>InOrderIterator</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>T</name>
                                    </type>
                                    <name>root</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>stack</name>
                                    </name>
                                    = new
                                    <call>
                                        <name>
                                            <name>ArrayDeque</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>T</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>hasExpandedLeft</name>
                                    </name>
                                    = new
                                    <call>
                                        <name>BitSet</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>stack</name>.
                                            <name>addLast</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>root</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>protected</specifier>
                            <name>T</name>
                        </type>
                        <name>computeNext</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <while>while
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name><name>stack</name>.
                                                <name>isEmpty</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>T</name>
                                            </type>
                                            <name>node</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>stack</name>.
                                                            <name>getLast</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>hasExpandedLeft</name>.
                                                        <name>get</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>stack</name>.
                                                                        <name>size</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                - 1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>stack</name>.
                                                                <name>removeLast</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>hasExpandedLeft</name>.
                                                                <name>clear</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>stack</name>.
                                                                                <name>size</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>pushIfPresent</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>stack</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name>rightChild</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>node</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <return>return
                                                    <expr>
                                                        <name>node</name>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>hasExpandedLeft</name>.
                                                                <name>set</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>stack</name>.
                                                                                <name>size</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                        - 1
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>pushIfPresent</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>stack</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name>leftChild</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>node</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                    }
                                </block>
                            </while>
                            <return>return
                                <expr>
                                    <call>
                                        <name>endOfData</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>void</name>
                </type>
                <name>pushIfPresent</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Deque</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>stack</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Optional</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>node</name>.
                                        <name>isPresent</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>stack</name>.
                                                <name>addLast</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>node</name>.
                                                                <name>get</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
