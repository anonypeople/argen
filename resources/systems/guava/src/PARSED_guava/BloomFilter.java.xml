<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\hash\BloomFilter.java">
    <comment type="block">/*
        * Copyright (C) 2011 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
        * in compliance with the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software distributed under the License
        * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
        * or implied. See the License for the specific language governing permissions and limitations under
        * the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>hash</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkArgument</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>VisibleForTesting</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Objects</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Predicate</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>hash</name>.<name>
            BloomFilterStrategies</name>.
            <name>BitArray</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>primitives</name>.
            <name>SignedBytes</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>primitives</name>.
            <name>UnsignedBytes</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>DataInputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>DataOutputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>InputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>OutputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>CheckReturnValue</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A Bloom filter for instances of {@code T}. A Bloom filter offers an approximate containment test
        * with one-sided error: if it claims that an element is contained in it, this might be in error,
        * but if it claims that an element is &lt;i&gt;not&lt;/i&gt; contained in it, then this is definitely true.
        *
        * &lt;p&gt;If you are unfamiliar with Bloom filters, this nice
        * &lt;a href="http://llimllib.github.com/bloomfilter-tutorial/"&gt;tutorial&lt;/a&gt; may help you understand
        * how they work.
        *
        * &lt;p&gt;The false positive probability ({@code FPP}) of a bloom filter is defined as the probability
        * that {@linkplain #mightContain(Object)} will erroneously return {@code true} for an object that
        * has not actually been put in the {@code BloomFilter}.
        *
        * &lt;p&gt;Bloom filters are serializable. They also support a more compact serial representation via
        * the {@link #writeTo} and {@link #readFrom} methods. Both serialized forms will continue to be
        * supported by future versions of this library. However, serial forms generated by newer versions
        * of the code may not be readable by older versions of the code (e.g., a serialized bloom filter
        * generated today may &lt;i&gt;not&lt;/i&gt; be readable by a binary that was compiled 6 months ago).
        *
        * @param &lt;T&gt; the type of instances that the {@code BloomFilter} accepts
        * @author Dimitris Andreou
        * @author Kevin Bourrillion
        * @since 11.0
        */
    </comment>
    <class>
        <annotation>@
            <name>Beta</name>
        </annotation>
        <specifier>public</specifier>
        <specifier>final</specifier> class
        <name>
            <name>BloomFilter</name>
            <argument_list>&lt;
                <argument>
                    <name>T</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <implements>implements
                <name>
                    <name>Predicate</name>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                ,
                <name>Serializable</name>
            </implements>
        </super>
        <block>{
            <comment type="javadoc">/**
                * A strategy to translate T instances, to {@code numHashFunctions} bit indexes.
                *
                * &lt;p&gt;Implementations should be collections of pure functions (i.e. stateless).
                */
            </comment>
            <class type="interface">interface <name>Strategy</name>
                <super>
                    <extends>extends <name>java</name>.<name>io</name>.
                        <name>Serializable</name>
                    </extends>
                </super>
                <block>{

                    <comment type="javadoc">/**
                        * Sets {@code numHashFunctions} bits of the given bit array, by hashing a user element.
                        *
                        * &lt;p&gt;Returns whether any bits changed as a result of this operation.
                        */
                    </comment>
                    <function_decl>
                        <type>
                            <argument_list>&lt;
                                <argument>
                                    <name>T</name>
                                </argument>
                                &gt;
                            </argument_list>
                            <name>boolean</name>
                        </type>
                        <name>put</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>T</name>
                                    </type>
                                    <name>object</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Funnel</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <super>super
                                                        <name>T</name>
                                                    </super>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>funnel</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>numHashFunctions</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>BitArray</name>
                                    </type>
                                    <name>bits</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        ;
                    </function_decl>

                    <comment type="javadoc">/**
                        * Queries {@code numHashFunctions} bits of the given bit array, by hashing a user element;
                        * returns {@code true} if and only if all selected bits are set.
                        */
                    </comment>
                    <function_decl>
                        <type>
                            <argument_list>&lt;
                                <argument>
                                    <name>T</name>
                                </argument>
                                &gt;
                            </argument_list>
                            <name>boolean</name>
                        </type>
                        <name>mightContain</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>T</name>
                                    </type>
                                    <name>object</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Funnel</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <super>super
                                                        <name>T</name>
                                                    </super>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>funnel</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>numHashFunctions</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>BitArray</name>
                                    </type>
                                    <name>bits</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        ;
                    </function_decl>

                    <comment type="javadoc">/**
                        * Identifier used to encode this strategy, when marshalled as part of a BloomFilter.
                        * Only values in the [-128, 127] range are valid for the compact serial form.
                        * Non-negative values are reserved for enums defined in BloomFilterStrategies;
                        * negative values are reserved for any custom, stateful strategy we may define
                        * (e.g. any kind of strategy that would depend on user input).
                        */
                    </comment>
                    <function_decl>
                        <type>
                            <name>int</name>
                        </type>
                        <name>ordinal</name>
                        <parameter_list>()</parameter_list>;
                    </function_decl>
                    }
                </block>
            </class>

            <comment type="javadoc">/** The bit set of the BloomFilter (not necessarily power of 2!)*/</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>BitArray</name>
                    </type>
                    <name>bits</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Number of hashes per element */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>numHashFunctions</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The funnel to translate Ts to bytes */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>Funnel</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>T</name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>funnel</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The strategy we employ to map an element T to {@code numHashFunctions} bit indexes.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Strategy</name>
                    </type>
                    <name>strategy</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Creates a BloomFilter.
                */
            </comment>
            <constructor>
                <specifier>private</specifier>
                <name>BloomFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BitArray</name>
                            </type>
                            <name>bits</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>numHashFunctions</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Funnel</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>T</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>funnel</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Strategy</name>
                            </type>
                            <name>strategy</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>numHashFunctions</name>
                                            &gt; 0
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"numHashFunctions (%s) must be &gt; 0"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>numHashFunctions</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>numHashFunctions</name>
                                            &lt;= 255
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"numHashFunctions (%s) must be &lt;= 255"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>numHashFunctions</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>bits</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bits</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>numHashFunctions</name>
                            </name>
                            =
                            <name>numHashFunctions</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>funnel</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>funnel</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>strategy</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>strategy</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Creates a new {@code BloomFilter} that's a copy of this instance. The new instance is equal to
                * this instance but shares no mutable state.
                *
                * @since 12.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>BloomFilter</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>copy</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>BloomFilter</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>bits</name>.
                                                    <name>copy</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>numHashFunctions</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>funnel</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>strategy</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns {@code true} if the element &lt;i&gt;might&lt;/i&gt; have been put in this Bloom filter,
                * {@code false} if this is &lt;i&gt;definitely&lt;/i&gt; not the case.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>mightContain</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>strategy</name>.
                                    <name>mightContain</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>funnel</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>numHashFunctions</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>bits</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * @deprecated Provided only to satisfy the {@link Predicate} interface; use {@link #mightContain}
                * instead.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>apply</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>mightContain</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Puts an element into this {@code BloomFilter}. Ensures that subsequent invocations of
                * {@link #mightContain(Object)} with the same element will always return {@code true}.
                *
                * @return true if the bloom filter's bits changed as a result of this operation. If the bits
                * changed, this is &lt;i&gt;definitely&lt;/i&gt; the first time {@code object} has been added to the
                * filter. If the bits haven't changed, this &lt;i&gt;might&lt;/i&gt; be the first time {@code object}
                * has been added to the filter. Note that {@code put(t)} always returns the
                * &lt;i&gt;opposite&lt;/i&gt; result to what {@code mightContain(t)} would have returned at the time
                * it is called."
                * @since 12.0 (present in 11.0 with {@code void} return type})
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>put</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>strategy</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>funnel</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>numHashFunctions</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>bits</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the probability that {@linkplain #mightContain(Object)} will erroneously return
                * {@code true} for an object that has not actually been put in the {@code BloomFilter}.
                *
                * &lt;p&gt;Ideally, this number should be close to the {@code fpp} parameter
                * passed in {@linkplain #create(Funnel, int, double)}, or smaller. If it is
                * significantly higher, it is usually the case that too many elements (more than
                * expected) have been put in the {@code BloomFilter}, degenerating it.
                *
                * @since 14.0 (since 11.0 as expectedFalsePositiveProbability())
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>double</name>
                </type>
                <name>expectedFpp</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// You down with FPP? (Yeah you know me!) Who's down with FPP? (Every last
                        homie!)
                    </comment>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Math</name>.
                                    <name>pow</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>double</name>)
                                            <call>
                                                <name><name>bits</name>.
                                                    <name>bitCount</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            /
                                            <call>
                                                <name>bitSize</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>numHashFunctions</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the number of bits in the underlying bit array.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>VisibleForTesting</name>
                    </annotation>
                    <name>long</name>
                </type>
                <name>bitSize</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>bits</name>.
                                    <name>bitSize</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Determines whether a given bloom filter is compatible with this bloom filter. For two
                * bloom filters to be compatible, they must:
                *
                * &lt;ul&gt;
                * &lt;li&gt;not be the same instance
                * &lt;li&gt;have the same number of hash functions
                * &lt;li&gt;have the same bit size
                * &lt;li&gt;have the same strategy
                * &lt;li&gt;have equal funnels
                * &lt;ul&gt;
                *
                * @param that The bloom filter to check for compatibility.
                * @since 15.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isCompatible</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>BloomFilter</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>that</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>that</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>(<name>this</name> != <name>that</name>)
                            &amp;&amp; (
                            <name><name>this</name>.
                                <name>numHashFunctions</name>
                            </name>
                            ==
                            <name><name>that</name>.
                                <name>numHashFunctions</name>
                            </name>
                            )
                            &amp;&amp; (
                            <call>
                                <name><name>this</name>.
                                    <name>bitSize</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ==
                            <call>
                                <name><name>that</name>.
                                    <name>bitSize</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            )
                            &amp;&amp; (
                            <call>
                                <name><name>this</name>.<name>strategy</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>that</name>.
                                                <name>strategy</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            )
                            &amp;&amp; (
                            <call>
                                <name><name>this</name>.<name>funnel</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>that</name>.
                                                <name>funnel</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Combines this bloom filter with another bloom filter by performing a bitwise OR of the
                * underlying data. The mutations happen to &lt;b&gt;this&lt;/b&gt; instance. Callers must ensure the
                * bloom filters are appropriately sized to avoid saturating them.
                *
                * @param that The bloom filter to combine this bloom filter with. It is not mutated.
                * @throws IllegalArgumentException if {@code isCompatible(that) == false}
                *
                * @since 15.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>putAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>BloomFilter</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>that</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>that</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                            !=
                                            <name>that</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Cannot combine a BloomFilter with itself."</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>numHashFunctions</name>
                                            </name>
                                            ==
                                            <name><name>that</name>.
                                                <name>numHashFunctions</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"BloomFilters must have the same number of hash functions (%s != %s)"
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>numHashFunctions</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>that</name>.
                                                <name>numHashFunctions</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>bitSize</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            ==
                                            <call>
                                                <name><name>that</name>.
                                                    <name>bitSize</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"BloomFilters must have the same size underlying bit arrays (%s != %s)"
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>this</name>.
                                                    <name>bitSize</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>that</name>.
                                                    <name>bitSize</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>this</name>.<name>strategy</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>that</name>.
                                                                <name>strategy</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"BloomFilters must have equal strategies (%s != %s)"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>strategy</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>that</name>.
                                                <name>strategy</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>this</name>.<name>funnel</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>that</name>.
                                                                <name>funnel</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"BloomFilters must have equal funnels (%s != %s)"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>funnel</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>that</name>.
                                                <name>funnel</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.<name>bits</name>.
                                    <name>putAll</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>that</name>.
                                                <name>bits</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>object</name>
                                ==
                                <name>this</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>object</name>
                                <name>instanceof</name>
                                <name>BloomFilter</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>BloomFilter</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>?</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>that</name> =
                                        <init>
                                            <expr>(
                                                <name>
                                                    <name>BloomFilter</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                )
                                                <name>object</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <name><name>this</name>.
                                            <name>numHashFunctions</name>
                                        </name>
                                        ==
                                        <name><name>that</name>.
                                            <name>numHashFunctions</name>
                                        </name>
                                        &amp;&amp;
                                        <call>
                                            <name><name>this</name>.<name>funnel</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>that</name>.
                                                            <name>funnel</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &amp;&amp;
                                        <call>
                                            <name><name>this</name>.<name>bits</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>that</name>.
                                                            <name>bits</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &amp;&amp;
                                        <call>
                                            <name><name>this</name>.<name>strategy</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>that</name>.
                                                            <name>strategy</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Objects</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>numHashFunctions</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>funnel</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>strategy</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>bits</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates a {@link BloomFilter BloomFilter&lt;T&gt;} with the expected number of
                * insertions and expected false positive probability.
                *
                * &lt;p&gt;Note that overflowing a {@code BloomFilter} with significantly more elements
                * than specified, will result in its saturation, and a sharp deterioration of its
                * false positive probability.
                *
                * &lt;p&gt;The constructed {@code BloomFilter&lt;T&gt;} will be serializable if the provided
                * {@code Funnel&lt;T&gt;} is.
                *
                * &lt;p&gt;It is recommended that the funnel be implemented as a Java enum. This has the
                * benefit of ensuring proper serialization and deserialization, which is important
                * since {@link #equals} also relies on object identity of funnels.
                *
                * @param funnel the funnel of T's that the constructed {@code BloomFilter&lt;T&gt;} will use
                * @param expectedInsertions the number of expected insertions to the constructed
                * {@code BloomFilter&lt;T&gt;}; must be positive
                * @param fpp the desired false positive probability (must be positive and less than 1.0)
                * @return a {@code BloomFilter}
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>BloomFilter</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>create</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Funnel</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>T</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>funnel</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>expectedInsertions</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>fpp</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>create</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>funnel</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>(<name>long</name>)
                                            <name>expectedInsertions</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fpp</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates a {@link BloomFilter BloomFilter&lt;T&gt;} with the expected number of
                * insertions and expected false positive probability.
                *
                * &lt;p&gt;Note that overflowing a {@code BloomFilter} with significantly more elements
                * than specified, will result in its saturation, and a sharp deterioration of its
                * false positive probability.
                *
                * &lt;p&gt;The constructed {@code BloomFilter&lt;T&gt;} will be serializable if the provided
                * {@code Funnel&lt;T&gt;} is.
                *
                * &lt;p&gt;It is recommended that the funnel be implemented as a Java enum. This has the
                * benefit of ensuring proper serialization and deserialization, which is important
                * since {@link #equals} also relies on object identity of funnels.
                *
                * @param funnel the funnel of T's that the constructed {@code BloomFilter&lt;T&gt;} will use
                * @param expectedInsertions the number of expected insertions to the constructed
                * {@code BloomFilter&lt;T&gt;}; must be positive
                * @param fpp the desired false positive probability (must be positive and less than 1.0)
                * @return a {@code BloomFilter}
                * @since 19.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>BloomFilter</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>create</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Funnel</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>T</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>funnel</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>expectedInsertions</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>fpp</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>create</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>funnel</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>expectedInsertions</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fpp</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>BloomFilterStrategies</name>.
                                                <name>MURMUR128_MITZ_64</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>VisibleForTesting</name>
                    </annotation>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>BloomFilter</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>create</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Funnel</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>T</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>funnel</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>expectedInsertions</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>fpp</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Strategy</name>
                            </type>
                            <name>strategy</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>funnel</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>expectedInsertions</name>
                                            &gt;= 0
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Expected insertions (%s) must be &gt;= 0"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>expectedInsertions</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fpp</name>
                                            &gt; 0.0
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"False positive probability (%s) must be &gt; 0.0"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fpp</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fpp</name>
                                            &lt; 1.0
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"False positive probability (%s) must be &lt; 1.0"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fpp</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>strategy</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>expectedInsertions</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>expectedInsertions</name>
                                        = 1
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="block">/*
                        * TODO(user): Put a warning in the javadoc about tiny fpp values,
                        * since the resulting size is proportional to -log(p), but there is not
                        * much of a point after all, e.g. optimalM(1000, 0.0000000000000001) = 76680
                        * which is less than 10kb. Who cares!
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>numBits</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>optimalNumOfBits</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>expectedInsertions</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>fpp</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>numHashFunctions</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>optimalNumOfHashFunctions</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>expectedInsertions</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>numBits</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <return>return
                                <expr>new
                                    <call>
                                        <name>
                                            <name>BloomFilter</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>T</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>BitArray</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>numBits</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>numHashFunctions</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>funnel</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>strategy</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IllegalArgumentException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Could not create BloomFilter of " + <name>numBits</name> + "
                                                        bits"
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates a {@link BloomFilter BloomFilter&lt;T&gt;} with the expected number of
                * insertions and a default expected false positive probability of 3%.
                *
                * &lt;p&gt;Note that overflowing a {@code BloomFilter} with significantly more elements
                * than specified, will result in its saturation, and a sharp deterioration of its
                * false positive probability.
                *
                * &lt;p&gt;The constructed {@code BloomFilter&lt;T&gt;} will be serializable if the provided
                * {@code Funnel&lt;T&gt;} is.
                *
                * &lt;p&gt;It is recommended that the funnel be implemented as a Java enum. This has the
                * benefit of ensuring proper serialization and deserialization, which is important
                * since {@link #equals} also relies on object identity of funnels.
                *
                * @param funnel the funnel of T's that the constructed {@code BloomFilter&lt;T&gt;} will use
                * @param expectedInsertions the number of expected insertions to the constructed
                * {@code BloomFilter&lt;T&gt;}; must be positive
                * @return a {@code BloomFilter}
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>BloomFilter</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>create</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Funnel</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>T</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>funnel</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>expectedInsertions</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>create</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>funnel</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>(<name>long</name>)
                                            <name>expectedInsertions</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates a {@link BloomFilter BloomFilter&lt;T&gt;} with the expected number of
                * insertions and a default expected false positive probability of 3%.
                *
                * &lt;p&gt;Note that overflowing a {@code BloomFilter} with significantly more elements
                * than specified, will result in its saturation, and a sharp deterioration of its
                * false positive probability.
                *
                * &lt;p&gt;The constructed {@code BloomFilter&lt;T&gt;} will be serializable if the provided
                * {@code Funnel&lt;T&gt;} is.
                *
                * &lt;p&gt;It is recommended that the funnel be implemented as a Java enum. This has the
                * benefit of ensuring proper serialization and deserialization, which is important
                * since {@link #equals} also relies on object identity of funnels.
                *
                * @param funnel the funnel of T's that the constructed {@code BloomFilter&lt;T&gt;} will use
                * @param expectedInsertions the number of expected insertions to the constructed
                * {@code BloomFilter&lt;T&gt;}; must be positive
                * @return a {@code BloomFilter}
                * @since 19.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>BloomFilter</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>create</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Funnel</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>T</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>funnel</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>expectedInsertions</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>create</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>funnel</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>expectedInsertions</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0.03</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    <comment type="line">// FYI, for 3%, we always get 5 hash functions</comment>
                    }
                </block>
            </function>

            <comment type="block">/*
                * Cheat sheet:
                *
                * m: total bits
                * n: expected insertions
                * b: m/n, bits per insertion
                * p: expected false positive probability
                *
                * 1) Optimal k = b * ln2
                * 2) p = (1 - e ^ (-kn/m))^k
                * 3) For optimal k: p = 2 ^ (-k) ~= 0.6185^b
                * 4) For optimal k: m = -nlnp / ((ln2) ^ 2)
                */
            </comment>

            <comment type="javadoc">/**
                * Computes the optimal k (number of hashes per element inserted in Bloom filter), given the
                * expected insertions and total number of bits in the Bloom filter.
                *
                * See http://en.wikipedia.org/wiki/File:Bloom_filter_fp_probability.svg for the formula.
                *
                * @param n expected insertions (must be positive)
                * @param m total number of bits in Bloom filter (must be positive)
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>VisibleForTesting</name>
                    </annotation>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>optimalNumOfHashFunctions</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>n</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>m</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// (m / n) * log(2), but avoid truncation due to division!</comment>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Math</name>.
                                    <name>max</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>1</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>(<name>int</name>)
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>round</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>(<name>double</name>) <name>m</name> / <name>n</name> *
                                                            <call>
                                                                <name><name>Math</name>.
                                                                    <name>log</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>2</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Computes m (total bits of Bloom filter) which is expected to achieve, for the specified
                * expected insertions, the required false positive probability.
                *
                * See http://en.wikipedia.org/wiki/Bloom_filter#Probability_of_false_positives for the formula.
                *
                * @param n expected insertions (must be positive)
                * @param p false positive rate (must be 0 &lt; p &lt; 1)
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>VisibleForTesting</name>
                    </annotation>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>optimalNumOfBits</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>n</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>p</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>p</name>
                                        =
                                        <name><name>Double</name>.
                                            <name>MIN_VALUE</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>(<name>long</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>-<name>n</name> *
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>log</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>p</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            / (
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>log</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>2</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            *
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>log</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>2</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            )
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>Object</name>
                </type>
                <name>writeReplace</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>SerialForm</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <class>
                <specifier>private</specifier>
                <specifier>static</specifier> class
                <name>
                    <name>SerialForm</name>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <super>
                    <implements>implements
                        <name>Serializable</name>
                    </implements>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>long</name>
                                <index>[]</index>
                            </type>
                            <name>data</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>numHashFunctions</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>
                                    <name>Funnel</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>T</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>funnel</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Strategy</name>
                            </type>
                            <name>strategy</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>SerialForm</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>BloomFilter</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>T</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>bf</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>data</name>
                                    </name>
                                    =
                                    <name><name>bf</name>.<name>bits</name>.
                                        <name>data</name>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>numHashFunctions</name>
                                    </name>
                                    =
                                    <name><name>bf</name>.
                                        <name>numHashFunctions</name>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>funnel</name>
                                    </name>
                                    =
                                    <name><name>bf</name>.
                                        <name>funnel</name>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>strategy</name>
                                    </name>
                                    =
                                    <name><name>bf</name>.
                                        <name>strategy</name>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <name>Object</name>
                        </type>
                        <name>readResolve</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>new
                                    <call>
                                        <name>
                                            <name>BloomFilter</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>T</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>BitArray</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>data</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>numHashFunctions</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>funnel</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>strategy</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * Writes this {@code BloomFilter} to an output stream, with a custom format (not Java
                * serialization). This has been measured to save at least 400 bytes compared to regular
                * serialization.
                *
                * &lt;p&gt;Use {@linkplain #readFrom(InputStream, Funnel)} to reconstruct the written BloomFilter.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>writeTo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>OutputStream</name>
                            </type>
                            <name>out</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="block">/*
                        * Serial form:
                        * 1 signed byte for the strategy
                        * 1 unsigned byte for the number of hash functions
                        * 1 big endian int, the number of longs in our bitset
                        * N big endian longs of our bitset
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>DataOutputStream</name>
                            </type>
                            <name>dout</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>DataOutputStream</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>out</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>dout</name>.
                                    <name>writeByte</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>SignedBytes</name>.
                                                    <name>checkedCast</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>strategy</name>.
                                                                    <name>ordinal</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>dout</name>.
                                    <name>writeByte</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>UnsignedBytes</name>.
                                                    <name>checkedCast</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>numHashFunctions</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// note: checked at the c'tor</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>dout</name>.
                                    <name>writeInt</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>bits</name>.<name>data</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>long</name>
                                </type>
                                <name>value</name> :
                                <range>
                                    <expr>
                                        <name><name>bits</name>.
                                            <name>data</name>
                                        </name>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>dout</name>.
                                            <name>writeLong</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>value</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reads a byte stream, which was written by {@linkplain #writeTo(OutputStream)}, into
                * a {@code BloomFilter&lt;T&gt;}.
                *
                * The {@code Funnel} to be used is not encoded in the stream, so it must be provided here.
                * &lt;b&gt;Warning:&lt;/b&gt; the funnel provided &lt;b&gt;must&lt;/b&gt; behave identically to the one
                used to
                * populate the original Bloom filter!
                *
                * @throws IOException if the InputStream throws an {@code IOException}, or if its data does
                * not appear to be a BloomFilter serialized using the
                * {@linkplain #writeTo(OutputStream)} method.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>BloomFilter</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>readFrom</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>InputStream</name>
                            </type>
                            <name>in</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Funnel</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>funnel</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>in</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"InputStream"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>funnel</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Funnel"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>strategyOrdinal</name> =
                            <init>
                                <expr>-1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>numHashFunctions</name> =
                            <init>
                                <expr>-1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>dataLength</name> =
                            <init>
                                <expr>-1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>DataInputStream</name>
                                    </type>
                                    <name>din</name> =
                                    <init>
                                        <expr>new
                                            <call>
                                                <name>DataInputStream</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>in</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <comment type="line">// currently this assumes there is no negative ordinal; will have to be
                                updated if we
                            </comment>
                            <comment type="line">// add non-stateless strategies (for which we've reserved negative
                                ordinals; see
                            </comment>
                            <comment type="line">// Strategy.ordinal()).</comment>
                            <expr_stmt>
                                <expr>
                                    <name>strategyOrdinal</name>
                                    =
                                    <call>
                                        <name><name>din</name>.
                                            <name>readByte</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>numHashFunctions</name>
                                    =
                                    <call>
                                        <name><name>UnsignedBytes</name>.
                                            <name>toInt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>din</name>.
                                                            <name>readByte</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>dataLength</name>
                                    =
                                    <call>
                                        <name><name>din</name>.
                                            <name>readInt</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Strategy</name>
                                    </type>
                                    <name>strategy</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>BloomFilterStrategies</name>.
                                                    <name>values</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            <index>[
                                                <expr>
                                                    <name>strategyOrdinal</name>
                                                </expr>
                                                ]
                                            </index>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>long</name>
                                        <index>[]</index>
                                    </type>
                                    <name>data</name> =
                                    <init>
                                        <expr>new
                                            <name>
                                                <name>long</name>
                                                <index>[
                                                    <expr>
                                                        <name>dataLength</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name><name>data</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>data</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            =
                                            <call>
                                                <name><name>din</name>.
                                                    <name>readLong</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <return>return
                                <expr>new
                                    <call>
                                        <name>
                                            <name>BloomFilter</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>T</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>BitArray</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>data</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>numHashFunctions</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>funnel</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>strategy</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>RuntimeException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>IOException</name>
                                        </type>
                                        <name>ioException</name> =
                                        <init>
                                            <expr>new
                                                <call>
                                                    <name>IOException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"Unable to deserialize BloomFilter from InputStream."
                                                                + " strategyOrdinal: " +
                                                                <name>strategyOrdinal</name>
                                                                + " numHashFunctions: " +
                                                                <name>numHashFunctions</name>
                                                                + " dataLength: " +
                                                                <name>dataLength</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>ioException</name>.
                                                <name>initCause</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <throw>throw
                                    <expr>
                                        <name>ioException</name>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
