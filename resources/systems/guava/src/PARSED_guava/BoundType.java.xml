<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\BoundType.java">
    <comment type="block">/*
        * Copyright (C) 2011 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
        * in compliance with the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software distributed under the License
        * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
        * or implied. See the License for the specific language governing permissions and limitations under
        * the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Indicates whether an endpoint of some range is contained in the range itself ("closed") or not
        * ("open"). If a range is unbounded on a side, it is neither open nor closed on that side; the
        * bound simply does not exist.
        *
        * @since 10.0
        */
    </comment>
    <enum>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        enum <name>BoundType</name>
        <block>{
            <comment type="javadoc">/**
                * The endpoint value &lt;i&gt;is not&lt;/i&gt; considered part of the set ("exclusive").
                */
            </comment>
            <expr_stmt>
                <expr>
                    <name>OPEN</name>
                    <block>{
                        @
                        <expr>
                            <name>Override</name>
                            <name>BoundType</name>
                            <call>
                                <name>flip</name>
                                <argument_list>()</argument_list>
                            </call>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>CLOSED</name>
                                    </expr>
                                    ;
                                </return>
                            </block>
                        </expr>
                    </block>
                </expr>
            </expr_stmt>
            }
        </block>
    </enum>
    },
    <comment type="javadoc">/**
        * The endpoint value &lt;i&gt;is&lt;/i&gt; considered part of the set ("inclusive").
        */
    </comment>
    <expr_stmt>
        <expr>
            <name>CLOSED</name>
            <block>{
                @
                <expr>
                    <name>Override</name>
                    <name>BoundType</name>
                    <call>
                        <name>flip</name>
                        <argument_list>()</argument_list>
                    </call>
                    <block>{
                        <return>return
                            <expr>
                                <name>OPEN</name>
                            </expr>
                            ;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }
    }
    <empty_stmt>;</empty_stmt>

    <comment type="javadoc">/**
        * Returns the bound type corresponding to a boolean value for inclusivity.
        */
    </comment>
    <function>
        <type>
            <specifier>static</specifier>
            <name>BoundType</name>
        </type>
        <name>forBoolean</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>boolean</name>
                    </type>
                    <name>inclusive</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <name>inclusive</name>
                    ? <name>CLOSED</name> :
                    <name>OPEN</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function_decl>
        <type>
            <specifier>abstract</specifier>
            <name>BoundType</name>
        </type>
        <name>flip</name>
        <parameter_list>()</parameter_list>;
    </function_decl>
    }
</unit>
