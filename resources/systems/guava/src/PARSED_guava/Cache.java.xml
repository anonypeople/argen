<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\cache\Cache.java">
    <comment type="block">/*
        * Copyright (C) 2011 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>cache</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.
            <name>ImmutableMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.<name>concurrent</name>.
            <name>ExecutionError</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.<name>concurrent</name>.
            <name>UncheckedExecutionException</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>Callable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ConcurrentMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ExecutionException</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A semi-persistent mapping from keys to values. Cache entries are manually added using
        * {@link #get(Object, Callable)} or {@link #put(Object, Object)}, and are stored in the cache until
        * either evicted or manually invalidated.
        *
        * &lt;p&gt;Implementations of this interface are expected to be thread-safe, and can be safely accessed
        * by multiple concurrent threads.
        *
        * @author Charles Fry
        * @since 10.0
        */
    </comment>
    <class type="interface">
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        interface
        <name>
            <name>Cache</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <block>{

            <comment type="javadoc">/**
                * Returns the value associated with {@code key} in this cache, or {@code null} if there is no
                * cached value for {@code key}.
                *
                * @since 11.0
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Nullable</name>
                    </annotation>
                    <name>V</name>
                </type>
                <name>getIfPresent</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the value associated with {@code key} in this cache, obtaining that value from
                * {@code valueLoader} if necessary. No observable state associated with this cache is modified
                * until loading completes. This method provides a simple substitute for the conventional
                * "if cached, return; otherwise create, cache and return" pattern.
                *
                * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; as with {@link CacheLoader#load}, {@code valueLoader} &lt;b&gt;must
                not&lt;/b&gt; return
                * {@code null}; it may either return a non-null value or throw an exception.
                *
                * @throws ExecutionException if a checked exception was thrown while loading the value
                * @throws UncheckedExecutionException if an unchecked exception was thrown while loading the
                * value
                * @throws ExecutionError if an error was thrown while loading the value
                *
                * @since 11.0
                */
            </comment>
            <function_decl>
                <type>
                    <name>V</name>
                </type>
                <name>get</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Callable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>valueLoader</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ExecutionException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a map of the values associated with {@code keys} in this cache. The returned map will
                * only contain entries which are already present in the cache.
                *
                * @since 11.0
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>ImmutableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getAllPresent</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>keys</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Associates {@code value} with {@code key} in this cache. If the cache previously contained a
                * value associated with {@code key}, the old value is replaced by {@code value}.
                *
                * &lt;p&gt;Prefer {@link #get(Object, Callable)} when using the conventional "if cached, return;
                * otherwise create, cache and return" pattern.
                *
                * @since 11.0
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>put</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Copies all of the mappings from the specified map to the cache. The effect of this call is
                * equivalent to that of calling {@code put(k, v)} on this map once for each mapping from key
                * {@code k} to value {@code v} in the specified map. The behavior of this operation is undefined
                * if the specified map is modified while the operation is in progress.
                *
                * @since 12.0
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>putAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Map</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>K</name>
                                            </extends>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>m</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Discards any cached value for key {@code key}.
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>invalidate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Discards any cached values for keys {@code keys}.
                *
                * @since 11.0
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>invalidateAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>keys</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Discards all entries in the cache.
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>invalidateAll</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the approximate number of entries in this cache.
                */
            </comment>
            <function_decl>
                <type>
                    <name>long</name>
                </type>
                <name>size</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a current snapshot of this cache's cumulative statistics. All stats are initialized
                * to zero, and are monotonically increasing over the lifetime of the cache.
                *
                */
            </comment>
            <function_decl>
                <type>
                    <name>CacheStats</name>
                </type>
                <name>stats</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a view of the entries stored in this cache as a thread-safe map. Modifications made to
                * the map directly affect the cache.
                *
                * &lt;p&gt;Iterators from the returned map are at least &lt;i&gt;weakly consistent&lt;/i&gt;: they are
                safe for
                * concurrent use, but if the cache is modified (including by eviction) after the iterator is
                * created, it is undefined which of the changes (if any) will be reflected in that iterator.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>ConcurrentMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>asMap</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Performs any pending maintenance operations needed by the cache. Exactly which activities are
                * performed -- if any -- is implementation-dependent.
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>cleanUp</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            }
        </block>
    </class>
</unit>
