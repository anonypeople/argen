<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\cache\CacheStats.java">
    <comment type="block">/*
        * Copyright (C) 2011 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>cache</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkArgument</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>MoreObjects</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Objects</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>Callable</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Statistics about the performance of a {@link Cache}. Instances of this class are immutable.
        *
        * &lt;p&gt;Cache statistics are incremented according to the following rules:
        *
        * &lt;ul&gt;
        * &lt;li&gt;When a cache lookup encounters an existing cache entry {@code hitCount} is incremented.
        * &lt;li&gt;When a cache lookup first encounters a missing cache entry, a new entry is loaded.
        * &lt;ul&gt;
        * &lt;li&gt;After successfully loading an entry {@code missCount} and {@code loadSuccessCount} are
        * incremented, and the total loading time, in nanoseconds, is added to
        * {@code totalLoadTime}.
        * &lt;li&gt;When an exception is thrown while loading an entry, {@code missCount} and {@code
        * loadExceptionCount} are incremented, and the total loading time, in nanoseconds, is
        * added to {@code totalLoadTime}.
        * &lt;li&gt;Cache lookups that encounter a missing cache entry that is still loading will wait
        * for loading to complete (whether successful or not) and then increment {@code missCount}.
        * &lt;/ul&gt;
        * &lt;li&gt;When an entry is evicted from the cache, {@code evictionCount} is incremented.
        * &lt;li&gt;No stats are modified when a cache entry is invalidated or manually removed.
        * &lt;li&gt;No stats are modified by operations invoked on the {@linkplain Cache#asMap asMap} view of
        * the cache.
        * &lt;/ul&gt;
        *
        * &lt;p&gt;A lookup is specifically defined as an invocation of one of the methods
        * {@link LoadingCache#get(Object)}, {@link LoadingCache#getUnchecked(Object)},
        * {@link Cache#get(Object, Callable)}, or {@link LoadingCache#getAll(Iterable)}.
        *
        * @author Charles Fry
        * @since 10.0
        */
    </comment>
    <class>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>CacheStats</name>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>hitCount</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>missCount</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>loadSuccessCount</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>loadExceptionCount</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>totalLoadTime</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>evictionCount</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Constructs a new {@code CacheStats} instance.
                *
                * &lt;p&gt;Five parameters of the same type in a row is a bad thing, but this class is not constructed
                * by end users and is too fine-grained for a builder.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>CacheStats</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>hitCount</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>missCount</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>loadSuccessCount</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>loadExceptionCount</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>totalLoadTime</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>evictionCount</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>hitCount</name>
                                            &gt;= 0
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>missCount</name>
                                            &gt;= 0
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>loadSuccessCount</name>
                                            &gt;= 0
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>loadExceptionCount</name>
                                            &gt;= 0
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>totalLoadTime</name>
                                            &gt;= 0
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>evictionCount</name>
                                            &gt;= 0
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>hitCount</name>
                            </name>
                            =
                            <name>hitCount</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>missCount</name>
                            </name>
                            =
                            <name>missCount</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>loadSuccessCount</name>
                            </name>
                            =
                            <name>loadSuccessCount</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>loadExceptionCount</name>
                            </name>
                            =
                            <name>loadExceptionCount</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>totalLoadTime</name>
                            </name>
                            =
                            <name>totalLoadTime</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>evictionCount</name>
                            </name>
                            =
                            <name>evictionCount</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Returns the number of times {@link Cache} lookup methods have returned either a cached or
                * uncached value. This is defined as {@code hitCount + missCount}.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>requestCount</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>hitCount</name>
                            +
                            <name>missCount</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the number of times {@link Cache} lookup methods have returned a cached value.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>hitCount</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>hitCount</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the ratio of cache requests which were hits. This is defined as
                * {@code hitCount / requestCount}, or {@code 1.0} when {@code requestCount == 0}.
                * Note that {@code hitRate + missRate =~ 1.0}.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>double</name>
                </type>
                <name>hitRate</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>requestCount</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>requestCount</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>(<name>requestCount</name> == 0) ? 1.0 : (<name>double</name>) <name>hitCount</name> /
                            <name>requestCount</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the number of times {@link Cache} lookup methods have returned an uncached (newly
                * loaded) value, or null. Multiple concurrent calls to {@link Cache} lookup methods on an absent
                * value can result in multiple misses, all returning the results of a single cache load
                * operation.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>missCount</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>missCount</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the ratio of cache requests which were misses. This is defined as
                * {@code missCount / requestCount}, or {@code 0.0} when {@code requestCount == 0}.
                * Note that {@code hitRate + missRate =~ 1.0}. Cache misses include all requests which
                * weren't cache hits, including requests which resulted in either successful or failed loading
                * attempts, and requests which waited for other threads to finish loading. It is thus the case
                * that {@code missCount &amp;gt;= loadSuccessCount + loadExceptionCount}. Multiple
                * concurrent misses for the same key will result in a single load operation.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>double</name>
                </type>
                <name>missRate</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>requestCount</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>requestCount</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>(<name>requestCount</name> == 0) ? 0.0 : (<name>double</name>) <name>missCount</name> /
                            <name>requestCount</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the total number of times that {@link Cache} lookup methods attempted to load new
                * values. This includes both successful load operations, as well as those that threw
                * exceptions. This is defined as {@code loadSuccessCount + loadExceptionCount}.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>loadCount</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>loadSuccessCount</name>
                            +
                            <name>loadExceptionCount</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the number of times {@link Cache} lookup methods have successfully loaded a new value.
                * This is always incremented in conjunction with {@link #missCount}, though {@code missCount}
                * is also incremented when an exception is encountered during cache loading (see
                * {@link #loadExceptionCount}). Multiple concurrent misses for the same key will result in a
                * single load operation.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>loadSuccessCount</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>loadSuccessCount</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the number of times {@link Cache} lookup methods threw an exception while loading a
                * new value. This is always incremented in conjunction with {@code missCount}, though
                * {@code missCount} is also incremented when cache loading completes successfully (see
                * {@link #loadSuccessCount}). Multiple concurrent misses for the same key will result in a
                * single load operation.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>loadExceptionCount</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>loadExceptionCount</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the ratio of cache loading attempts which threw exceptions. This is defined as
                * {@code loadExceptionCount / (loadSuccessCount + loadExceptionCount)}, or
                * {@code 0.0} when {@code loadSuccessCount + loadExceptionCount == 0}.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>double</name>
                </type>
                <name>loadExceptionRate</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>totalLoadCount</name> =
                            <init>
                                <expr>
                                    <name>loadSuccessCount</name>
                                    +
                                    <name>loadExceptionCount</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>(<name>totalLoadCount</name> == 0)
                            ? 0.0
                            : (<name>double</name>) <name>loadExceptionCount</name> /
                            <name>totalLoadCount</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the total number of nanoseconds the cache has spent loading new values. This can be
                * used to calculate the miss penalty. This value is increased every time
                * {@code loadSuccessCount} or {@code loadExceptionCount} is incremented.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>totalLoadTime</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>totalLoadTime</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the average time spent loading new values. This is defined as
                * {@code totalLoadTime / (loadSuccessCount + loadExceptionCount)}.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>double</name>
                </type>
                <name>averageLoadPenalty</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>totalLoadCount</name> =
                            <init>
                                <expr>
                                    <name>loadSuccessCount</name>
                                    +
                                    <name>loadExceptionCount</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>(<name>totalLoadCount</name> == 0)
                            ? 0.0
                            : (<name>double</name>) <name>totalLoadTime</name> /
                            <name>totalLoadCount</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the number of times an entry has been evicted. This count does not include manual
                * {@linkplain Cache#invalidate invalidations}.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>evictionCount</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>evictionCount</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a new {@code CacheStats} representing the difference between this {@code CacheStats}
                * and {@code other}. Negative values, which aren't supported by {@code CacheStats} will be
                * rounded up to zero.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>CacheStats</name>
                </type>
                <name>minus</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CacheStats</name>
                            </type>
                            <name>other</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>CacheStats</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>max</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>0</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>hitCount</name>
                                                            -
                                                            <name><name>other</name>.
                                                                <name>hitCount</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>max</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>0</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>missCount</name>
                                                            -
                                                            <name><name>other</name>.
                                                                <name>missCount</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>max</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>0</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>loadSuccessCount</name>
                                                            -
                                                            <name><name>other</name>.
                                                                <name>loadSuccessCount</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>max</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>0</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>loadExceptionCount</name>
                                                            -
                                                            <name><name>other</name>.
                                                                <name>loadExceptionCount</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>max</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>0</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>totalLoadTime</name>
                                                            -
                                                            <name><name>other</name>.
                                                                <name>totalLoadTime</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>max</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>0</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>evictionCount</name>
                                                            -
                                                            <name><name>other</name>.
                                                                <name>evictionCount</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a new {@code CacheStats} representing the sum of this {@code CacheStats}
                * and {@code other}.
                *
                * @since 11.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>CacheStats</name>
                </type>
                <name>plus</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CacheStats</name>
                            </type>
                            <name>other</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>CacheStats</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>hitCount</name>
                                            +
                                            <name><name>other</name>.
                                                <name>hitCount</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>missCount</name>
                                            +
                                            <name><name>other</name>.
                                                <name>missCount</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>loadSuccessCount</name>
                                            +
                                            <name><name>other</name>.
                                                <name>loadSuccessCount</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>loadExceptionCount</name>
                                            +
                                            <name><name>other</name>.
                                                <name>loadExceptionCount</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>totalLoadTime</name>
                                            +
                                            <name><name>other</name>.
                                                <name>totalLoadTime</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>evictionCount</name>
                                            +
                                            <name><name>other</name>.
                                                <name>evictionCount</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Objects</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>hitCount</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>missCount</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>loadSuccessCount</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>loadExceptionCount</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>totalLoadTime</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>evictionCount</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>object</name>
                                <name>instanceof</name>
                                <name>CacheStats</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>CacheStats</name>
                                        </type>
                                        <name>other</name> =
                                        <init>
                                            <expr>(<name>CacheStats</name>)
                                                <name>object</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <name>hitCount</name>
                                        ==
                                        <name><name>other</name>.
                                            <name>hitCount</name>
                                        </name>
                                        &amp;&amp; <name>missCount</name> ==
                                        <name><name>other</name>.
                                            <name>missCount</name>
                                        </name>
                                        &amp;&amp; <name>loadSuccessCount</name> ==
                                        <name><name>other</name>.
                                            <name>loadSuccessCount</name>
                                        </name>
                                        &amp;&amp; <name>loadExceptionCount</name> ==
                                        <name><name>other</name>.
                                            <name>loadExceptionCount</name>
                                        </name>
                                        &amp;&amp; <name>totalLoadTime</name> ==
                                        <name><name>other</name>.
                                            <name>totalLoadTime</name>
                                        </name>
                                        &amp;&amp; <name>evictionCount</name> ==
                                        <name><name>other</name>.
                                            <name>evictionCount</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>MoreObjects</name>.
                                    <name>toStringHelper</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>add</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"hitCount"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>hitCount</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>add</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"missCount"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>missCount</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>add</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"loadSuccessCount"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>loadSuccessCount</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>add</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"loadExceptionCount"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>loadExceptionCount</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>add</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"totalLoadTime"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>totalLoadTime</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>add</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"evictionCount"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>evictionCount</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>toString</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
