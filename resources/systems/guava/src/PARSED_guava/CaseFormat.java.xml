<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\base\CaseFormat.java">
    <comment type="block">/*
        * Copyright (C) 2006 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>base</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>CheckReturnValue</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Utility class for converting between various ASCII case formats. Behavior is undefined for
        * non-ASCII input.
        *
        * @author Mike Bostock
        * @since 1.0
        */
    </comment>
    <enum>
        <annotation>@
            <name>CheckReturnValue</name>
        </annotation>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        enum <name>CaseFormat</name>
        <block>{
            <comment type="javadoc">/**
                * Hyphenated variable naming convention, e.g., "lower-hyphen".
                */
            </comment>
            <expr_stmt>
                <expr>
                    <call>
                        <name>LOWER_HYPHEN</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>CharMatcher</name>.
                                            <name>is</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>'-'</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>"-"</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        @
                        <expr>
                            <name>Override</name>
                            <name>String</name>
                            <call>
                                <name>normalizeWord</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>String</name>
                                            <name>word</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>Ascii</name>.
                                                <name>toLowerCase</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>word</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </block>
                        </expr>
                    </block>
                </expr>
            </expr_stmt>
            }
        </block>
    </enum>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <name>String</name>
        </type>
        <name>convert</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>CaseFormat</name>
                    </type>
                    <name>format</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>String</name>
                    </type>
                    <name>s</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>
                        <name>format</name>
                        ==
                        <name>LOWER_UNDERSCORE</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name><name>s</name>.
                                        <name>replace</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>'-'</expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>'_'</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <if>if
                <condition>(
                    <expr>
                        <name>format</name>
                        ==
                        <name>UPPER_UNDERSCORE</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name><name>Ascii</name>.
                                        <name>toUpperCase</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>s</name>.
                                                        <name>replace</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>'-'</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>'_'</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <return>return
                <expr>
                    <call>
                        <name><name>super</name>.
                            <name>convert</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>format</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>s</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    },

    <comment type="javadoc">/**
        * C++ variable naming convention, e.g., "lower_underscore".
        */
    </comment>
    <expr_stmt>
        <expr>
            <call>
                <name>LOWER_UNDERSCORE</name>
                <argument_list>(
                    <argument>
                        <expr>
                            <call>
                                <name><name>CharMatcher</name>.
                                    <name>is</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>'_'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>"_"</expr>
                    </argument>
                    )
                </argument_list>
            </call>
            <block>{
                @
                <expr>
                    <name>Override</name>
                    <name>String</name>
                    <call>
                        <name>normalizeWord</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>String</name>
                                    <name>word</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name><name>Ascii</name>.
                                        <name>toLowerCase</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>word</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }

    @
    <function>
        <type>
            <name>Override</name>
            <name>String</name>
        </type>
        <name>convert</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>CaseFormat</name>
                    </type>
                    <name>format</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>String</name>
                    </type>
                    <name>s</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>
                        <name>format</name>
                        ==
                        <name>LOWER_HYPHEN</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name><name>s</name>.
                                        <name>replace</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>'_'</expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>'-'</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <if>if
                <condition>(
                    <expr>
                        <name>format</name>
                        ==
                        <name>UPPER_UNDERSCORE</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name><name>Ascii</name>.
                                        <name>toUpperCase</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>s</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <return>return
                <expr>
                    <call>
                        <name><name>super</name>.
                            <name>convert</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>format</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>s</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    },

    <comment type="javadoc">/**
        * Java variable naming convention, e.g., "lowerCamel".
        */
    </comment>
    <expr_stmt>
        <expr>
            <call>
                <name>LOWER_CAMEL</name>
                <argument_list>(
                    <argument>
                        <expr>
                            <call>
                                <name><name>CharMatcher</name>.
                                    <name>inRange</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>'A'</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>'Z'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>""</expr>
                    </argument>
                    )
                </argument_list>
            </call>
            <block>{
                @
                <expr>
                    <name>Override</name>
                    <name>String</name>
                    <call>
                        <name>normalizeWord</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>String</name>
                                    <name>word</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name>firstCharOnlyToUpper</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>word</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }
    },

    <comment type="javadoc">/**
        * Java and C++ class naming convention, e.g., "UpperCamel".
        */
    </comment>
    <expr_stmt>
        <expr>
            <call>
                <name>UPPER_CAMEL</name>
                <argument_list>(
                    <argument>
                        <expr>
                            <call>
                                <name><name>CharMatcher</name>.
                                    <name>inRange</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>'A'</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>'Z'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>""</expr>
                    </argument>
                    )
                </argument_list>
            </call>
            <block>{
                @
                <expr>
                    <name>Override</name>
                    <name>String</name>
                    <call>
                        <name>normalizeWord</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>String</name>
                                    <name>word</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name>firstCharOnlyToUpper</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>word</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }
    },

    <comment type="javadoc">/**
        * Java and C++ constant naming convention, e.g., "UPPER_UNDERSCORE".
        */
    </comment>
    <expr_stmt>
        <expr>
            <call>
                <name>UPPER_UNDERSCORE</name>
                <argument_list>(
                    <argument>
                        <expr>
                            <call>
                                <name><name>CharMatcher</name>.
                                    <name>is</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>'_'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>"_"</expr>
                    </argument>
                    )
                </argument_list>
            </call>
            <block>{
                @
                <expr>
                    <name>Override</name>
                    <name>String</name>
                    <call>
                        <name>normalizeWord</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>String</name>
                                    <name>word</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name><name>Ascii</name>.
                                        <name>toUpperCase</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>word</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }

    @
    <function>
        <type>
            <name>Override</name>
            <name>String</name>
        </type>
        <name>convert</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>CaseFormat</name>
                    </type>
                    <name>format</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>String</name>
                    </type>
                    <name>s</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>
                        <name>format</name>
                        ==
                        <name>LOWER_HYPHEN</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name><name>Ascii</name>.
                                        <name>toLowerCase</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>s</name>.
                                                        <name>replace</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>'_'</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>'-'</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <if>if
                <condition>(
                    <expr>
                        <name>format</name>
                        ==
                        <name>LOWER_UNDERSCORE</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name><name>Ascii</name>.
                                        <name>toLowerCase</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>s</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <return>return
                <expr>
                    <call>
                        <name><name>super</name>.
                            <name>convert</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>format</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>s</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    };

    <decl_stmt>
        <decl>
            <type>
                <specifier>private</specifier>
                <specifier>final</specifier>
                <name>CharMatcher</name>
            </type>
            <name>wordBoundary</name>
        </decl>
        ;
    </decl_stmt>
    <decl_stmt>
        <decl>
            <type>
                <specifier>private</specifier>
                <specifier>final</specifier>
                <name>String</name>
            </type>
            <name>wordSeparator</name>
        </decl>
        ;
    </decl_stmt>

    <expr_stmt>
        <expr>
            <call>
                <name>CaseFormat</name>
                <argument_list>(
                    <argument>
                        <expr>
                            <name>CharMatcher</name>
                            <name>wordBoundary</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>String</name>
                            <name>wordSeparator</name>
                        </expr>
                    </argument>
                    )
                </argument_list>
            </call>
            <block>{
                <expr>
                    <name><name>this</name>.
                        <name>wordBoundary</name>
                    </name>
                    =
                    <name>wordBoundary</name>
                </expr>
                ;
                <expr>
                    <name><name>this</name>.
                        <name>wordSeparator</name>
                    </name>
                    =
                    <name>wordSeparator</name>
                </expr>
                ;
                }
            </block>

            <comment type="javadoc">/**
                * Converts the specified {@code String str} from this format to the specified {@code format}. A
                * "best effort" approach is taken; if {@code str} does not conform to the assumed format, then
                * the behavior of this method is undefined but we make a reasonable effort at converting anyway.
                */
            </comment>
            public final <name>String</name>
            <call>
                <name>to</name>
                <argument_list>(
                    <argument>
                        <expr>
                            <name>CaseFormat</name>
                            <name>format</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>String</name>
                            <name>str</name>
                        </expr>
                    </argument>
                    )
                </argument_list>
            </call>
            <block>{
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>format</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>str</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
                <return>return
                    <expr>(<name>format</name> == <name>this</name>) ? <name>str</name> :
                        <call>
                            <name>convert</name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name>format</name>
                                    </expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>str</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </return>
            </block>
        </expr>
    </expr_stmt>
    }

    <comment type="javadoc">/**
        * Enum values can override for performance reasons.
        */
    </comment>
    <function>
        <type>
            <name>String</name>
        </type>
        <name>convert</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>CaseFormat</name>
                    </type>
                    <name>format</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>String</name>
                    </type>
                    <name>s</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <comment type="line">// deal with camel conversion</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>StringBuilder</name>
                    </type>
                    <name>out</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>i</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>j</name> =
                    <init>
                        <expr>-1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <while>while
                <condition>(
                    <expr>(<name>j</name> =
                        <call>
                            <name><name>wordBoundary</name>.
                                <name>indexIn</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name>s</name>
                                    </expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>++
                                        <name>j</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                        ) != -1
                    </expr>
                    )
                </condition>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>i</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// include some extra space for separators</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>out</name>
                                        = new
                                        <call>
                                            <name>StringBuilder</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>s</name>.
                                                                <name>length</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        + 4 *
                                                        <call>
                                                            <name><name>wordSeparator</name>.
                                                                <name>length</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>out</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>format</name>.
                                                                <name>normalizeFirstWord</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>s</name>.
                                                                                <name>substring</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>j</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>out</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>format</name>.
                                                                <name>normalizeWord</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>s</name>.
                                                                                <name>substring</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>j</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>out</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>format</name>.
                                                <name>wordSeparator</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>i</name>
                            = <name>j</name> +
                            <call>
                                <name><name>wordSeparator</name>.
                                    <name>length</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </while>
            <return>return
                <expr>(<name>i</name> == 0)
                    ?
                    <call>
                        <name><name>format</name>.
                            <name>normalizeFirstWord</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>s</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    :
                    <call>
                        <name><name>out</name>.
                            <name>append</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>format</name>.
                                            <name>normalizeWord</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>s</name>.
                                                            <name>substring</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    .
                    <call>
                        <name>toString</name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a {@code Converter} that converts strings from this format to {@code targetFormat}.
        *
        * @since 16.0
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>Beta</name>
            </annotation>
            <specifier>public</specifier>
            <name>
                <name>Converter</name>
                <argument_list>&lt;
                    <argument>
                        <name>String</name>
                    </argument>
                    ,
                    <argument>
                        <name>String</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>converterTo</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>CaseFormat</name>
                    </type>
                    <name>targetFormat</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>StringConverter</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>this</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>targetFormat</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <class>
        <specifier>private</specifier>
        <specifier>static</specifier>
        <specifier>final</specifier> class <name>StringConverter</name>
        <super>
            <extends>extends
                <name>
                    <name>Converter</name>
                    <argument_list>&lt;
                        <argument>
                            <name>String</name>
                        </argument>
                        ,
                        <argument>
                            <name>String</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>Serializable</name>
            </implements>
        </super>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>CaseFormat</name>
                    </type>
                    <name>sourceFormat</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>CaseFormat</name>
                    </type>
                    <name>targetFormat</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>StringConverter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CaseFormat</name>
                            </type>
                            <name>sourceFormat</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>CaseFormat</name>
                            </type>
                            <name>targetFormat</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>sourceFormat</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>sourceFormat</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>targetFormat</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>targetFormat</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>protected</specifier>
                    <name>String</name>
                </type>
                <name>doForward</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>s</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>sourceFormat</name>.
                                    <name>to</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>targetFormat</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>s</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>protected</specifier>
                    <name>String</name>
                </type>
                <name>doBackward</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>s</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>targetFormat</name>.
                                    <name>to</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>sourceFormat</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>s</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>object</name>
                                <name>instanceof</name>
                                <name>StringConverter</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>StringConverter</name>
                                        </type>
                                        <name>that</name> =
                                        <init>
                                            <expr>(<name>StringConverter</name>)
                                                <name>object</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>sourceFormat</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>that</name>.
                                                            <name>sourceFormat</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &amp;&amp;
                                        <call>
                                            <name><name>targetFormat</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>that</name>.
                                                            <name>targetFormat</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>sourceFormat</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ^
                            <call>
                                <name><name>targetFormat</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>sourceFormat</name>
                            + ".converterTo(" + <name>targetFormat</name> + ")"
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>0L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            }
        </block>
    </class>

    <function_decl>
        <type>
            <specifier>abstract</specifier>
            <name>String</name>
        </type>
        <name>normalizeWord</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>String</name>
                    </type>
                    <name>word</name>
                </decl>
            </param>
            )
        </parameter_list>
        ;
    </function_decl>

    <function>
        <type>
            <specifier>private</specifier>
            <name>String</name>
        </type>
        <name>normalizeFirstWord</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>String</name>
                    </type>
                    <name>word</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>(<name>this</name> == <name>LOWER_CAMEL</name>) ?
                    <call>
                        <name><name>Ascii</name>.
                            <name>toLowerCase</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>word</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    :
                    <call>
                        <name>normalizeWord</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>word</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>private</specifier>
            <specifier>static</specifier>
            <name>String</name>
        </type>
        <name>firstCharOnlyToUpper</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>String</name>
                    </type>
                    <name>word</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>(
                    <call>
                        <name><name>word</name>.
                            <name>isEmpty</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                    )
                    ?
                    <name>word</name>
                    : new
                    <call>
                        <name>StringBuilder</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>word</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    .
                    <call>
                        <name>append</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>Ascii</name>.
                                            <name>toUpperCase</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>word</name>.
                                                            <name>charAt</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>0</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    .
                    <call>
                        <name>append</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>Ascii</name>.
                                            <name>toLowerCase</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>word</name>.
                                                            <name>substring</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>1</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    .
                    <call>
                        <name>toString</name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    }
</unit>
