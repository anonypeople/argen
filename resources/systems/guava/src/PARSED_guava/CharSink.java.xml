<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\io\CharSink.java">
    <comment type="block">/*
        * Copyright (C) 2012 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>io</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>BufferedWriter</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Reader</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Writer</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>nio</name>.<name>charset</name>.
            <name>Charset</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A destination to which characters can be written, such as a text file. Unlike a {@link Writer}, a
        * {@code CharSink} is not an open, stateful stream that can be written to and closed. Instead, it
        * is an immutable &lt;i&gt;supplier&lt;/i&gt; of {@code Writer} instances.
        *
        * &lt;p&gt;{@code CharSink} provides two kinds of methods:
        * &lt;ul&gt;
        * &lt;li&gt;&lt;b&gt;Methods that return a writer:&lt;/b&gt; These methods should return a &lt;i&gt;new&lt;/i&gt;,
        * independent instance each time they are called. The caller is responsible for ensuring that the
        * returned writer is closed.
        * &lt;li&gt;&lt;b&gt;Convenience methods:&lt;/b&gt; These are implementations of common operations that are
        * typically implemented by opening a writer using one of the methods in the first category,
        * doing something and finally closing the writer that was opened.
        * &lt;/ul&gt;
        *
        * &lt;p&gt;Any {@link ByteSink} may be viewed as a {@code CharSink} with a specific {@linkplain Charset
        * character encoding} using {@link ByteSink#asCharSink(Charset)}. Characters written to the
        * resulting {@code CharSink} will written to the {@code ByteSink} as encoded bytes.
        *
        * @since 14.0
        * @author Colin Decker
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class <name>CharSink</name>
        <block>{

            <comment type="javadoc">/**
                * Constructor for use by subclasses.
                */
            </comment>
            <constructor>
                <specifier>protected</specifier>
                <name>CharSink</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="javadoc">/**
                * Opens a new {@link Writer} for writing to this sink. This method should return a new,
                * independent writer each time it is called.
                *
                * &lt;p&gt;The caller is responsible for ensuring that the returned writer is closed.
                *
                * @throws IOException if an I/O error occurs in the process of opening the writer
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>Writer</name>
                </type>
                <name>openStream</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Opens a new buffered {@link Writer} for writing to this sink. The returned stream is not
                * required to be a {@link BufferedWriter} in order to allow implementations to simply delegate
                * to {@link #openStream()} when the stream returned by that method does not benefit from
                * additional buffering. This method should return a new, independent writer each time it is
                * called.
                *
                * &lt;p&gt;The caller is responsible for ensuring that the returned writer is closed.
                *
                * @throws IOException if an I/O error occurs in the process of opening the writer
                * @since 15.0 (in 14.0 with return type {@link BufferedWriter})
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Writer</name>
                </type>
                <name>openBufferedStream</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Writer</name>
                            </type>
                            <name>writer</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>openStream</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>(<name>writer</name>
                            <name>instanceof</name>
                            <name>BufferedWriter</name>)
                            ? (<name>BufferedWriter</name>)
                            <name>writer</name>
                            : new
                            <call>
                                <name>BufferedWriter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>writer</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Writes the given character sequence to this sink.
                *
                * @throws IOException if an I/O error in the process of writing to this sink
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>write</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CharSequence</name>
                            </type>
                            <name>charSequence</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>charSequence</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Closer</name>
                            </type>
                            <name>closer</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Closer</name>.
                                            <name>create</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Writer</name>
                                    </type>
                                    <name>out</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>closer</name>.
                                                    <name>register</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>openStream</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>out</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>charSequence</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>out</name>.
                                            <name>flush</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// https://code.google.com/p/guava-libraries/issues/detail?id=1330
                            </comment>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>Throwable</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>
                                        <call>
                                            <name><name>closer</name>.
                                                <name>rethrow</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>closer</name>.
                                                <name>close</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Writes the given lines of text to this sink with each line (including the last) terminated with
                * the operating system's default line separator. This method is equivalent to
                * {@code writeLines(lines, System.getProperty("line.separator"))}.
                *
                * @throws IOException if an I/O error occurs in the process of writing to this sink
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>writeLines</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>CharSequence</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>lines</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>writeLines</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>lines</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>System</name>.
                                                    <name>getProperty</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"line.separator"</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Writes the given lines of text to this sink with each line (including the last) terminated with
                * the given line separator.
                *
                * @throws IOException if an I/O error occurs in the process of writing to this sink
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>writeLines</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>CharSequence</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>lines</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>lineSeparator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>lines</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>lineSeparator</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Closer</name>
                            </type>
                            <name>closer</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Closer</name>.
                                            <name>create</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Writer</name>
                                    </type>
                                    <name>out</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>closer</name>.
                                                    <name>register</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>openBufferedStream</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>CharSequence</name>
                                        </type>
                                        <name>line</name> :
                                        <range>
                                            <expr>
                                                <name>lines</name>
                                            </expr>
                                        </range>
                                    </decl>
                                </init>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>out</name>.
                                                    <name>append</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>line</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>append</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>lineSeparator</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>out</name>.
                                            <name>flush</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// https://code.google.com/p/guava-libraries/issues/detail?id=1330
                            </comment>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>Throwable</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>
                                        <call>
                                            <name><name>closer</name>.
                                                <name>rethrow</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>closer</name>.
                                                <name>close</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Writes all the text from the given {@link Readable} (such as a {@link Reader}) to this sink.
                * Does not close {@code readable} if it is {@code Closeable}.
                *
                * @throws IOException if an I/O error occurs in the process of reading from {@code readable} or
                * writing to this sink
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>writeFrom</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Readable</name>
                            </type>
                            <name>readable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>readable</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Closer</name>
                            </type>
                            <name>closer</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Closer</name>.
                                            <name>create</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Writer</name>
                                    </type>
                                    <name>out</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>closer</name>.
                                                    <name>register</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>openStream</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>written</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>CharStreams</name>.
                                                    <name>copy</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>readable</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>out</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>out</name>.
                                            <name>flush</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// https://code.google.com/p/guava-libraries/issues/detail?id=1330
                            </comment>
                            <return>return
                                <expr>
                                    <name>written</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>Throwable</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>
                                        <call>
                                            <name><name>closer</name>.
                                                <name>rethrow</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>closer</name>.
                                                <name>close</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
