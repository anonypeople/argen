<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\io\CharSource.java">
    <comment type="block">/*
        * Copyright (C) 2012 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>io</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkArgument</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Optional</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Splitter</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.
            <name>AbstractIterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.
            <name>ImmutableList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.
            <name>Lists</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>BufferedReader</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Reader</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Writer</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>nio</name>.<name>charset</name>.
            <name>Charset</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>regex</name>.
            <name>Pattern</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A readable source of characters, such as a text file. Unlike a {@link Reader}, a
        * {@code CharSource} is not an open, stateful stream of characters that can be read and closed.
        * Instead, it is an immutable &lt;i&gt;supplier&lt;/i&gt; of {@code Reader} instances.
        *
        * &lt;p&gt;{@code CharSource} provides two kinds of methods:
        * &lt;ul&gt;
        * &lt;li&gt;&lt;b&gt;Methods that return a reader:&lt;/b&gt; These methods should return a &lt;i&gt;new&lt;/i&gt;,
        independent
        * instance each time they are called. The caller is responsible for ensuring that the returned
        * reader is closed.
        * &lt;li&gt;&lt;b&gt;Convenience methods:&lt;/b&gt; These are implementations of common operations that are
        * typically implemented by opening a reader using one of the methods in the first category,
        * doing something and finally closing the reader that was opened.
        * &lt;/ul&gt;
        *
        * &lt;p&gt;Several methods in this class, such as {@link #readLines()}, break the contents of the
        * source into lines. Like {@link BufferedReader}, these methods break lines on any of {@code \n},
        * {@code \r} or {@code \r\n}, do not include the line separator in each line and do not consider
        * there to be an empty line at the end if the contents are terminated with a line separator.
        *
        * &lt;p&gt;Any {@link ByteSource} containing text encoded with a specific {@linkplain Charset character
        * encoding} may be viewed as a {@code CharSource} using {@link ByteSource#asCharSource(Charset)}.
        *
        * @since 14.0
        * @author Colin Decker
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class <name>CharSource</name>
        <block>{

            <comment type="javadoc">/**
                * Constructor for use by subclasses.
                */
            </comment>
            <constructor>
                <specifier>protected</specifier>
                <name>CharSource</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="javadoc">/**
                * Opens a new {@link Reader} for reading from this source. This method should return a new,
                * independent reader each time it is called.
                *
                * &lt;p&gt;The caller is responsible for ensuring that the returned reader is closed.
                *
                * @throws IOException if an I/O error occurs in the process of opening the reader
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>Reader</name>
                </type>
                <name>openStream</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Opens a new {@link BufferedReader} for reading from this source. This method should return a
                * new, independent reader each time it is called.
                *
                * &lt;p&gt;The caller is responsible for ensuring that the returned reader is closed.
                *
                * @throws IOException if an I/O error occurs in the process of opening the reader
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>BufferedReader</name>
                </type>
                <name>openBufferedStream</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Reader</name>
                            </type>
                            <name>reader</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>openStream</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>(<name>reader</name>
                            <name>instanceof</name>
                            <name>BufferedReader</name>)
                            ? (<name>BufferedReader</name>)
                            <name>reader</name>
                            : new
                            <call>
                                <name>BufferedReader</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>reader</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the size of this source in chars, if the size can be easily determined without
                * actually opening the data stream.
                *
                * &lt;p&gt;The default implementation returns {@link Optional#absent}. Some sources, such as a
                * {@code CharSequence}, may return a non-absent value. Note that in such cases, it is
                * &lt;i&gt;possible&lt;/i&gt; that this method will return a different number of chars than would be
                * returned by reading all of the chars.
                *
                * &lt;p&gt;Additionally, for mutable sources such as {@code StringBuilder}s, a subsequent read
                * may return a different number of chars if the contents are changed.
                *
                * @since 19.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Optional</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Long</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>lengthIfKnown</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Optional</name>.
                                    <name>absent</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the length of this source in chars, even if doing so requires opening and traversing
                * an entire stream. To avoid a potentially expensive operation, see {@link #lengthIfKnown}.
                *
                * &lt;p&gt;The default implementation calls {@link #lengthIfKnown} and returns the value if present.
                * If absent, it will fall back to a heavyweight operation that will open a stream,
                * {@link Reader#skip(long) skip} to the end of the stream, and return the total number of chars
                * that were skipped.
                *
                * &lt;p&gt;Note that for sources that implement {@link #lengthIfKnown} to provide a more efficient
                * implementation, it is &lt;i&gt;possible&lt;/i&gt; that this method will return a different number of
                chars
                * than would be returned by reading all of the chars.
                *
                * &lt;p&gt;In either case, for mutable sources such as files, a subsequent read may return a different
                * number of chars if the contents are changed.
                *
                * @throws IOException if an I/O error occurs in the process of reading the length of this source
                * @since 19.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>length</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Optional</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Long</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>lengthIfKnown</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>lengthIfKnown</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>lengthIfKnown</name>.
                                        <name>isPresent</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>lengthIfKnown</name>.
                                                <name>get</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Closer</name>
                            </type>
                            <name>closer</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Closer</name>.
                                            <name>create</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Reader</name>
                                    </type>
                                    <name>reader</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>closer</name>.
                                                    <name>register</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>openStream</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <return>return
                                <expr>
                                    <call>
                                        <name>countBySkipping</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>reader</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>Throwable</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>
                                        <call>
                                            <name><name>closer</name>.
                                                <name>rethrow</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>closer</name>.
                                                <name>close</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>long</name>
                </type>
                <name>countBySkipping</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Reader</name>
                            </type>
                            <name>reader</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>count</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>read</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>(<name>read</name> =
                                <call>
                                    <name><name>reader</name>.
                                        <name>skip</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>Long</name>.
                                                    <name>MAX_VALUE</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ) != 0
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>count</name>
                                    +=
                                    <name>read</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <return>return
                        <expr>
                            <name>count</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Appends the contents of this source to the given {@link Appendable} (such as a {@link Writer}).
                * Does not close {@code appendable} if it is {@code Closeable}.
                *
                * @throws IOException if an I/O error occurs in the process of reading from this source or
                * writing to {@code appendable}
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>copyTo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Appendable</name>
                            </type>
                            <name>appendable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>appendable</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Closer</name>
                            </type>
                            <name>closer</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Closer</name>.
                                            <name>create</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Reader</name>
                                    </type>
                                    <name>reader</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>closer</name>.
                                                    <name>register</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>openStream</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>CharStreams</name>.
                                            <name>copy</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>reader</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>appendable</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>Throwable</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>
                                        <call>
                                            <name><name>closer</name>.
                                                <name>rethrow</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>closer</name>.
                                                <name>close</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Copies the contents of this source to the given sink.
                *
                * @throws IOException if an I/O error occurs in the process of reading from this source or
                * writing to {@code sink}
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>copyTo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CharSink</name>
                            </type>
                            <name>sink</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>sink</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Closer</name>
                            </type>
                            <name>closer</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Closer</name>.
                                            <name>create</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Reader</name>
                                    </type>
                                    <name>reader</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>closer</name>.
                                                    <name>register</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>openStream</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Writer</name>
                                    </type>
                                    <name>writer</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>closer</name>.
                                                    <name>register</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>sink</name>.
                                                                    <name>openStream</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>CharStreams</name>.
                                            <name>copy</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>reader</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>writer</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>Throwable</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>
                                        <call>
                                            <name><name>closer</name>.
                                                <name>rethrow</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>closer</name>.
                                                <name>close</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reads the contents of this source as a string.
                *
                * @throws IOException if an I/O error occurs in the process of reading from this source
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>read</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Closer</name>
                            </type>
                            <name>closer</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Closer</name>.
                                            <name>create</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Reader</name>
                                    </type>
                                    <name>reader</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>closer</name>.
                                                    <name>register</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>openStream</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>CharStreams</name>.
                                            <name>toString</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>reader</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>Throwable</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>
                                        <call>
                                            <name><name>closer</name>.
                                                <name>rethrow</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>closer</name>.
                                                <name>close</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reads the first link of this source as a string. Returns {@code null} if this source is empty.
                *
                * &lt;p&gt;Like {@link BufferedReader}, this method breaks lines on any of {@code \n}, {@code \r} or
                * {@code \r\n}, does not include the line separator in the returned line and does not consider
                * there to be an extra empty line at the end if the content is terminated with a line separator.
                *
                * @throws IOException if an I/O error occurs in the process of reading from this source
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Nullable</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>readFirstLine</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Closer</name>
                            </type>
                            <name>closer</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Closer</name>.
                                            <name>create</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>BufferedReader</name>
                                    </type>
                                    <name>reader</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>closer</name>.
                                                    <name>register</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>openBufferedStream</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>reader</name>.
                                            <name>readLine</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>Throwable</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>
                                        <call>
                                            <name><name>closer</name>.
                                                <name>rethrow</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>closer</name>.
                                                <name>close</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reads all the lines of this source as a list of strings. The returned list will be empty if
                * this source is empty.
                *
                * &lt;p&gt;Like {@link BufferedReader}, this method breaks lines on any of {@code \n}, {@code \r} or
                * {@code \r\n}, does not include the line separator in the returned lines and does not consider
                * there to be an extra empty line at the end if the content is terminated with a line separator.
                *
                * @throws IOException if an I/O error occurs in the process of reading from this source
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>ImmutableList</name>
                        <argument_list>&lt;
                            <argument>
                                <name>String</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>readLines</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Closer</name>
                            </type>
                            <name>closer</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Closer</name>.
                                            <name>create</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>BufferedReader</name>
                                    </type>
                                    <name>reader</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>closer</name>.
                                                    <name>register</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>openBufferedStream</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>List</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>String</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>result</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>Lists</name>.
                                                    <name>newArrayList</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>line</name>
                                </decl>
                                ;
                            </decl_stmt>
                            <while>while
                                <condition>(
                                    <expr>(<name>line</name> =
                                        <call>
                                            <name><name>reader</name>.
                                                <name>readLine</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ) !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>result</name>.
                                                    <name>add</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>line</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </while>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>ImmutableList</name>.
                                            <name>copyOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>result</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>Throwable</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>
                                        <call>
                                            <name><name>closer</name>.
                                                <name>rethrow</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>closer</name>.
                                                <name>close</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Reads lines of text from this source, processing each line as it is read using the given
                * {@link LineProcessor processor}. Stops when all lines have been processed or the processor
                * returns {@code false} and returns the result produced by the processor.
                *
                * &lt;p&gt;Like {@link BufferedReader}, this method breaks lines on any of {@code \n}, {@code \r} or
                * {@code \r\n}, does not include the line separator in the lines passed to the {@code processor}
                * and does not consider there to be an extra empty line at the end if the content is terminated
                * with a line separator.
                *
                * @throws IOException if an I/O error occurs in the process of reading from this source or if
                * {@code processor} throws an {@code IOException}
                * @since 16.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>T</name>
                </type>
                <name>readLines</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>LineProcessor</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>processor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>processor</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Closer</name>
                            </type>
                            <name>closer</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Closer</name>.
                                            <name>create</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Reader</name>
                                    </type>
                                    <name>reader</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>closer</name>.
                                                    <name>register</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>openStream</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>CharStreams</name>.
                                            <name>readLines</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>reader</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>processor</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>Throwable</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>
                                        <call>
                                            <name><name>closer</name>.
                                                <name>rethrow</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>closer</name>.
                                                <name>close</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns whether the source has zero chars. The default implementation returns true if
                * {@link #lengthIfKnown} returns zero, falling back to opening a stream and checking
                * for EOF if the length is not known.
                *
                * &lt;p&gt;Note that, in cases where {@code lengthIfKnown} returns zero, it is &lt;i&gt;possible&lt;/i&gt;
                that
                * chars are actually available for reading. This means that a source may return {@code true} from
                * {@code isEmpty()} despite having readable content.
                *
                * @throws IOException if an I/O error occurs
                * @since 15.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Optional</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Long</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>lengthIfKnown</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>lengthIfKnown</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>lengthIfKnown</name>.
                                        <name>isPresent</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &amp;&amp;
                                <call>
                                    <name><name>lengthIfKnown</name>.
                                        <name>get</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0L
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Closer</name>
                            </type>
                            <name>closer</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Closer</name>.
                                            <name>create</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Reader</name>
                                    </type>
                                    <name>reader</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>closer</name>.
                                                    <name>register</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>openStream</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>reader</name>.
                                            <name>read</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    == -1
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>Throwable</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>
                                        <call>
                                            <name><name>closer</name>.
                                                <name>rethrow</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>closer</name>.
                                                <name>close</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Concatenates multiple {@link CharSource} instances into a single source. Streams returned from
                * the source will contain the concatenated data from the streams of the underlying sources.
                *
                * &lt;p&gt;Only one underlying stream will be open at a time. Closing the concatenated stream will
                * close the open underlying stream.
                *
                * @param sources the sources to concatenate
                * @return a {@code CharSource} containing the concatenated data
                * @since 15.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>CharSource</name>
                </type>
                <name>concat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>CharSource</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>sources</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>ConcatenatedCharSource</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>sources</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Concatenates multiple {@link CharSource} instances into a single source. Streams returned from
                * the source will contain the concatenated data from the streams of the underlying sources.
                *
                * &lt;p&gt;Only one underlying stream will be open at a time. Closing the concatenated stream will
                * close the open underlying stream.
                *
                * &lt;p&gt;Note: The input {@code Iterator} will be copied to an {@code ImmutableList} when this
                * method is called. This will fail if the iterator is infinite and may cause problems if the
                * iterator eagerly fetches data for each source when iterated (rather than producing sources
                * that only load data through their streams). Prefer using the {@link #concat(Iterable)}
                * overload if possible.
                *
                * @param sources the sources to concatenate
                * @return a {@code CharSource} containing the concatenated data
                * @throws NullPointerException if any of {@code sources} is {@code null}
                * @since 15.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>CharSource</name>
                </type>
                <name>concat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>CharSource</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>sources</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>concat</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ImmutableList</name>.
                                                    <name>copyOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>sources</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Concatenates multiple {@link CharSource} instances into a single source. Streams returned from
                * the source will contain the concatenated data from the streams of the underlying sources.
                *
                * &lt;p&gt;Only one underlying stream will be open at a time. Closing the concatenated stream will
                * close the open underlying stream.
                *
                * @param sources the sources to concatenate
                * @return a {@code CharSource} containing the concatenated data
                * @throws NullPointerException if any of {@code sources} is {@code null}
                * @since 15.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>CharSource</name>
                </type>
                <name>concat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type><name>CharSource</name>...
                            </type>
                            <name>sources</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>concat</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ImmutableList</name>.
                                                    <name>copyOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>sources</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a view of the given character sequence as a {@link CharSource}. The behavior of the
                * returned {@code CharSource} and any {@code Reader} instances created by it is unspecified if
                * the {@code charSequence} is mutated while it is being read, so don't do that.
                *
                * @since 15.0 (since 14.0 as {@code CharStreams.asCharSource(String)})
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>CharSource</name>
                </type>
                <name>wrap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CharSequence</name>
                            </type>
                            <name>charSequence</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>CharSequenceCharSource</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>charSequence</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an immutable {@link CharSource} that contains no characters.
                *
                * @since 15.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>CharSource</name>
                </type>
                <name>empty</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>EmptyCharSource</name>.
                                <name>INSTANCE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <class>
                <specifier>private</specifier>
                <specifier>static</specifier> class <name>CharSequenceCharSource</name>
                <super>
                    <extends>extends
                        <name>CharSource</name>
                    </extends>
                </super>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>Splitter</name>
                            </type>
                            <name>LINE_SPLITTER</name>
                            =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Splitter</name>.
                                            <name>on</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>Pattern</name>.
                                                            <name>compile</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"\r\n|\n|\r"</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>CharSequence</name>
                            </type>
                            <name>seq</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <specifier>protected</specifier>
                        <name>CharSequenceCharSource</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>CharSequence</name>
                                    </type>
                                    <name>seq</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>seq</name>
                                    </name>
                                    =
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>seq</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>Reader</name>
                        </type>
                        <name>openStream</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>new
                                    <call>
                                        <name>CharSequenceReader</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>seq</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>read</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>seq</name>.
                                            <name>toString</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>isEmpty</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>seq</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    == 0
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>long</name>
                        </type>
                        <name>length</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>seq</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>
                                <name>Optional</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>Long</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>lengthIfKnown</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>Optional</name>.
                                            <name>of</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>(<name>long</name>)
                                                    <call>
                                                        <name><name>seq</name>.
                                                            <name>length</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Returns an iterable over the lines in the string. If the string ends in
                        * a newline, a final empty string is not included to match the behavior of
                        * BufferedReader/LineReader.readLine().
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>
                                <name>Iterable</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>String</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>lines</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>new
                                    <class>
                                        <super>
                                            <name>
                                                <name>Iterable</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>String</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </super>
                                        <argument_list>()</argument_list>
                                        <block>{
                                            <function>
                                                <type>
                                                    <annotation>@
                                                        <name>Override</name>
                                                    </annotation>
                                                    <specifier>public</specifier>
                                                    <name>
                                                        <name>Iterator</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>String</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </type>
                                                <name>iterator</name>
                                                <parameter_list>()</parameter_list>
                                                <block>{
                                                    <return>return
                                                        <expr>new
                                                            <class>
                                                                <super>
                                                                    <name>
                                                                        <name>AbstractIterator</name>
                                                                        <argument_list>&lt;
                                                                            <argument>
                                                                                <name>String</name>
                                                                            </argument>
                                                                            &gt;
                                                                        </argument_list>
                                                                    </name>
                                                                </super>
                                                                <argument_list>()</argument_list>
                                                                <block>{
                                                                    <decl_stmt>
                                                                        <decl>
                                                                            <type>
                                                                                <name>
                                                                                    <name>Iterator</name>
                                                                                    <argument_list>&lt;
                                                                                        <argument>
                                                                                            <name>String</name>
                                                                                        </argument>
                                                                                        &gt;
                                                                                    </argument_list>
                                                                                </name>
                                                                            </type>
                                                                            <name>lines</name> =
                                                                            <init>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name><name>LINE_SPLITTER</name>
                                                                                            .
                                                                                            <name>split</name>
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>seq</name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                    .
                                                                                    <call>
                                                                                        <name>iterator</name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </init>
                                                                        </decl>
                                                                        ;
                                                                    </decl_stmt>

                                                                    <function>
                                                                        <type>
                                                                            <annotation>@
                                                                                <name>Override</name>
                                                                            </annotation>
                                                                            <specifier>protected</specifier>
                                                                            <name>String</name>
                                                                        </type>
                                                                        <name>computeNext</name>
                                                                        <parameter_list>()</parameter_list>
                                                                        <block>{
                                                                            <if>if
                                                                                <condition>(
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name><name>lines</name>.
                                                                                                <name>hasNext</name>
                                                                                            </name>
                                                                                            <argument_list>()
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                    )
                                                                                </condition>
                                                                                <then>
                                                                                    <block>{
                                                                                        <decl_stmt>
                                                                                            <decl>
                                                                                                <type>
                                                                                                    <name>String</name>
                                                                                                </type>
                                                                                                <name>next</name> =
                                                                                                <init>
                                                                                                    <expr>
                                                                                                        <call>
                                                                                                            <name><name>
                                                                                                                lines</name>
                                                                                                                .
                                                                                                                <name>
                                                                                                                    next
                                                                                                                </name>
                                                                                                            </name>
                                                                                                            <argument_list>
                                                                                                                ()
                                                                                                            </argument_list>
                                                                                                        </call>
                                                                                                    </expr>
                                                                                                </init>
                                                                                            </decl>
                                                                                            ;
                                                                                        </decl_stmt>
                                                                                        <comment type="line">// skip
                                                                                            last line if it's empty
                                                                                        </comment>
                                                                                        <if>if
                                                                                            <condition>(
                                                                                                <expr>
                                                                                                    <call>
                                                                                                        <name><name>
                                                                                                            lines</name>
                                                                                                            .
                                                                                                            <name>
                                                                                                                hasNext
                                                                                                            </name>
                                                                                                        </name>
                                                                                                        <argument_list>
                                                                                                            ()
                                                                                                        </argument_list>
                                                                                                    </call>
                                                                                                    || !
                                                                                                    <call>
                                                                                                        <name><name>
                                                                                                            next</name>.
                                                                                                            <name>
                                                                                                                isEmpty
                                                                                                            </name>
                                                                                                        </name>
                                                                                                        <argument_list>
                                                                                                            ()
                                                                                                        </argument_list>
                                                                                                    </call>
                                                                                                </expr>
                                                                                                )
                                                                                            </condition>
                                                                                            <then>
                                                                                                <block>{
                                                                                                    <return>return
                                                                                                        <expr>
                                                                                                            <name>next
                                                                                                            </name>
                                                                                                        </expr>
                                                                                                        ;
                                                                                                    </return>
                                                                                                    }
                                                                                                </block>
                                                                                            </then>
                                                                                        </if>
                                                                                        }
                                                                                    </block>
                                                                                </then>
                                                                            </if>
                                                                            <return>return
                                                                                <expr>
                                                                                    <call>
                                                                                        <name>endOfData</name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                                ;
                                                                            </return>
                                                                            }
                                                                        </block>
                                                                    </function>
                                                                    }
                                                                </block>
                                                            </class>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </function>
                                            }
                                        </block>
                                    </class>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>readFirstLine</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Iterator</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>String</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>lines</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>lines</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>iterator</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>lines</name>.
                                            <name>hasNext</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    ?
                                    <call>
                                        <name><name>lines</name>.
                                            <name>next</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    :
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>
                                <name>ImmutableList</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>String</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>readLines</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>ImmutableList</name>.
                                            <name>copyOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>lines</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <argument_list>&lt;
                                <argument>
                                    <name>T</name>
                                </argument>
                                &gt;
                            </argument_list>
                            <name>T</name>
                        </type>
                        <name>readLines</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>LineProcessor</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>T</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>processor</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>IOException</name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>String</name>
                                        </type>
                                        <name>line</name> :
                                        <range>
                                            <expr>
                                                <call>
                                                    <name>lines</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </range>
                                    </decl>
                                </init>
                                )
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>!
                                                <call>
                                                    <name><name>processor</name>.
                                                        <name>processLine</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>line</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <break>break;</break>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>processor</name>.
                                            <name>getResult</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>"CharSource.wrap(" +
                                    <call>
                                        <name>truncate</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>seq</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>30</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>"..."</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    + ")"
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Truncates the given character sequence to the given maximum length. If the length of the
                        * sequence is greater than {@code maxLength}, the returned string will be exactly
                        * {@code maxLength} chars in length and will end with the given {@code truncationIndicator}.
                        * Otherwise, the sequence will be returned as a string with no changes to the content.
                        *
                        * &lt;p&gt;Examples:
                        *
                        * &lt;pre&gt; {@code
                        * truncate("foobar", 7, "..."); // returns "foobar"
                        * truncate("foobar", 5, "..."); // returns "fo..." }&lt;/pre&gt;
                        *
                        * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method &lt;i&gt;may&lt;/i&gt; work with certain
                        non-ASCII text but is not safe for
                        * use with arbitrary Unicode text. It is mostly intended for use with text that is known to be
                        * safe for use with it (such as all-ASCII text) and for simple debugging text. When using this
                        * method, consider the following:
                        *
                        * &lt;ul&gt;
                        * &lt;li&gt;it may split surrogate pairs&lt;/li&gt;
                        * &lt;li&gt;it may split characters and combining characters&lt;/li&gt;
                        * &lt;li&gt;it does not consider word boundaries&lt;/li&gt;
                        * &lt;li&gt;if truncating for display to users, there are other considerations that must be
                        taken
                        * into account&lt;/li&gt;
                        * &lt;li&gt;the appropriate truncation indicator may be locale-dependent&lt;/li&gt;
                        * &lt;li&gt;it is safe to use non-ASCII characters in the truncation indicator&lt;/li&gt;
                        * &lt;/ul&gt;
                        *
                        *
                        * @throws IllegalArgumentException if {@code maxLength} is less than the length of
                        * {@code truncationIndicator}
                        */
                    </comment>
                    <comment type="block">/*
                        * &lt;p&gt;TODO(user, cpovirk): Use Ascii.truncate once it is available in our internal copy of
                        * guava_jdk5.
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>private</specifier>
                            <specifier>static</specifier>
                            <name>String</name>
                        </type>
                        <name>truncate</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>CharSequence</name>
                                    </type>
                                    <name>seq</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>maxLength</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>truncationIndicator</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>seq</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">// length to truncate the sequence to, not including the truncation
                                indicator
                            </comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>truncationLength</name> =
                                    <init>
                                        <expr>
                                            <name>maxLength</name>
                                            -
                                            <call>
                                                <name><name>truncationIndicator</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <comment type="line">// in this worst case, this allows a maxLength equal to the length of
                                the truncationIndicator,
                            </comment>
                            <comment type="line">// meaning that a string will be truncated to just the truncation
                                indicator itself
                            </comment>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkArgument</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>truncationLength</name>
                                                    &gt;= 0
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>"maxLength (%s) must be &gt;= length of the truncation indicator
                                                    (%s)"
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>maxLength</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>truncationIndicator</name>.
                                                            <name>length</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>seq</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        &lt;=
                                        <name>maxLength</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>String</name>
                                                </type>
                                                <name>string</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>seq</name>.
                                                                <name>toString</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>string</name>.
                                                            <name>length</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    &lt;=
                                                    <name>maxLength</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>string</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <comment type="line">// if the length of the toString() result was &gt;
                                            maxLength for some reason, truncate that
                                        </comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>seq</name>
                                                =
                                                <name>string</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>

                            <return>return
                                <expr>new
                                    <call>
                                        <name>StringBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>maxLength</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>seq</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>truncationLength</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>truncationIndicator</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>toString</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <class>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>EmptyCharSource</name>
                <super>
                    <extends>extends
                        <name>CharSequenceCharSource</name>
                    </extends>
                </super>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>EmptyCharSource</name>
                            </type>
                            <name>INSTANCE</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>EmptyCharSource</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <specifier>private</specifier>
                        <name>EmptyCharSource</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>""</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return <expr>"CharSource.empty()"</expr>;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <class>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>ConcatenatedCharSource</name>
                <super>
                    <extends>extends
                        <name>CharSource</name>
                    </extends>
                </super>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>CharSource</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>sources</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>ConcatenatedCharSource</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Iterable</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>CharSource</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>sources</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>sources</name>
                                    </name>
                                    =
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>sources</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>Reader</name>
                        </type>
                        <name>openStream</name>
                        <parameter_list>()</parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>IOException</name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <return>return
                                <expr>new
                                    <call>
                                        <name>MultiReader</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>sources</name>.
                                                            <name>iterator</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>isEmpty</name>
                        <parameter_list>()</parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>IOException</name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>CharSource</name>
                                        </type>
                                        <name>source</name> :
                                        <range>
                                            <expr>
                                                <name>sources</name>
                                            </expr>
                                        </range>
                                    </decl>
                                </init>
                                )
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>!
                                                <call>
                                                    <name><name>source</name>.
                                                        <name>isEmpty</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return <expr>false</expr>;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>
                            <return>return <expr>true</expr>;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>
                                <name>Optional</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>Long</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>lengthIfKnown</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>result</name> =
                                    <init>
                                        <expr>0L</expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>CharSource</name>
                                        </type>
                                        <name>source</name> :
                                        <range>
                                            <expr>
                                                <name>sources</name>
                                            </expr>
                                        </range>
                                    </decl>
                                </init>
                                )
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>Optional</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>Long</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>lengthIfKnown</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>source</name>.
                                                            <name>lengthIfKnown</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>!
                                                <call>
                                                    <name><name>lengthIfKnown</name>.
                                                        <name>isPresent</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <call>
                                                            <name><name>Optional</name>.
                                                                <name>absent</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <expr_stmt>
                                        <expr>
                                            <name>result</name>
                                            +=
                                            <call>
                                                <name><name>lengthIfKnown</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>Optional</name>.
                                            <name>of</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>result</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>long</name>
                        </type>
                        <name>length</name>
                        <parameter_list>()</parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>IOException</name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>result</name> =
                                    <init>
                                        <expr>0L</expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>CharSource</name>
                                        </type>
                                        <name>source</name> :
                                        <range>
                                            <expr>
                                                <name>sources</name>
                                            </expr>
                                        </range>
                                    </decl>
                                </init>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>result</name>
                                            +=
                                            <call>
                                                <name><name>source</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <return>return
                                <expr>
                                    <name>result</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>"CharSource.concat(" + <name>sources</name> + ")"
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>
            }
        </block>
    </class>
</unit>
