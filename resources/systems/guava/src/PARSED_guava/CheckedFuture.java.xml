<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\util\concurrent\CheckedFuture.java">
    <comment type="block">/*
        * Copyright (C) 2008 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.
            <name>concurrent</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>CancellationException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ExecutionException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>Future</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>TimeUnit</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>TimeoutException</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A {@code CheckedFuture} is a {@link ListenableFuture} that includes versions
        * of the {@code get} methods that can throw a checked exception. This makes it
        * easier to create a future that executes logic which can throw an exception.
        *
        * &lt;p&gt;A common implementation is {@link Futures#immediateCheckedFuture}.
        *
        * &lt;p&gt;Implementations of this interface must adapt the exceptions thrown by
        * {@code Future#get()}: {@link CancellationException},
        * {@link ExecutionException} and {@link InterruptedException} into the type
        * specified by the {@code X} type parameter.
        *
        * &lt;p&gt;This interface also extends the ListenableFuture interface to allow
        * listeners to be added. This allows the future to be used as a normal
        * {@link Future} or as an asynchronous callback mechanism as needed. This
        * allows multiple callbacks to be registered for a particular task, and the
        * future will guarantee execution of all listeners when the task completes.
        *
        * &lt;p&gt;For a simpler alternative to CheckedFuture, consider accessing Future
        * values with {@link Futures#getChecked(Future, Class) Futures.getChecked()}.
        *
        * @author Sven Mawson
        * @since 1.0
        */
    </comment>
    <class type="interface">
        <annotation>@
            <name>Beta</name>
        </annotation>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        interface
        <name>
            <name>CheckedFuture</name>
            <argument_list>&lt;
                <argument>
                    <name>V</name>
                </argument>
                ,
                <argument>
                    <name>X</name>
                    <extends>extends
                        <name>Exception</name>
                    </extends>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>ListenableFuture</name>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Exception checking version of {@link Future#get()} that will translate
                * {@link InterruptedException}, {@link CancellationException} and
                * {@link ExecutionException} into application-specific exceptions.
                *
                * @return the result of executing the future.
                * @throws X on interruption, cancellation or execution exceptions.
                */
            </comment>
            <function_decl>
                <type>
                    <name>V</name>
                </type>
                <name>checkedGet</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>X</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Exception checking version of {@link Future#get(long, TimeUnit)} that will
                * translate {@link InterruptedException}, {@link CancellationException} and
                * {@link ExecutionException} into application-specific exceptions. On
                * timeout this method throws a normal {@link TimeoutException}.
                *
                * @return the result of executing the future.
                * @throws TimeoutException if retrieving the result timed out.
                * @throws X on interruption, cancellation or execution exceptions.
                */
            </comment>
            <function_decl>
                <type>
                    <name>V</name>
                </type>
                <name>checkedGet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>timeout</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>TimeUnit</name>
                            </type>
                            <name>unit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>TimeoutException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>X</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>
            }
        </block>
    </class>
</unit>
