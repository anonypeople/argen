<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\Constraint.java">
    <comment type="block">/*
        * Copyright (C) 2007 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A constraint that an element must satisfy in order to be added to a
        * collection. For example, {@link Constraints#notNull()}, which prevents a
        * collection from including any null elements, could be implemented like this:
        * &lt;pre&gt; {@code
        *
        * public Object checkElement(Object element) {
        * if (element == null) {
        * throw new NullPointerException();
        * }
        * return element;
        * }}&lt;/pre&gt;
        *
        * &lt;p&gt;In order to be effective, constraints should be deterministic; that is,
        * they should not depend on state that can change (such as external state,
        * random variables, and time) and should only depend on the value of the
        * passed-in element. A non-deterministic constraint cannot reliably enforce
        * that all the collection's elements meet the constraint, since the constraint
        * is only enforced when elements are added.
        *
        * @author Mike Bostock
        */
    </comment>
    <class type="interface">
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        interface
        <name>
            <name>Constraint</name>
            <argument_list>&lt;
                <argument>
                    <name>E</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <block>{
            <comment type="javadoc">/**
                * Throws a suitable {@code RuntimeException} if the specified element is
                * illegal. Typically this is either a {@link NullPointerException}, an
                * {@link IllegalArgumentException}, or a {@link ClassCastException}, though
                * an application-specific exception class may be used if appropriate.
                *
                * @param element the element to check
                * @return the provided element
                */
            </comment>
            <function_decl>
                <type>
                    <name>E</name>
                </type>
                <name>checkElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a brief human readable description of this constraint, such as
                * "Not null" or "Positive number".
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            }
        </block>
    </class>
</unit>
