<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\Cut.java">
    <comment type="block">/*
        * Copyright (C) 2009 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
        * in compliance with the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software distributed under the License
        * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
        * or implied. See the License for the specific language governing permissions and limitations under
        * the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>primitives</name>.
            <name>Booleans</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>NoSuchElementException</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Implementation detail for the internal structure of {@link Range} instances. Represents
        * a unique way of "cutting" a "number line" (actually of instances of type {@code C}, not
        * necessarily "numbers") into two sections; this can be done below a certain value, above
        * a certain value, below all values or above all values. With this object defined in this
        * way, an interval can always be represented by a pair of {@code Cut} instances.
        *
        * @author Kevin Bourrillion
        */
    </comment>
    <class>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>abstract</specifier>
        class
        <name>
            <name>Cut</name>
            <argument_list>&lt;
                <argument>
                    <name>C</name>
                    <extends>extends
                        <name>Comparable</name>
                    </extends>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <implements>implements
                <name>
                    <name>Comparable</name>
                    <argument_list>&lt;
                        <argument>
                            <name>
                                <name>Cut</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>C</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                ,
                <name>Serializable</name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>C</name>
                    </type>
                    <name>endpoint</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>Cut</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>C</name>
                            </type>
                            <name>endpoint</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>endpoint</name>
                            </name>
                            =
                            <name>endpoint</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function_decl>
                <type>
                    <specifier>abstract</specifier>
                    <name>boolean</name>
                </type>
                <name>isLessThan</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>C</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <function_decl>
                <type>
                    <specifier>abstract</specifier>
                    <name>BoundType</name>
                </type>
                <name>typeAsLowerBound</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <function_decl>
                <type>
                    <specifier>abstract</specifier>
                    <name>BoundType</name>
                </type>
                <name>typeAsUpperBound</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <function_decl>
                <type>
                    <specifier>abstract</specifier>
                    <name>
                        <name>Cut</name>
                        <argument_list>&lt;
                            <argument>
                                <name>C</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>withLowerBoundType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BoundType</name>
                            </type>
                            <name>boundType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>DiscreteDomain</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>C</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>domain</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <function_decl>
                <type>
                    <specifier>abstract</specifier>
                    <name>
                        <name>Cut</name>
                        <argument_list>&lt;
                            <argument>
                                <name>C</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>withUpperBoundType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BoundType</name>
                            </type>
                            <name>boundType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>DiscreteDomain</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>C</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>domain</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <function_decl>
                <type>
                    <specifier>abstract</specifier>
                    <name>void</name>
                </type>
                <name>describeAsLowerBound</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>StringBuilder</name>
                            </type>
                            <name>sb</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <function_decl>
                <type>
                    <specifier>abstract</specifier>
                    <name>void</name>
                </type>
                <name>describeAsUpperBound</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>StringBuilder</name>
                            </type>
                            <name>sb</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <function_decl>
                <type>
                    <specifier>abstract</specifier>
                    <name>C</name>
                </type>
                <name>leastValueAbove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>DiscreteDomain</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>C</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>domain</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <function_decl>
                <type>
                    <specifier>abstract</specifier>
                    <name>C</name>
                </type>
                <name>greatestValueBelow</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>DiscreteDomain</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>C</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>domain</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="block">/*
                * The canonical form is a BelowValue cut whenever possible, otherwise ABOVE_ALL, or
                * (only in the case of types that are unbounded below) BELOW_ALL.
                */
            </comment>
            <function>
                <type>
                    <name>
                        <name>Cut</name>
                        <argument_list>&lt;
                            <argument>
                                <name>C</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>canonical</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>DiscreteDomain</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>C</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>domain</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// note: overriden by {BELOW,ABOVE}_ALL</comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>compareTo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Cut</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>C</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>that</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>that</name>
                                ==
                                <call>
                                    <name>belowAll</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>1</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>that</name>
                                ==
                                <call>
                                    <name>aboveAll</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>-1</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Range</name>.
                                            <name>compareOrThrow</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>endpoint</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>that</name>.
                                                        <name>endpoint</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>result</name>
                                != 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>result</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// same value. below comes before above</comment>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Booleans</name>.
                                    <name>compare</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                            <name>instanceof</name>
                                            <name>AboveValue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>that</name>
                                            <name>instanceof</name>
                                            <name>AboveValue</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>C</name>
                </type>
                <name>endpoint</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>endpoint</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("unchecked")</argument_list>
                    </annotation>
                    <comment type="line">// catching CCE</comment>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>obj</name>
                                <name>instanceof</name>
                                <name>Cut</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// It might not really be a Cut&lt;C&gt;, but we'll catch a CCE if
                                    it's not
                                </comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>Cut</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>C</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>that</name> =
                                        <init>
                                            <expr>(
                                                <name>
                                                    <name>Cut</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>C</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                )
                                                <name>obj</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <try>try
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>compareResult</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name>compareTo</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>that</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <return>return
                                            <expr>
                                                <name>compareResult</name>
                                                == 0
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                    <catch>catch (
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>ClassCastException</name>
                                                </type>
                                                <name>ignored</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            }
                                        </block>
                                    </catch>
                                </try>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="block">/*
                * The implementation neither produces nor consumes any non-null instance of type C, so
                * casting the type parameter is safe.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("unchecked")</argument_list>
                    </annotation>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>C</name>
                            <extends>extends
                                <name>Comparable</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Cut</name>
                        <argument_list>&lt;
                            <argument>
                                <name>C</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>belowAll</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>Cut</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>C</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            )
                            <name><name>BelowAll</name>.
                                <name>INSTANCE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <class>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>BelowAll</name>
                <super>
                    <extends>extends
                        <name>
                            <name>Cut</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>Comparable</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>BelowAll</name>
                            </type>
                            <name>INSTANCE</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>BelowAll</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <specifier>private</specifier>
                        <name>BelowAll</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>null</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>
                                <name>Comparable</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>?</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>endpoint</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>IllegalStateException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"range unbounded on this side"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>boolean</name>
                        </type>
                        <name>isLessThan</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Comparable</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return <expr>true</expr>;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>BoundType</name>
                        </type>
                        <name>typeAsLowerBound</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>IllegalStateException</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>BoundType</name>
                        </type>
                        <name>typeAsUpperBound</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>AssertionError</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"this statement should be unreachable"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>
                                <name>Cut</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>
                                            <name>Comparable</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>withLowerBoundType</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>BoundType</name>
                                    </type>
                                    <name>boundType</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>DiscreteDomain</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>
                                                        <name>Comparable</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>?</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>domain</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>IllegalStateException</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>
                                <name>Cut</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>
                                            <name>Comparable</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>withUpperBoundType</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>BoundType</name>
                                    </type>
                                    <name>boundType</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>DiscreteDomain</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>
                                                        <name>Comparable</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>?</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>domain</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>AssertionError</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"this statement should be unreachable"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>void</name>
                        </type>
                        <name>describeAsLowerBound</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>StringBuilder</name>
                                    </type>
                                    <name>sb</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>sb</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"(-\u221e"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>void</name>
                        </type>
                        <name>describeAsUpperBound</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>StringBuilder</name>
                                    </type>
                                    <name>sb</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>AssertionError</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>
                                <name>Comparable</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>?</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>leastValueAbove</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>DiscreteDomain</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>
                                                        <name>Comparable</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>?</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>domain</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>domain</name>.
                                            <name>minValue</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>
                                <name>Comparable</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>?</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>greatestValueBelow</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>DiscreteDomain</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>
                                                        <name>Comparable</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>?</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>domain</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>AssertionError</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>
                                <name>Cut</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>
                                            <name>Comparable</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>canonical</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>DiscreteDomain</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>
                                                        <name>Comparable</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>?</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>domain</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <try>try
                                <block>{
                                    <return>return
                                        <expr>
                                            <name><name>Cut</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            &lt;
                                            <name>
                                                <name>Comparable</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>?</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                            &gt;
                                            <call>
                                                <name>belowValue</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>domain</name>.
                                                                    <name>minValue</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                                <catch>catch (
                                    <param>
                                        <decl>
                                            <type>
                                                <name>NoSuchElementException</name>
                                            </type>
                                            <name>e</name>
                                        </decl>
                                    </param>
                                    )
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>this</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </catch>
                            </try>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>compareTo</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Cut</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>
                                                        <name>Comparable</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>?</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>o</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>(<name>o</name> == <name>this</name>) ? 0 : -1
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return <expr>"-\u221e"</expr>;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>Object</name>
                        </type>
                        <name>readResolve</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>INSTANCE</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    }
                </block>
            </class>

            <comment type="block">/*
                * The implementation neither produces nor consumes any non-null instance of
                * type C, so casting the type parameter is safe.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("unchecked")</argument_list>
                    </annotation>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>C</name>
                            <extends>extends
                                <name>Comparable</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Cut</name>
                        <argument_list>&lt;
                            <argument>
                                <name>C</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>aboveAll</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>Cut</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>C</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            )
                            <name><name>AboveAll</name>.
                                <name>INSTANCE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <class>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>AboveAll</name>
                <super>
                    <extends>extends
                        <name>
                            <name>Cut</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>Comparable</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>AboveAll</name>
                            </type>
                            <name>INSTANCE</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>AboveAll</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <specifier>private</specifier>
                        <name>AboveAll</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>null</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>
                                <name>Comparable</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>?</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>endpoint</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>IllegalStateException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"range unbounded on this side"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>boolean</name>
                        </type>
                        <name>isLessThan</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Comparable</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return <expr>false</expr>;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>BoundType</name>
                        </type>
                        <name>typeAsLowerBound</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>AssertionError</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"this statement should be unreachable"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>BoundType</name>
                        </type>
                        <name>typeAsUpperBound</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>IllegalStateException</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>
                                <name>Cut</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>
                                            <name>Comparable</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>withLowerBoundType</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>BoundType</name>
                                    </type>
                                    <name>boundType</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>DiscreteDomain</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>
                                                        <name>Comparable</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>?</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>domain</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>AssertionError</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"this statement should be unreachable"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>
                                <name>Cut</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>
                                            <name>Comparable</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>withUpperBoundType</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>BoundType</name>
                                    </type>
                                    <name>boundType</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>DiscreteDomain</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>
                                                        <name>Comparable</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>?</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>domain</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>IllegalStateException</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>void</name>
                        </type>
                        <name>describeAsLowerBound</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>StringBuilder</name>
                                    </type>
                                    <name>sb</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>AssertionError</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>void</name>
                        </type>
                        <name>describeAsUpperBound</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>StringBuilder</name>
                                    </type>
                                    <name>sb</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>sb</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"+\u221e)"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>
                                <name>Comparable</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>?</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>leastValueAbove</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>DiscreteDomain</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>
                                                        <name>Comparable</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>?</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>domain</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>AssertionError</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>
                                <name>Comparable</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>?</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>greatestValueBelow</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>DiscreteDomain</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>
                                                        <name>Comparable</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>?</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>domain</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>domain</name>.
                                            <name>maxValue</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>compareTo</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Cut</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>
                                                        <name>Comparable</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>?</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>o</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>(<name>o</name> == <name>this</name>) ? 0 : 1
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return <expr>"+\u221e"</expr>;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>Object</name>
                        </type>
                        <name>readResolve</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>INSTANCE</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    }
                </block>
            </class>

            <function>
                <type>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>C</name>
                            <extends>extends
                                <name>Comparable</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Cut</name>
                        <argument_list>&lt;
                            <argument>
                                <name>C</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>belowValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>C</name>
                            </type>
                            <name>endpoint</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>BelowValue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>C</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>endpoint</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <class>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class
                <name>
                    <name>BelowValue</name>
                    <argument_list>&lt;
                        <argument>
                            <name>C</name>
                            <extends>extends
                                <name>Comparable</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <super>
                    <extends>extends
                        <name>
                            <name>Cut</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>C</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </super>
                <block>{
                    <constructor>
                        <name>BelowValue</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>C</name>
                                    </type>
                                    <name>endpoint</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>checkNotNull</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>endpoint</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>boolean</name>
                        </type>
                        <name>isLessThan</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>C</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>Range</name>.
                                            <name>compareOrThrow</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>endpoint</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>value</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    &lt;= 0
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>BoundType</name>
                        </type>
                        <name>typeAsLowerBound</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>BoundType</name>.
                                        <name>CLOSED</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>BoundType</name>
                        </type>
                        <name>typeAsUpperBound</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>BoundType</name>.
                                        <name>OPEN</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>
                                <name>Cut</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>C</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>withLowerBoundType</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>BoundType</name>
                                    </type>
                                    <name>boundType</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>DiscreteDomain</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>C</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>domain</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <switch>switch
                                <condition>(
                                    <expr>
                                        <name>boundType</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <case>case
                                        <expr>
                                            <name>CLOSED</name>
                                        </expr>
                                        :
                                        <return>return
                                            <expr>
                                                <name>this</name>
                                            </expr>
                                            ;
                                        </return>
                                    </case>
                                    <case>case
                                        <expr>
                                            <name>OPEN</name>
                                        </expr>
                                        :
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <annotation>@
                                                        <name>Nullable</name>
                                                    </annotation>
                                                    <name>C</name>
                                                </type>
                                                <name>previous</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>domain</name>.
                                                                <name>previous</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>endpoint</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <return>return
                                            <expr>(<name>previous</name> == <name>null</name>) ?
                                                <name><name>Cut</name>.
                                                    <name>
                                                        <name/>
                                                    </name>
                                                </name>
                                                &lt;<name>C</name>&gt;
                                                <call>
                                                    <name>belowAll</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                : new
                                                <call>
                                                    <name>
                                                        <name>AboveValue</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>C</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>previous</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                    </case>
                                    <default>default:
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>AssertionError</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                    </default>
                                    }
                                </block>
                            </switch>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>
                                <name>Cut</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>C</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>withUpperBoundType</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>BoundType</name>
                                    </type>
                                    <name>boundType</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>DiscreteDomain</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>C</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>domain</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <switch>switch
                                <condition>(
                                    <expr>
                                        <name>boundType</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <case>case
                                        <expr>
                                            <name>CLOSED</name>
                                        </expr>
                                        :
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <annotation>@
                                                        <name>Nullable</name>
                                                    </annotation>
                                                    <name>C</name>
                                                </type>
                                                <name>previous</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>domain</name>.
                                                                <name>previous</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>endpoint</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <return>return
                                            <expr>(<name>previous</name> == <name>null</name>) ?
                                                <name><name>Cut</name>.
                                                    <name>
                                                        <name/>
                                                    </name>
                                                </name>
                                                &lt;<name>C</name>&gt;
                                                <call>
                                                    <name>aboveAll</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                : new
                                                <call>
                                                    <name>
                                                        <name>AboveValue</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>C</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>previous</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                    </case>
                                    <case>case
                                        <expr>
                                            <name>OPEN</name>
                                        </expr>
                                        :
                                        <return>return
                                            <expr>
                                                <name>this</name>
                                            </expr>
                                            ;
                                        </return>
                                    </case>
                                    <default>default:
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>AssertionError</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                    </default>
                                    }
                                </block>
                            </switch>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>void</name>
                        </type>
                        <name>describeAsLowerBound</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>StringBuilder</name>
                                    </type>
                                    <name>sb</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>sb</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>'['</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>endpoint</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>void</name>
                        </type>
                        <name>describeAsUpperBound</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>StringBuilder</name>
                                    </type>
                                    <name>sb</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>sb</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>endpoint</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>')'</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>C</name>
                        </type>
                        <name>leastValueAbove</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>DiscreteDomain</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>C</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>domain</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>endpoint</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>C</name>
                        </type>
                        <name>greatestValueBelow</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>DiscreteDomain</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>C</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>domain</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>domain</name>.
                                            <name>previous</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>endpoint</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>hashCode</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>endpoint</name>.
                                            <name>hashCode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>"\\" + <name>endpoint</name> + "/"
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    }
                </block>
            </class>

            <function>
                <type>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>C</name>
                            <extends>extends
                                <name>Comparable</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Cut</name>
                        <argument_list>&lt;
                            <argument>
                                <name>C</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>aboveValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>C</name>
                            </type>
                            <name>endpoint</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>AboveValue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>C</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>endpoint</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <class>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class
                <name>
                    <name>AboveValue</name>
                    <argument_list>&lt;
                        <argument>
                            <name>C</name>
                            <extends>extends
                                <name>Comparable</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <super>
                    <extends>extends
                        <name>
                            <name>Cut</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>C</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </super>
                <block>{
                    <constructor>
                        <name>AboveValue</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>C</name>
                                    </type>
                                    <name>endpoint</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>checkNotNull</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>endpoint</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>boolean</name>
                        </type>
                        <name>isLessThan</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>C</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>Range</name>.
                                            <name>compareOrThrow</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>endpoint</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>value</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    &lt; 0
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>BoundType</name>
                        </type>
                        <name>typeAsLowerBound</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>BoundType</name>.
                                        <name>OPEN</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>BoundType</name>
                        </type>
                        <name>typeAsUpperBound</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>BoundType</name>.
                                        <name>CLOSED</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>
                                <name>Cut</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>C</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>withLowerBoundType</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>BoundType</name>
                                    </type>
                                    <name>boundType</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>DiscreteDomain</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>C</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>domain</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <switch>switch
                                <condition>(
                                    <expr>
                                        <name>boundType</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <case>case
                                        <expr>
                                            <name>OPEN</name>
                                        </expr>
                                        :
                                        <return>return
                                            <expr>
                                                <name>this</name>
                                            </expr>
                                            ;
                                        </return>
                                    </case>
                                    <case>case
                                        <expr>
                                            <name>CLOSED</name>
                                        </expr>
                                        :
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <annotation>@
                                                        <name>Nullable</name>
                                                    </annotation>
                                                    <name>C</name>
                                                </type>
                                                <name>next</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>domain</name>.
                                                                <name>next</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>endpoint</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <return>return
                                            <expr>(<name>next</name> == <name>null</name>) ?
                                                <name><name>Cut</name>.
                                                    <name>
                                                        <name/>
                                                    </name>
                                                </name>
                                                &lt;<name>C</name>&gt;
                                                <call>
                                                    <name>belowAll</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                :
                                                <call>
                                                    <name>belowValue</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>next</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                    </case>
                                    <default>default:
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>AssertionError</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                    </default>
                                    }
                                </block>
                            </switch>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>
                                <name>Cut</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>C</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>withUpperBoundType</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>BoundType</name>
                                    </type>
                                    <name>boundType</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>DiscreteDomain</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>C</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>domain</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <switch>switch
                                <condition>(
                                    <expr>
                                        <name>boundType</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <case>case
                                        <expr>
                                            <name>OPEN</name>
                                        </expr>
                                        :
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <annotation>@
                                                        <name>Nullable</name>
                                                    </annotation>
                                                    <name>C</name>
                                                </type>
                                                <name>next</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>domain</name>.
                                                                <name>next</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>endpoint</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <return>return
                                            <expr>(<name>next</name> == <name>null</name>) ?
                                                <name><name>Cut</name>.
                                                    <name>
                                                        <name/>
                                                    </name>
                                                </name>
                                                &lt;<name>C</name>&gt;
                                                <call>
                                                    <name>aboveAll</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                :
                                                <call>
                                                    <name>belowValue</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>next</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                    </case>
                                    <case>case
                                        <expr>
                                            <name>CLOSED</name>
                                        </expr>
                                        :
                                        <return>return
                                            <expr>
                                                <name>this</name>
                                            </expr>
                                            ;
                                        </return>
                                    </case>
                                    <default>default:
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>AssertionError</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                    </default>
                                    }
                                </block>
                            </switch>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>void</name>
                        </type>
                        <name>describeAsLowerBound</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>StringBuilder</name>
                                    </type>
                                    <name>sb</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>sb</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>'('</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>endpoint</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>void</name>
                        </type>
                        <name>describeAsUpperBound</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>StringBuilder</name>
                                    </type>
                                    <name>sb</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>sb</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>endpoint</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>']'</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>C</name>
                        </type>
                        <name>leastValueAbove</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>DiscreteDomain</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>C</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>domain</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>domain</name>.
                                            <name>next</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>endpoint</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>C</name>
                        </type>
                        <name>greatestValueBelow</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>DiscreteDomain</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>C</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>domain</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>endpoint</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>
                                <name>Cut</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>C</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>canonical</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>DiscreteDomain</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>C</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>domain</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>C</name>
                                    </type>
                                    <name>next</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>leastValueAbove</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>domain</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <return>return
                                <expr>(<name>next</name> != <name>null</name>) ?
                                    <call>
                                        <name>belowValue</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>next</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    :
                                    <name><name>Cut</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    &lt;<name>C</name>&gt;
                                    <call>
                                        <name>aboveAll</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>hashCode</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>~
                                    <call>
                                        <name><name>endpoint</name>.
                                            <name>hashCode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>"/" + <name>endpoint</name> + "\\"
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    }
                </block>
            </class>
            }
        </block>
    </class>
</unit>
