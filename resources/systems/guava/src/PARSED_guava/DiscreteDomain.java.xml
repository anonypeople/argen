<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\DiscreteDomain.java">
    <comment type="block">/*
        * Copyright (C) 2009 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>math</name>.
            <name>BigInteger</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>NoSuchElementException</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A descriptor for a &lt;i&gt;discrete&lt;/i&gt; {@code Comparable} domain such as all
        * {@link Integer} instances. A discrete domain is one that supports the three basic
        * operations: {@link #next}, {@link #previous} and {@link #distance}, according
        * to their specifications. The methods {@link #minValue} and {@link #maxValue}
        * should also be overridden for bounded types.
        *
        * &lt;p&gt;A discrete domain always represents the &lt;i&gt;entire&lt;/i&gt; set of values of its
        * type; it cannot represent partial domains such as "prime integers" or
        * "strings of length 5."
        *
        * &lt;p&gt;See the Guava User Guide section on &lt;a href=
        * "https://github.com/google/guava/wiki/RangesExplained#discrete-domains"&gt;
        * {@code DiscreteDomain}&lt;/a&gt;.
        *
        * @author Kevin Bourrillion
        * @since 10.0
        */
    </comment>
    <class>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <annotation>@
            <name>Beta</name>
        </annotation>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class
        <name>
            <name>DiscreteDomain</name>
            <argument_list>&lt;
                <argument>
                    <name>C</name>
                    <extends>extends
                        <name>Comparable</name>
                    </extends>
                </argument>
                &gt;
            </argument_list>
        </name>
        <block>{

            <comment type="javadoc">/**
                * Returns the discrete domain for values of type {@code Integer}.
                *
                * @since 14.0 (since 10.0 as {@code DiscreteDomains.integers()})
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>
                        <name>DiscreteDomain</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Integer</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>integers</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>IntegerDomain</name>.
                                <name>INSTANCE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <class>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>IntegerDomain</name>
                <super>
                    <extends>extends
                        <name>
                            <name>DiscreteDomain</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Integer</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                    <implements>implements
                        <name>Serializable</name>
                    </implements>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>IntegerDomain</name>
                            </type>
                            <name>INSTANCE</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>IntegerDomain</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>Integer</name>
                        </type>
                        <name>next</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Integer</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>i</name> =
                                    <init>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <return>return
                                <expr>(<name>i</name> ==
                                    <name><name>Integer</name>.
                                        <name>MAX_VALUE</name>
                                    </name>
                                    ) ? <name>null</name> : <name>i</name> + 1
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>Integer</name>
                        </type>
                        <name>previous</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Integer</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>i</name> =
                                    <init>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <return>return
                                <expr>(<name>i</name> ==
                                    <name><name>Integer</name>.
                                        <name>MIN_VALUE</name>
                                    </name>
                                    ) ? <name>null</name> : <name>i</name> - 1
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>long</name>
                        </type>
                        <name>distance</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Integer</name>
                                    </type>
                                    <name>start</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Integer</name>
                                    </type>
                                    <name>end</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>(<name>long</name>) <name>end</name> -
                                    <name>start</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>Integer</name>
                        </type>
                        <name>minValue</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>Integer</name>.
                                        <name>MIN_VALUE</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>Integer</name>
                        </type>
                        <name>maxValue</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>Integer</name>.
                                        <name>MAX_VALUE</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>Object</name>
                        </type>
                        <name>readResolve</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>INSTANCE</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return <expr>"DiscreteDomain.integers()"</expr>;
                            </return>
                            }
                        </block>
                    </function>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * Returns the discrete domain for values of type {@code Long}.
                *
                * @since 14.0 (since 10.0 as {@code DiscreteDomains.longs()})
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>
                        <name>DiscreteDomain</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Long</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>longs</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>LongDomain</name>.
                                <name>INSTANCE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <class>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>LongDomain</name>
                <super>
                    <extends>extends
                        <name>
                            <name>DiscreteDomain</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Long</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                    <implements>implements
                        <name>Serializable</name>
                    </implements>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>LongDomain</name>
                            </type>
                            <name>INSTANCE</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>LongDomain</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>Long</name>
                        </type>
                        <name>next</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Long</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>l</name> =
                                    <init>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <return>return
                                <expr>(<name>l</name> ==
                                    <name><name>Long</name>.
                                        <name>MAX_VALUE</name>
                                    </name>
                                    ) ? <name>null</name> : <name>l</name> + 1
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>Long</name>
                        </type>
                        <name>previous</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Long</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>l</name> =
                                    <init>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <return>return
                                <expr>(<name>l</name> ==
                                    <name><name>Long</name>.
                                        <name>MIN_VALUE</name>
                                    </name>
                                    ) ? <name>null</name> : <name>l</name> - 1
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>long</name>
                        </type>
                        <name>distance</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Long</name>
                                    </type>
                                    <name>start</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Long</name>
                                    </type>
                                    <name>end</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>result</name> =
                                    <init>
                                        <expr>
                                            <name>end</name>
                                            -
                                            <name>start</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>end</name>
                                        &gt; <name>start</name> &amp;&amp; <name>result</name> &lt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// overflow</comment>
                                        <return>return
                                            <expr>
                                                <name><name>Long</name>.
                                                    <name>MAX_VALUE</name>
                                                </name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>end</name>
                                        &lt; <name>start</name> &amp;&amp; <name>result</name> &gt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// underflow</comment>
                                        <return>return
                                            <expr>
                                                <name><name>Long</name>.
                                                    <name>MIN_VALUE</name>
                                                </name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return
                                <expr>
                                    <name>result</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>Long</name>
                        </type>
                        <name>minValue</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>Long</name>.
                                        <name>MIN_VALUE</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>Long</name>
                        </type>
                        <name>maxValue</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>Long</name>.
                                        <name>MAX_VALUE</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>Object</name>
                        </type>
                        <name>readResolve</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>INSTANCE</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return <expr>"DiscreteDomain.longs()"</expr>;
                            </return>
                            }
                        </block>
                    </function>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * Returns the discrete domain for values of type {@code BigInteger}.
                *
                * @since 15.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>
                        <name>DiscreteDomain</name>
                        <argument_list>&lt;
                            <argument>
                                <name>BigInteger</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>bigIntegers</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>BigIntegerDomain</name>.
                                <name>INSTANCE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <class>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>BigIntegerDomain</name>
                <super>
                    <extends>extends
                        <name>
                            <name>DiscreteDomain</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>BigInteger</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                    <implements>implements
                        <name>Serializable</name>
                    </implements>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>BigIntegerDomain</name>
                            </type>
                            <name>INSTANCE</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>BigIntegerDomain</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>BigInteger</name>
                            </type>
                            <name>MIN_LONG</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>BigInteger</name>.
                                            <name>valueOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Long</name>.
                                                        <name>MIN_VALUE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>BigInteger</name>
                            </type>
                            <name>MAX_LONG</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>BigInteger</name>.
                                            <name>valueOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Long</name>.
                                                        <name>MAX_VALUE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>BigInteger</name>
                        </type>
                        <name>next</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>BigInteger</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>value</name>.
                                            <name>add</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>BigInteger</name>.
                                                        <name>ONE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>BigInteger</name>
                        </type>
                        <name>previous</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>BigInteger</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>value</name>.
                                            <name>subtract</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>BigInteger</name>.
                                                        <name>ONE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>long</name>
                        </type>
                        <name>distance</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>BigInteger</name>
                                    </type>
                                    <name>start</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>BigInteger</name>
                                    </type>
                                    <name>end</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>end</name>.
                                            <name>subtract</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>start</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>max</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>MIN_LONG</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>min</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>MAX_LONG</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>longValue</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>Object</name>
                        </type>
                        <name>readResolve</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>INSTANCE</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return <expr>"DiscreteDomain.bigIntegers()"</expr>;
                            </return>
                            }
                        </block>
                    </function>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    }
                </block>
            </class>

            <comment type="javadoc">/** Constructor for use by subclasses. */</comment>
            <constructor>
                <specifier>protected</specifier>
                <name>DiscreteDomain</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="javadoc">/**
                * Returns the unique least value of type {@code C} that is greater than
                * {@code value}, or {@code null} if none exists. Inverse operation to {@link
                * #previous}.
                *
                * @param value any value of type {@code C}
                * @return the least value greater than {@code value}, or {@code null} if
                * {@code value} is {@code maxValue()}
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>C</name>
                </type>
                <name>next</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>C</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the unique greatest value of type {@code C} that is less than
                * {@code value}, or {@code null} if none exists. Inverse operation to {@link
                * #next}.
                *
                * @param value any value of type {@code C}
                * @return the greatest value less than {@code value}, or {@code null} if
                * {@code value} is {@code minValue()}
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>C</name>
                </type>
                <name>previous</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>C</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a signed value indicating how many nested invocations of {@link
                * #next} (if positive) or {@link #previous} (if negative) are needed to reach
                * {@code end} starting from {@code start}. For example, if {@code end =
                * next(next(next(start)))}, then {@code distance(start, end) == 3} and {@code
                * distance(end, start) == -3}. As well, {@code distance(a, a)} is always
                * zero.
                *
                * &lt;p&gt;Note that this function is necessarily well-defined for any discrete
                * type.
                *
                * @return the distance as described above, or {@link Long#MIN_VALUE} or
                * {@link Long#MAX_VALUE} if the distance is too small or too large,
                * respectively.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>long</name>
                </type>
                <name>distance</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>C</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>C</name>
                            </type>
                            <name>end</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the minimum value of type {@code C}, if it has one. The minimum
                * value is the unique value for which {@link Comparable#compareTo(Object)}
                * never returns a positive value for any input of type {@code C}.
                *
                * &lt;p&gt;The default implementation throws {@code NoSuchElementException}.
                *
                * @return the minimum value of type {@code C}; never null
                * @throws NoSuchElementException if the type has no (practical) minimum
                * value; for example, {@link java.math.BigInteger}
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>C</name>
                </type>
                <name>minValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>NoSuchElementException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the maximum value of type {@code C}, if it has one. The maximum
                * value is the unique value for which {@link Comparable#compareTo(Object)}
                * never returns a negative value for any input of type {@code C}.
                *
                * &lt;p&gt;The default implementation throws {@code NoSuchElementException}.
                *
                * @return the maximum value of type {@code C}; never null
                * @throws NoSuchElementException if the type has no (practical) maximum
                * value; for example, {@link java.math.BigInteger}
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>C</name>
                </type>
                <name>maxValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>NoSuchElementException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
