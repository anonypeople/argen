<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\math\DoubleMath.java">
    <comment type="block">/*
        * Copyright (C) 2011 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>math</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkArgument</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>math</name>.<name>DoubleUtils</name>.
            <name>IMPLICIT_BIT</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>math</name>.<name>DoubleUtils</name>.
            <name>SIGNIFICAND_BITS</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>math</name>.<name>DoubleUtils</name>.
            <name>getSignificand</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>math</name>.<name>DoubleUtils</name>.
            <name>isFinite</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>math</name>.<name>DoubleUtils</name>.
            <name>isNormal</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>math</name>.<name>DoubleUtils</name>.
            <name>scaleNormalize</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>math</name>.<name>MathPreconditions</name>.
            <name>checkInRange</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>math</name>.<name>MathPreconditions</name>.
            <name>checkNonNegative</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>math</name>.<name>MathPreconditions</name>.
            <name>checkRoundingUnnecessary</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>lang</name>.<name>Math</name>.
            <name>abs</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>lang</name>.<name>Math</name>.
            <name>copySign</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>lang</name>.<name>Math</name>.
            <name>getExponent</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>lang</name>.<name>Math</name>.
            <name>log</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>lang</name>.<name>Math</name>.
            <name>rint</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtIncompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>VisibleForTesting</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>primitives</name>.
            <name>Booleans</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>math</name>.
            <name>BigInteger</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>math</name>.
            <name>RoundingMode</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A class for arithmetic on doubles that is not covered by {@link java.lang.Math}.
        *
        * @author Louis Wasserman
        * @since 11.0
        */
    </comment>
    <class>
        <annotation>@
            <name>GwtCompatible</name>
            <argument_list>(emulated = true)</argument_list>
        </annotation>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>DoubleMath</name>
        <block>{
            <comment type="block">/*
                * This method returns a value y such that rounding y DOWN (towards zero) gives the same result
                * as rounding x according to the specified mode.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("#isMathematicalInteger, com.google.common.math.DoubleUtils")</argument_list>
                    </annotation>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>roundIntermediate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>RoundingMode</name>
                            </type>
                            <name>mode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name>isFinite</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>x</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ArithmeticException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"input is infinite or NaN"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>mode</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name>UNNECESSARY</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>checkRoundingUnnecessary</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name>isMathematicalInteger</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>x</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>x</name>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>FLOOR</name>
                                </expr>
                                :
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>x</name>
                                            &gt;= 0.0 ||
                                            <call>
                                                <name>isMathematicalInteger</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>x</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>x</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>x</name>
                                                    - 1.0
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </else>
                                </if>

                            </case>
                            <case>case
                                <expr>
                                    <name>CEILING</name>
                                </expr>
                                :
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>x</name>
                                            &lt;= 0.0 ||
                                            <call>
                                                <name>isMathematicalInteger</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>x</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>x</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>x</name>
                                                    + 1.0
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </else>
                                </if>

                            </case>
                            <case>case
                                <expr>
                                    <name>DOWN</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <name>x</name>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>UP</name>
                                </expr>
                                :
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name>isMathematicalInteger</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>x</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>x</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>x</name>
                                                    +
                                                    <call>
                                                        <name><name>Math</name>.
                                                            <name>copySign</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>1.0</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>x</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </else>
                                </if>

                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_EVEN</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <call>
                                            <name>rint</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>x</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_UP</name>
                                </expr>
                                :
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>double</name>
                                            </type>
                                            <name>z</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name>rint</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>x</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name>abs</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>x</name>
                                                                -
                                                                <name>z</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                == 0.5
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <name>x</name>
                                                        +
                                                        <call>
                                                            <name>copySign</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>0.5</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>x</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <name>z</name>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                    }
                                </block>

                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_DOWN</name>
                                </expr>
                                :
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>double</name>
                                            </type>
                                            <name>z</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name>rint</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>x</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name>abs</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>x</name>
                                                                -
                                                                <name>z</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                == 0.5
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <name>x</name>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <name>z</name>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                    }
                                </block>

                            </case>
                            <default>default:
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>AssertionError</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the {@code int} value that is equal to {@code x} rounded with the specified rounding
                * mode, if possible.
                *
                * @throws ArithmeticException if
                * &lt;ul&gt;
                * &lt;li&gt;{@code x} is infinite or NaN
                * &lt;li&gt;{@code x}, after being rounded to a mathematical integer using the specified
                * rounding mode, is either less than {@code Integer.MIN_VALUE} or greater than {@code
                * Integer.MAX_VALUE}
                * &lt;li&gt;{@code x} is not a mathematical integer and {@code mode} is
                * {@link RoundingMode#UNNECESSARY}
                * &lt;/ul&gt;
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("#roundIntermediate")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>roundToInt</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>RoundingMode</name>
                            </type>
                            <name>mode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>z</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>roundIntermediate</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>x</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>mode</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkInRange</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>z</name>
                                            &gt; <name>MIN_INT_AS_DOUBLE</name> - 1.0 &amp; <name>z</name> &lt; <name>
                                            MAX_INT_AS_DOUBLE
                                        </name> + 1.0
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>(<name>int</name>)
                            <name>z</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>double</name>
                    </type>
                    <name>MIN_INT_AS_DOUBLE</name> =
                    <init>
                        <expr>-0x1p31</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>double</name>
                    </type>
                    <name>MAX_INT_AS_DOUBLE</name> =
                    <init>
                        <expr>0x1p31 - 1.0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Returns the {@code long} value that is equal to {@code x} rounded with the specified rounding
                * mode, if possible.
                *
                * @throws ArithmeticException if
                * &lt;ul&gt;
                * &lt;li&gt;{@code x} is infinite or NaN
                * &lt;li&gt;{@code x}, after being rounded to a mathematical integer using the specified
                * rounding mode, is either less than {@code Long.MIN_VALUE} or greater than {@code
                * Long.MAX_VALUE}
                * &lt;li&gt;{@code x} is not a mathematical integer and {@code mode} is
                * {@link RoundingMode#UNNECESSARY}
                * &lt;/ul&gt;
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("#roundIntermediate")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>roundToLong</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>RoundingMode</name>
                            </type>
                            <name>mode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>z</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>roundIntermediate</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>x</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>mode</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkInRange</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>MIN_LONG_AS_DOUBLE</name>
                                            - <name>z</name> &lt; 1.0 &amp; <name>z</name> &lt;
                                            <name>MAX_LONG_AS_DOUBLE_PLUS_ONE</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>(<name>long</name>)
                            <name>z</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>double</name>
                    </type>
                    <name>MIN_LONG_AS_DOUBLE</name> =
                    <init>
                        <expr>-0x1p63</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="block">/*
                * We cannot store Long.MAX_VALUE as a double without losing precision. Instead, we store
                * Long.MAX_VALUE + 1 == -Long.MIN_VALUE, and then offset all comparisons by 1.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>double</name>
                    </type>
                    <name>MAX_LONG_AS_DOUBLE_PLUS_ONE</name> =
                    <init>
                        <expr>0x1p63</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Returns the {@code BigInteger} value that is equal to {@code x} rounded with the specified
                * rounding mode, if possible.
                *
                * @throws ArithmeticException if
                * &lt;ul&gt;
                * &lt;li&gt;{@code x} is infinite or NaN
                * &lt;li&gt;{@code x} is not a mathematical integer and {@code mode} is
                * {@link RoundingMode#UNNECESSARY}
                * &lt;/ul&gt;
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("#roundIntermediate, java.lang.Math.getExponent, "
                            + "com.google.common.math.DoubleUtils")
                        </argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>BigInteger</name>
                </type>
                <name>roundToBigInteger</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>RoundingMode</name>
                            </type>
                            <name>mode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>x</name>
                            =
                            <call>
                                <name>roundIntermediate</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>x</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>mode</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>MIN_LONG_AS_DOUBLE</name>
                                - <name>x</name> &lt; 1.0 &amp; <name>x</name> &lt;
                                <name>MAX_LONG_AS_DOUBLE_PLUS_ONE</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>BigInteger</name>.
                                                <name>valueOf</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>(<name>long</name>)
                                                        <name>x</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>exponent</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getExponent</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>x</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>significand</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getSignificand</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>x</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>BigInteger</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>BigInteger</name>.
                                            <name>valueOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>significand</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>shiftLeft</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>exponent</name>
                                                    -
                                                    <name>SIGNIFICAND_BITS</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>(<name>x</name> &lt; 0) ?
                            <call>
                                <name><name>result</name>.
                                    <name>negate</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            :
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns {@code true} if {@code x} is exactly equal to {@code 2^k} for some finite integer
                * {@code k}.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("com.google.common.math.DoubleUtils")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isPowerOfTwo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>x</name>
                            &gt; 0.0 &amp;&amp;
                            <call>
                                <name>isFinite</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>x</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &amp;&amp;
                            <call>
                                <name><name>LongMath</name>.
                                    <name>isPowerOfTwo</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getSignificand</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>x</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the base 2 logarithm of a double value.
                *
                * &lt;p&gt;Special cases:
                * &lt;ul&gt;
                * &lt;li&gt;If {@code x} is NaN or less than zero, the result is NaN.
                * &lt;li&gt;If {@code x} is positive infinity, the result is positive infinity.
                * &lt;li&gt;If {@code x} is positive or negative zero, the result is negative infinity.
                * &lt;/ul&gt;
                *
                * &lt;p&gt;The computed result is within 1 ulp of the exact result.
                *
                * &lt;p&gt;If the result of this method will be immediately rounded to an {@code int},
                * {@link #log2(double, RoundingMode)} is faster.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>log2</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>log</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>x</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            /
                            <name>LN_2</name>
                        </expr>
                        ;
                    </return>
                    <comment type="line">// surprisingly within 1 ulp according to tests</comment>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>double</name>
                    </type>
                    <name>LN_2</name> =
                    <init>
                        <expr>
                            <call>
                                <name>log</name>
                                <argument_list>(
                                    <argument>
                                        <expr>2</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Returns the base 2 logarithm of a double value, rounded with the specified rounding mode to an
                * {@code int}.
                *
                * &lt;p&gt;Regardless of the rounding mode, this is faster than {@code (int) log2(x)}.
                *
                * @throws IllegalArgumentException if {@code x &lt;= 0.0}, {@code x} is NaN, or {@code x} is
                * infinite
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("java.lang.Math.getExponent, com.google.common.math.DoubleUtils")
                        </argument_list>
                    </annotation>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("fallthrough")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>log2</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>RoundingMode</name>
                            </type>
                            <name>mode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>x</name>
                                            &gt; 0.0 &amp;&amp;
                                            <call>
                                                <name>isFinite</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>x</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"x must be positive and finite"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>exponent</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getExponent</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>x</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name>isNormal</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>x</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>log2</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>x</name>
                                                        *
                                                        <name>IMPLICIT_BIT</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>mode</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        -
                                        <name>SIGNIFICAND_BITS</name>
                                    </expr>
                                    ;
                                </return>
                                <comment type="line">// Do the calculation on a normal value.</comment>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// x is positive, finite, and normal</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>increment</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>mode</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name>UNNECESSARY</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>checkRoundingUnnecessary</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name>isPowerOfTwo</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>x</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// fall through</comment>
                            </case>
                            <case>case
                                <expr>
                                    <name>FLOOR</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <name>increment</name>
                                        = false
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case
                                <expr>
                                    <name>CEILING</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <name>increment</name>
                                        = !
                                        <call>
                                            <name>isPowerOfTwo</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>x</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case
                                <expr>
                                    <name>DOWN</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <name>increment</name>
                                        = <name>exponent</name> &lt; 0 &amp; !
                                        <call>
                                            <name>isPowerOfTwo</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>x</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case
                                <expr>
                                    <name>UP</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <name>increment</name>
                                        = <name>exponent</name> &gt;= 0 &amp; !
                                        <call>
                                            <name>isPowerOfTwo</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>x</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_DOWN</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_EVEN</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_UP</name>
                                </expr>
                                :
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>double</name>
                                        </type>
                                        <name>xScaled</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>scaleNormalize</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>x</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <comment type="line">// sqrt(2) is irrational, and the spec is relative to the "exact
                                    numerical result,"
                                </comment>
                                <comment type="line">// so log2(x) is never exactly exponent + 0.5.</comment>
                                <expr_stmt>
                                    <expr>
                                        <name>increment</name>
                                        = (<name>xScaled</name> * <name>xScaled</name>) &gt; 2.0
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <default>default:
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>AssertionError</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                            </default>
                            }
                        </block>
                    </switch>
                    <return>return
                        <expr>
                            <name>increment</name>
                            ? <name>exponent</name> + 1 :
                            <name>exponent</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns {@code true} if {@code x} represents a mathematical integer.
                *
                * &lt;p&gt;This is equivalent to, but not necessarily implemented as, the expression {@code
                * !Double.isNaN(x) &amp;&amp; !Double.isInfinite(x) &amp;&amp; x == Math.rint(x)}.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("java.lang.Math.getExponent, com.google.common.math.DoubleUtils")
                        </argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isMathematicalInteger</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>isFinite</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>x</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &amp;&amp; (<name>x</name> == 0.0 ||
                            <name>SIGNIFICAND_BITS</name>
                            -
                            <call>
                                <name><name>Long</name>.
                                    <name>numberOfTrailingZeros</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getSignificand</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>x</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &lt;=
                            <call>
                                <name>getExponent</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>x</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns {@code n!}, that is, the product of the first {@code n} positive
                * integers, {@code 1} if {@code n == 0}, or {@code n!}, or
                * {@link Double#POSITIVE_INFINITY} if {@code n! &gt; Double.MAX_VALUE}.
                *
                * &lt;p&gt;The result is within 1 ulp of the true value.
                *
                * @throws IllegalArgumentException if {@code n &lt; 0}
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>factorial</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>n</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNonNegative</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"n"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>n</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>n</name>
                                &gt;
                                <name>MAX_FACTORIAL</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>Double</name>.
                                            <name>POSITIVE_INFINITY</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <comment type="line">// Multiplying the last (n &amp; 0xf) values into their own
                                    accumulator gives a more accurate
                                </comment>
                                <comment type="line">// result than multiplying by everySixteenthFactorial[n &gt;&gt; 4]
                                    directly.
                                </comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>double</name>
                                        </type>
                                        <name>accum</name> =
                                        <init>
                                            <expr>1.0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>1 + (<name>n</name> &amp; ~0xf)
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;=
                                            <name>n</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr><name>i</name>++
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>accum</name>
                                                *=
                                                <name>i</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                <return>return
                                    <expr>
                                        <name>accum</name>
                                        *
                                        <name>
                                            <name>everySixteenthFactorial</name>
                                            <index>[
                                                <expr>
                                                    <name>n</name>
                                                    &gt;&gt; 4
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>VisibleForTesting</name>
                        </annotation>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>MAX_FACTORIAL</name> =
                    <init>
                        <expr>170</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>VisibleForTesting</name>
                        </annotation>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>double</name>
                        <index>[]</index>
                    </type>
                    <name>everySixteenthFactorial</name> =
                    <init>
                        <expr>
                            <block>{
                                <expr>0x1.0p0</expr>,
                                <expr>0x1.30777758p44</expr>,
                                <expr>0x1.956ad0aae33a4p117</expr>,
                                <expr>0x1.ee69a78d72cb6p202</expr>,
                                <expr>0x1.fe478ee34844ap295</expr>,
                                <expr>0x1.c619094edabffp394</expr>,
                                <expr>0x1.3638dd7bd6347p498</expr>,
                                <expr>0x1.7cac197cfe503p605</expr>,
                                <expr>0x1.1e5dfc140e1e5p716</expr>,
                                <expr>0x1.8ce85fadb707ep829</expr>,
                                <expr>0x1.95d5f3d928edep945</expr>}
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Returns {@code true} if {@code a} and {@code b} are within {@code tolerance} of each other.
                *
                * &lt;p&gt;Technically speaking, this is equivalent to
                * {@code Math.abs(a - b) &lt;= tolerance || Double.valueOf(a).equals(Double.valueOf(b))}.
                *
                * &lt;p&gt;Notable special cases include:
                * &lt;ul&gt;
                * &lt;li&gt;All NaNs are fuzzily equal.
                * &lt;li&gt;If {@code a == b}, then {@code a} and {@code b} are always fuzzily equal.
                * &lt;li&gt;Positive and negative zero are always fuzzily equal.
                * &lt;li&gt;If {@code tolerance} is zero, and neither {@code a} nor {@code b} is NaN, then
                * {@code a} and {@code b} are fuzzily equal if and only if {@code a == b}.
                * &lt;li&gt;With {@link Double#POSITIVE_INFINITY} tolerance, all non-NaN values are fuzzily equal.
                * &lt;li&gt;With finite tolerance, {@code Double.POSITIVE_INFINITY} and {@code
                * Double.NEGATIVE_INFINITY} are fuzzily equal only to themselves.
                * &lt;/li&gt;
                *
                * &lt;p&gt;This is reflexive and symmetric, but &lt;em&gt;not&lt;/em&gt; transitive, so it is &lt;em&gt;not&lt;/em&gt;
                an
                * equivalence relation and &lt;em&gt;not&lt;/em&gt; suitable for use in {@link Object#equals}
                * implementations.
                *
                * @throws IllegalArgumentException if {@code tolerance} is {@code &lt; 0} or NaN
                * @since 13.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>fuzzyEquals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>a</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>tolerance</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>MathPreconditions</name>.
                                    <name>checkNonNegative</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"tolerance"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>tolerance</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Math</name>.
                                    <name>copySign</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>a</name>
                                            -
                                            <name>b</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>1.0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &lt;=
                            <name>tolerance</name>
                            <comment type="line">// copySign(x, 1.0) is a branch-free version of abs(x), but with
                                different NaN semantics
                            </comment>
                            || (<name>a</name> == <name>b</name>)
                            <comment type="line">// needed to ensure that infinities equal themselves</comment>
                            || (
                            <call>
                                <name><name>Double</name>.
                                    <name>isNaN</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>a</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &amp;&amp;
                            <call>
                                <name><name>Double</name>.
                                    <name>isNaN</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>b</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Compares {@code a} and {@code b} "fuzzily," with a tolerance for nearly-equal values.
                *
                * &lt;p&gt;This method is equivalent to
                * {@code fuzzyEquals(a, b, tolerance) ? 0 : Double.compare(a, b)}. In particular, like
                * {@link Double#compare(double, double)}, it treats all NaN values as equal and greater than all
                * other values (including {@link Double#POSITIVE_INFINITY}).
                *
                * &lt;p&gt;This is &lt;em&gt;not&lt;/em&gt; a total ordering and is &lt;em&gt;not&lt;/em&gt; suitable
                for use in
                * {@link Comparable#compareTo} implementations. In particular, it is not transitive.
                *
                * @throws IllegalArgumentException if {@code tolerance} is {@code &lt; 0} or NaN
                * @since 13.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>fuzzyCompare</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>a</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>tolerance</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>fuzzyEquals</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>a</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>b</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>tolerance</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>0</expr>;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>a</name>
                                        &lt;
                                        <name>b</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>-1</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>a</name>
                                                &gt;
                                                <name>b</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return <expr>1</expr>;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <call>
                                                            <name><name>Booleans</name>.
                                                                <name>compare</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>Double</name>.
                                                                                <name>isNaN</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>a</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>Double</name>.
                                                                                <name>isNaN</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>b</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the &lt;a href="http://en.wikipedia.org/wiki/Arithmetic_mean"&gt;arithmetic mean&lt;/a&gt; of
                * {@code values}.
                *
                * &lt;p&gt;If these values are a sample drawn from a population, this is also an unbiased estimator of
                * the arithmetic mean of the population.
                *
                * @param values a nonempty series of values
                * @throws IllegalArgumentException if {@code values} is empty or contains any non-finite value
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("com.google.common.math.DoubleUtils")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>mean</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type><name>double</name>...
                            </type>
                            <name>values</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>values</name>.
                                                <name>length</name>
                                            </name>
                                            &gt; 0
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Cannot take mean of 0 values"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>count</name> =
                            <init>
                                <expr>1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>mean</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>checkFinite</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>values</name>
                                                        <index>[<expr>0</expr>]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>index</name> =
                                <init>
                                    <expr>1</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>index</name>
                                &lt;
                                <name><name>values</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>++
                                <name>index</name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkFinite</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>values</name>
                                                        <index>[
                                                            <expr>
                                                                <name>index</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>count</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// Art of Computer Programming vol. 2, Knuth, 4.2.2, (15)</comment>
                            <expr_stmt>
                                <expr>
                                    <name>mean</name>
                                    += (
                                    <name>
                                        <name>values</name>
                                        <index>[
                                            <expr>
                                                <name>index</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    - <name>mean</name>) /
                                    <name>count</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>mean</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the &lt;a href="http://en.wikipedia.org/wiki/Arithmetic_mean"&gt;arithmetic mean&lt;/a&gt; of
                * {@code values}.
                *
                * &lt;p&gt;If these values are a sample drawn from a population, this is also an unbiased estimator of
                * the arithmetic mean of the population.
                *
                * @param values a nonempty series of values
                * @throws IllegalArgumentException if {@code values} is empty
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>mean</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type><name>int</name>...
                            </type>
                            <name>values</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>values</name>.
                                                <name>length</name>
                                            </name>
                                            &gt; 0
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Cannot take mean of 0 values"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// The upper bound on the the length of an array and the bounds on the int
                        values mean that, in
                    </comment>
                    <comment type="line">// this case only, we can compute the sum as a long without risking overflow or
                        loss of
                    </comment>
                    <comment type="line">// precision. So we do that, as it's slightly quicker than the Knuth
                        algorithm.
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>sum</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>index</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>index</name>
                                &lt;
                                <name><name>values</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>++
                                <name>index</name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>sum</name>
                                    +=
                                    <name>
                                        <name>values</name>
                                        <index>[
                                            <expr>
                                                <name>index</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>(<name>double</name>) <name>sum</name> /
                            <name><name>values</name>.
                                <name>length</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the &lt;a href="http://en.wikipedia.org/wiki/Arithmetic_mean"&gt;arithmetic mean&lt;/a&gt; of
                * {@code values}.
                *
                * &lt;p&gt;If these values are a sample drawn from a population, this is also an unbiased estimator of
                * the arithmetic mean of the population.
                *
                * @param values a nonempty series of values, which will be converted to {@code double} values
                * (this may cause loss of precision for longs of magnitude over 2^53 (slightly over 9e15))
                * @throws IllegalArgumentException if {@code values} is empty
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>mean</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type><name>long</name>...
                            </type>
                            <name>values</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>values</name>.
                                                <name>length</name>
                                            </name>
                                            &gt; 0
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Cannot take mean of 0 values"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>count</name> =
                            <init>
                                <expr>1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>mean</name> =
                            <init>
                                <expr>
                                    <name>
                                        <name>values</name>
                                        <index>[<expr>0</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>index</name> =
                                <init>
                                    <expr>1</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>index</name>
                                &lt;
                                <name><name>values</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>++
                                <name>index</name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr><name>count</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// Art of Computer Programming vol. 2, Knuth, 4.2.2, (15)</comment>
                            <expr_stmt>
                                <expr>
                                    <name>mean</name>
                                    += (
                                    <name>
                                        <name>values</name>
                                        <index>[
                                            <expr>
                                                <name>index</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    - <name>mean</name>) /
                                    <name>count</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>mean</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the &lt;a href="http://en.wikipedia.org/wiki/Arithmetic_mean"&gt;arithmetic mean&lt;/a&gt; of
                * {@code values}.
                *
                * &lt;p&gt;If these values are a sample drawn from a population, this is also an unbiased estimator of
                * the arithmetic mean of the population.
                *
                * @param values a nonempty series of values, which will be converted to {@code double} values
                * (this may cause loss of precision)
                * @throws IllegalArgumentException if {@code values} is empty or contains any non-finite value
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("com.google.common.math.DoubleUtils")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>mean</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>Number</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>values</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>mean</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>values</name>.
                                                    <name>iterator</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the &lt;a href="http://en.wikipedia.org/wiki/Arithmetic_mean"&gt;arithmetic mean&lt;/a&gt; of
                * {@code values}.
                *
                * &lt;p&gt;If these values are a sample drawn from a population, this is also an unbiased estimator of
                * the arithmetic mean of the population.
                *
                * @param values a nonempty series of values, which will be converted to {@code double} values
                * (this may cause loss of precision)
                * @throws IllegalArgumentException if {@code values} is empty or contains any non-finite value
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("com.google.common.math.DoubleUtils")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>mean</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>Number</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>values</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>values</name>.
                                                    <name>hasNext</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Cannot take mean of 0 values"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>count</name> =
                            <init>
                                <expr>1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>mean</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>checkFinite</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>values</name>.
                                                            <name>next</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    .
                                                    <call>
                                                        <name>doubleValue</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>values</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>value</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>checkFinite</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>values</name>.
                                                                    <name>next</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            .
                                                            <call>
                                                                <name>doubleValue</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr><name>count</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// Art of Computer Programming vol. 2, Knuth, 4.2.2, (15)</comment>
                            <expr_stmt>
                                <expr>
                                    <name>mean</name>
                                    += (<name>value</name> - <name>mean</name>) /
                                    <name>count</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <return>return
                        <expr>
                            <name>mean</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("com.google.common.math.DoubleUtils")</argument_list>
                    </annotation>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>checkFinite</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>argument</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>isFinite</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>argument</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>argument</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <constructor>
                <specifier>private</specifier>
                <name>DoubleMath</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>
            }
        </block>
    </class>
</unit>
