<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\math\DoubleUtils.java">
    <comment type="block">/*
        * Copyright (C) 2011 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>math</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkArgument</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>lang</name>.<name>Double</name>.
            <name>MAX_EXPONENT</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>lang</name>.<name>Double</name>.
            <name>MIN_EXPONENT</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>lang</name>.<name>Double</name>.
            <name>POSITIVE_INFINITY</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>lang</name>.<name>Double</name>.
            <name>doubleToRawLongBits</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>lang</name>.<name>Double</name>.
            <name>isNaN</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>lang</name>.<name>Double</name>.
            <name>longBitsToDouble</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>lang</name>.<name>Math</name>.
            <name>getExponent</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>math</name>.
            <name>BigInteger</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Utilities for {@code double} primitives.
        *
        * @author Louis Wasserman
        */
    </comment>
    <class>
        <specifier>final</specifier>
        class <name>DoubleUtils</name>
        <block>{
            <constructor>
                <specifier>private</specifier>
                <name>DoubleUtils</name>
                <parameter_list>()</parameter_list>
                <block>{
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>nextDown</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>d</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>-
                            <call>
                                <name><name>Math</name>.
                                    <name>nextUp</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>-
                                            <name>d</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// The mask for the significand, according to the {@link</comment>
            <comment type="line">// Double#doubleToRawLongBits(double)} spec.</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>SIGNIFICAND_MASK</name> =
                    <init>
                        <expr>0x000fffffffffffffL</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// The mask for the exponent, according to the {@link</comment>
            <comment type="line">// Double#doubleToRawLongBits(double)} spec.</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>EXPONENT_MASK</name> =
                    <init>
                        <expr>0x7ff0000000000000L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// The mask for the sign, according to the {@link</comment>
            <comment type="line">// Double#doubleToRawLongBits(double)} spec.</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>SIGN_MASK</name> =
                    <init>
                        <expr>0x8000000000000000L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>SIGNIFICAND_BITS</name> =
                    <init>
                        <expr>52</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>EXPONENT_BIAS</name> =
                    <init>
                        <expr>1023</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The implicit 1 bit that is omitted in significands of normal doubles.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>IMPLICIT_BIT</name> =
                    <init>
                        <expr>
                            <name>SIGNIFICAND_MASK</name>
                            + 1
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>getSignificand</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>d</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>isFinite</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>d</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"not a normal value"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>exponent</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getExponent</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>d</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>bits</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>doubleToRawLongBits</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>d</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>bits</name>
                            &amp;=
                            <name>SIGNIFICAND_MASK</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>(<name>exponent</name> == <name>MIN_EXPONENT</name> - 1)
                            ? <name>bits</name> &lt;&lt; 1
                            : <name>bits</name> |
                            <name>IMPLICIT_BIT</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isFinite</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>d</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getExponent</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>d</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &lt;=
                            <name>MAX_EXPONENT</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isNormal</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>d</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getExponent</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>d</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &gt;=
                            <name>MIN_EXPONENT</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="block">/*
                * Returns x scaled by a power of 2 such that it is in the range [1, 2). Assumes x is positive,
                * normal, and finite.
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>scaleNormalize</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>significand</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>doubleToRawLongBits</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>x</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    &amp;
                                    <name>SIGNIFICAND_MASK</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>longBitsToDouble</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>significand</name>
                                            |
                                            <name>ONE_BITS</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>bigToDouble</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BigInteger</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// This is an extremely fast implementation of BigInteger.doubleValue(). JDK
                        patch pending.
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>BigInteger</name>
                            </type>
                            <name>absX</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>x</name>.
                                            <name>abs</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>exponent</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>absX</name>.
                                            <name>bitLength</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// exponent == floor(log2(abs(x)))</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>exponent</name>
                                &lt;
                                <name><name>Long</name>.
                                    <name>SIZE</name>
                                </name>
                                - 1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>x</name>.
                                                <name>longValue</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>exponent</name>
                                        &gt;
                                        <name>MAX_EXPONENT</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>x</name>.
                                                        <name>signum</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                *
                                                <name>POSITIVE_INFINITY</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>

                    <comment type="block">/*
                        * We need the top SIGNIFICAND_BITS + 1 bits, including the "implicit" one bit. To make
                        * rounding easier, we pick out the top SIGNIFICAND_BITS + 2 bits, so we have one to help us
                        * round up or down. twiceSignifFloor will contain the top SIGNIFICAND_BITS + 2 bits, and
                        * signifFloor the top SIGNIFICAND_BITS + 1.
                        *
                        * It helps to consider the real number signif = absX * 2^(SIGNIFICAND_BITS - exponent).
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>shift</name> =
                            <init>
                                <expr>
                                    <name>exponent</name>
                                    - <name>SIGNIFICAND_BITS</name> - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>twiceSignifFloor</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>absX</name>.
                                            <name>shiftRight</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>shift</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>longValue</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>signifFloor</name> =
                            <init>
                                <expr>
                                    <name>twiceSignifFloor</name>
                                    &gt;&gt; 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>signifFloor</name>
                            &amp;=
                            <name>SIGNIFICAND_MASK</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// remove the implied bit</comment>

                    <comment type="block">/*
                        * We round up if either the fractional part of signif is strictly greater than 0.5 (which is
                        * true if the 0.5 bit is set and any lower bit is set), or if the fractional part of signif is
                        * &gt;= 0.5 and signifFloor is odd (which is true if both the 0.5 bit and the 1 bit are set).
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>increment</name> =
                            <init>
                                <expr>(<name>twiceSignifFloor</name> &amp; 1) != 0
                                    &amp;&amp; ((<name>signifFloor</name> &amp; 1) != 0 ||
                                    <call>
                                        <name><name>absX</name>.
                                            <name>getLowestSetBit</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    &lt; <name>shift</name>)
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>signifRounded</name> =
                            <init>
                                <expr>
                                    <name>increment</name>
                                    ? <name>signifFloor</name> + 1 :
                                    <name>signifFloor</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>bits</name> =
                            <init>
                                <expr>
                                    <call>(<name>long</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>(<name>exponent</name> + <name>EXPONENT_BIAS</name>)
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    &lt;&lt;
                                    <name>SIGNIFICAND_BITS</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>bits</name>
                            +=
                            <name>signifRounded</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="block">/*
                        * If signifRounded == 2^53, we'd need to set all of the significand bits to zero and add 1 to
                        * the exponent. This is exactly the behavior we get from just adding signifRounded to bits
                        * directly. If the exponent is MAX_DOUBLE_EXPONENT, we round up (correctly) to
                        * Double.POSITIVE_INFINITY.
                        */
                    </comment>
                    <expr_stmt>
                        <expr>
                            <name>bits</name>
                            |=
                            <call>
                                <name><name>x</name>.
                                    <name>signum</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            &amp;
                            <name>SIGN_MASK</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>longBitsToDouble</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bits</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns its argument if it is non-negative, zero if it is negative.
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>double</name>
                </type>
                <name>ensureNonNegative</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>!
                                            <call>
                                                <name>isNaN</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>value</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                &gt; 0.0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>value</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return <expr>0.0</expr>;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>ONE_BITS</name> =
                    <init>
                        <expr>
                            <call>
                                <name>doubleToRawLongBits</name>
                                <argument_list>(
                                    <argument>
                                        <expr>1.0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            }
        </block>
    </class>
</unit>
