<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\reflect\Element.java">
    <comment type="block">/*
        * Copyright (C) 2012 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>reflect</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>lang</name>.<name>annotation</name>.
            <name>Annotation</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>AccessibleObject</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Constructor</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Field</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Member</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Method</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Modifier</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Represents either a {@link Field}, a {@link Method} or a {@link Constructor}.
        * Provides convenience methods such as {@link #isPublic} and {@link #isPackagePrivate}.
        *
        * @author Ben Yu
        */
    </comment>
    <class>class <name>Element</name>
        <super>
            <extends>extends
                <name>AccessibleObject</name>
            </extends>
            <implements>implements
                <name>Member</name>
            </implements>
        </super>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>AccessibleObject</name>
                    </type>
                    <name>accessibleObject</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Member</name>
                    </type>
                    <name>member</name>
                </decl>
                ;
            </decl_stmt>

            <expr_stmt>
                <expr>&lt;<name>M</name> extends <name>AccessibleObject</name> &amp; <name>Member</name>&gt;
                    <call>
                        <name>Element</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>M</name>
                                    <name>member</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>member</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                        <expr>
                            <name><name>this</name>.
                                <name>accessibleObject</name>
                            </name>
                            =
                            <name>member</name>
                        </expr>
                        ;
                        <expr>
                            <name><name>this</name>.
                                <name>member</name>
                            </name>
                            =
                            <name>member</name>
                        </expr>
                        ;
                        }
                    </block>

                    public
                    <name>
                        <name>TypeToken</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    <call>
                        <name>getOwnerType</name>
                        <argument_list>()</argument_list>
                    </call>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name><name>TypeToken</name>.
                                        <name>of</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name>getDeclaringClass</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                    </block>
                </expr>
            </expr_stmt>
            }
        </block>
    </class>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>final</specifier>
            <name>boolean</name>
        </type>
        <name>isAnnotationPresent</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Class</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>Annotation</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>annotationClass</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>accessibleObject</name>.
                            <name>isAnnotationPresent</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>annotationClass</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>final</specifier>
            <argument_list>&lt;
                <argument>
                    <name>A</name>
                    <extends>extends
                        <name>Annotation</name>
                    </extends>
                </argument>
                &gt;
            </argument_list>
            <name>A</name>
        </type>
        <name>getAnnotation</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Class</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>A</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>annotationClass</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>accessibleObject</name>.
                            <name>getAnnotation</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>annotationClass</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>final</specifier>
            <name>Annotation</name>
            <index>[]</index>
        </type>
        <name>getAnnotations</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>accessibleObject</name>.
                            <name>getAnnotations</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>final</specifier>
            <name>Annotation</name>
            <index>[]</index>
        </type>
        <name>getDeclaredAnnotations</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>accessibleObject</name>.
                            <name>getDeclaredAnnotations</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>final</specifier>
            <name>void</name>
        </type>
        <name>setAccessible</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>boolean</name>
                    </type>
                    <name>flag</name>
                </decl>
            </param>
            )
        </parameter_list>
        <throws>throws
            <argument>
                <expr>
                    <name>SecurityException</name>
                </expr>
            </argument>
        </throws>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>accessibleObject</name>.
                            <name>setAccessible</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>flag</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>final</specifier>
            <name>boolean</name>
        </type>
        <name>isAccessible</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>accessibleObject</name>.
                            <name>isAccessible</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>
                <name>Class</name>
                <argument_list>&lt;
                    <argument>
                        <name>?</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>getDeclaringClass</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>member</name>.
                            <name>getDeclaringClass</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>final</specifier>
            <name>String</name>
        </type>
        <name>getName</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>member</name>.
                            <name>getName</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>final</specifier>
            <name>int</name>
        </type>
        <name>getModifiers</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>member</name>.
                            <name>getModifiers</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>final</specifier>
            <name>boolean</name>
        </type>
        <name>isSynthetic</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>member</name>.
                            <name>isSynthetic</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/** Returns true if the element is public. */</comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>final</specifier>
            <name>boolean</name>
        </type>
        <name>isPublic</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>Modifier</name>.
                            <name>isPublic</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>getModifiers</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/** Returns true if the element is protected. */</comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>final</specifier>
            <name>boolean</name>
        </type>
        <name>isProtected</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>Modifier</name>.
                            <name>isProtected</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>getModifiers</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/** Returns true if the element is package-private. */</comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>final</specifier>
            <name>boolean</name>
        </type>
        <name>isPackagePrivate</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>!
                    <call>
                        <name>isPrivate</name>
                        <argument_list>()</argument_list>
                    </call>
                    &amp;&amp; !
                    <call>
                        <name>isPublic</name>
                        <argument_list>()</argument_list>
                    </call>
                    &amp;&amp; !
                    <call>
                        <name>isProtected</name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/** Returns true if the element is private. */</comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>final</specifier>
            <name>boolean</name>
        </type>
        <name>isPrivate</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>Modifier</name>.
                            <name>isPrivate</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>getModifiers</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/** Returns true if the element is static. */</comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>final</specifier>
            <name>boolean</name>
        </type>
        <name>isStatic</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>Modifier</name>.
                            <name>isStatic</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>getModifiers</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns {@code true} if this method is final, per {@code Modifier.isFinal(getModifiers())}.
        *
        * &lt;p&gt;Note that a method may still be effectively "final", or non-overridable when it has no
        * {@code final} keyword. For example, it could be private, or it could be declared by a final
        * class. To tell whether a method is overridable, use {@link Invokable#isOverridable}.
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>final</specifier>
            <name>boolean</name>
        </type>
        <name>isFinal</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>Modifier</name>.
                            <name>isFinal</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>getModifiers</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/** Returns true if the method is abstract. */</comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>final</specifier>
            <name>boolean</name>
        </type>
        <name>isAbstract</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>Modifier</name>.
                            <name>isAbstract</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>getModifiers</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/** Returns true if the element is native. */</comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>final</specifier>
            <name>boolean</name>
        </type>
        <name>isNative</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>Modifier</name>.
                            <name>isNative</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>getModifiers</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/** Returns true if the method is synchronized. */</comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>final</specifier>
            <name>boolean</name>
        </type>
        <name>isSynchronized</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>Modifier</name>.
                            <name>isSynchronized</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>getModifiers</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/** Returns true if the field is volatile. */</comment>
    <function>
        <type>
            <specifier>final</specifier>
            <name>boolean</name>
        </type>
        <name>isVolatile</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>Modifier</name>.
                            <name>isVolatile</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>getModifiers</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/** Returns true if the field is transient. */</comment>
    <function>
        <type>
            <specifier>final</specifier>
            <name>boolean</name>
        </type>
        <name>isTransient</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>Modifier</name>.
                            <name>isTransient</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>getModifiers</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>boolean</name>
        </type>
        <name>equals</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>Object</name>
                    </type>
                    <name>obj</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>
                        <name>obj</name>
                        <name>instanceof</name>
                        <name>Element</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <decl_stmt>
                            <decl>
                                <type>
                                    <name>Element</name>
                                </type>
                                <name>that</name> =
                                <init>
                                    <expr>(<name>Element</name>)
                                        <name>obj</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </decl_stmt>
                        <return>return
                            <expr>
                                <call>
                                    <name>getOwnerType</name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>equals</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>that</name>.
                                                        <name>getOwnerType</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                &amp;&amp;
                                <call>
                                    <name><name>member</name>.
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>that</name>.
                                                    <name>member</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <return>return <expr>false</expr>;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>int</name>
        </type>
        <name>hashCode</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>member</name>.
                            <name>hashCode</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>String</name>
        </type>
        <name>toString</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>member</name>.
                            <name>toString</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    }
</unit>
