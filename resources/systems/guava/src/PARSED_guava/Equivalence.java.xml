<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\base\Equivalence.java">
    <comment type="block">/*
        * Copyright (C) 2010 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>base</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>CheckReturnValue</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A strategy for determining whether two instances are considered equivalent. Examples of
        * equivalences are the {@linkplain #identity() identity equivalence} and {@linkplain #equals equals
        * equivalence}.
        *
        * @author Bob Lee
        * @author Ben Yu
        * @author Gregory Kick
        * @since 10.0 (&lt;a href="https://github.com/google/guava/wiki/Compatibility"
        * &gt;mostly source-compatible&lt;/a&gt; since 4.0)
        */
    </comment>
    <class>
        <annotation>@
            <name>CheckReturnValue</name>
        </annotation>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class
        <name>
            <name>Equivalence</name>
            <argument_list>&lt;
                <argument>
                    <name>T</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <block>{
            <comment type="javadoc">/**
                * Constructor for use by subclasses.
                */
            </comment>
            <constructor>
                <specifier>protected</specifier>
                <name>Equivalence</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="javadoc">/**
                * Returns {@code true} if the given objects are considered equivalent.
                *
                * &lt;p&gt;The {@code equivalent} method implements an equivalence relation on object references:
                *
                * &lt;ul&gt;
                * &lt;li&gt;It is &lt;i&gt;reflexive&lt;/i&gt;: for any reference {@code x}, including null, {@code
                * equivalent(x, x)} returns {@code true}.
                * &lt;li&gt;It is &lt;i&gt;symmetric&lt;/i&gt;: for any references {@code x} and {@code y}, {@code
                * equivalent(x, y) == equivalent(y, x)}.
                * &lt;li&gt;It is &lt;i&gt;transitive&lt;/i&gt;: for any references {@code x}, {@code y}, and {@code z},
                if
                * {@code equivalent(x, y)} returns {@code true} and {@code equivalent(y, z)} returns {@code
                * true}, then {@code equivalent(x, z)} returns {@code true}.
                * &lt;li&gt;It is &lt;i&gt;consistent&lt;/i&gt;: for any references {@code x} and {@code y}, multiple
                invocations
                * of {@code equivalent(x, y)} consistently return {@code true} or consistently return {@code
                * false} (provided that neither {@code x} nor {@code y} is modified).
                * &lt;/ul&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>equivalent</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>T</name>
                            </type>
                            <name>a</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>T</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>a</name>
                                ==
                                <name>b</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>a</name>
                                == <name>null</name> || <name>b</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>doEquivalent</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>a</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>b</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns {@code true} if {@code a} and {@code b} are considered equivalent.
                *
                * &lt;p&gt;Called by {@link #equivalent}. {@code a} and {@code b} are not the same
                * object and are not nulls.
                *
                * @since 10.0 (previously, subclasses would override equivalent())
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>protected</specifier>
                    <specifier>abstract</specifier>
                    <name>boolean</name>
                </type>
                <name>doEquivalent</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>a</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a hash code for {@code t}.
                *
                * &lt;p&gt;The {@code hash} has the following properties:
                * &lt;ul&gt;
                * &lt;li&gt;It is &lt;i&gt;consistent&lt;/i&gt;: for any reference {@code x}, multiple invocations of
                * {@code hash(x}} consistently return the same value provided {@code x} remains unchanged
                * according to the definition of the equivalence. The hash need not remain consistent from
                * one execution of an application to another execution of the same application.
                * &lt;li&gt;It is &lt;i&gt;distributable across equivalence&lt;/i&gt;: for any references {@code x} and
                {@code y},
                * if {@code equivalent(x, y)}, then {@code hash(x) == hash(y)}. It is &lt;i&gt;not&lt;/i&gt; necessary
                * that the hash be distributable across &lt;i&gt;inequivalence&lt;/i&gt;. If {@code equivalence(x, y)}
                * is false, {@code hash(x) == hash(y)} may still be true.
                * &lt;li&gt;{@code hash(null)} is {@code 0}.
                * &lt;/ul&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>int</name>
                </type>
                <name>hash</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>T</name>
                            </type>
                            <name>t</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>t</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>0</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>doHash</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>t</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a hash code for non-null object {@code t}.
                *
                * &lt;p&gt;Called by {@link #hash}.
                *
                * @since 10.0 (previously, subclasses would override hash())
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>protected</specifier>
                    <specifier>abstract</specifier>
                    <name>int</name>
                </type>
                <name>doHash</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>t</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a new equivalence relation for {@code F} which evaluates equivalence by first applying
                * {@code function} to the argument, then evaluating using {@code this}. That is, for any pair of
                * non-null objects {@code x} and {@code y}, {@code
                * equivalence.onResultOf(function).equivalent(a, b)} is true if and only if {@code
                * equivalence.equivalent(function.apply(a), function.apply(b))} is true.
                *
                * &lt;p&gt;For example:
                *
                * &lt;pre&gt; {@code
                * Equivalence&lt;Person&gt; SAME_AGE = Equivalence.equals().onResultOf(GET_PERSON_AGE);}&lt;/pre&gt;
                *
                * &lt;p&gt;{@code function} will never be invoked with a null value.
                *
                * &lt;p&gt;Note that {@code function} must be consistent according to {@code this} equivalence
                * relation. That is, invoking {@link Function#apply} multiple times for a given value must return
                * equivalent results.
                * For example, {@code Equivalence.identity().onResultOf(Functions.toStringFunction())} is broken
                * because it's not guaranteed that {@link Object#toString}) always returns the same string
                * instance.
                *
                * @since 10.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>F</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Equivalence</name>
                        <argument_list>&lt;
                            <argument>
                                <name>F</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>onResultOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Function</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>F</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>T</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>function</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>FunctionalEquivalence</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>F</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>function</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a wrapper of {@code reference} that implements
                * {@link Wrapper#equals(Object) Object.equals()} such that
                * {@code wrap(a).equals(wrap(b))} if and only if {@code equivalent(a, b)}.
                *
                * @since 10.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>S</name>
                            <extends>extends
                                <name>T</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Wrapper</name>
                        <argument_list>&lt;
                            <argument>
                                <name>S</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>wrap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>S</name>
                            </type>
                            <name>reference</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>Wrapper</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>S</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>reference</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Wraps an object so that {@link #equals(Object)} and {@link #hashCode()} delegate to an
                * {@link Equivalence}.
                *
                * &lt;p&gt;For example, given an {@link Equivalence} for {@link String strings} named {@code equiv}
                * that tests equivalence using their lengths:
                *
                * &lt;pre&gt; {@code
                * equiv.wrap("a").equals(equiv.wrap("b")) // true
                * equiv.wrap("a").equals(equiv.wrap("hello")) // false}&lt;/pre&gt;
                *
                * &lt;p&gt;Note in particular that an equivalence wrapper is never equal to the object it wraps.
                *
                * &lt;pre&gt; {@code
                * equiv.wrap(obj).equals(obj) // always false}&lt;/pre&gt;
                *
                * @since 10.0
                */
            </comment>
            <class>
                <specifier>public</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class
                <name>
                    <name>Wrapper</name>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <super>
                    <implements>implements
                        <name>Serializable</name>
                    </implements>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>
                                    <name>Equivalence</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>T</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>equivalence</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>T</name>
                            </type>
                            <name>reference</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <specifier>private</specifier>
                        <name>Wrapper</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Equivalence</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <super>super
                                                        <name>T</name>
                                                    </super>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>equivalence</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <annotation>@
                                            <name>Nullable</name>
                                        </annotation>
                                        <name>T</name>
                                    </type>
                                    <name>reference</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>equivalence</name>
                                    </name>
                                    =
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>equivalence</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>reference</name>
                                    </name>
                                    =
                                    <name>reference</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="javadoc">/** Returns the (possibly null) reference wrapped by this instance. */
                    </comment>
                    <function>
                        <type>
                            <annotation>@
                                <name>Nullable</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>T</name>
                        </type>
                        <name>get</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>reference</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Returns {@code true} if {@link Equivalence#equivalent(Object, Object)} applied to the wrapped
                        * references is {@code true} and both wrappers use the {@link Object#equals(Object) same}
                        * equivalence.
                        */
                    </comment>
                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>equals</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <annotation>@
                                            <name>Nullable</name>
                                        </annotation>
                                        <name>Object</name>
                                    </type>
                                    <name>obj</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>obj</name>
                                        ==
                                        <name>this</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>true</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>obj</name>
                                        <name>instanceof</name>
                                        <name>Wrapper</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>
                                                        <name>Wrapper</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>?</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </type>
                                                <name>that</name> =
                                                <init>
                                                    <expr>(
                                                        <name>
                                                            <name>Wrapper</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>?</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                        )
                                                        <name>obj</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <comment type="line">// note: not necessarily a Wrapper&lt;T&gt;</comment>

                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>this</name>.<name>equivalence</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>that</name>.
                                                                        <name>equivalence</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="block">/*
                                                        * We'll accept that as sufficient "proof" that either
                                                        equivalence should be able to
                                                        * handle either reference, so it's safe to circumvent
                                                        compile-time type checking.
                                                        */
                                                    </comment>
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <annotation>@
                                                                    <name>SuppressWarnings</name>
                                                                    <argument_list>("unchecked")</argument_list>
                                                                </annotation>
                                                                <name>
                                                                    <name>Equivalence</name>
                                                                    <argument_list>&lt;
                                                                        <argument>
                                                                            <name>Object</name>
                                                                        </argument>
                                                                        &gt;
                                                                    </argument_list>
                                                                </name>
                                                            </type>
                                                            <name>equivalence</name> =
                                                            <init>
                                                                <expr>(
                                                                    <name>
                                                                        <name>Equivalence</name>
                                                                        <argument_list>&lt;
                                                                            <argument>
                                                                                <name>Object</name>
                                                                            </argument>
                                                                            &gt;
                                                                        </argument_list>
                                                                    </name>
                                                                    )
                                                                    <name><name>this</name>.
                                                                        <name>equivalence</name>
                                                                    </name>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <return>return
                                                        <expr>
                                                            <call>
                                                                <name><name>equivalence</name>.
                                                                    <name>equivalent</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name><name>this</name>.
                                                                                <name>reference</name>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name><name>that</name>.
                                                                                <name>reference</name>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return <expr>false</expr>;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Returns the result of {@link Equivalence#hash(Object)} applied to the wrapped reference.
                        */
                    </comment>
                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>hashCode</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>equivalence</name>.
                                            <name>hash</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>reference</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Returns a string representation for this equivalence wrapper. The form of this string
                        * representation is not specified.
                        */
                    </comment>
                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>equivalence</name>
                                    + ".wrap(" + <name>reference</name> + ")"
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * Returns an equivalence over iterables based on the equivalence of their elements. More
                * specifically, two iterables are considered equivalent if they both contain the same number of
                * elements, and each pair of corresponding elements is equivalent according to
                * {@code this}. Null iterables are equivalent to one another.
                *
                * &lt;p&gt;Note that this method performs a similar function for equivalences as {@link
                * com.google.common.collect.Ordering#lexicographical} does for orderings.
                *
                * @since 10.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtCompatible</name>
                        <argument_list>(serializable = true)</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>S</name>
                            <extends>extends
                                <name>T</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Equivalence</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>S</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>pairwise</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// Ideally, the returned equivalence would support Iterable&lt;? extends T&gt;.
                        However,
                    </comment>
                    <comment type="line">// the need for this is so rare that it's not worth making callers deal with
                        the ugly wildcard.
                    </comment>
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>PairwiseEquivalence</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>S</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a predicate that evaluates to true if and only if the input is
                * equivalent to {@code target} according to this equivalence relation.
                *
                * @since 10.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>
                        <name>Predicate</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>equivalentTo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>T</name>
                            </type>
                            <name>target</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>EquivalentToPredicate</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>target</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <class>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class
                <name>
                    <name>EquivalentToPredicate</name>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <super>
                    <implements>implements
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>T</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        ,
                        <name>Serializable</name>
                    </implements>
                </super>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>
                                    <name>Equivalence</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>equivalence</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>T</name>
                            </type>
                            <name>target</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>EquivalentToPredicate</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Equivalence</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>T</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>equivalence</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <annotation>@
                                            <name>Nullable</name>
                                        </annotation>
                                        <name>T</name>
                                    </type>
                                    <name>target</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>equivalence</name>
                                    </name>
                                    =
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>equivalence</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>target</name>
                                    </name>
                                    =
                                    <name>target</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>apply</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <annotation>@
                                            <name>Nullable</name>
                                        </annotation>
                                        <name>T</name>
                                    </type>
                                    <name>input</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>equivalence</name>.
                                            <name>equivalent</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>target</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>equals</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <annotation>@
                                            <name>Nullable</name>
                                        </annotation>
                                        <name>Object</name>
                                    </type>
                                    <name>obj</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>this</name>
                                        ==
                                        <name>obj</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>true</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>obj</name>
                                        <name>instanceof</name>
                                        <name>EquivalentToPredicate</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>
                                                        <name>EquivalentToPredicate</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>?</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </type>
                                                <name>that</name> =
                                                <init>
                                                    <expr>(
                                                        <name>
                                                            <name>EquivalentToPredicate</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>?</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                        )
                                                        <name>obj</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>equivalence</name>.
                                                        <name>equals</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>that</name>.
                                                                    <name>equivalence</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                &amp;&amp;
                                                <call>
                                                    <name><name>Objects</name>.
                                                        <name>equal</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>target</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>that</name>.
                                                                    <name>target</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return <expr>false</expr>;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>hashCode</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>Objects</name>.
                                            <name>hashCode</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>equivalence</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>target</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>equivalence</name>
                                    + ".equivalentTo(" + <name>target</name> + ")"
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * Returns an equivalence that delegates to {@link Object#equals} and {@link Object#hashCode}.
                * {@link Equivalence#equivalent} returns {@code true} if both values are null, or if neither
                * value is null and {@link Object#equals} returns {@code true}. {@link Equivalence#hash} returns
                * {@code 0} if passed a null value.
                *
                * @since 13.0
                * @since 8.0 (in Equivalences with null-friendly behavior)
                * @since 4.0 (in Equivalences)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>
                        <name>Equivalence</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Object</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>equals</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>Equals</name>.
                                <name>INSTANCE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an equivalence that uses {@code ==} to compare values and {@link
                * System#identityHashCode(Object)} to compute the hash code. {@link Equivalence#equivalent}
                * returns {@code true} if {@code a == b}, including in the case that a and b are both null.
                *
                * @since 13.0
                * @since 4.0 (in Equivalences)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>
                        <name>Equivalence</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Object</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>identity</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>Identity</name>.
                                <name>INSTANCE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <class>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>Equals</name>
                <super>
                    <extends>extends
                        <name>
                            <name>Equivalence</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Object</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                    <implements>implements
                        <name>Serializable</name>
                    </implements>
                </super>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>Equals</name>
                            </type>
                            <name>INSTANCE</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>Equals</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>protected</specifier>
                            <name>boolean</name>
                        </type>
                        <name>doEquivalent</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>a</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>b</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>a</name>.
                                            <name>equals</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>b</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>protected</specifier>
                            <name>int</name>
                        </type>
                        <name>doHash</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>o</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>o</name>.
                                            <name>hashCode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>Object</name>
                        </type>
                        <name>readResolve</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>INSTANCE</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    }
                </block>
            </class>

            <class>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>Identity</name>
                <super>
                    <extends>extends
                        <name>
                            <name>Equivalence</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Object</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                    <implements>implements
                        <name>Serializable</name>
                    </implements>
                </super>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>Identity</name>
                            </type>
                            <name>INSTANCE</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>Identity</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>protected</specifier>
                            <name>boolean</name>
                        </type>
                        <name>doEquivalent</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>a</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>b</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return <expr>false</expr>;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>protected</specifier>
                            <name>int</name>
                        </type>
                        <name>doHash</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>o</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>System</name>.
                                            <name>identityHashCode</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>o</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>Object</name>
                        </type>
                        <name>readResolve</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>INSTANCE</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    }
                </block>
            </class>
            }
        </block>
    </class>
</unit>
