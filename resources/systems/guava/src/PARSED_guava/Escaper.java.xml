<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\escape\Escaper.java">
    <comment type="block">/*
        * Copyright (C) 2008 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>escape</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Function</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * An object that converts literal text into a format safe for inclusion in a particular context
        * (such as an XML document). Typically (but not always), the inverse process of "unescaping" the
        * text is performed automatically by the relevant parser.
        *
        * &lt;p&gt;For example, an XML escaper would convert the literal string {@code "Foo&lt;Bar&gt;"} into {@code
        * "Foo&amp;lt;Bar&amp;gt;"} to prevent {@code "&lt;Bar&gt;"} from being confused with an XML tag. When the
        * resulting XML document is parsed, the parser API will return this text as the original literal
        * string {@code "Foo&lt;Bar&gt;"}.
        *
        * &lt;p&gt;An {@code Escaper} instance is required to be stateless, and safe when used concurrently by
        * multiple threads.
        *
        * &lt;p&gt;Because, in general, escaping operates on the code points of a string and not on its
        * individual {@code char} values, it is not safe to assume that {@code escape(s)} is equivalent to
        * {@code escape(s.substring(0, n)) + escape(s.substing(n))} for arbitrary {@code n}. This is
        * because of the possibility of splitting a surrogate pair. The only case in which it is safe to
        * escape strings and concatenate the results is if you can rule out this possibility, either by
        * splitting an existing long string into short strings adaptively around {@linkplain
        * Character#isHighSurrogate surrogate} {@linkplain Character#isLowSurrogate pairs}, or by starting
        * with short strings already known to be free of unpaired surrogates.
        *
        * &lt;p&gt;The two primary implementations of this interface are {@link CharEscaper} and {@link
        * UnicodeEscaper}. They are heavily optimized for performance and greatly simplify the task of
        * implementing new escapers. It is strongly recommended that when implementing a new escaper you
        * extend one of these classes. If you find that you are unable to achieve the desired behavior
        * using either of these classes, please contact the Java libraries team for advice.
        *
        * &lt;p&gt;Popular escapers are defined as constants in classes like {@link
        * com.google.common.html.HtmlEscapers} and {@link com.google.common.xml.XmlEscapers}.
        * To create your own escapers, use {@link CharEscaperBuilder}, or extend {@code CharEscaper}
        * or {@code UnicodeEscaper}.
        *
        * @author David Beaumont
        * @since 15.0
        */
    </comment>
    <class>
        <annotation>@
            <name>Beta</name>
        </annotation>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class <name>Escaper</name>
        <block>{
            <comment type="line">// TODO(user): evaluate custom implementations, considering package private
                constructor.
            </comment>
            <comment type="javadoc">/** Constructor for use by subclasses. */</comment>
            <constructor>
                <specifier>protected</specifier>
                <name>Escaper</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="javadoc">/**
                * Returns the escaped form of a given literal string.
                *
                * &lt;p&gt;Note that this method may treat input characters differently depending on the specific
                * escaper implementation.
                *
                * &lt;ul&gt;
                * &lt;li&gt;{@link UnicodeEscaper} handles &lt;a href="http://en.wikipedia.org/wiki/UTF-16"&gt;UTF-16&lt;/a&gt;
                * correctly, including surrogate character pairs. If the input is badly formed the escaper
                * should throw {@link IllegalArgumentException}.
                * &lt;li&gt;{@link CharEscaper} handles Java characters independently and does not verify the input for
                * well formed characters. A {@code CharEscaper} should not be used in situations where input
                * is not guaranteed to be restricted to the Basic Multilingual Plane (BMP).
                * &lt;/ul&gt;
                *
                * @param string the literal string to be escaped
                * @return the escaped form of {@code string}
                * @throws NullPointerException if {@code string} is null
                * @throws IllegalArgumentException if {@code string} contains badly formed UTF-16 or cannot be
                * escaped for any other reason
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>String</name>
                </type>
                <name>escape</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>string</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>Function</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>String</name>
                                </argument>
                                ,
                                <argument>
                                    <name>String</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>asFunction</name> =
                    <init>
                        <expr>new
                            <class>
                                <super>
                                    <name>
                                        <name>Function</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>String</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>String</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </super>
                                <argument_list>()</argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>String</name>
                                        </type>
                                        <name>apply</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>String</name>
                                                    </type>
                                                    <name>from</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name>escape</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>from</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Returns a {@link Function} that invokes {@link #escape(String)} on this escaper.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>
                        <name>Function</name>
                        <argument_list>&lt;
                            <argument>
                                <name>String</name>
                            </argument>
                            ,
                            <argument>
                                <name>String</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>asFunction</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>asFunction</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
