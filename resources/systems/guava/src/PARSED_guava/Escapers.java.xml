<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\escape\Escapers.java">
    <comment type="block">/*
        * Copyright (C) 2009 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>escape</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>HashMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Static utility methods pertaining to {@link Escaper} instances.
        *
        * @author Sven Mawson
        * @author David Beaumont
        * @since 15.0
        */
    </comment>
    <class>
        <annotation>@
            <name>Beta</name>
        </annotation>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>Escapers</name>
        <block>{
            <constructor>
                <specifier>private</specifier>
                <name>Escapers</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="javadoc">/**
                * Returns an {@link Escaper} that does no escaping, passing all character
                * data through unchanged.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Escaper</name>
                </type>
                <name>nullEscaper</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>NULL_ESCAPER</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// An Escaper that efficiently performs no escaping.</comment>
            <comment type="line">// Extending CharEscaper (instead of Escaper) makes Escapers.compose() easier.
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Escaper</name>
                    </type>
                    <name>NULL_ESCAPER</name> =
                    <init>
                        <expr>new
                            <class>
                                <super>
                                    <name>CharEscaper</name>
                                </super>
                                <argument_list>()</argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>String</name>
                                        </type>
                                        <name>escape</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>String</name>
                                                    </type>
                                                    <name>string</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name>checkNotNull</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>string</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>

                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>protected</specifier>
                                            <name>char</name>
                                            <index>[]</index>
                                        </type>
                                        <name>escape</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>char</name>
                                                    </type>
                                                    <name>c</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <comment type="line">// TODO: Fix tests not to call this directly and make
                                                it throw an error.
                                            </comment>
                                            <return>return
                                                <expr>
                                                    <name>null</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Returns a builder for creating simple, fast escapers. A builder instance
                * can be reused and each escaper that is created will be a snapshot of the
                * current builder state. Builders are not thread safe.
                *
                * &lt;p&gt;The initial state of the builder is such that:
                * &lt;ul&gt;
                * &lt;li&gt;There are no replacement mappings&lt;li&gt;
                * &lt;li&gt;{@code safeMin == Character.MIN_VALUE}&lt;/li&gt;
                * &lt;li&gt;{@code safeMax == Character.MAX_VALUE}&lt;/li&gt;
                * &lt;li&gt;{@code unsafeReplacement == null}&lt;/li&gt;
                * &lt;/ul&gt;
                * &lt;p&gt;For performance reasons escapers created by this builder are not
                * Unicode aware and will not validate the well-formedness of their input.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Builder</name>
                </type>
                <name>builder</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>Builder</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A builder for simple, fast escapers.
                *
                * &lt;p&gt;Typically an escaper needs to deal with the escaping of high valued
                * characters or code points. In these cases it is necessary to extend either
                * {@link ArrayBasedCharEscaper} or {@link ArrayBasedUnicodeEscaper} to
                * provide the desired behavior. However this builder is suitable for creating
                * escapers that replace a relative small set of characters.
                *
                * @author David Beaumont
                * @since 15.0
                */
            </comment>
            <class>
                <annotation>@
                    <name>Beta</name>
                </annotation>
                <specifier>public</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>Builder</name>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>
                                    <name>Map</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Character</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>replacementMap</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>
                                            <name>HashMap</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>Character</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>String</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>char</name>
                            </type>
                            <name>safeMin</name> =
                            <init>
                                <expr>
                                    <name><name>Character</name>.
                                        <name>MIN_VALUE</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>char</name>
                            </type>
                            <name>safeMax</name> =
                            <init>
                                <expr>
                                    <name><name>Character</name>.
                                        <name>MAX_VALUE</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>String</name>
                            </type>
                            <name>unsafeReplacement</name> =
                            <init>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// The constructor is exposed via the builder() method above.</comment>
                    <constructor>
                        <specifier>private</specifier>
                        <name>Builder</name>
                        <parameter_list>()</parameter_list>
                        <block>{}</block>
                    </constructor>

                    <comment type="javadoc">/**
                        * Sets the safe range of characters for the escaper. Characters in this
                        * range that have no explicit replacement are considered 'safe' and remain
                        * unescaped in the output. If {@code safeMax &lt; safeMin} then the safe range
                        * is empty.
                        *
                        * @param safeMin the lowest 'safe' character
                        * @param safeMax the highest 'safe' character
                        * @return the builder instance
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>Builder</name>
                        </type>
                        <name>setSafeRange</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>safeMin</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>safeMax</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>safeMin</name>
                                    </name>
                                    =
                                    <name>safeMin</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>safeMax</name>
                                    </name>
                                    =
                                    <name>safeMax</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>this</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Sets the replacement string for any characters outside the 'safe' range
                        * that have no explicit replacement. If {@code unsafeReplacement} is
                        * {@code null} then no replacement will occur, if it is {@code ""} then
                        * the unsafe characters are removed from the output.
                        *
                        * @param unsafeReplacement the string to replace unsafe chracters
                        * @return the builder instance
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>Builder</name>
                        </type>
                        <name>setUnsafeReplacement</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <annotation>@
                                            <name>Nullable</name>
                                        </annotation>
                                        <name>String</name>
                                    </type>
                                    <name>unsafeReplacement</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>unsafeReplacement</name>
                                    </name>
                                    =
                                    <name>unsafeReplacement</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>this</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Adds a replacement string for the given input character. The specified
                        * character will be replaced by the given string whenever it occurs in the
                        * input, irrespective of whether it lies inside or outside the 'safe'
                        * range.
                        *
                        * @param c the character to be replaced
                        * @param replacement the string to replace the given character
                        * @return the builder instance
                        * @throws NullPointerException if {@code replacement} is null
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>Builder</name>
                        </type>
                        <name>addEscape</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>c</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>replacement</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>replacement</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// This can replace an existing character (the builder is re-usable).
                            </comment>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>replacementMap</name>.
                                            <name>put</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>c</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>replacement</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>this</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Returns a new escaper based on the current state of the builder.
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>Escaper</name>
                        </type>
                        <name>build</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>new
                                    <class>
                                        <super>
                                            <name>ArrayBasedCharEscaper</name>
                                        </super>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>replacementMap</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>safeMin</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>safeMax</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <specifier>private</specifier>
                                                        <specifier>final</specifier>
                                                        <name>char</name>
                                                        <index>[]</index>
                                                    </type>
                                                    <name>replacementChars</name> =
                                                    <init>
                                                        <expr>
                                                            <name>unsafeReplacement</name>
                                                            != <name>null</name> ?
                                                            <call>
                                                                <name><name>unsafeReplacement</name>.
                                                                    <name>toCharArray</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            :
                                                            <name>null</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <function>
                                                <type>
                                                    <annotation>@
                                                        <name>Override</name>
                                                    </annotation>
                                                    <specifier>protected</specifier>
                                                    <name>char</name>
                                                    <index>[]</index>
                                                </type>
                                                <name>escapeUnsafe</name>
                                                <parameter_list>(
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <name>char</name>
                                                            </type>
                                                            <name>c</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                </parameter_list>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>replacementChars</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </function>
                                            }
                                        </block>
                                    </class>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * Returns a {@link UnicodeEscaper} equivalent to the given escaper instance.
                * If the escaper is already a UnicodeEscaper then it is simply returned,
                * otherwise it is wrapped in a UnicodeEscaper.
                *
                * &lt;p&gt;When a {@link CharEscaper} escaper is wrapped by this method it acquires
                * extra behavior with respect to the well-formedness of Unicode character
                * sequences and will throw {@link IllegalArgumentException} when given bad
                * input.
                *
                * @param escaper the instance to be wrapped
                * @return a UnicodeEscaper with the same behavior as the given instance
                * @throws NullPointerException if escaper is null
                * @throws IllegalArgumentException if escaper is not a UnicodeEscaper or a
                * CharEscaper
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>UnicodeEscaper</name>
                </type>
                <name>asUnicodeEscaper</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Escaper</name>
                            </type>
                            <name>escaper</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>escaper</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>escaper</name>
                                <name>instanceof</name>
                                <name>UnicodeEscaper</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>(<name>UnicodeEscaper</name>)
                                        <name>escaper</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>escaper</name>
                                        <name>instanceof</name>
                                        <name>CharEscaper</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>wrap</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>(<name>CharEscaper</name>)
                                                                <name>escaper</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <comment type="line">// In practice this shouldn't happen because it would be very odd not to
                    </comment>
                    <comment type="line">// extend either CharEscaper or UnicodeEscaper for non trivial cases.</comment>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>IllegalArgumentException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Cannot create a UnicodeEscaper from: " +
                                            <call>
                                                <name><name>escaper</name>.
                                                    <name>getClass</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>getName</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a string that would replace the given character in the specified
                * escaper, or {@code null} if no replacement should be made. This method is
                * intended for use in tests through the {@code EscaperAsserts} class;
                * production users of {@link CharEscaper} should limit themselves to its
                * public interface.
                *
                * @param c the character to escape if necessary
                * @return the replacement string, or {@code null} if no escaping was needed
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>computeReplacement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CharEscaper</name>
                            </type>
                            <name>escaper</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>stringOrNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>escaper</name>.
                                                    <name>escape</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>c</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a string that would replace the given character in the specified
                * escaper, or {@code null} if no replacement should be made. This method is
                * intended for use in tests through the {@code EscaperAsserts} class;
                * production users of {@link UnicodeEscaper} should limit themselves to its
                * public interface.
                *
                * @param cp the Unicode code point to escape if necessary
                * @return the replacement string, or {@code null} if no escaping was needed
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>computeReplacement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>UnicodeEscaper</name>
                            </type>
                            <name>escaper</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>cp</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>stringOrNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>escaper</name>.
                                                    <name>escape</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>cp</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>stringOrNull</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>char</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>in</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>in</name> == <name>null</name>) ? <name>null</name> : new
                            <call>
                                <name>String</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>in</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Private helper to wrap a CharEscaper as a UnicodeEscaper. */</comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>UnicodeEscaper</name>
                </type>
                <name>wrap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>CharEscaper</name>
                            </type>
                            <name>escaper</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <class>
                                <super>
                                    <name>UnicodeEscaper</name>
                                </super>
                                <argument_list>()</argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>protected</specifier>
                                            <name>char</name>
                                            <index>[]</index>
                                        </type>
                                        <name>escape</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>cp</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <comment type="line">// If a code point maps to a single character, just
                                                escape that.
                                            </comment>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>cp</name>
                                                        &lt;
                                                        <name><name>Character</name>.
                                                            <name>MIN_SUPPLEMENTARY_CODE_POINT</name>
                                                        </name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return
                                                            <expr>
                                                                <call>
                                                                    <name><name>escaper</name>.
                                                                        <name>escape</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>(<name>char</name>)
                                                                                <name>cp</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            <comment type="line">// Convert the code point to a surrogate pair and
                                                escape them both.
                                            </comment>
                                            <comment type="line">// Note: This code path is horribly slow and typically
                                                allocates 4 new
                                            </comment>
                                            <comment type="line">// char[] each time it is invoked. However this avoids
                                                any
                                            </comment>
                                            <comment type="line">// synchronization issues and makes the escaper thread
                                                safe.
                                            </comment>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>char</name>
                                                        <index>[]</index>
                                                    </type>
                                                    <name>surrogateChars</name> =
                                                    <init>
                                                        <expr>new
                                                            <name>
                                                                <name>char</name>
                                                                <index>[<expr>2</expr>]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>Character</name>.
                                                            <name>toChars</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>cp</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>surrogateChars</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>0</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>char</name>
                                                        <index>[]</index>
                                                    </type>
                                                    <name>hiChars</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>escaper</name>.
                                                                    <name>escape</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>
                                                                                <name>surrogateChars</name>
                                                                                <index>[<expr>0</expr>]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>char</name>
                                                        <index>[]</index>
                                                    </type>
                                                    <name>loChars</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>escaper</name>.
                                                                    <name>escape</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>
                                                                                <name>surrogateChars</name>
                                                                                <index>[<expr>1</expr>]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>

                                            <comment type="line">// If either hiChars or lowChars are non-null, the
                                                CharEscaper is trying
                                            </comment>
                                            <comment type="line">// to escape the characters of a surrogate pair
                                                separately. This is
                                            </comment>
                                            <comment type="line">// uncommon and applies only to escapers that assume
                                                UCS-2 rather than
                                            </comment>
                                            <comment type="line">// UTF-16. See:
                                                http://en.wikipedia.org/wiki/UTF-16/UCS-2
                                            </comment>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>hiChars</name>
                                                        == <name>null</name> &amp;&amp; <name>loChars</name> ==
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <comment type="line">// We expect this to be the common code
                                                            path for most escapers.
                                                        </comment>
                                                        <return>return
                                                            <expr>
                                                                <name>null</name>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            <comment type="line">// Combine the characters and/or escaped sequences into
                                                a single array.
                                            </comment>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>hiCount</name> =
                                                    <init>
                                                        <expr>
                                                            <name>hiChars</name>
                                                            != <name>null</name> ?
                                                            <name><name>hiChars</name>.
                                                                <name>length</name>
                                                            </name>
                                                            : 1
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>loCount</name> =
                                                    <init>
                                                        <expr>
                                                            <name>loChars</name>
                                                            != <name>null</name> ?
                                                            <name><name>loChars</name>.
                                                                <name>length</name>
                                                            </name>
                                                            : 1
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>char</name>
                                                        <index>[]</index>
                                                    </type>
                                                    <name>output</name> =
                                                    <init>
                                                        <expr>new
                                                            <name>
                                                                <name>char</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>hiCount</name>
                                                                        +
                                                                        <name>loCount</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>hiChars</name>
                                                        !=
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <comment type="line">// TODO: Is this faster than
                                                            System.arraycopy() for small arrays?
                                                        </comment>
                                                        <for>for (
                                                            <init>
                                                                <decl>
                                                                    <type>
                                                                        <name>int</name>
                                                                    </type>
                                                                    <name>n</name> =
                                                                    <init>
                                                                        <expr>0</expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </init>
                                                            <condition>
                                                                <expr>
                                                                    <name>n</name>
                                                                    &lt;
                                                                    <name><name>hiChars</name>.
                                                                        <name>length</name>
                                                                    </name>
                                                                </expr>
                                                                ;
                                                            </condition>
                                                            <incr>
                                                                <expr>++
                                                                    <name>n</name>
                                                                </expr>
                                                            </incr>
                                                            )
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>
                                                                            <name>output</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>n</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                        =
                                                                        <name>
                                                                            <name>hiChars</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>n</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </for>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>
                                                                    <name>output</name>
                                                                    <index>[<expr>0</expr>]
                                                                    </index>
                                                                </name>
                                                                =
                                                                <name>
                                                                    <name>surrogateChars</name>
                                                                    <index>[<expr>0</expr>]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>loChars</name>
                                                        !=
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <for>for (
                                                            <init>
                                                                <decl>
                                                                    <type>
                                                                        <name>int</name>
                                                                    </type>
                                                                    <name>n</name> =
                                                                    <init>
                                                                        <expr>0</expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </init>
                                                            <condition>
                                                                <expr>
                                                                    <name>n</name>
                                                                    &lt;
                                                                    <name><name>loChars</name>.
                                                                        <name>length</name>
                                                                    </name>
                                                                </expr>
                                                                ;
                                                            </condition>
                                                            <incr>
                                                                <expr>++
                                                                    <name>n</name>
                                                                </expr>
                                                            </incr>
                                                            )
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>
                                                                            <name>output</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>hiCount</name>
                                                                                    +
                                                                                    <name>n</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                        =
                                                                        <name>
                                                                            <name>loChars</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>n</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </for>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>
                                                                    <name>output</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>hiCount</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                                =
                                                                <name>
                                                                    <name>surrogateChars</name>
                                                                    <index>[<expr>1</expr>]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                            <return>return
                                                <expr>
                                                    <name>output</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
