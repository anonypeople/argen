<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\eventbus\EventBus.java">
    <comment type="block">/*
        * Copyright (C) 2007 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>eventbus</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>MoreObjects</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.<name>concurrent</name>.
            <name>MoreExecutors</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Method</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Locale</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>Executor</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>logging</name>.
            <name>Level</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>logging</name>.
            <name>Logger</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Dispatches events to listeners, and provides ways for listeners to register
        * themselves.
        *
        * &lt;p&gt;The EventBus allows publish-subscribe-style communication between
        * components without requiring the components to explicitly register with one
        * another (and thus be aware of each other). It is designed exclusively to
        * replace traditional Java in-process event distribution using explicit
        * registration. It is &lt;em&gt;not&lt;/em&gt; a general-purpose publish-subscribe system,
        * nor is it intended for interprocess communication.
        *
        * &lt;h2&gt;Receiving Events&lt;/h2&gt;
        * &lt;p&gt;To receive events, an object should:
        * &lt;ol&gt;
        * &lt;li&gt;Expose a public method, known as the &lt;i&gt;event subscriber&lt;/i&gt;, which accepts
        * a single argument of the type of event desired;&lt;/li&gt;
        * &lt;li&gt;Mark it with a {@link Subscribe} annotation;&lt;/li&gt;
        * &lt;li&gt;Pass itself to an EventBus instance's {@link #register(Object)} method.
        * &lt;/li&gt;
        * &lt;/ol&gt;
        *
        * &lt;h2&gt;Posting Events&lt;/h2&gt;
        * &lt;p&gt;To post an event, simply provide the event object to the
        * {@link #post(Object)} method. The EventBus instance will determine the type
        * of event and route it to all registered listeners.
        *
        * &lt;p&gt;Events are routed based on their type &amp;mdash; an event will be delivered
        * to any subscriber for any type to which the event is &lt;em&gt;assignable.&lt;/em&gt; This
        * includes implemented interfaces, all superclasses, and all interfaces
        * implemented by superclasses.
        *
        * &lt;p&gt;When {@code post} is called, all registered subscribers for an event are run
        * in sequence, so subscribers should be reasonably quick. If an event may trigger
        * an extended process (such as a database load), spawn a thread or queue it for
        * later. (For a convenient way to do this, use an {@link AsyncEventBus}.)
        *
        * &lt;h2&gt;Subscriber Methods&lt;/h2&gt;
        * &lt;p&gt;Event subscriber methods must accept only one argument: the event.
        *
        * &lt;p&gt;Subscribers should not, in general, throw. If they do, the EventBus will
        * catch and log the exception. This is rarely the right solution for error
        * handling and should not be relied upon; it is intended solely to help find
        * problems during development.
        *
        * &lt;p&gt;The EventBus guarantees that it will not call a subscriber method from
        * multiple threads simultaneously, unless the method explicitly allows it by
        * bearing the {@link AllowConcurrentEvents} annotation. If this annotation is
        * not present, subscriber methods need not worry about being reentrant, unless
        * also called from outside the EventBus.
        *
        * &lt;h2&gt;Dead Events&lt;/h2&gt;
        * &lt;p&gt;If an event is posted, but no registered subscribers can accept it, it is
        * considered "dead." To give the system a second chance to handle dead events,
        * they are wrapped in an instance of {@link DeadEvent} and reposted.
        *
        * &lt;p&gt;If a subscriber for a supertype of all events (such as Object) is registered,
        * no event will ever be considered dead, and no DeadEvents will be generated.
        * Accordingly, while DeadEvent extends {@link Object}, a subscriber registered to
        * receive any Object will never receive a DeadEvent.
        *
        * &lt;p&gt;This class is safe for concurrent use.
        *
        * &lt;p&gt;See the Guava User Guide article on &lt;a href=
        * "https://github.com/google/guava/wiki/EventBusExplained"&gt;
        * {@code EventBus}&lt;/a&gt;.
        *
        * @author Cliff Biffle
        * @since 10.0
        */
    </comment>
    <class>
        <annotation>@
            <name>Beta</name>
        </annotation>
        <specifier>public</specifier>
        class <name>EventBus</name>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Logger</name>
                    </type>
                    <name>logger</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Logger</name>.
                                    <name>getLogger</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>EventBus</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class.
                                            <call>
                                                <name>getName</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>identifier</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Executor</name>
                    </type>
                    <name>executor</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>SubscriberExceptionHandler</name>
                    </type>
                    <name>exceptionHandler</name>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>SubscriberRegistry</name>
                    </type>
                    <name>subscribers</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>SubscriberRegistry</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Dispatcher</name>
                    </type>
                    <name>dispatcher</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Creates a new EventBus named "default".
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>EventBus</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"default"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Creates a new EventBus with the given {@code identifier}.
                *
                * @param identifier a brief name for this bus, for logging purposes. Should
                * be a valid Java identifier.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>EventBus</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>identifier</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>identifier</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>MoreExecutors</name>.
                                                    <name>directExecutor</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Dispatcher</name>.
                                                    <name>perThreadDispatchQueue</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>LoggingHandler</name>.
                                                <name>INSTANCE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Creates a new EventBus with the given {@link SubscriberExceptionHandler}.
                *
                * @param exceptionHandler Handler for subscriber exceptions.
                * @since 16.0
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>EventBus</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>SubscriberExceptionHandler</name>
                            </type>
                            <name>exceptionHandler</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"default"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>MoreExecutors</name>.
                                                    <name>directExecutor</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Dispatcher</name>.
                                                    <name>perThreadDispatchQueue</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>exceptionHandler</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <constructor>
                <name>EventBus</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>identifier</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Executor</name>
                            </type>
                            <name>executor</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Dispatcher</name>
                            </type>
                            <name>dispatcher</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>SubscriberExceptionHandler</name>
                            </type>
                            <name>exceptionHandler</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>identifier</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>identifier</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>executor</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>executor</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>dispatcher</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>dispatcher</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>exceptionHandler</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>exceptionHandler</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Returns the identifier for this event bus.
                *
                * @since 19.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>String</name>
                </type>
                <name>identifier</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>identifier</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the default executor this event bus uses for dispatching events to subscribers.
                */
            </comment>
            <function>
                <type>
                    <specifier>final</specifier>
                    <name>Executor</name>
                </type>
                <name>executor</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>executor</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Handles the given exception thrown by a subscriber with the given context.
                */
            </comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>handleSubscriberException</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>SubscriberExceptionContext</name>
                            </type>
                            <name>context</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>e</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>context</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>exceptionHandler</name>.
                                            <name>handleException</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>e</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>context</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>Throwable</name>
                                    </type>
                                    <name>e2</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// if the handler threw an exception... well, just log it</comment>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>logger</name>.
                                                <name>log</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>Level</name>.
                                                            <name>SEVERE</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>String</name>.
                                                                <name>format</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>Locale</name>.
                                                                            <name>ROOT</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>"Exception %s thrown while handling exception:
                                                                        %s"
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>e2</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>e</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>e2</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Registers all subscriber methods on {@code object} to receive events.
                *
                * @param object object whose subscriber methods should be registered.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>register</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>subscribers</name>.
                                    <name>register</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Unregisters all subscriber methods on a registered {@code object}.
                *
                * @param object object whose subscriber methods should be unregistered.
                * @throws IllegalArgumentException if the object was not previously registered.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>unregister</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>subscribers</name>.
                                    <name>unregister</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Posts an event to all registered subscribers. This method will return
                * successfully after the event has been posted to all subscribers, and
                * regardless of any exceptions thrown by subscribers.
                *
                * &lt;p&gt;If no subscribers have been subscribed for {@code event}'s class, and
                * {@code event} is not already a {@link DeadEvent}, it will be wrapped in a
                * DeadEvent and reposted.
                *
                * @param event event to post.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>post</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>event</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Subscriber</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>eventSubscribers</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>subscribers</name>.
                                            <name>getSubscribers</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>event</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>eventSubscribers</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>dispatcher</name>.
                                                <name>dispatch</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>event</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>eventSubscribers</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>!(<name>event</name>
                                        <name>instanceof</name>
                                        <name>DeadEvent</name>)
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// the event had no subscribers and was not itself a
                                            DeadEvent
                                        </comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>post</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>new
                                                                <call>
                                                                    <name>DeadEvent</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>this</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>event</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>MoreObjects</name>.
                                    <name>toStringHelper</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>addValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>identifier</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>toString</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Simple logging handler for subscriber exceptions.
                */
            </comment>
            <class>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>LoggingHandler</name>
                <super>
                    <implements>implements
                        <name>SubscriberExceptionHandler</name>
                    </implements>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>LoggingHandler</name>
                            </type>
                            <name>INSTANCE</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>LoggingHandler</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>handleException</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Throwable</name>
                                    </type>
                                    <name>exception</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>SubscriberExceptionContext</name>
                                    </type>
                                    <name>context</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Logger</name>
                                    </type>
                                    <name>logger</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>logger</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>context</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>logger</name>.
                                                <name>isLoggable</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>Level</name>.
                                                            <name>SEVERE</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>logger</name>.
                                                        <name>log</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>Level</name>.
                                                                    <name>SEVERE</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name>message</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>context</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>exception</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>private</specifier>
                            <specifier>static</specifier>
                            <name>Logger</name>
                        </type>
                        <name>logger</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>SubscriberExceptionContext</name>
                                    </type>
                                    <name>context</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>Logger</name>.
                                            <name>getLogger</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>EventBus</name>.
                                                        <name>
                                                            <name/>
                                                        </name>
                                                    </name>
                                                    class.
                                                    <call>
                                                        <name>getName</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    + "." +
                                                    <call>
                                                        <name><name>context</name>.
                                                            <name>getEventBus</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    .
                                                    <call>
                                                        <name>identifier</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>private</specifier>
                            <specifier>static</specifier>
                            <name>String</name>
                        </type>
                        <name>message</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>SubscriberExceptionContext</name>
                                    </type>
                                    <name>context</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Method</name>
                                    </type>
                                    <name>method</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>context</name>.
                                                    <name>getSubscriberMethod</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <return>return
                                <expr>"Exception thrown by subscriber method "
                                    +
                                    <call>
                                        <name><name>method</name>.
                                            <name>getName</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    + '(' +
                                    <call>
                                        <name><name>method</name>.
                                            <name>getParameterTypes</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    <index>[<expr>0</expr>]
                                    </index>
                                    .
                                    <call>
                                        <name>getName</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    + ')'
                                    + " on subscriber " +
                                    <call>
                                        <name><name>context</name>.
                                            <name>getSubscriber</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    + " when dispatching event: " +
                                    <call>
                                        <name><name>context</name>.
                                            <name>getEvent</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>
            }
        </block>
    </class>
</unit>
