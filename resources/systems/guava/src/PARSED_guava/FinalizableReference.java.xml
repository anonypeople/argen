<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\base\FinalizableReference.java">
    <comment type="block">/*
        * Copyright (C) 2007 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>base</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * Implemented by references that have code to run after garbage collection of their referents.
        *
        * @see FinalizableReferenceQueue
        * @author Bob Lee
        * @since 2.0
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>FinalizableReference</name>
        <block>{
            <comment type="javadoc">/**
                * Invoked on a background thread after the referent has been garbage collected unless security
                * restrictions prevented starting a background thread, in which case this method is invoked when
                * new references are created.
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>finalizeReferent</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            }
        </block>
    </class>
</unit>
