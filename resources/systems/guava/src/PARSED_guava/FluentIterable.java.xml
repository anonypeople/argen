<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\FluentIterable.java">
    <comment type="block">/*
        * Copyright (C) 2008 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtIncompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Function</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Joiner</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Optional</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Predicate</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Arrays</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collection</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Comparator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>SortedSet</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>CheckReturnValue</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * {@code FluentIterable} provides a rich interface for manipulating {@code Iterable} instances in a
        * chained fashion. A {@code FluentIterable} can be created from an {@code Iterable}, or from a set
        * of elements. The following types of methods are provided on {@code FluentIterable}:
        * &lt;ul&gt;
        * &lt;li&gt;chained methods which return a new {@code FluentIterable} based in some way on the contents
        * of the current one (for example {@link #transform})
        * &lt;li&gt;conversion methods which copy the {@code FluentIterable}'s contents into a new collection or
        * array (for example {@link #toList})
        * &lt;li&gt;element extraction methods which facilitate the retrieval of certain elements (for example
        * {@link #last})
        * &lt;li&gt;query methods which answer questions about the {@code FluentIterable}'s contents (for example
        * {@link #anyMatch})
        * &lt;/ul&gt;
        *
        * &lt;p&gt;Here is an example that accepts a list from a database call, filters it based on a predicate,
        * transforms it by invoking {@code toString()} on each element, and returns the first 10 elements
        * as an {@code ImmutableList}: &lt;pre&gt; {@code
        *
        * FluentIterable
        * .from(database.getClientList())
        * .filter(activeInLastMonth)
        * .transform(Functions.toStringFunction())
        * .limit(10)
        * .toList();}&lt;/pre&gt;
        *
        * &lt;p&gt;Anything which can be done using {@code FluentIterable} could be done in a different fashion
        * (often with {@link Iterables}), however the use of {@code FluentIterable} makes many sets of
        * operations significantly more concise.
        *
        * @author Marcin Mikosik
        * @since 12.0
        */
    </comment>
    <class>
        <annotation>@
            <name>GwtCompatible</name>
            <argument_list>(emulated = true)</argument_list>
        </annotation>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class
        <name>
            <name>FluentIterable</name>
            <argument_list>&lt;
                <argument>
                    <name>E</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <implements>implements
                <name>
                    <name>Iterable</name>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <comment type="line">// We store 'iterable' and use it instead of 'this' to allow Iterables to perform
                instanceof
            </comment>
            <comment type="line">// checks on the _original_ iterable when FluentIterable.from is used.</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>Iterable</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>iterable</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Constructor for use by subclasses. */</comment>
            <constructor>
                <specifier>protected</specifier>
                <name>FluentIterable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>iterable</name>
                            </name>
                            =
                            <name>this</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <constructor>
                <name>FluentIterable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>iterable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>iterable</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>iterable</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Returns a fluent iterable that wraps {@code iterable}, or {@code iterable} itself if it
                * is already a {@code FluentIterable}.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>FluentIterable</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>from</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>iterable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>iterable</name>
                            <name>instanceof</name>
                            <name>FluentIterable</name>)
                            ? (
                            <name>
                                <name>FluentIterable</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>E</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            )
                            <name>iterable</name>
                            : new
                            <class>
                                <super>
                                    <name>
                                        <name>FluentIterable</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>E</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </super>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>iterable</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>
                                                <name>Iterator</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>E</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>iterator</name>
                                        <parameter_list>()</parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>iterable</name>.
                                                            <name>iterator</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Construct a fluent iterable from another fluent iterable. This is obviously never necessary,
                * but is intended to help call out cases where one migration from {@code Iterable} to
                * {@code FluentIterable} has obviated the need to explicitly convert to a {@code FluentIterable}.
                *
                * @deprecated instances of {@code FluentIterable} don't need to be converted to
                * {@code FluentIterable}
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>FluentIterable</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>from</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>FluentIterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>iterable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>iterable</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a fluent iterable containing {@code elements} in the specified order.
                *
                * @since 18.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>FluentIterable</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>of</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>E</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>elements</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>from</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Lists</name>.
                                                    <name>newArrayList</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>elements</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a string representation of this fluent iterable, with the format
                * {@code [e1, e2, ..., en]}.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Iterables</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>iterable</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the number of elements in this fluent iterable.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>int</name>
                </type>
                <name>size</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Iterables</name>.
                                    <name>size</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>iterable</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns {@code true} if this fluent iterable contains any object for which
                * {@code equals(element)} is true.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Iterables</name>.
                                    <name>contains</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>iterable</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>element</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a fluent iterable whose {@code Iterator} cycles indefinitely over the elements of
                * this fluent iterable.
                *
                * &lt;p&gt;That iterator supports {@code remove()} if {@code iterable.iterator()} does. After
                * {@code remove()} is called, subsequent cycles omit the removed element, which is no longer in
                * this fluent iterable. The iterator's {@code hasNext()} method returns {@code true} until
                * this fluent iterable is empty.
                *
                * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; Typical uses of the resulting iterator may produce an infinite
                loop. You
                * should use an explicit {@code break} or be certain that you will eventually remove all the
                * elements.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>
                        <name>FluentIterable</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>cycle</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>from</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Iterables</name>.
                                                    <name>cycle</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>iterable</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a fluent iterable whose iterators traverse first the elements of this fluent iterable,
                * followed by those of {@code other}. The iterators are not polled until necessary.
                *
                * &lt;p&gt;The returned iterable's {@code Iterator} supports {@code remove()} when the corresponding
                * {@code Iterator} supports it.
                *
                * @since 18.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>
                        <name>FluentIterable</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>append</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>E</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>other</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>from</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Iterables</name>.
                                                    <name>concat</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>iterable</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>other</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a fluent iterable whose iterators traverse first the elements of this fluent iterable,
                * followed by {@code elements}.
                *
                * @since 18.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>
                        <name>FluentIterable</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>append</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type><name>E</name>...
                            </type>
                            <name>elements</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>from</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Iterables</name>.
                                                    <name>concat</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>iterable</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>Arrays</name>.
                                                                    <name>asList</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>elements</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the elements from this fluent iterable that satisfy a predicate. The
                * resulting fluent iterable's iterator does not support {@code remove()}.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>
                        <name>FluentIterable</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>filter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Predicate</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>E</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>predicate</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>from</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Iterables</name>.
                                                    <name>filter</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>iterable</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>predicate</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the elements from this fluent iterable that are instances of class {@code type}.
                *
                * @param type the type of elements desired
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("Class.isInstance")</argument_list>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>FluentIterable</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>filter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>from</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Iterables</name>.
                                                    <name>filter</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>iterable</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>type</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns {@code true} if any element in this fluent iterable satisfies the predicate.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>anyMatch</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Predicate</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>E</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>predicate</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Iterables</name>.
                                    <name>any</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>iterable</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>predicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns {@code true} if every element in this fluent iterable satisfies the predicate.
                * If this fluent iterable is empty, {@code true} is returned.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>allMatch</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Predicate</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>E</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>predicate</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Iterables</name>.
                                    <name>all</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>iterable</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>predicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an {@link Optional} containing the first element in this fluent iterable that
                * satisfies the given predicate, if such an element exists.
                *
                * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; avoid using a {@code predicate} that matches {@code null}. If
                {@code null}
                * is matched in this fluent iterable, a {@link NullPointerException} will be thrown.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>
                        <name>Optional</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>firstMatch</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Predicate</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>E</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>predicate</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Iterables</name>.
                                    <name>tryFind</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>iterable</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>predicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a fluent iterable that applies {@code function} to each element of this
                * fluent iterable.
                *
                * &lt;p&gt;The returned fluent iterable's iterator supports {@code remove()} if this iterable's
                * iterator does. After a successful {@code remove()} call, this fluent iterable no longer
                * contains the corresponding element.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>FluentIterable</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>transform</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Function</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>E</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>function</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>from</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Iterables</name>.
                                                    <name>transform</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>iterable</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>function</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Applies {@code function} to each element of this fluent iterable and returns
                * a fluent iterable with the concatenated combination of results. {@code function}
                * returns an Iterable of results.
                *
                * &lt;p&gt;The returned fluent iterable's iterator supports {@code remove()} if this
                * function-returned iterables' iterator does. After a successful {@code remove()} call,
                * the returned fluent iterable no longer contains the corresponding element.
                *
                * @since 13.0 (required {@code Function&lt;E, Iterable&lt;T&gt;&gt;} until 14.0)
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>FluentIterable</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>transformAndConcat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Function</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>E</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>
                                                    <name>Iterable</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                            <extends>extends
                                                                <name>T</name>
                                                            </extends>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>function</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>from</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Iterables</name>.
                                                    <name>concat</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>transform</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>function</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an {@link Optional} containing the first element in this fluent iterable.
                * If the iterable is empty, {@code Optional.absent()} is returned.
                *
                * @throws NullPointerException if the first element is null; if this is a possibility, use
                * {@code iterator().next()} or {@link Iterables#getFirst} instead.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>
                        <name>Optional</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>first</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>iterator</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>iterable</name>.
                                            <name>iterator</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>iterator</name>.
                                    <name>hasNext</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ?
                            <call>
                                <name><name>Optional</name>.
                                    <name>of</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>iterator</name>.
                                                    <name>next</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            :
                            <name><name>Optional</name>.
                                <name>
                                    <name/>
                                </name>
                            </name>
                            &lt;<name>E</name>&gt;
                            <call>
                                <name>absent</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an {@link Optional} containing the last element in this fluent iterable.
                * If the iterable is empty, {@code Optional.absent()} is returned.
                *
                * @throws NullPointerException if the last element is null; if this is a possibility, use
                * {@link Iterables#getLast} instead.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>
                        <name>Optional</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>last</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// Iterables#getLast was inlined here so we don't have to throw/catch a NSEE
                    </comment>

                    <comment type="line">// TODO(kevinb): Support a concurrently modified collection?</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>iterable</name>
                                <name>instanceof</name>
                                <name>List</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>List</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>E</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>list</name> =
                                        <init>
                                            <expr>(
                                                <name>
                                                    <name>List</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>E</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                )
                                                <name>iterable</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>list</name>.
                                                    <name>isEmpty</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>Optional</name>.
                                                            <name>absent</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>Optional</name>.
                                                <name>of</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>list</name>.
                                                                <name>get</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>list</name>.
                                                                                <name>size</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                        - 1
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>iterator</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>iterable</name>.
                                            <name>iterator</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>iterator</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>Optional</name>.
                                                <name>absent</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="block">/*
                        * TODO(kevinb): consider whether this "optimization" is worthwhile. Users
                        * with SortedSets tend to know they are SortedSets and probably would not
                        * call this method.
                        */
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>iterable</name>
                                <name>instanceof</name>
                                <name>SortedSet</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>SortedSet</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>E</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>sortedSet</name> =
                                        <init>
                                            <expr>(
                                                <name>
                                                    <name>SortedSet</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>E</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                )
                                                <name>iterable</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>Optional</name>.
                                                <name>of</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>sortedSet</name>.
                                                                <name>last</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <while>while
                        <condition>(<expr>true</expr>)
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>E</name>
                                    </type>
                                    <name>current</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>iterator</name>.
                                                    <name>next</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name><name>iterator</name>.
                                                <name>hasNext</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>Optional</name>.
                                                        <name>of</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>current</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a view of this fluent iterable that skips its first {@code numberToSkip}
                * elements. If this fluent iterable contains fewer than {@code numberToSkip} elements,
                * the returned fluent iterable skips all of its elements.
                *
                * &lt;p&gt;Modifications to this fluent iterable before a call to {@code iterator()} are
                * reflected in the returned fluent iterable. That is, the its iterator skips the first
                * {@code numberToSkip} elements that exist when the iterator is created, not when {@code skip()}
                * is called.
                *
                * &lt;p&gt;The returned fluent iterable's iterator supports {@code remove()} if the
                * {@code Iterator} of this fluent iterable supports it. Note that it is &lt;i&gt;not&lt;/i&gt;
                * possible to delete the last skipped element by immediately calling {@code remove()} on the
                * returned fluent iterable's iterator, as the {@code Iterator} contract states that a call
                * to {@code * remove()} before a call to {@code next()} will throw an
                * {@link IllegalStateException}.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>
                        <name>FluentIterable</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>skip</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>numberToSkip</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>from</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Iterables</name>.
                                                    <name>skip</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>iterable</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>numberToSkip</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates a fluent iterable with the first {@code size} elements of this
                * fluent iterable. If this fluent iterable does not contain that many elements,
                * the returned fluent iterable will have the same behavior as this fluent iterable.
                * The returned fluent iterable's iterator supports {@code remove()} if this
                * fluent iterable's iterator does.
                *
                * @param size the maximum number of elements in the returned fluent iterable
                * @throws IllegalArgumentException if {@code size} is negative
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>
                        <name>FluentIterable</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>limit</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>from</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Iterables</name>.
                                                    <name>limit</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>iterable</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>size</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Determines whether this fluent iterable is empty.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>!
                            <call>
                                <name><name>iterable</name>.
                                    <name>iterator</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>hasNext</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an {@code ImmutableList} containing all of the elements from this fluent iterable in
                * proper sequence.
                *
                * @since 14.0 (since 12.0 as {@code toImmutableList()}).
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>
                        <name>ImmutableList</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>toList</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>ImmutableList</name>.
                                    <name>copyOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>iterable</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an {@code ImmutableList} containing all of the elements from this {@code
                * FluentIterable} in the order specified by {@code comparator}. To produce an {@code
                * ImmutableList} sorted by its natural ordering, use {@code toSortedList(Ordering.natural())}.
                *
                * @param comparator the function by which to sort list elements
                * @throws NullPointerException if any element is null
                * @since 14.0 (since 13.0 as {@code toSortedImmutableList()}).
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>
                        <name>ImmutableList</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>toSortedList</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Comparator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>E</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>comparator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Ordering</name>.
                                    <name>from</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>comparator</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>immutableSortedCopy</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>iterable</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an {@code ImmutableSet} containing all of the elements from this fluent iterable with
                * duplicates removed.
                *
                * @since 14.0 (since 12.0 as {@code toImmutableSet()}).
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>
                        <name>ImmutableSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>toSet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>ImmutableSet</name>.
                                    <name>copyOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>iterable</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an {@code ImmutableSortedSet} containing all of the elements from this {@code
                * FluentIterable} in the order specified by {@code comparator}, with duplicates (determined by
                * {@code comparator.compare(x, y) == 0}) removed. To produce an {@code ImmutableSortedSet} sorted
                * by its natural ordering, use {@code toSortedSet(Ordering.natural())}.
                *
                * @param comparator the function by which to sort set elements
                * @throws NullPointerException if any element is null
                * @since 14.0 (since 12.0 as {@code toImmutableSortedSet()}).
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>
                        <name>ImmutableSortedSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>toSortedSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Comparator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>E</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>comparator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>ImmutableSortedSet</name>.
                                    <name>copyOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>comparator</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>iterable</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an {@code ImmutableMultiset} containing all of the elements from this fluent iterable.
                *
                * @since 19.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>
                        <name>ImmutableMultiset</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>toMultiset</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>ImmutableMultiset</name>.
                                    <name>copyOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>iterable</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an immutable map whose keys are the distinct elements of this {@code FluentIterable}
                * and whose value for each key was computed by {@code valueFunction}. The map's iteration order
                * is the order of the first appearance of each key in this iterable.
                *
                * &lt;p&gt;When there are multiple instances of a key in this iterable, it is unspecified whether
                * {@code valueFunction} will be applied to more than one instance of that key and, if it is,
                * which result will be mapped to that key in the returned map.
                *
                * @throws NullPointerException if any element of this iterable is {@code null}, or if {@code
                * valueFunction} produces {@code null} for any key
                * @since 14.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ImmutableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>toMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Function</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>E</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>valueFunction</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Maps</name>.
                                    <name>toMap</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>iterable</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueFunction</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates an index {@code ImmutableListMultimap} that contains the results of applying a
                * specified function to each item in this {@code FluentIterable} of values. Each element of this
                * iterable will be stored as a value in the resulting multimap, yielding a multimap with the same
                * size as this iterable. The key used to store that value in the multimap will be the result of
                * calling the function on that value. The resulting multimap is created as an immutable snapshot.
                * In the returned multimap, keys appear in the order they are first encountered, and the values
                * corresponding to each key appear in the same order as they are encountered.
                *
                * @param keyFunction the function used to produce the key for each value
                * @throws NullPointerException if any of the following cases is true:
                * &lt;ul&gt;
                * &lt;li&gt;{@code keyFunction} is null
                * &lt;li&gt;An element in this fluent iterable is null
                * &lt;li&gt;{@code keyFunction} returns {@code null} for any element of this iterable
                * &lt;/ul&gt;
                * @since 14.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ImmutableListMultimap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>index</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Function</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>E</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>keyFunction</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Multimaps</name>.
                                    <name>index</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>iterable</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>keyFunction</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a map with the contents of this {@code FluentIterable} as its {@code values}, indexed
                * by keys derived from those values. In other words, each input value produces an entry in the
                * map whose key is the result of applying {@code keyFunction} to that value. These entries appear
                * in the same order as they appeared in this fluent iterable. Example usage:
                * &lt;pre&gt; {@code
                *
                * Color red = new Color("red", 255, 0, 0);
                * ...
                * FluentIterable&lt;Color&gt; allColors = FluentIterable.from(ImmutableSet.of(red, green, blue));
                *
                * Map&lt;String, Color&gt; colorForName = allColors.uniqueIndex(toStringFunction());
                * assertThat(colorForName).containsEntry("red", red);}&lt;/pre&gt;
                *
                * &lt;p&gt;If your index may associate multiple values with each key, use {@link #index(Function)
                * index}.
                *
                * @param keyFunction the function used to produce the key for each value
                * @return a map mapping the result of evaluating the function {@code
                * keyFunction} on each value in this fluent iterable to that value
                * @throws IllegalArgumentException if {@code keyFunction} produces the same
                * key for more than one value in this fluent iterable
                * @throws NullPointerException if any elements of this fluent iterable is null, or
                * if {@code keyFunction} produces {@code null} for any value
                * @since 14.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ImmutableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>uniqueIndex</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Function</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>E</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>keyFunction</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Maps</name>.
                                    <name>uniqueIndex</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>iterable</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>keyFunction</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an array containing all of the elements from this fluent iterable in iteration order.
                *
                * @param type the type of the elements
                * @return a newly-allocated array into which all the elements of this fluent iterable have
                * been copied
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("Array.newArray(Class, int)")</argument_list>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>E</name>
                    <index>[]</index>
                </type>
                <name>toArray</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Iterables</name>.
                                    <name>toArray</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>iterable</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>type</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Copies all the elements from this fluent iterable to {@code collection}. This is equivalent to
                * calling {@code Iterables.addAll(collection, this)}.
                *
                * @param collection the collection to copy elements to
                * @return {@code collection}, for convenience
                * @since 14.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>C</name>
                            <extends>extends
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>E</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>C</name>
                </type>
                <name>copyInto</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>C</name>
                            </type>
                            <name>collection</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>collection</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>iterable</name>
                                <name>instanceof</name>
                                <name>Collection</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>collection</name>.
                                                <name>addAll</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>Collections2</name>.
                                                                <name>cast</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>iterable</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>E</name>
                                            </type>
                                            <name>item</name> :
                                            <range>
                                                <expr>
                                                    <name>iterable</name>
                                                </expr>
                                            </range>
                                        </decl>
                                    </init>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>collection</name>.
                                                        <name>add</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>item</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </else>
                    </if>
                    <return>return
                        <expr>
                            <name>collection</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a {@link String} containing all of the elements of this fluent iterable joined with
                * {@code joiner}.
                *
                * @since 18.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>String</name>
                </type>
                <name>join</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Joiner</name>
                            </type>
                            <name>joiner</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>joiner</name>.
                                    <name>join</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the element at the specified position in this fluent iterable.
                *
                * @param position position of the element to return
                * @return the element at the specified position in this fluent iterable
                * @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to
                * the size of this fluent iterable
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>E</name>
                </type>
                <name>get</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>position</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Iterables</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>iterable</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>position</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Function that transforms {@code Iterable&lt;E&gt;} into a fluent iterable.
                */
            </comment>
            <class>
                <specifier>private</specifier>
                <specifier>static</specifier> class
                <name>
                    <name>FromIterableFunction</name>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <super>
                    <implements>implements
                        <name>
                            <name>Function</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>Iterable</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>E</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                ,
                                <argument>
                                    <name>
                                        <name>FluentIterable</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>E</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </implements>
                </super>
                <block>{
                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>
                                <name>FluentIterable</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>E</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>apply</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Iterable</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>E</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>fromObject</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>FluentIterable</name>.
                                            <name>from</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fromObject</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>
            }
        </block>
    </class>
</unit>
