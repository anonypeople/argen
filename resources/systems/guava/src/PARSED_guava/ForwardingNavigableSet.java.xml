<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\ForwardingNavigableSet.java">
    <comment type="block">/*
        * Copyright (C) 2012 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>NavigableSet</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>SortedSet</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A navigable set which forwards all its method calls to another navigable set. Subclasses should
        * override one or more methods to modify the behavior of the backing set as desired per the &lt;a
        * href="http://en.wikipedia.org/wiki/Decorator_pattern"&gt;decorator pattern&lt;/a&gt;.
        *
        * &lt;p&gt;&lt;i&gt;Warning:&lt;/i&gt; The methods of {@code ForwardingNavigableSet} forward &lt;i&gt;indiscriminately&lt;/i&gt;
        * to the methods of the delegate. For example, overriding {@link #add} alone &lt;i&gt;will not&lt;/i&gt;
        * change the behavior of {@link #addAll}, which can lead to unexpected behavior. In this case, you
        * should override {@code addAll} as well, either providing your own implementation, or delegating
        * to the provided {@code standardAddAll} method.
        *
        * &lt;p&gt;Each of the {@code standard} methods uses the set's comparator (or the natural ordering of
        * the elements, if there is no comparator) to test element equality. As a result, if the
        * comparator is not consistent with equals, some of the standard implementations may violate the
        * {@code Set} contract.
        *
        * &lt;p&gt;The {@code standard} methods and the collection views they return are not guaranteed to be
        * thread-safe, even when all of the methods that they depend on are thread-safe.
        *
        * @author Louis Wasserman
        * @since 12.0
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class
        <name>
            <name>ForwardingNavigableSet</name>
            <argument_list>&lt;
                <argument>
                    <name>E</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>ForwardingSortedSet</name>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>NavigableSet</name>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{

            <comment type="javadoc">/** Constructor for use by subclasses. */</comment>
            <constructor>
                <specifier>protected</specifier>
                <name>ForwardingNavigableSet</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>protected</specifier>
                    <specifier>abstract</specifier>
                    <name>
                        <name>NavigableSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>delegate</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>E</name>
                </type>
                <name>lower</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>delegate</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>lower</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>e</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A sensible definition of {@link #lower} in terms of the {@code descendingIterator} method of
                * {@link #headSet(Object, boolean)}. If you override {@link #headSet(Object, boolean)}, you may
                * wish to override {@link #lower} to forward to this implementation.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>E</name>
                </type>
                <name>standardLower</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Iterators</name>.
                                    <name>getNext</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>headSet</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>e</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>false</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>descendingIterator</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>E</name>
                </type>
                <name>floor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>delegate</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>floor</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>e</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A sensible definition of {@link #floor} in terms of the {@code descendingIterator} method of
                * {@link #headSet(Object, boolean)}. If you override {@link #headSet(Object, boolean)}, you may
                * wish to override {@link #floor} to forward to this implementation.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>E</name>
                </type>
                <name>standardFloor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Iterators</name>.
                                    <name>getNext</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>headSet</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>e</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>true</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>descendingIterator</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>E</name>
                </type>
                <name>ceiling</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>delegate</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>ceiling</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>e</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A sensible definition of {@link #ceiling} in terms of the {@code iterator} method of
                * {@link #tailSet(Object, boolean)}. If you override {@link #tailSet(Object, boolean)}, you may
                * wish to override {@link #ceiling} to forward to this implementation.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>E</name>
                </type>
                <name>standardCeiling</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Iterators</name>.
                                    <name>getNext</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>tailSet</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>e</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>true</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>iterator</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>E</name>
                </type>
                <name>higher</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>delegate</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>higher</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>e</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A sensible definition of {@link #higher} in terms of the {@code iterator} method of
                * {@link #tailSet(Object, boolean)}. If you override {@link #tailSet(Object, boolean)}, you may
                * wish to override {@link #higher} to forward to this implementation.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>E</name>
                </type>
                <name>standardHigher</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Iterators</name>.
                                    <name>getNext</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>tailSet</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>e</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>false</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>iterator</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>E</name>
                </type>
                <name>pollFirst</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>delegate</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>pollFirst</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A sensible definition of {@link #pollFirst} in terms of the {@code iterator} method. If you
                * override {@link #iterator} you may wish to override {@link #pollFirst} to forward to this
                * implementation.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>E</name>
                </type>
                <name>standardPollFirst</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Iterators</name>.
                                    <name>pollNext</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>iterator</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>E</name>
                </type>
                <name>pollLast</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>delegate</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>pollLast</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A sensible definition of {@link #pollLast} in terms of the {@code descendingIterator} method.
                * If you override {@link #descendingIterator} you may wish to override {@link #pollLast} to
                * forward to this implementation.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>E</name>
                </type>
                <name>standardPollLast</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Iterators</name>.
                                    <name>pollNext</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>descendingIterator</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>E</name>
                </type>
                <name>standardFirst</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>iterator</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>next</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>E</name>
                </type>
                <name>standardLast</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>descendingIterator</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>next</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>descendingSet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>delegate</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>descendingSet</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A sensible implementation of {@link NavigableSet#descendingSet} in terms of the other methods
                * of {@link NavigableSet}, notably including {@link NavigableSet#descendingIterator}.
                *
                * &lt;p&gt;In many cases, you may wish to override {@link ForwardingNavigableSet#descendingSet} to
                * forward to this implementation or a subclass thereof.
                *
                * @since 12.0
                */
            </comment>
            <class>
                <annotation>@
                    <name>Beta</name>
                </annotation>
                <specifier>protected</specifier>
                class <name>StandardDescendingSet</name>
                <super>
                    <extends>extends <name>Sets</name>.
                        <name>
                            <name>DescendingSet</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </super>
                <block>{
                    <comment type="javadoc">/** Constructor for use by subclasses. */</comment>
                    <constructor>
                        <specifier>public</specifier>
                        <name>StandardDescendingSet</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>ForwardingNavigableSet</name>.
                                                        <name>this</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    }
                </block>
            </class>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Iterator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>descendingIterator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>delegate</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>descendingIterator</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>subSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>fromElement</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>fromInclusive</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>toElement</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>toInclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>delegate</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>subSet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fromElement</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fromInclusive</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>toElement</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>toInclusive</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A sensible definition of {@link #subSet(Object, boolean, Object, boolean)} in terms of the
                * {@code headSet} and {@code tailSet} methods. In many cases, you may wish to override
                * {@link #subSet(Object, boolean, Object, boolean)} to forward to this implementation.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <specifier>protected</specifier>
                    <name>
                        <name>NavigableSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>standardSubSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>fromElement</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>fromInclusive</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>toElement</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>toInclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>tailSet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fromElement</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fromInclusive</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>headSet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>toElement</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>toInclusive</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A sensible definition of {@link #subSet(Object, Object)} in terms of the
                * {@link #subSet(Object, boolean, Object, boolean)} method. If you override
                * {@link #subSet(Object, boolean, Object, boolean)}, you may wish to override
                * {@link #subSet(Object, Object)} to forward to this implementation.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>protected</specifier>
                    <name>
                        <name>SortedSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>standardSubSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>fromElement</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>toElement</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>subSet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fromElement</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>toElement</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>headSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>toElement</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>inclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>delegate</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>headSet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>toElement</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>inclusive</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A sensible definition of {@link #headSet(Object)} in terms of the
                * {@link #headSet(Object, boolean)} method. If you override
                * {@link #headSet(Object, boolean)}, you may wish to override
                * {@link #headSet(Object)} to forward to this implementation.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>
                        <name>SortedSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>standardHeadSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>toElement</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>headSet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>toElement</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>tailSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>fromElement</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>inclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>delegate</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>tailSet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fromElement</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>inclusive</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A sensible definition of {@link #tailSet(Object)} in terms of the
                * {@link #tailSet(Object, boolean)} method. If you override
                * {@link #tailSet(Object, boolean)}, you may wish to override
                * {@link #tailSet(Object)} to forward to this implementation.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>
                        <name>SortedSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>standardTailSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>fromElement</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>tailSet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fromElement</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
