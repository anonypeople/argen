<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\ForwardingObject.java">
    <comment type="block">/*
        * Copyright (C) 2007 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * An abstract base class for implementing the &lt;a
        * href="http://en.wikipedia.org/wiki/Decorator_pattern"&gt;decorator pattern&lt;/a&gt;.
        * The {@link #delegate()} method must be overridden to return the instance
        * being decorated.
        *
        * &lt;p&gt;This class does &lt;i&gt;not&lt;/i&gt; forward the {@code hashCode} and {@code equals}
        * methods through to the backing object, but relies on {@code Object}'s
        * implementation. This is necessary to preserve the symmetry of {@code equals}.
        * Custom definitions of equality are usually based on an interface, such as
        * {@code Set} or {@code List}, so that the implementation of {@code equals} can
        * cast the object being tested for equality to the custom interface. {@code
        * ForwardingObject} implements no such custom interfaces directly; they
        * are implemented only in subclasses. Therefore, forwarding {@code equals}
        * would break symmetry, as the forwarding object might consider itself equal to
        * the object being tested, but the reverse could not be true. This behavior is
        * consistent with the JDK's collection wrappers, such as
        * {@link java.util.Collections#unmodifiableCollection}. Use an
        * interface-specific subclass of {@code ForwardingObject}, such as {@link
        * ForwardingList}, to preserve equality behavior, or override {@code equals}
        * directly.
        *
        * &lt;p&gt;The {@code toString} method is forwarded to the delegate. Although this
        * class does not implement {@link Serializable}, a serializable subclass may be
        * created since this class has a parameter-less constructor.
        *
        * @author Mike Bostock
        * @since 2.0
        */
    </comment>
    <class>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class <name>ForwardingObject</name>
        <block>{

            <comment type="javadoc">/** Constructor for use by subclasses. */</comment>
            <constructor>
                <specifier>protected</specifier>
                <name>ForwardingObject</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="javadoc">/**
                * Returns the backing delegate instance that methods are forwarded to.
                * Abstract subclasses generally override this method with an abstract method
                * that has a more specific return type, such as {@link
                * ForwardingSet#delegate}. Concrete subclasses override this method to supply
                * the instance being decorated.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>protected</specifier>
                    <specifier>abstract</specifier>
                    <name>Object</name>
                </type>
                <name>delegate</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the string representation generated by the delegate's
                * {@code toString} method.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>delegate</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>toString</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="block">/* No equals or hashCode. See class comments for details. */</comment>
            }
        </block>
    </class>
</unit>
