<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\hash\Funnel.java">
    <comment type="block">/*
        * Copyright (C) 2011 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
        * in compliance with the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software distributed under the License
        * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
        * or implied. See the License for the specific language governing permissions and limitations under
        * the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>hash</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * An object which can send data from an object of type {@code T} into a {@code PrimitiveSink}.
        * Implementations for common types can be found in {@link Funnels}.
        *
        * &lt;p&gt;Note that serialization of {@linkplain BloomFilter bloom filters} requires the proper
        * serialization of funnels. When possible, it is recommended that funnels be implemented as a
        * single-element enum to maintain serialization guarantees. See Effective Java (2nd Edition),
        * Item 3: "Enforce the singleton property with a private constructor or an enum type". For example:
        * &lt;pre&gt; {@code
        * public enum PersonFunnel implements Funnel&lt;Person&gt; {
        * INSTANCE;
        * public void funnel(Person person, PrimitiveSink into) {
        * into.putUnencodedChars(person.getFirstName())
        * .putUnencodedChars(person.getLastName())
        * .putInt(person.getAge());
        * }
        * }}&lt;/pre&gt;
        *
        * @author Dimitris Andreou
        * @since 11.0
        */
    </comment>
    <class type="interface">
        <annotation>@
            <name>Beta</name>
        </annotation>
        <specifier>public</specifier>
        interface
        <name>
            <name>Funnel</name>
            <argument_list>&lt;
                <argument>
                    <name>T</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>Serializable</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Sends a stream of data from the {@code from} object into the sink {@code into}. There
                * is no requirement that this data be complete enough to fully reconstitute the object
                * later.
                *
                * @since 12.0 (in Guava 11.0, {@code PrimitiveSink} was named {@code Sink})
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>funnel</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>from</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>PrimitiveSink</name>
                            </type>
                            <name>into</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            }
        </block>
    </class>
</unit>
