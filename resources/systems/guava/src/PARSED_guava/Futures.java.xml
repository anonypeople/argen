<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\util\concurrent\Futures.java">
    <comment type="block">/*
        * Copyright (C) 2006 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.
            <name>concurrent</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.<name>concurrent</name>.<name>
            MoreExecutors</name>.
            <name>directExecutor</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.<name>concurrent</name>.<name>
            Platform</name>.
            <name>isInstanceOfThrowableClass</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.<name>concurrent</name>.<name>
            Uninterruptibles</name>.
            <name>getUninterruptibly</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtIncompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Function</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Optional</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Preconditions</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.
            <name>ImmutableCollection</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.
            <name>ImmutableList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.
            <name>Lists</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.
            <name>Queues</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>UndeclaredThrowableException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collections</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>CancellationException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ConcurrentLinkedQueue</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ExecutionException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>Executor</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>Future</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>RejectedExecutionException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ScheduledExecutorService</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>TimeUnit</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>TimeoutException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>logging</name>.
            <name>Level</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>logging</name>.
            <name>Logger</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>CheckReturnValue</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Static utility methods pertaining to the {@link Future} interface.
        *
        * &lt;p&gt;Many of these methods use the {@link ListenableFuture} API; consult the
        * Guava User Guide article on &lt;a href=
        * "https://github.com/google/guava/wiki/ListenableFutureExplained"&gt;
        * {@code ListenableFuture}&lt;/a&gt;.
        *
        * @author Kevin Bourrillion
        * @author Nishant Thakkar
        * @author Sven Mawson
        * @since 1.0
        */
    </comment>
    <class>
        <annotation>@
            <name>Beta</name>
        </annotation>
        <annotation>@
            <name>GwtCompatible</name>
            <argument_list>(emulated = true)</argument_list>
        </annotation>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>Futures</name>
        <super>
            <extends>extends
                <name>GwtFuturesCatchingSpecialization</name>
            </extends>
        </super>
        <block>{

            <comment type="line">// A note on memory visibility.</comment>
            <comment type="line">// Many of the utilities in this class (transform, withFallback, withTimeout, asList,
                combine)
            </comment>
            <comment type="line">// have two requirements that significantly complicate their design.</comment>
            <comment type="line">// 1. Cancellation should propagate from the returned future to the input future(s).
            </comment>
            <comment type="line">// 2. The returned futures shouldn't unnecessarily 'pin' their inputs after
                completion.
            </comment>
            <comment type="line">//</comment>
            <comment type="line">// A consequence of these requirements is that the delegate futures cannot be stored
                in
            </comment>
            <comment type="line">// final fields.</comment>
            <comment type="line">//</comment>
            <comment type="line">// For simplicity the rest of this description will discuss Futures.catching since it
                is the
            </comment>
            <comment type="line">// simplest instance, though very similar descriptions apply to many other classes in
                this file.
            </comment>
            <comment type="line">//</comment>
            <comment type="line">// In the constructor of AbstractCatchingFuture, the delegate future is assigned to a
                field
            </comment>
            <comment type="line">// 'inputFuture'. That field is non-final and non-volatile. There are 2 places where
                the
            </comment>
            <comment type="line">// 'inputFuture' field is read and where we will have to consider visibility of the
                write
            </comment>
            <comment type="line">// operation in the constructor.</comment>
            <comment type="line">//</comment>
            <comment type="line">// 1. In the listener that performs the callback. In this case it is fine since
                inputFuture is
            </comment>
            <comment type="line">// assigned prior to calling addListener, and addListener happens-before any invocation
                of the
            </comment>
            <comment type="line">// listener. Notably, this means that 'volatile' is unnecessary to make 'inputFuture'
                visible
            </comment>
            <comment type="line">// to the listener.</comment>
            <comment type="line">//</comment>
            <comment type="line">// 2. In done() where we may propagate cancellation to the input. In this case it is
                _not_ fine.
            </comment>
            <comment type="line">// There is currently nothing that enforces that the write to inputFuture in the
                constructor is
            </comment>
            <comment type="line">// visible to done(). This is because there is no happens before edge between the write
                and a
            </comment>
            <comment type="line">// (hypothetical) unsafe read by our caller. Note: adding 'volatile' does not fix this
                issue,
            </comment>
            <comment type="line">// it would just add an edge such that if done() observed non-null, then it would
                also
            </comment>
            <comment type="line">// definitely observe all earlier writes, but we still have no guarantee that done()
                would see
            </comment>
            <comment type="line">// the inital write (just stronger guarantees if it does).</comment>
            <comment type="line">//</comment>
            <comment type="line">// See: http://cs.oswego.edu/pipermail/concurrency-interest/2015-January/013800.html
            </comment>
            <comment type="line">// For a (long) discussion about this specific issue and the general futility of
                life.
            </comment>
            <comment type="line">//</comment>
            <comment type="line">// For the time being we are OK with the problem discussed above since it requires a
                caller to
            </comment>
            <comment type="line">// introduce a very specific kind of data-race. And given the other operations
                performed by these
            </comment>
            <comment type="line">// methods that involve volatile read/write operations, in practice there is no issue.
                Also, the
            </comment>
            <comment type="line">// way in such a visibility issue would surface is most likely as a failure of cancel()
                to
            </comment>
            <comment type="line">// propagate to the input. Cancellation propagation is fundamentally racy so this is
                fine.
            </comment>
            <comment type="line">//</comment>
            <comment type="line">// Future versions of the JMM may revise safe construction semantics in such a way that
                we can
            </comment>
            <comment type="line">// safely publish these objects and we won't need this whole discussion.</comment>
            <comment type="line">// TODO(user,lukes): consider adding volatile to all these fields since in current
                known JVMs
            </comment>
            <comment type="line">// that should resolve the issue. This comes at the cost of adding more write barriers
                to the
            </comment>
            <comment type="line">// implementations.</comment>

            <constructor>
                <specifier>private</specifier>
                <name>Futures</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="javadoc">/**
                * Creates a {@link CheckedFuture} out of a normal {@link ListenableFuture}
                * and a {@link Function} that maps from {@link Exception} instances into the
                * appropriate checked type.
                *
                * &lt;p&gt;The given mapping function will be applied to an
                * {@link InterruptedException}, a {@link CancellationException}, or an
                * {@link ExecutionException}.
                * See {@link Future#get()} for details on the exceptions thrown.
                *
                * @since 9.0 (source-compatible since 1.0)
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        ,
                        <argument>
                            <name>X</name>
                            <extends>extends
                                <name>Exception</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>CheckedFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            ,
                            <argument>
                                <name>X</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>makeChecked</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>future</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Function</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>Exception</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>mapper</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>MappingCheckedFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>checkNotNull</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>future</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>mapper</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <class>
                <specifier>private</specifier>
                <specifier>abstract</specifier>
                <specifier>static</specifier> class
                <name>
                    <name>ImmediateFuture</name>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <super>
                    <implements>implements
                        <name>
                            <name>ListenableFuture</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </implements>
                </super>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>Logger</name>
                            </type>
                            <name>log</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Logger</name>.
                                            <name>getLogger</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>ImmediateFuture</name>.
                                                        <name>
                                                            <name/>
                                                        </name>
                                                    </name>
                                                    class.
                                                    <call>
                                                        <name>getName</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>addListener</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Runnable</name>
                                    </type>
                                    <name>listener</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Executor</name>
                                    </type>
                                    <name>executor</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>listener</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>"Runnable was null."</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>executor</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>"Executor was null."</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <try>try
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>executor</name>.
                                                    <name>execute</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>listener</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                                <catch>catch (
                                    <param>
                                        <decl>
                                            <type>
                                                <name>RuntimeException</name>
                                            </type>
                                            <name>e</name>
                                        </decl>
                                    </param>
                                    )
                                    <block>{
                                        <comment type="line">// ListenableFuture's contract is that it will not throw
                                            unchecked
                                        </comment>
                                        <comment type="line">// exceptions, so log the bad runnable and/or executor and
                                            swallow it.
                                        </comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>log</name>.
                                                        <name>log</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>Level</name>.
                                                                    <name>SEVERE</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>"RuntimeException while executing runnable "
                                                                + <name>listener</name> + " with executor " +
                                                                <name>executor</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>e</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </catch>
                            </try>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>cancel</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>boolean</name>
                                    </type>
                                    <name>mayInterruptIfRunning</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return <expr>false</expr>;
                            </return>
                            }
                        </block>
                    </function>

                    <function_decl>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <specifier>abstract</specifier>
                            <name>V</name>
                        </type>
                        <name>get</name>
                        <parameter_list>()</parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>ExecutionException</name>
                                </expr>
                            </argument>
                        </throws>
                        ;
                    </function_decl>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>V</name>
                        </type>
                        <name>get</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>timeout</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>TimeUnit</name>
                                    </type>
                                    <name>unit</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>ExecutionException</name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>unit</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <call>
                                        <name>get</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>isCancelled</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return <expr>false</expr>;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>isDone</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return <expr>true</expr>;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <class>
                <specifier>private</specifier>
                <specifier>static</specifier> class
                <name>
                    <name>ImmediateSuccessfulFuture</name>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <super>
                    <extends>extends
                        <name>
                            <name>ImmediateFuture</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>
                                    <name>ImmediateSuccessfulFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Object</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>NULL</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>
                                            <name>ImmediateSuccessfulFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>Object</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>null</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>V</name>
                            </type>
                            <name>value</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>ImmediateSuccessfulFuture</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <annotation>@
                                            <name>Nullable</name>
                                        </annotation>
                                        <name>V</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>value</name>
                                    </name>
                                    =
                                    <name>value</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>V</name>
                        </type>
                        <name>get</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>value</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <class>
                <annotation>@
                    <name>GwtIncompatible</name>
                    <argument_list>("TODO")</argument_list>
                </annotation>
                <specifier>private</specifier>
                <specifier>static</specifier> class
                <name>
                    <name>ImmediateSuccessfulCheckedFuture</name>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        ,
                        <argument>
                            <name>X</name>
                            <extends>extends
                                <name>Exception</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <super>
                    <extends>extends
                        <name>
                            <name>ImmediateFuture</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                    <implements>implements
                        <name>
                            <name>CheckedFuture</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                ,
                                <argument>
                                    <name>X</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </implements>
                </super>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>V</name>
                            </type>
                            <name>value</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>ImmediateSuccessfulCheckedFuture</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <annotation>@
                                            <name>Nullable</name>
                                        </annotation>
                                        <name>V</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>value</name>
                                    </name>
                                    =
                                    <name>value</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>V</name>
                        </type>
                        <name>get</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>value</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>V</name>
                        </type>
                        <name>checkedGet</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>value</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>V</name>
                        </type>
                        <name>checkedGet</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>timeout</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>TimeUnit</name>
                                    </type>
                                    <name>unit</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>unit</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>value</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <class>
                <specifier>private</specifier>
                <specifier>static</specifier> class
                <name>
                    <name>ImmediateFailedFuture</name>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <super>
                    <extends>extends
                        <name>
                            <name>ImmediateFuture</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </super>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>Throwable</name>
                            </type>
                            <name>thrown</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>ImmediateFailedFuture</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Throwable</name>
                                    </type>
                                    <name>thrown</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>thrown</name>
                                    </name>
                                    =
                                    <name>thrown</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>V</name>
                        </type>
                        <name>get</name>
                        <parameter_list>()</parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>ExecutionException</name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>ExecutionException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>thrown</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <class>
                <annotation>@
                    <name>GwtIncompatible</name>
                    <argument_list>("TODO")</argument_list>
                </annotation>
                <specifier>private</specifier>
                <specifier>static</specifier> class
                <name>
                    <name>ImmediateCancelledFuture</name>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <super>
                    <extends>extends
                        <name>
                            <name>ImmediateFuture</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </super>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>CancellationException</name>
                            </type>
                            <name>thrown</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>ImmediateCancelledFuture</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>thrown</name>
                                    </name>
                                    = new
                                    <call>
                                        <name>CancellationException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"Immediate cancelled future."</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>isCancelled</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return <expr>true</expr>;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>V</name>
                        </type>
                        <name>get</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <throw>throw
                                <expr>
                                    <call>
                                        <name><name>AbstractFuture</name>.
                                            <name>cancellationExceptionWithCause</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"Task was cancelled."</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>thrown</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <class>
                <annotation>@
                    <name>GwtIncompatible</name>
                    <argument_list>("TODO")</argument_list>
                </annotation>
                <specifier>private</specifier>
                <specifier>static</specifier> class
                <name>
                    <name>ImmediateFailedCheckedFuture</name>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        ,
                        <argument>
                            <name>X</name>
                            <extends>extends
                                <name>Exception</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <super>
                    <extends>extends
                        <name>
                            <name>ImmediateFuture</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                    <implements>implements
                        <name>
                            <name>CheckedFuture</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                ,
                                <argument>
                                    <name>X</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </implements>
                </super>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>X</name>
                            </type>
                            <name>thrown</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>ImmediateFailedCheckedFuture</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>X</name>
                                    </type>
                                    <name>thrown</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>thrown</name>
                                    </name>
                                    =
                                    <name>thrown</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>V</name>
                        </type>
                        <name>get</name>
                        <parameter_list>()</parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>ExecutionException</name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>ExecutionException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>thrown</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>V</name>
                        </type>
                        <name>checkedGet</name>
                        <parameter_list>()</parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>X</name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <throw>throw
                                <expr>
                                    <name>thrown</name>
                                </expr>
                                ;
                            </throw>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>V</name>
                        </type>
                        <name>checkedGet</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>timeout</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>TimeUnit</name>
                                    </type>
                                    <name>unit</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>X</name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>unit</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <throw>throw
                                <expr>
                                    <name>thrown</name>
                                </expr>
                                ;
                            </throw>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * Creates a {@code ListenableFuture} which has its value set immediately upon
                * construction. The getters just return the value. This {@code Future} can't
                * be canceled or timed out and its {@code isDone()} method always returns
                * {@code true}.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>immediateFuture</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>V</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// This cast is safe because null is assignable to V for all V
                                    (i.e. it is covariant)
                                </comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <annotation>@
                                                <name>SuppressWarnings</name>
                                                <argument_list>({"unchecked", "rawtypes"})</argument_list>
                                            </annotation>
                                            <name>
                                                <name>ListenableFuture</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>typedNull</name> =
                                        <init>
                                            <expr>(<name>ListenableFuture</name>)
                                                <name><name>ImmediateSuccessfulFuture</name>.
                                                    <name>NULL</name>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <name>typedNull</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>ImmediateSuccessfulFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a {@code CheckedFuture} which has its value set immediately upon
                * construction.
                *
                * &lt;p&gt;The returned {@code Future} can't be cancelled, and its {@code isDone()}
                * method always returns {@code true}. Calling {@code get()} or {@code
                * checkedGet()} will immediately return the provided value.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        ,
                        <argument>
                            <name>X</name>
                            <extends>extends
                                <name>Exception</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>CheckedFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            ,
                            <argument>
                                <name>X</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>immediateCheckedFuture</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>V</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>ImmediateSuccessfulCheckedFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a {@code ListenableFuture} which has an exception set immediately
                * upon construction.
                *
                * &lt;p&gt;The returned {@code Future} can't be cancelled, and its {@code isDone()}
                * method always returns {@code true}. Calling {@code get()} will immediately
                * throw the provided {@code Throwable} wrapped in an {@code
                * ExecutionException}.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>immediateFailedFuture</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>throwable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>throwable</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>ImmediateFailedFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>throwable</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates a {@code ListenableFuture} which is cancelled immediately upon
                * construction, so that {@code isCancelled()} always returns {@code true}.
                *
                * @since 14.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>immediateCancelledFuture</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>ImmediateCancelledFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a {@code CheckedFuture} which has an exception set immediately upon
                * construction.
                *
                * &lt;p&gt;The returned {@code Future} can't be cancelled, and its {@code isDone()}
                * method always returns {@code true}. Calling {@code get()} will immediately
                * throw the provided {@code Exception} wrapped in an {@code
                * ExecutionException}, and calling {@code checkedGet()} will throw the
                * provided exception itself.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        ,
                        <argument>
                            <name>X</name>
                            <extends>extends
                                <name>Exception</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>CheckedFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            ,
                            <argument>
                                <name>X</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>immediateFailedCheckedFuture</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>X</name>
                            </type>
                            <name>exception</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>exception</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>ImmediateFailedCheckedFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>exception</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a {@code Future} whose result is taken from the given primary
                * {@code input} or, if the primary input fails, from the {@code Future}
                * provided by the {@code fallback}. {@link FutureFallback#create} is not
                * invoked until the primary input has failed, so if the primary input
                * succeeds, it is never invoked. If, during the invocation of {@code
                * fallback}, an exception is thrown, this exception is used as the result of
                * the output {@code Future}.
                *
                * &lt;p&gt;Below is an example of a fallback that returns a default value if an
                * exception occurs:
                *
                * &lt;pre&gt; {@code
                * ListenableFuture&lt;Integer&gt; fetchCounterFuture = ...;
                *
                * // Falling back to a zero counter in case an exception happens when
                * // processing the RPC to fetch counters.
                * ListenableFuture&lt;Integer&gt; faultTolerantFuture = Futures.withFallback(
                * fetchCounterFuture, new FutureFallback&lt;Integer&gt;() {
                * public ListenableFuture&lt;Integer&gt; create(Throwable t) {
                * // Returning "0" as the default for the counter when the
                * // exception happens.
                * return immediateFuture(0);
                * }
                * });}&lt;/pre&gt;
                *
                * &lt;p&gt;The fallback can also choose to propagate the original exception when
                * desired:
                *
                * &lt;pre&gt; {@code
                * ListenableFuture&lt;Integer&gt; fetchCounterFuture = ...;
                *
                * // Falling back to a zero counter only in case the exception was a
                * // TimeoutException.
                * ListenableFuture&lt;Integer&gt; faultTolerantFuture = Futures.withFallback(
                * fetchCounterFuture, new FutureFallback&lt;Integer&gt;() {
                * public ListenableFuture&lt;Integer&gt; create(Throwable t) {
                * if (t instanceof TimeoutException) {
                * return immediateFuture(0);
                * }
                * return immediateFailedFuture(t);
                * }
                * });}&lt;/pre&gt;
                *
                * &lt;p&gt;This overload, which does not accept an executor, uses {@code
                * directExecutor}, a dangerous choice in some cases. See the discussion in
                * the {@link ListenableFuture#addListener ListenableFuture.addListener}
                * documentation. The documentation's warnings about "lightweight listeners"
                * refer here to the work done during {@code FutureFallback.create}, not to
                * any work done to complete the returned {@code Future}.
                *
                * @param input the primary input {@code Future}
                * @param fallback the {@link FutureFallback} implementation to be called if
                * {@code input} fails
                * @since 14.0
                * @deprecated Use {@link #catchingAsync(ListenableFuture, Class,
                * AsyncFunction) catchingAsync(input, Throwable.class,
                * fallbackImplementedAsAnAsyncFunction)}, usually replacing {@code
                * Throwable.class} with the specific type you want to handle. This method
                * will be removed in Guava release 20.0.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>withFallback</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>FutureFallback</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>fallback</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>withFallback</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fallback</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>directExecutor</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a {@code Future} whose result is taken from the given primary
                * {@code input} or, if the primary input fails, from the {@code Future}
                * provided by the {@code fallback}. {@link FutureFallback#create} is not
                * invoked until the primary input has failed, so if the primary input
                * succeeds, it is never invoked. If, during the invocation of {@code
                * fallback}, an exception is thrown, this exception is used as the result of
                * the output {@code Future}.
                *
                * &lt;p&gt;Below is an example of a fallback that returns a default value if an
                * exception occurs:
                *
                * &lt;pre&gt; {@code
                * ListenableFuture&lt;Integer&gt; fetchCounterFuture = ...;
                *
                * // Falling back to a zero counter in case an exception happens when
                * // processing the RPC to fetch counters.
                * ListenableFuture&lt;Integer&gt; faultTolerantFuture = Futures.withFallback(
                * fetchCounterFuture, new FutureFallback&lt;Integer&gt;() {
                * public ListenableFuture&lt;Integer&gt; create(Throwable t) {
                * // Returning "0" as the default for the counter when the
                * // exception happens.
                * return immediateFuture(0);
                * }
                * }, directExecutor());}&lt;/pre&gt;
                *
                * &lt;p&gt;The fallback can also choose to propagate the original exception when
                * desired:
                *
                * &lt;pre&gt; {@code
                * ListenableFuture&lt;Integer&gt; fetchCounterFuture = ...;
                *
                * // Falling back to a zero counter only in case the exception was a
                * // TimeoutException.
                * ListenableFuture&lt;Integer&gt; faultTolerantFuture = Futures.withFallback(
                * fetchCounterFuture, new FutureFallback&lt;Integer&gt;() {
                * public ListenableFuture&lt;Integer&gt; create(Throwable t) {
                * if (t instanceof TimeoutException) {
                * return immediateFuture(0);
                * }
                * return immediateFailedFuture(t);
                * }
                * }, directExecutor());}&lt;/pre&gt;
                *
                * &lt;p&gt;When selecting an executor, note that {@code directExecutor} is
                * dangerous in some cases. See the discussion in the {@link
                * ListenableFuture#addListener ListenableFuture.addListener} documentation.
                * The documentation's warnings about "lightweight listeners" refer here to
                * the work done during {@code FutureFallback.create}, not to any work done to
                * complete the returned {@code Future}.
                *
                * @param input the primary input {@code Future}
                * @param fallback the {@link FutureFallback} implementation to be called if
                * {@code input} fails
                * @param executor the executor that runs {@code fallback} if {@code input}
                * fails
                * @since 14.0
                * @deprecated Use {@link #catchingAsync(ListenableFuture, Class,
                * AsyncFunction, Executor) catchingAsync(input, Throwable.class,
                * fallbackImplementedAsAnAsyncFunction, executor)}, usually replacing
                * {@code Throwable.class} with the specific type you want to handle. This method
                * will be removed in Guava release 20.0.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>withFallback</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>FutureFallback</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>fallback</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Executor</name>
                            </type>
                            <name>executor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>catchingAsync</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Throwable</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>asAsyncFunction</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>fallback</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>executor</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the
                * primary input fails with the given {@code exceptionType}, from the result provided by the
                * {@code fallback}. {@link Function#apply} is not invoked until the primary input has failed, so
                * if the primary input succeeds, it is never invoked. If, during the invocation of {@code
                * fallback}, an exception is thrown, this exception is used as the result of the output {@code
                * Future}.
                *
                * &lt;p&gt;Usage example:
                *
                * &lt;pre&gt; {@code
                * ListenableFuture&lt;Integer&gt; fetchCounterFuture = ...;
                *
                * // Falling back to a zero counter in case an exception happens when
                * // processing the RPC to fetch counters.
                * ListenableFuture&lt;Integer&gt; faultTolerantFuture = Futures.catching(
                * fetchCounterFuture, FetchException.class,
                * new Function&lt;FetchException, Integer&gt;() {
                * public Integer apply(FetchException e) {
                * return 0;
                * }
                * });}&lt;/pre&gt;
                *
                * &lt;p&gt;This overload, which does not accept an executor, uses {@code directExecutor}, a dangerous
                * choice in some cases. See the discussion in the {@link ListenableFuture#addListener
                * ListenableFuture.addListener} documentation. The documentation's warnings about "lightweight
                * listeners" refer here to the work done during {@code Function.apply}.
                *
                * @param input the primary input {@code Future}
                * @param exceptionType the exception type that triggers use of {@code fallback}. To avoid hiding
                * bugs and other unrecoverable errors, callers should prefer more specific types, avoiding
                * {@code Throwable.class} in particular.
                * @param fallback the {@link Function} implementation to be called if {@code input} fails with
                * the expected exception type
                * @since 19.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("AVAILABLE but requires exceptionType to be Throwable.class")</argument_list>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        ,
                        <argument>
                            <name>X</name>
                            <extends>extends
                                <name>Throwable</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>catching</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>exceptionType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Function</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>X</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>fallback</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>CatchingFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>future</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>
                                            <name>CatchingFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>X</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>exceptionType</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>fallback</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>input</name>.
                                    <name>addListener</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>future</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>directExecutor</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>future</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the
                * primary input fails with the given {@code exceptionType}, from the result provided by the
                * {@code fallback}. {@link Function#apply} is not invoked until the primary input has failed, so
                * if the primary input succeeds, it is never invoked. If, during the invocation of {@code
                * fallback}, an exception is thrown, this exception is used as the result of the output {@code
                * Future}.
                *
                * &lt;p&gt;Usage example:
                *
                * &lt;pre&gt; {@code
                * ListenableFuture&lt;Integer&gt; fetchCounterFuture = ...;
                *
                * // Falling back to a zero counter in case an exception happens when
                * // processing the RPC to fetch counters.
                * ListenableFuture&lt;Integer&gt; faultTolerantFuture = Futures.catching(
                * fetchCounterFuture, FetchException.class,
                * new Function&lt;FetchException, Integer&gt;() {
                * public Integer apply(FetchException e) {
                * return 0;
                * }
                * }, directExecutor());}&lt;/pre&gt;
                *
                * &lt;p&gt;When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
                * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}
                * documentation. The documentation's warnings about "lightweight listeners" refer here to the
                * work done during {@code Function.apply}.
                *
                * @param input the primary input {@code Future}
                * @param exceptionType the exception type that triggers use of {@code fallback}. To avoid hiding
                * bugs and other unrecoverable errors, callers should prefer more specific types, avoiding
                * {@code Throwable.class} in particular.
                * @param fallback the {@link Function} implementation to be called if {@code input} fails with
                * the expected exception type
                * @param executor the executor that runs {@code fallback} if {@code input} fails
                * @since 19.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("AVAILABLE but requires exceptionType to be Throwable.class")</argument_list>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        ,
                        <argument>
                            <name>X</name>
                            <extends>extends
                                <name>Throwable</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>catching</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>exceptionType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Function</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>X</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>fallback</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Executor</name>
                            </type>
                            <name>executor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>CatchingFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>future</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>
                                            <name>CatchingFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>X</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>exceptionType</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>fallback</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>input</name>.
                                    <name>addListener</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>future</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>rejectionPropagatingExecutor</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>executor</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>future</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>future</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the
                * primary input fails with the given {@code exceptionType}, from the result provided by the
                * {@code fallback}. {@link AsyncFunction#apply} is not invoked until the primary input has
                * failed, so if the primary input succeeds, it is never invoked. If, during the invocation of
                * {@code fallback}, an exception is thrown, this exception is used as the result of the output
                * {@code Future}.
                *
                * &lt;p&gt;Usage examples:
                *
                * &lt;pre&gt; {@code
                * ListenableFuture&lt;Integer&gt; fetchCounterFuture = ...;
                *
                * // Falling back to a zero counter in case an exception happens when
                * // processing the RPC to fetch counters.
                * ListenableFuture&lt;Integer&gt; faultTolerantFuture = Futures.catchingAsync(
                * fetchCounterFuture, FetchException.class,
                * new AsyncFunction&lt;FetchException, Integer&gt;() {
                * public ListenableFuture&lt;Integer&gt; apply(FetchException e) {
                * return immediateFuture(0);
                * }
                * });}&lt;/pre&gt;
                *
                * &lt;p&gt;The fallback can also choose to propagate the original exception when desired:
                *
                * &lt;pre&gt; {@code
                * ListenableFuture&lt;Integer&gt; fetchCounterFuture = ...;
                *
                * // Falling back to a zero counter only in case the exception was a
                * // TimeoutException.
                * ListenableFuture&lt;Integer&gt; faultTolerantFuture = Futures.catchingAsync(
                * fetchCounterFuture, FetchException.class,
                * new AsyncFunction&lt;FetchException, Integer&gt;() {
                * public ListenableFuture&lt;Integer&gt; apply(FetchException e)
                * throws FetchException {
                * if (omitDataOnFetchFailure) {
                * return immediateFuture(0);
                * }
                * throw e;
                * }
                * });}&lt;/pre&gt;
                *
                * &lt;p&gt;This overload, which does not accept an executor, uses {@code directExecutor}, a dangerous
                * choice in some cases. See the discussion in the {@link ListenableFuture#addListener
                * ListenableFuture.addListener} documentation. The documentation's warnings about "lightweight
                * listeners" refer here to the work done during {@code AsyncFunction.apply}, not to any work done
                * to complete the returned {@code Future}.
                *
                * @param input the primary input {@code Future}
                * @param exceptionType the exception type that triggers use of {@code fallback}. To avoid hiding
                * bugs and other unrecoverable errors, callers should prefer more specific types, avoiding
                * {@code Throwable.class} in particular.
                * @param fallback the {@link AsyncFunction} implementation to be called if {@code input} fails
                * with the expected exception type
                * @since 19.0 (similar functionality in 14.0 as {@code withFallback})
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("AVAILABLE but requires exceptionType to be Throwable.class")</argument_list>
                    </annotation>
                    <comment type="line">// TODO(kak): @CheckReturnValue</comment>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        ,
                        <argument>
                            <name>X</name>
                            <extends>extends
                                <name>Throwable</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>catchingAsync</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>exceptionType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>AsyncFunction</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>X</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>fallback</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>AsyncCatchingFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>future</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>
                                            <name>AsyncCatchingFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>X</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>exceptionType</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>fallback</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>input</name>.
                                    <name>addListener</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>future</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>directExecutor</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>future</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the
                * primary input fails with the given {@code exceptionType}, from the result provided by the
                * {@code fallback}. {@link AsyncFunction#apply} is not invoked until the primary input has
                * failed, so if the primary input succeeds, it is never invoked. If, during the invocation of
                * {@code fallback}, an exception is thrown, this exception is used as the result of the output
                * {@code Future}.
                *
                * &lt;p&gt;Usage examples:
                *
                * &lt;pre&gt; {@code
                * ListenableFuture&lt;Integer&gt; fetchCounterFuture = ...;
                *
                * // Falling back to a zero counter in case an exception happens when
                * // processing the RPC to fetch counters.
                * ListenableFuture&lt;Integer&gt; faultTolerantFuture = Futures.catchingAsync(
                * fetchCounterFuture, FetchException.class,
                * new AsyncFunction&lt;FetchException, Integer&gt;() {
                * public ListenableFuture&lt;Integer&gt; apply(FetchException e) {
                * return immediateFuture(0);
                * }
                * }, directExecutor());}&lt;/pre&gt;
                *
                * &lt;p&gt;The fallback can also choose to propagate the original exception when desired:
                *
                * &lt;pre&gt; {@code
                * ListenableFuture&lt;Integer&gt; fetchCounterFuture = ...;
                *
                * // Falling back to a zero counter only in case the exception was a
                * // TimeoutException.
                * ListenableFuture&lt;Integer&gt; faultTolerantFuture = Futures.catchingAsync(
                * fetchCounterFuture, FetchException.class,
                * new AsyncFunction&lt;FetchException, Integer&gt;() {
                * public ListenableFuture&lt;Integer&gt; apply(FetchException e)
                * throws FetchException {
                * if (omitDataOnFetchFailure) {
                * return immediateFuture(0);
                * }
                * throw e;
                * }
                * }, directExecutor());}&lt;/pre&gt;
                *
                * &lt;p&gt;When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
                * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}
                * documentation. The documentation's warnings about "lightweight listeners" refer here to the
                * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned
                * {@code Future}.
                *
                * @param input the primary input {@code Future}
                * @param exceptionType the exception type that triggers use of {@code fallback}. To avoid hiding
                * bugs and other unrecoverable errors, callers should prefer more specific types, avoiding
                * {@code Throwable.class} in particular.
                * @param fallback the {@link AsyncFunction} implementation to be called if {@code input} fails
                * with the expected exception type
                * @param executor the executor that runs {@code fallback} if {@code input} fails
                * @since 19.0 (similar functionality in 14.0 as {@code withFallback})
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("AVAILABLE but requires exceptionType to be Throwable.class")</argument_list>
                    </annotation>
                    <comment type="line">// TODO(kak): @CheckReturnValue</comment>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        ,
                        <argument>
                            <name>X</name>
                            <extends>extends
                                <name>Throwable</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>catchingAsync</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>exceptionType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>AsyncFunction</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>X</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>fallback</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Executor</name>
                            </type>
                            <name>executor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>AsyncCatchingFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>future</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>
                                            <name>AsyncCatchingFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>X</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>exceptionType</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>fallback</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>input</name>.
                                    <name>addListener</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>future</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>rejectionPropagatingExecutor</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>executor</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>future</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>future</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>AsyncFunction</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Throwable</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>asAsyncFunction</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>
                                    <name>FutureFallback</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>fallback</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fallback</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>new
                            <class>
                                <super>
                                    <name>
                                        <name>AsyncFunction</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>Throwable</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </super>
                                <argument_list>()</argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>
                                                <name>ListenableFuture</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>apply</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>Throwable</name>
                                                    </type>
                                                    <name>t</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <throws>throws
                                            <argument>
                                                <expr>
                                                    <name>Exception</name>
                                                </expr>
                                            </argument>
                                        </throws>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name>checkNotNull</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>fallback</name>.
                                                                            <name>create</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>t</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>"FutureFallback.create returned null instead of a
                                                                    "
                                                                    + "Future. Did you mean to return
                                                                    immediateFuture(null)?"
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <class>
                <specifier>private</specifier>
                <specifier>abstract</specifier>
                <specifier>static</specifier> class
                <name>
                    <name>AbstractCatchingFuture</name>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        ,
                        <argument>
                            <name>X</name>
                            <extends>extends
                                <name>Throwable</name>
                            </extends>
                        </argument>
                        ,
                        <argument>
                            <name>F</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <super>
                    <extends>extends <name>AbstractFuture</name>.
                        <name>
                            <name>TrustedFuture</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                    <implements>implements
                        <name>Runnable</name>
                    </implements>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>
                                    <name>ListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>inputFuture</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>exceptionType</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>F</name>
                            </type>
                            <name>fallback</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>AbstractCatchingFuture</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ListenableFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>V</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>inputFuture</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Class</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>X</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>exceptionType</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>F</name>
                                    </type>
                                    <name>fallback</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>inputFuture</name>
                                    </name>
                                    =
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>inputFuture</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>exceptionType</name>
                                    </name>
                                    =
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>exceptionType</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>fallback</name>
                                    </name>
                                    =
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fallback</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <specifier>final</specifier>
                            <name>void</name>
                        </type>
                        <name>run</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ListenableFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>V</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>localInputFuture</name> =
                                    <init>
                                        <expr>
                                            <name>inputFuture</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Class</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>X</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>localExceptionType</name> =
                                    <init>
                                        <expr>
                                            <name>exceptionType</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>F</name>
                                    </type>
                                    <name>localFallback</name> =
                                    <init>
                                        <expr>
                                            <name>fallback</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>localInputFuture</name>
                                        == <name>null</name> | <name>localExceptionType</name> == <name>null</name> | <name>
                                        localFallback
                                    </name> ==
                                        <name>null</name>
                                        |
                                        <call>
                                            <name>isCancelled</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return;</return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>inputFuture</name>
                                    =
                                    <name>null</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>exceptionType</name>
                                    =
                                    <name>null</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>fallback</name>
                                    =
                                    <name>null</name>
                                </expr>
                                ;
                            </expr_stmt>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Throwable</name>
                                    </type>
                                    <name>throwable</name>
                                </decl>
                                ;
                            </decl_stmt>
                            <try>try
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>set</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>getUninterruptibly</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>localInputFuture</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <return>return;</return>
                                    }
                                </block>
                                <catch>catch (
                                    <param>
                                        <decl>
                                            <type>
                                                <name>ExecutionException</name>
                                            </type>
                                            <name>e</name>
                                        </decl>
                                    </param>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>throwable</name>
                                                =
                                                <call>
                                                    <name><name>e</name>.
                                                        <name>getCause</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </catch>
                                <catch>catch (
                                    <param>
                                        <decl>
                                            <type>
                                                <name>Throwable</name>
                                            </type>
                                            <name>e</name>
                                        </decl>
                                    </param>
                                    )
                                    <block>{
                                        <comment type="line">// this includes cancellation exception</comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>throwable</name>
                                                =
                                                <name>e</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </catch>
                            </try>
                            <try>try
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name>isInstanceOfThrowableClass</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>throwable</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>localExceptionType</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <annotation>@
                                                                <name>SuppressWarnings</name>
                                                                <argument_list>("unchecked")</argument_list>
                                                            </annotation>
                                                            <comment type="line">// verified safe by isInstance
                                                            </comment>
                                                            <name>X</name>
                                                        </type>
                                                        <name>castThrowable</name> =
                                                        <init>
                                                            <expr>(<name>X</name>)
                                                                <name>throwable</name>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>doFallback</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>localFallback</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>castThrowable</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>setException</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>throwable</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                    }
                                </block>
                                <catch>catch (
                                    <param>
                                        <decl>
                                            <type>
                                                <name>Throwable</name>
                                            </type>
                                            <name>e</name>
                                        </decl>
                                    </param>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>setException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>e</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </catch>
                            </try>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/** Template method for subtypes to actually run the fallback. */</comment>
                    <function_decl>
                        <type>
                            <specifier>abstract</specifier>
                            <name>void</name>
                        </type>
                        <name>doFallback</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>F</name>
                                    </type>
                                    <name>fallback</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>X</name>
                                    </type>
                                    <name>throwable</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>Exception</name>
                                </expr>
                            </argument>
                        </throws>
                        ;
                    </function_decl>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>final</specifier>
                            <name>void</name>
                        </type>
                        <name>done</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>maybePropagateCancellation</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>inputFuture</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>inputFuture</name>
                                    </name>
                                    =
                                    <name>null</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>exceptionType</name>
                                    </name>
                                    =
                                    <name>null</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>fallback</name>
                                    </name>
                                    =
                                    <name>null</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * A {@link AbstractCatchingFuture} that delegates to an {@link AsyncFunction}
                * and {@link #setFuture(ListenableFuture)} to implement {@link #doFallback}
                */
            </comment>
            <class>
                <specifier>static</specifier>
                <specifier>final</specifier> class
                <name>
                    <name>AsyncCatchingFuture</name>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        ,
                        <argument>
                            <name>X</name>
                            <extends>extends
                                <name>Throwable</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <super>
                    <extends>extends
                        <name>
                            <name>AbstractCatchingFuture</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                ,
                                <argument>
                                    <name>X</name>
                                </argument>
                                ,
                                <argument>
                                    <name>
                                        <name>AsyncFunction</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                                <super>super
                                                    <name>X</name>
                                                </super>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>?</name>
                                                <extends>extends
                                                    <name>V</name>
                                                </extends>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </super>
                <block>{

                    <constructor>
                        <name>AsyncCatchingFuture</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ListenableFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>V</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>input</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Class</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>X</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>exceptionType</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>AsyncFunction</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <super>super
                                                        <name>X</name>
                                                    </super>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>V</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>fallback</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>exceptionType</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>fallback</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>void</name>
                        </type>
                        <name>doFallback</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>AsyncFunction</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <super>super
                                                        <name>X</name>
                                                    </super>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>V</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>fallback</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>X</name>
                                    </type>
                                    <name>cause</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>Exception</name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ListenableFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>V</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>replacement</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>fallback</name>.
                                                    <name>apply</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>cause</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>replacement</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>"AsyncFunction.apply returned null instead of a Future. "
                                                    + "Did you mean to return immediateFuture(null)?"
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>setFuture</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>replacement</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * A {@link AbstractCatchingFuture} that delegates to a {@link Function}
                * and {@link #set(Object)} to implement {@link #doFallback}
                */
            </comment>
            <class>
                <specifier>static</specifier>
                <specifier>final</specifier> class
                <name>
                    <name>CatchingFuture</name>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        ,
                        <argument>
                            <name>X</name>
                            <extends>extends
                                <name>Throwable</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <super>
                    <extends>extends
                        <name>
                            <name>AbstractCatchingFuture</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                ,
                                <argument>
                                    <name>X</name>
                                </argument>
                                ,
                                <argument>
                                    <name>
                                        <name>Function</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                                <super>super
                                                    <name>X</name>
                                                </super>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>?</name>
                                                <extends>extends
                                                    <name>V</name>
                                                </extends>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </super>
                <block>{
                    <constructor>
                        <name>CatchingFuture</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ListenableFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>V</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>input</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Class</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>X</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>exceptionType</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Function</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <super>super
                                                        <name>X</name>
                                                    </super>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>V</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>fallback</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>exceptionType</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>fallback</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>void</name>
                        </type>
                        <name>doFallback</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Function</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <super>super
                                                        <name>X</name>
                                                    </super>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>V</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>fallback</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>X</name>
                                    </type>
                                    <name>cause</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>Exception</name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>V</name>
                                    </type>
                                    <name>replacement</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>fallback</name>.
                                                    <name>apply</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>cause</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>set</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>replacement</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * Returns a future that delegates to another but will finish early (via a
                * {@link TimeoutException} wrapped in an {@link ExecutionException}) if the
                * specified duration expires.
                *
                * &lt;p&gt;The delegate future is interrupted and cancelled if it times out.
                *
                * @param delegate The future to delegate to.
                * @param time when to timeout the future
                * @param unit the time unit of the time parameter
                * @param scheduledExecutor The executor service to enforce the timeout.
                *
                * @since 19.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("java.util.concurrent.ScheduledExecutorService")</argument_list>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>withTimeout</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>delegate</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>time</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>TimeUnit</name>
                            </type>
                            <name>unit</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>ScheduledExecutorService</name>
                            </type>
                            <name>scheduledExecutor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>TimeoutFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>
                                            <name>TimeoutFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>delegate</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>TimeoutFuture</name>.
                                    <name>
                                        <name>Fire</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </name>
                            </type>
                            <name>fire</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name><name>TimeoutFuture</name>.
                                            <name>
                                                <name>Fire</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>result</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>result</name>.
                                <name>timer</name>
                            </name>
                            =
                            <call>
                                <name><name>scheduledExecutor</name>.
                                    <name>schedule</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fire</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>time</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>unit</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>delegate</name>.
                                    <name>addListener</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fire</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>directExecutor</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Future that delegates to another but will finish early (via a {@link
                * TimeoutException} wrapped in an {@link ExecutionException}) if the
                * specified duration expires.
                * The delegate future is interrupted and cancelled if it times out.
                */
            </comment>
            <class>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class
                <name>
                    <name>TimeoutFuture</name>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <super>
                    <extends>extends <name>AbstractFuture</name>.
                        <name>
                            <name>TrustedFuture</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </super>
                <block>{
                    <comment type="line">// Memory visibility of these fields.</comment>
                    <comment type="line">// There are two cases to consider.</comment>
                    <comment type="line">// 1. visibility of the writes to these fields to Fire.run</comment>
                    <comment type="line">// The initial write to delegateRef is made definitely visible via the
                        semantics of
                    </comment>
                    <comment type="line">// addListener/SES.schedule. The later racy write in cancel() is not guaranteed
                        to be
                    </comment>
                    <comment type="line">// observed, however that is fine since the correctness is based on the atomic
                        state in
                    </comment>
                    <comment type="line">// our base class.</comment>
                    <comment type="line">// The initial write to timer is never definitely visible to Fire.run since it
                        is assigned
                    </comment>
                    <comment type="line">// after SES.schedule is called. Therefore Fire.run has to check for null.
                        However, it
                    </comment>
                    <comment type="line">// should be visible if Fire.run is called by delegate.addListener since
                        addListener is
                    </comment>
                    <comment type="line">// called after the assignment to timer, and importantly this is the main
                        situation in which
                    </comment>
                    <comment type="line">// we need to be able to see the write.</comment>
                    <comment type="line">// 2. visibility of the writes to cancel</comment>
                    <comment type="line">// Since these fields are non-final that means that TimeoutFuture is not being
                        'safely
                    </comment>
                    <comment type="line">// published', thus a motivated caller may be able to expose the reference to
                        another thread
                    </comment>
                    <comment type="line">// that would then call cancel() and be unable to cancel the delegate.
                    </comment>
                    <comment type="line">// There are a number of ways to solve this, none of which are very pretty, and
                        it is
                    </comment>
                    <comment type="line">// currently believed to be a purely theoretical problem (since the other
                        actions should
                    </comment>
                    <comment type="line">// supply sufficient write-barriers).</comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>
                                    <name>ListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>delegateRef</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>
                                    <name>Future</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>timer</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>TimeoutFuture</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ListenableFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>delegate</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>delegateRef</name>
                                    </name>
                                    =
                                    <call>
                                        <name><name>Preconditions</name>.
                                            <name>checkNotNull</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>delegate</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="javadoc">/** A runnable that is called when the delegate or the timer completes. */
                    </comment>
                    <class>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier> class
                        <name>
                            <name>Fire</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <super>
                            <implements>implements
                                <name>Runnable</name>
                            </implements>
                        </super>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <annotation>@
                                            <name>Nullable</name>
                                        </annotation>
                                        <name>
                                            <name>TimeoutFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>timeoutFutureRef</name>
                                </decl>
                                ;
                            </decl_stmt>

                            <constructor>
                                <name>Fire</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>TimeoutFuture</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>timeoutFuture</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>timeoutFutureRef</name>
                                            </name>
                                            =
                                            <name>timeoutFuture</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </constructor>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>void</name>
                                </type>
                                <name>run</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <comment type="line">// If either of these reads return null then we must be after a
                                        successful cancel
                                    </comment>
                                    <comment type="line">// or another call to this method.</comment>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>TimeoutFuture</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>timeoutFuture</name> =
                                            <init>
                                                <expr>
                                                    <name>timeoutFutureRef</name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>timeoutFuture</name>
                                                ==
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return;</return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>ListenableFuture</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>delegate</name> =
                                            <init>
                                                <expr>
                                                    <name><name>timeoutFuture</name>.
                                                        <name>delegateRef</name>
                                                    </name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>delegate</name>
                                                ==
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return;</return>
                                                }
                                            </block>
                                        </then>
                                    </if>

                                    <comment type="block">/*
                                        * If we're about to complete the TimeoutFuture, we want to release our reference
                                        to it.
                                        * Otherwise, we'll pin it (and its result) in memory until the timeout task is
                                        GCed. (The
                                        * need to clear our reference to the TimeoutFuture is the reason we use a
                                        *static* nested
                                        * class with a manual reference back to the "containing" class.)
                                        *
                                        * This has the nice-ish side effect of limiting reentrancy: run() calls
                                        * timeoutFuture.setException() calls run(). That reentrancy would already be
                                        harmless,
                                        * since timeoutFuture can be set (and delegate cancelled) only once. (And "set
                                        only once"
                                        * is important for other reasons: run() can still be invoked concurrently in
                                        different
                                        * threads, even with the above null checks.)
                                        */
                                    </comment>
                                    <expr_stmt>
                                        <expr>
                                            <name>timeoutFutureRef</name>
                                            =
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>delegate</name>.
                                                        <name>isDone</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>timeoutFuture</name>.
                                                                <name>setFuture</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>delegate</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <try>try
                                                    <block>{
                                                        <comment type="line">// TODO(lukes): this stack trace is
                                                            particularly useless (all it does is point at the
                                                        </comment>
                                                        <comment type="line">// scheduledexecutorservice thread),
                                                            consider eliminating it altogether?
                                                        </comment>
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>timeoutFuture</name>.
                                                                        <name>setException</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>new
                                                                                <call>
                                                                                    <name>TimeoutException</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>"Future timed out: " +
                                                                                                <name>delegate</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                    <finally>finally
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>delegate</name>.
                                                                            <name>cancel</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>true</expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </finally>
                                                </try>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </class>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>void</name>
                        </type>
                        <name>done</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>maybePropagateCancellation</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>delegateRef</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Future</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>localTimer</name> =
                                    <init>
                                        <expr>
                                            <name>timer</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <comment type="line">// Try to cancel the timer as an optimization</comment>
                            <comment type="line">// timer may be null if this call to run was by the timer task since
                                there is no
                            </comment>
                            <comment type="line">// happens-before edge between the assignment to timer and an execution
                                of the timer task.
                            </comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>localTimer</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>localTimer</name>.
                                                        <name>cancel</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>false</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>

                            <expr_stmt>
                                <expr>
                                    <name>delegateRef</name>
                                    =
                                    <name>null</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>timer</name>
                                    =
                                    <name>null</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * Returns a new {@code ListenableFuture} whose result is asynchronously
                * derived from the result of the given {@code Future}. More precisely, the
                * returned {@code Future} takes its result from a {@code Future} produced by
                * applying the given {@code AsyncFunction} to the result of the original
                * {@code Future}. Example:
                *
                * &lt;pre&gt; {@code
                * ListenableFuture&lt;RowKey&gt; rowKeyFuture = indexService.lookUp(query);
                * AsyncFunction&lt;RowKey, QueryResult&gt; queryFunction =
                * new AsyncFunction&lt;RowKey, QueryResult&gt;() {
                * public ListenableFuture&lt;QueryResult&gt; apply(RowKey rowKey) {
                * return dataService.read(rowKey);
                * }
                * };
                * ListenableFuture&lt;QueryResult&gt; queryFuture =
                * transform(rowKeyFuture, queryFunction);}&lt;/pre&gt;
                *
                * &lt;p&gt;This overload, which does not accept an executor, uses {@code
                * directExecutor}, a dangerous choice in some cases. See the discussion in
                * the {@link ListenableFuture#addListener ListenableFuture.addListener}
                * documentation. The documentation's warnings about "lightweight listeners"
                * refer here to the work done during {@code AsyncFunction.apply}, not to any
                * work done to complete the returned {@code Future}.
                *
                * &lt;p&gt;The returned {@code Future} attempts to keep its cancellation state in
                * sync with that of the input future and that of the future returned by the
                * function. That is, if the returned {@code Future} is cancelled, it will
                * attempt to cancel the other two, and if either of the other two is
                * cancelled, the returned {@code Future} will receive a callback in which it
                * will attempt to cancel itself.
                *
                * @param input The future to transform
                * @param function A function to transform the result of the input future
                * to the result of the output future
                * @return A future that holds result of the function (if the input succeeded)
                * or the original input's failure (if not)
                * @since 11.0
                * @deprecated These {@code AsyncFunction} overloads of {@code transform} are
                * being renamed to {@code transformAsync}. (The {@code Function}
                * overloads are keeping the "transform" name.) This method will be removed in Guava release
                * 20.0.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>I</name>
                        </argument>
                        ,
                        <argument>
                            <name>O</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>O</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>transform</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>I</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>AsyncFunction</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>I</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>O</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>function</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>transformAsync</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>function</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a new {@code ListenableFuture} whose result is asynchronously
                * derived from the result of the given {@code Future}. More precisely, the
                * returned {@code Future} takes its result from a {@code Future} produced by
                * applying the given {@code AsyncFunction} to the result of the original
                * {@code Future}. Example:
                *
                * &lt;pre&gt; {@code
                * ListenableFuture&lt;RowKey&gt; rowKeyFuture = indexService.lookUp(query);
                * AsyncFunction&lt;RowKey, QueryResult&gt; queryFunction =
                * new AsyncFunction&lt;RowKey, QueryResult&gt;() {
                * public ListenableFuture&lt;QueryResult&gt; apply(RowKey rowKey) {
                * return dataService.read(rowKey);
                * }
                * };
                * ListenableFuture&lt;QueryResult&gt; queryFuture =
                * transform(rowKeyFuture, queryFunction, executor);}&lt;/pre&gt;
                *
                * &lt;p&gt;When selecting an executor, note that {@code directExecutor} is
                * dangerous in some cases. See the discussion in the {@link
                * ListenableFuture#addListener ListenableFuture.addListener} documentation.
                * The documentation's warnings about "lightweight listeners" refer here to
                * the work done during {@code AsyncFunction.apply}, not to any work done to
                * complete the returned {@code Future}.
                *
                * &lt;p&gt;The returned {@code Future} attempts to keep its cancellation state in
                * sync with that of the input future and that of the future returned by the
                * chain function. That is, if the returned {@code Future} is cancelled, it
                * will attempt to cancel the other two, and if either of the other two is
                * cancelled, the returned {@code Future} will receive a callback in which it
                * will attempt to cancel itself.
                *
                * @param input The future to transform
                * @param function A function to transform the result of the input future
                * to the result of the output future
                * @param executor Executor to run the function in.
                * @return A future that holds result of the function (if the input succeeded)
                * or the original input's failure (if not)
                * @since 11.0
                * @deprecated These {@code AsyncFunction} overloads of {@code transform} are
                * being renamed to {@code transformAsync}. (The {@code Function}
                * overloads are keeping the "transform" name.) This method will be removed in Guava release
                * 20.0.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>I</name>
                        </argument>
                        ,
                        <argument>
                            <name>O</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>O</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>transform</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>I</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>AsyncFunction</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>I</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>O</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>function</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Executor</name>
                            </type>
                            <name>executor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>transformAsync</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>function</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>executor</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a new {@code ListenableFuture} whose result is asynchronously derived from the result
                * of the given {@code Future}. More precisely, the returned {@code Future} takes its result from
                * a {@code Future} produced by applying the given {@code AsyncFunction} to the result of the
                * original {@code Future}. Example:
                *
                * &lt;pre&gt; {@code
                * ListenableFuture&lt;RowKey&gt; rowKeyFuture = indexService.lookUp(query);
                * AsyncFunction&lt;RowKey, QueryResult&gt; queryFunction =
                * new AsyncFunction&lt;RowKey, QueryResult&gt;() {
                * public ListenableFuture&lt;QueryResult&gt; apply(RowKey rowKey) {
                * return dataService.read(rowKey);
                * }
                * };
                * ListenableFuture&lt;QueryResult&gt; queryFuture =
                * transformAsync(rowKeyFuture, queryFunction);}&lt;/pre&gt;
                *
                * &lt;p&gt;This overload, which does not accept an executor, uses {@code directExecutor}, a dangerous
                * choice in some cases. See the discussion in the {@link ListenableFuture#addListener
                * ListenableFuture.addListener} documentation. The documentation's warnings about "lightweight
                * listeners" refer here to the work done during {@code AsyncFunction.apply}, not to any work done
                * to complete the returned {@code Future}.
                *
                * &lt;p&gt;The returned {@code Future} attempts to keep its cancellation state in sync with that of the
                * input future and that of the future returned by the function. That is, if the returned {@code
                * Future} is cancelled, it will attempt to cancel the other two, and if either of the other two
                * is cancelled, the returned {@code Future} will receive a callback in which it will attempt to
                * cancel itself.
                *
                * @param input The future to transform
                * @param function A function to transform the result of the input future to the result of the
                * output future
                * @return A future that holds result of the function (if the input succeeded) or the original
                * input's failure (if not)
                * @since 19.0 (in 11.0 as {@code transform})
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>I</name>
                        </argument>
                        ,
                        <argument>
                            <name>O</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>O</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>transformAsync</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>I</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>AsyncFunction</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>I</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>O</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>function</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>AsyncChainingFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>I</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>O</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>output</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>
                                            <name>AsyncChainingFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>I</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>O</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>function</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>input</name>.
                                    <name>addListener</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>output</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>directExecutor</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>output</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a new {@code ListenableFuture} whose result is asynchronously derived from the result
                * of the given {@code Future}. More precisely, the returned {@code Future} takes its result from
                * a {@code Future} produced by applying the given {@code AsyncFunction} to the result of the
                * original {@code Future}. Example:
                *
                * &lt;pre&gt; {@code
                * ListenableFuture&lt;RowKey&gt; rowKeyFuture = indexService.lookUp(query);
                * AsyncFunction&lt;RowKey, QueryResult&gt; queryFunction =
                * new AsyncFunction&lt;RowKey, QueryResult&gt;() {
                * public ListenableFuture&lt;QueryResult&gt; apply(RowKey rowKey) {
                * return dataService.read(rowKey);
                * }
                * };
                * ListenableFuture&lt;QueryResult&gt; queryFuture =
                * transformAsync(rowKeyFuture, queryFunction, executor);}&lt;/pre&gt;
                *
                * &lt;p&gt;When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
                * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}
                * documentation. The documentation's warnings about "lightweight listeners" refer here to the
                * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned
                * {@code Future}.
                *
                * &lt;p&gt;The returned {@code Future} attempts to keep its cancellation state in sync with that of the
                * input future and that of the future returned by the chain function. That is, if the returned
                * {@code Future} is cancelled, it will attempt to cancel the other two, and if either of the
                * other two is cancelled, the returned {@code Future} will receive a callback in which it will
                * attempt to cancel itself.
                *
                * @param input The future to transform
                * @param function A function to transform the result of the input future to the result of the
                * output future
                * @param executor Executor to run the function in.
                * @return A future that holds result of the function (if the input succeeded) or the original
                * input's failure (if not)
                * @since 19.0 (in 11.0 as {@code transform})
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>I</name>
                        </argument>
                        ,
                        <argument>
                            <name>O</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>O</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>transformAsync</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>I</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>AsyncFunction</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>I</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>O</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>function</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Executor</name>
                            </type>
                            <name>executor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>executor</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>AsyncChainingFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>I</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>O</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>output</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>
                                            <name>AsyncChainingFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>I</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>O</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>function</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>input</name>.
                                    <name>addListener</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>output</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>rejectionPropagatingExecutor</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>executor</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>output</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>output</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an Executor that will propagate {@link RejectedExecutionException} from the delegate
                * executor to the given {@code future}.
                *
                * &lt;p&gt;Note, the returned executor can only be used once.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>Executor</name>
                </type>
                <name>rejectionPropagatingExecutor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Executor</name>
                            </type>
                            <name>delegate</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>
                                    <name>AbstractFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>future</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>delegate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>delegate</name>
                                ==
                                <call>
                                    <name>directExecutor</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// directExecutor() cannot throw RejectedExecutionException
                                </comment>
                                <return>return
                                    <expr>
                                        <name>delegate</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <class>
                                <super>
                                    <name>Executor</name>
                                </super>
                                <argument_list>()</argument_list>
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>volatile</name>
                                                <name>boolean</name>
                                            </type>
                                            <name>thrownFromDelegate</name> =
                                            <init>
                                                <expr>true</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>void</name>
                                        </type>
                                        <name>execute</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <specifier>final</specifier>
                                                        <name>Runnable</name>
                                                    </type>
                                                    <name>command</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <try>try
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>delegate</name>.
                                                                    <name>execute</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>new
                                                                            <class>
                                                                                <super>
                                                                                    <name>Runnable</name>
                                                                                </super>
                                                                                <argument_list>()</argument_list>
                                                                                <block>{
                                                                                    <function>
                                                                                        <type>
                                                                                            <annotation>@
                                                                                                <name>Override</name>
                                                                                            </annotation>
                                                                                            <specifier>public
                                                                                            </specifier>
                                                                                            <name>void</name>
                                                                                        </type>
                                                                                        <name>run</name>
                                                                                        <parameter_list>()
                                                                                        </parameter_list>
                                                                                        <block>{
                                                                                            <expr_stmt>
                                                                                                <expr>
                                                                                                    <name>
                                                                                                        thrownFromDelegate
                                                                                                    </name>
                                                                                                    = false
                                                                                                </expr>
                                                                                                ;
                                                                                            </expr_stmt>
                                                                                            <expr_stmt>
                                                                                                <expr>
                                                                                                    <call>
                                                                                                        <name><name>
                                                                                                            command</name>
                                                                                                            .
                                                                                                            <name>run
                                                                                                            </name>
                                                                                                        </name>
                                                                                                        <argument_list>
                                                                                                            ()
                                                                                                        </argument_list>
                                                                                                    </call>
                                                                                                </expr>
                                                                                                ;
                                                                                            </expr_stmt>
                                                                                            }
                                                                                        </block>
                                                                                    </function>
                                                                                    }
                                                                                </block>
                                                                            </class>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                                <catch>catch (
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <name>RejectedExecutionException</name>
                                                            </type>
                                                            <name>e</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                    <block>{
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>thrownFromDelegate</name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <comment type="line">// wrap exception?</comment>
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>future</name>.
                                                                                    <name>setException</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>e</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </then>
                                                        </if>
                                                        <comment type="line">// otherwise it must have been thrown from
                                                            a transitive call and the delegate runnable
                                                        </comment>
                                                        <comment type="line">// should have handled it.</comment>
                                                        }
                                                    </block>
                                                </catch>
                                            </try>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a new {@code ListenableFuture} whose result is the product of
                * applying the given {@code Function} to the result of the given {@code
                * Future}. Example:
                *
                * &lt;pre&gt; {@code
                * ListenableFuture&lt;QueryResult&gt; queryFuture = ...;
                * Function&lt;QueryResult, List&lt;Row&gt;&gt; rowsFunction =
                * new Function&lt;QueryResult, List&lt;Row&gt;&gt;() {
                * public List&lt;Row&gt; apply(QueryResult queryResult) {
                * return queryResult.getRows();
                * }
                * };
                * ListenableFuture&lt;List&lt;Row&gt;&gt; rowsFuture =
                * transform(queryFuture, rowsFunction);}&lt;/pre&gt;
                *
                * &lt;p&gt;This overload, which does not accept an executor, uses {@code
                * directExecutor}, a dangerous choice in some cases. See the discussion in
                * the {@link ListenableFuture#addListener ListenableFuture.addListener}
                * documentation. The documentation's warnings about "lightweight listeners"
                * refer here to the work done during {@code Function.apply}.
                *
                * &lt;p&gt;The returned {@code Future} attempts to keep its cancellation state in
                * sync with that of the input future. That is, if the returned {@code Future}
                * is cancelled, it will attempt to cancel the input, and if the input is
                * cancelled, the returned {@code Future} will receive a callback in which it
                * will attempt to cancel itself.
                *
                * &lt;p&gt;An example use of this method is to convert a serializable object
                * returned from an RPC into a POJO.
                *
                * @param input The future to transform
                * @param function A Function to transform the results of the provided future
                * to the results of the returned future. This will be run in the thread
                * that notifies input it is complete.
                * @return A future that holds result of the transformation.
                * @since 9.0 (in 1.0 as {@code compose})
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>I</name>
                        </argument>
                        ,
                        <argument>
                            <name>O</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>O</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>transform</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>I</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>
                                    <name>Function</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>I</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>O</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>function</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>function</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ChainingFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>I</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>O</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>output</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>
                                            <name>ChainingFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>I</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>O</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>function</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>input</name>.
                                    <name>addListener</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>output</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>directExecutor</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>output</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a new {@code ListenableFuture} whose result is the product of
                * applying the given {@code Function} to the result of the given {@code
                * Future}. Example:
                *
                * &lt;pre&gt; {@code
                * ListenableFuture&lt;QueryResult&gt; queryFuture = ...;
                * Function&lt;QueryResult, List&lt;Row&gt;&gt; rowsFunction =
                * new Function&lt;QueryResult, List&lt;Row&gt;&gt;() {
                * public List&lt;Row&gt; apply(QueryResult queryResult) {
                * return queryResult.getRows();
                * }
                * };
                * ListenableFuture&lt;List&lt;Row&gt;&gt; rowsFuture =
                * transform(queryFuture, rowsFunction, executor);}&lt;/pre&gt;
                *
                * &lt;p&gt;When selecting an executor, note that {@code directExecutor} is
                * dangerous in some cases. See the discussion in the {@link
                * ListenableFuture#addListener ListenableFuture.addListener} documentation.
                * The documentation's warnings about "lightweight listeners" refer here to
                * the work done during {@code Function.apply}.
                *
                * &lt;p&gt;The returned {@code Future} attempts to keep its cancellation state in
                * sync with that of the input future. That is, if the returned {@code Future}
                * is cancelled, it will attempt to cancel the input, and if the input is
                * cancelled, the returned {@code Future} will receive a callback in which it
                * will attempt to cancel itself.
                *
                * &lt;p&gt;An example use of this method is to convert a serializable object
                * returned from an RPC into a POJO.
                *
                * @param input The future to transform
                * @param function A Function to transform the results of the provided future
                * to the results of the returned future.
                * @param executor Executor to run the function in.
                * @return A future that holds result of the transformation.
                * @since 9.0 (in 2.0 as {@code compose})
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>I</name>
                        </argument>
                        ,
                        <argument>
                            <name>O</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>O</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>transform</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>I</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>
                                    <name>Function</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>I</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>O</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>function</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Executor</name>
                            </type>
                            <name>executor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>function</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ChainingFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>I</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>O</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>output</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>
                                            <name>ChainingFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>I</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>O</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>function</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>input</name>.
                                    <name>addListener</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>output</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>rejectionPropagatingExecutor</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>executor</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>output</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>output</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Like {@link #transform(ListenableFuture, Function)} except that the
                * transformation {@code function} is invoked on each call to
                * {@link Future#get() get()} on the returned future.
                *
                * &lt;p&gt;The returned {@code Future} reflects the input's cancellation
                * state directly, and any attempt to cancel the returned Future is likewise
                * passed through to the input Future.
                *
                * &lt;p&gt;Note that calls to {@linkplain Future#get(long, TimeUnit) timed get}
                * only apply the timeout to the execution of the underlying {@code Future},
                * &lt;em&gt;not&lt;/em&gt; to the execution of the transformation function.
                *
                * &lt;p&gt;The primary audience of this method is callers of {@code transform}
                * who don't have a {@code ListenableFuture} available and
                * do not mind repeated, lazy function evaluation.
                *
                * @param input The future to transform
                * @param function A Function to transform the results of the provided future
                * to the results of the returned future.
                * @return A future that returns the result of the transformation.
                * @since 10.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>I</name>
                        </argument>
                        ,
                        <argument>
                            <name>O</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Future</name>
                        <argument_list>&lt;
                            <argument>
                                <name>O</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>lazyTransform</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>
                                    <name>Future</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>I</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>
                                    <name>Function</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>I</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>O</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>function</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>function</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>new
                            <class>
                                <super>
                                    <name>
                                        <name>Future</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>O</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </super>
                                <argument_list>()</argument_list>
                                <block>{

                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>boolean</name>
                                        </type>
                                        <name>cancel</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>boolean</name>
                                                    </type>
                                                    <name>mayInterruptIfRunning</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>input</name>.
                                                            <name>cancel</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>mayInterruptIfRunning</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>

                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>boolean</name>
                                        </type>
                                        <name>isCancelled</name>
                                        <parameter_list>()</parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>input</name>.
                                                            <name>isCancelled</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>

                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>boolean</name>
                                        </type>
                                        <name>isDone</name>
                                        <parameter_list>()</parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>input</name>.
                                                            <name>isDone</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>

                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>O</name>
                                        </type>
                                        <name>get</name>
                                        <parameter_list>()</parameter_list>
                                        <throws>throws
                                            <argument>
                                                <expr>
                                                    <name>InterruptedException</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>ExecutionException</name>
                                                </expr>
                                            </argument>
                                        </throws>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name>applyTransformation</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>input</name>.
                                                                            <name>get</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>

                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>O</name>
                                        </type>
                                        <name>get</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>long</name>
                                                    </type>
                                                    <name>timeout</name>
                                                </decl>
                                            </param>
                                            ,
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>TimeUnit</name>
                                                    </type>
                                                    <name>unit</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <throws>throws
                                            <argument>
                                                <expr>
                                                    <name>InterruptedException</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>ExecutionException</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>TimeoutException</name>
                                                </expr>
                                            </argument>
                                        </throws>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name>applyTransformation</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>input</name>.
                                                                            <name>get</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>timeout</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>unit</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>

                                    <function>
                                        <type>
                                            <specifier>private</specifier>
                                            <name>O</name>
                                        </type>
                                        <name>applyTransformation</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>I</name>
                                                    </type>
                                                    <name>input</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <throws>throws
                                            <argument>
                                                <expr>
                                                    <name>ExecutionException</name>
                                                </expr>
                                            </argument>
                                        </throws>
                                        <block>{
                                            <try>try
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <call>
                                                                <name><name>function</name>.
                                                                    <name>apply</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>input</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                                <catch>catch (
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <name>Throwable</name>
                                                            </type>
                                                            <name>t</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                    <block>{
                                                        <throw>throw
                                                            <expr>new
                                                                <call>
                                                                    <name>ExecutionException</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>t</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </throw>
                                                        }
                                                    </block>
                                                </catch>
                                            </try>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * An implementation of {@code ListenableFuture} that also implements
                * {@code Runnable} so that it can be used to nest ListenableFutures.
                * Once the passed-in {@code ListenableFuture} is complete, it calls the
                * passed-in {@code Function} to generate the result.
                *
                * &lt;p&gt;For historical reasons, this class has a special case in its exception
                * handling: If the given {@code AsyncFunction} throws an {@code
                * UndeclaredThrowableException}, {@code ChainingListenableFuture} unwraps it
                * and uses its &lt;i&gt;cause&lt;/i&gt; as the output future's exception, rather than
                * using the {@code UndeclaredThrowableException} itself as it would for other
                * exception types. The reason for this is that {@code Futures.transform} used
                * to require a {@code Function}, whose {@code apply} method is not allowed to
                * throw checked exceptions. Nowadays, {@code Futures.transform} has an
                * overload that accepts an {@code AsyncFunction}, whose {@code apply} method
                * &lt;i&gt;is&lt;/i&gt; allowed to throw checked exception. Users who wish to throw
                * checked exceptions should use that overload instead, and &lt;a
                * href="http://code.google.com/p/guava-libraries/issues/detail?id=1548"&gt;we
                * should remove the {@code UndeclaredThrowableException} special case&lt;/a&gt;.
                */
            </comment>
            <class>
                <specifier>private</specifier>
                <specifier>abstract</specifier>
                <specifier>static</specifier> class
                <name>
                    <name>AbstractChainingFuture</name>
                    <argument_list>&lt;
                        <argument>
                            <name>I</name>
                        </argument>
                        ,
                        <argument>
                            <name>O</name>
                        </argument>
                        ,
                        <argument>
                            <name>F</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <super>
                    <extends>extends <name>AbstractFuture</name>.
                        <name>
                            <name>TrustedFuture</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>O</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                    <implements>implements
                        <name>Runnable</name>
                    </implements>
                </super>
                <block>{
                    <comment type="line">// In theory, this field might not be visible to a cancel() call in certain
                        circumstances. For
                    </comment>
                    <comment type="line">// details, see the comments on the fields of TimeoutFuture.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>
                                    <name>ListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>I</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>inputFuture</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>F</name>
                            </type>
                            <name>function</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>AbstractChainingFuture</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ListenableFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>I</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>inputFuture</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>F</name>
                                    </type>
                                    <name>function</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>inputFuture</name>
                                    </name>
                                    =
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>inputFuture</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>function</name>
                                    </name>
                                    =
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>function</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <specifier>final</specifier>
                            <name>void</name>
                        </type>
                        <name>run</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <try>try
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>ListenableFuture</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                            <extends>extends
                                                                <name>I</name>
                                                            </extends>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>localInputFuture</name> =
                                            <init>
                                                <expr>
                                                    <name>inputFuture</name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>F</name>
                                            </type>
                                            <name>localFunction</name> =
                                            <init>
                                                <expr>
                                                    <name>function</name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name>isCancelled</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                | <name>localInputFuture</name> == <name>null</name> | <name>
                                                localFunction
                                            </name> ==
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return;</return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <expr_stmt>
                                        <expr>
                                            <name>inputFuture</name>
                                            =
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <name>function</name>
                                            =
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </expr_stmt>

                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>I</name>
                                            </type>
                                            <name>sourceResult</name>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <try>try
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>sourceResult</name>
                                                    =
                                                    <call>
                                                        <name>getUninterruptibly</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>localInputFuture</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                        <catch>catch (
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>CancellationException</name>
                                                    </type>
                                                    <name>e</name>
                                                </decl>
                                            </param>
                                            )
                                            <block>{
                                                <comment type="line">// Cancel this future and return.</comment>
                                                <comment type="line">// At this point, inputFuture is cancelled and
                                                    outputFuture doesn't
                                                </comment>
                                                <comment type="line">// exist, so the value of mayInterruptIfRunning is
                                                    irrelevant.
                                                </comment>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>cancel</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>false</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <return>return;</return>
                                                }
                                            </block>
                                        </catch>
                                        <catch>catch (
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>ExecutionException</name>
                                                    </type>
                                                    <name>e</name>
                                                </decl>
                                            </param>
                                            )
                                            <block>{
                                                <comment type="line">// Set the cause of the exception as this future's
                                                    exception
                                                </comment>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>setException</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>e</name>.
                                                                                <name>getCause</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <return>return;</return>
                                                }
                                            </block>
                                        </catch>
                                    </try>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>doTransform</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>localFunction</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>sourceResult</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                                <catch>catch (
                                    <param>
                                        <decl>
                                            <type>
                                                <name>UndeclaredThrowableException</name>
                                            </type>
                                            <name>e</name>
                                        </decl>
                                    </param>
                                    )
                                    <block>{
                                        <comment type="line">// Set the cause of the exception as this future's
                                            exception
                                        </comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>setException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>e</name>.
                                                                        <name>getCause</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </catch>
                                <catch>catch (
                                    <param>
                                        <decl>
                                            <type>
                                                <name>Throwable</name>
                                            </type>
                                            <name>t</name>
                                        </decl>
                                    </param>
                                    )
                                    <block>{
                                        <comment type="line">// This exception is irrelevant in this thread, but useful
                                            for the
                                        </comment>
                                        <comment type="line">// client</comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>setException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>t</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </catch>
                            </try>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/** Template method for subtypes to actually run the transform. */</comment>
                    <function_decl>
                        <type>
                            <specifier>abstract</specifier>
                            <name>void</name>
                        </type>
                        <name>doTransform</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>F</name>
                                    </type>
                                    <name>function</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>I</name>
                                    </type>
                                    <name>result</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>Exception</name>
                                </expr>
                            </argument>
                        </throws>
                        ;
                    </function_decl>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>final</specifier>
                            <name>void</name>
                        </type>
                        <name>done</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>maybePropagateCancellation</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>inputFuture</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>inputFuture</name>
                                    </name>
                                    =
                                    <name>null</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>function</name>
                                    </name>
                                    =
                                    <name>null</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * A {@link AbstractChainingFuture} that delegates to an {@link AsyncFunction} and
                * {@link #setFuture(ListenableFuture)} to implement {@link #doTransform}.
                */
            </comment>
            <class>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class
                <name>
                    <name>AsyncChainingFuture</name>
                    <argument_list>&lt;
                        <argument>
                            <name>I</name>
                        </argument>
                        ,
                        <argument>
                            <name>O</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <super>
                    <extends>extends
                        <name>
                            <name>AbstractChainingFuture</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>I</name>
                                </argument>
                                ,
                                <argument>
                                    <name>O</name>
                                </argument>
                                ,
                                <argument>
                                    <name>
                                        <name>AsyncFunction</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                                <super>super
                                                    <name>I</name>
                                                </super>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>?</name>
                                                <extends>extends
                                                    <name>O</name>
                                                </extends>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </super>
                <block>{
                    <constructor>
                        <name>AsyncChainingFuture</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ListenableFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>I</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>inputFuture</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>AsyncFunction</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <super>super
                                                        <name>I</name>
                                                    </super>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>O</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>function</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>inputFuture</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>function</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>void</name>
                        </type>
                        <name>doTransform</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>AsyncFunction</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <super>super
                                                        <name>I</name>
                                                    </super>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>O</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>function</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>I</name>
                                    </type>
                                    <name>input</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>Exception</name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ListenableFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>O</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>outputFuture</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>function</name>.
                                                    <name>apply</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>input</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>outputFuture</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>"AsyncFunction.apply returned null instead of a Future. "
                                                    + "Did you mean to return immediateFuture(null)?"
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>setFuture</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>outputFuture</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * A {@link AbstractChainingFuture} that delegates to a {@link Function} and
                * {@link #set(Object)} to implement {@link #doTransform}.
                */
            </comment>
            <class>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class
                <name>
                    <name>ChainingFuture</name>
                    <argument_list>&lt;
                        <argument>
                            <name>I</name>
                        </argument>
                        ,
                        <argument>
                            <name>O</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <super>
                    <extends>extends
                        <name>
                            <name>AbstractChainingFuture</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>I</name>
                                </argument>
                                ,
                                <argument>
                                    <name>O</name>
                                </argument>
                                ,
                                <argument>
                                    <name>
                                        <name>Function</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                                <super>super
                                                    <name>I</name>
                                                </super>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>?</name>
                                                <extends>extends
                                                    <name>O</name>
                                                </extends>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </super>
                <block>{

                    <constructor>
                        <name>ChainingFuture</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ListenableFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>I</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>inputFuture</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Function</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <super>super
                                                        <name>I</name>
                                                    </super>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>O</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>function</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>inputFuture</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>function</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>void</name>
                        </type>
                        <name>doTransform</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Function</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <super>super
                                                        <name>I</name>
                                                    </super>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>O</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>function</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>I</name>
                                    </type>
                                    <name>input</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <comment type="line">// TODO(lukes): move the UndeclaredThrowable catch block here?
                            </comment>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>set</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>function</name>.
                                                            <name>apply</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>input</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * Returns a new {@code ListenableFuture} whose result is the product of
                * calling {@code get()} on the {@code Future} nested within the given {@code
                * Future}, effectively chaining the futures one after the other. Example:
                *
                * &lt;pre&gt; {@code
                * SettableFuture&lt;ListenableFuture&lt;String&gt;&gt; nested = SettableFuture.create();
                * ListenableFuture&lt;String&gt; dereferenced = dereference(nested);}&lt;/pre&gt;
                *
                * &lt;p&gt;This call has the same cancellation and execution semantics as {@link
                * #transform(ListenableFuture, AsyncFunction)}, in that the returned {@code
                * Future} attempts to keep its cancellation state in sync with both the
                * input {@code Future} and the nested {@code Future}. The transformation
                * is very lightweight and therefore takes place in the same thread (either
                * the thread that called {@code dereference}, or the thread in which the
                * dereferenced future completes).
                *
                * @param nested The nested future to transform.
                * @return A future that holds result of the inner future.
                * @since 13.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>({"rawtypes", "unchecked"})</argument_list>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>dereference</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>
                                                    <name>ListenableFuture</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                            <extends>extends
                                                                <name>V</name>
                                                            </extends>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>nested</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>transformAsync</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>ListenableFuture</name>)
                                            <name>nested</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>(<name>AsyncFunction</name>)
                                            <name>DEREFERENCER</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Helper {@code Function} for {@link #dereference}.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>AsyncFunction</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>ListenableFuture</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>Object</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                ,
                                <argument>
                                    <name>Object</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>DEREFERENCER</name> =
                    <init>
                        <expr>new
                            <class>
                                <super>
                                    <name>
                                        <name>AsyncFunction</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>
                                                    <name>ListenableFuture</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>Object</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>Object</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </super>
                                <argument_list>()</argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>
                                                <name>ListenableFuture</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>Object</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>apply</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>
                                                            <name>ListenableFuture</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>Object</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                    </type>
                                                    <name>input</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Creates a new {@code ListenableFuture} whose value is a list containing the
                * values of all its input futures, if all succeed. If any input fails, the
                * returned future fails immediately.
                *
                * &lt;p&gt;The list of results is in the same order as the input list.
                *
                * &lt;p&gt;Canceling this future will attempt to cancel all the component futures,
                * and if any of the provided futures fails or is canceled, this one is,
                * too.
                *
                * @param futures futures to combine
                * @return a future that provides a list of the results of the component
                * futures
                * @since 10.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <annotation>@
                        <name>SafeVarargs</name>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>allAsList</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                ...
                            </type>
                            <name>futures</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>ListFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ImmutableList</name>.
                                                    <name>copyOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>futures</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates a new {@code ListenableFuture} whose value is a list containing the
                * values of all its input futures, if all succeed. If any input fails, the
                * returned future fails immediately.
                *
                * &lt;p&gt;The list of results is in the same order as the input list.
                *
                * &lt;p&gt;Canceling this future will attempt to cancel all the component futures,
                * and if any of the provided futures fails or is canceled, this one is,
                * too.
                *
                * @param futures futures to combine
                * @return a future that provides a list of the results of the component
                * futures
                * @since 10.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>allAsList</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>
                                                    <name>ListenableFuture</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                            <extends>extends
                                                                <name>V</name>
                                                            </extends>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>futures</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>ListFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ImmutableList</name>.
                                                    <name>copyOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>futures</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates a new {@code ListenableFuture} whose result is set from the
                * supplied future when it completes. Cancelling the supplied future
                * will also cancel the returned future, but cancelling the returned
                * future will have no effect on the supplied future.
                *
                * @since 15.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>nonCancellationPropagating</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>future</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>NonCancellationPropagatingFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>future</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A wrapped future that does not propagate cancellation to its delegate.
                */
            </comment>
            <class>
                <annotation>@
                    <name>GwtIncompatible</name>
                    <argument_list>("TODO")</argument_list>
                </annotation>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class
                <name>
                    <name>NonCancellationPropagatingFuture</name>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <super>
                    <extends>extends <name>AbstractFuture</name>.
                        <name>
                            <name>TrustedFuture</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </super>
                <block>{
                    <constructor>
                        <name>NonCancellationPropagatingFuture</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <specifier>final</specifier>
                                        <name>
                                            <name>ListenableFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>delegate</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>delegate</name>.
                                            <name>addListener</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <class>
                                                        <super>
                                                            <name>Runnable</name>
                                                        </super>
                                                        <argument_list>()</argument_list>
                                                        <block>{
                                                            <function>
                                                                <type>
                                                                    <annotation>@
                                                                        <name>Override</name>
                                                                    </annotation>
                                                                    <specifier>public</specifier>
                                                                    <name>void</name>
                                                                </type>
                                                                <name>run</name>
                                                                <parameter_list>()</parameter_list>
                                                                <block>{
                                                                    <comment type="line">// This prevents cancellation
                                                                        from propagating because we don't assign
                                                                        delegate until
                                                                    </comment>
                                                                    <comment type="line">// delegate is already done, so
                                                                        calling cancel() on it is a no-op.
                                                                    </comment>
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name>setFuture</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>delegate</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </function>
                                                            }
                                                        </block>
                                                    </class>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>directExecutor</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * Creates a new {@code ListenableFuture} whose value is a list containing the
                * values of all its successful input futures. The list of results is in the
                * same order as the input list, and if any of the provided futures fails or
                * is canceled, its corresponding position will contain {@code null} (which is
                * indistinguishable from the future having a successful value of
                * {@code null}).
                *
                * &lt;p&gt;Canceling this future will attempt to cancel all the component futures.
                *
                * @param futures futures to combine
                * @return a future that provides a list of the results of the component
                * futures
                * @since 10.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <annotation>@
                        <name>SafeVarargs</name>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>successfulAsList</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                ...
                            </type>
                            <name>futures</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>ListFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ImmutableList</name>.
                                                    <name>copyOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>futures</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates a new {@code ListenableFuture} whose value is a list containing the
                * values of all its successful input futures. The list of results is in the
                * same order as the input list, and if any of the provided futures fails or
                * is canceled, its corresponding position will contain {@code null} (which is
                * indistinguishable from the future having a successful value of
                * {@code null}).
                *
                * &lt;p&gt;Canceling this future will attempt to cancel all the component futures.
                *
                * @param futures futures to combine
                * @return a future that provides a list of the results of the component
                * futures
                * @since 10.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>successfulAsList</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>
                                                    <name>ListenableFuture</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                            <extends>extends
                                                                <name>V</name>
                                                            </extends>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>futures</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>ListFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ImmutableList</name>.
                                                    <name>copyOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>futures</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a list of delegate futures that correspond to the futures received in the order
                * that they complete. Delegate futures return the same value or throw the same exception
                * as the corresponding input future returns/throws.
                *
                * &lt;p&gt;Cancelling a delegate future has no effect on any input future, since the delegate future
                * does not correspond to a specific input future until the appropriate number of input
                * futures have completed. At that point, it is too late to cancel the input future.
                * The input future's result, which cannot be stored into the cancelled delegate future,
                * is ignored.
                *
                * @since 17.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ImmutableList</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>ListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>inCompletionOrder</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>
                                                    <name>ListenableFuture</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                            <extends>extends
                                                                <name>T</name>
                                                            </extends>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>futures</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// A CLQ may be overkill here. We could save some pointers/memory by
                        synchronizing on an
                    </comment>
                    <comment type="line">// ArrayDeque</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>
                                    <name>ConcurrentLinkedQueue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>SettableFuture</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>T</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>delegates</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Queues</name>.
                                            <name>newConcurrentLinkedQueue</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>ImmutableList</name>.
                                    <name>
                                        <name>Builder</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>
                                                    <name>ListenableFuture</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>T</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </name>
                            </type>
                            <name>listBuilder</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ImmutableList</name>.
                                            <name>builder</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Using SerializingExecutor here will ensure that each CompletionOrderListener
                        executes
                    </comment>
                    <comment type="line">// atomically and therefore that each returned future is guaranteed to be in
                        completion order.
                    </comment>
                    <comment type="line">// N.B. there are some cases where the use of this executor could have possibly
                        surprising
                    </comment>
                    <comment type="line">// effects when input futures finish at approximately the same time _and_ the
                        output futures
                    </comment>
                    <comment type="line">// have directExecutor listeners. In this situation, the listeners may end up
                        running on a
                    </comment>
                    <comment type="line">// different thread than if they were attached to the corresponding input
                        future. We believe
                    </comment>
                    <comment type="line">// this to be a negligible cost since:</comment>
                    <comment type="line">// 1. Using the directExecutor implies that your callback is safe to run on any
                        thread.
                    </comment>
                    <comment type="line">// 2. This would likely only be noticeable if you were doing something
                        expensive or blocking on
                    </comment>
                    <comment type="line">// a directExecutor listener on one of the output futures which is an
                        antipattern anyway.
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SerializingExecutor</name>
                            </type>
                            <name>executor</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>SerializingExecutor</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>directExecutor</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <specifier>final</specifier>
                                    <name>
                                        <name>ListenableFuture</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                                <extends>extends
                                                    <name>T</name>
                                                </extends>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>future</name> :
                                <range>
                                    <expr>
                                        <name>futures</name>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>SettableFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>T</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>delegate</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>SettableFuture</name>.
                                                    <name>create</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <comment type="line">// Must make sure to add the delegate to the queue first in case the
                                future is already done
                            </comment>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>delegates</name>.
                                            <name>add</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>delegate</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>future</name>.
                                            <name>addListener</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <class>
                                                        <super>
                                                            <name>Runnable</name>
                                                        </super>
                                                        <argument_list>()</argument_list>
                                                        <block>{
                                                            <function>
                                                                <type>
                                                                    <annotation>@
                                                                        <name>Override</name>
                                                                    </annotation>
                                                                    <specifier>public</specifier>
                                                                    <name>void</name>
                                                                </type>
                                                                <name>run</name>
                                                                <parameter_list>()</parameter_list>
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>delegates</name>.
                                                                                    <name>remove</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                            .
                                                                            <call>
                                                                                <name>setFuture</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>future</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </function>
                                                            }
                                                        </block>
                                                    </class>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>executor</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>listBuilder</name>.
                                            <name>add</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>delegate</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name><name>listBuilder</name>.
                                    <name>build</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Registers separate success and failure callbacks to be run when the {@code
                * Future}'s computation is {@linkplain java.util.concurrent.Future#isDone()
                * complete} or, if the computation is already complete, immediately.
                *
                * &lt;p&gt;There is no guaranteed ordering of execution of callbacks, but any
                * callback added through this method is guaranteed to be called once the
                * computation is complete.
                *
                * Example: &lt;pre&gt; {@code
                * ListenableFuture&lt;QueryResult&gt; future = ...;
                * addCallback(future,
                * new FutureCallback&lt;QueryResult&gt; {
                * public void onSuccess(QueryResult result) {
                * storeInCache(result);
                * }
                * public void onFailure(Throwable t) {
                * reportError(t);
                * }
                * });}&lt;/pre&gt;
                *
                * &lt;p&gt;This overload, which does not accept an executor, uses {@code
                * directExecutor}, a dangerous choice in some cases. See the discussion in
                * the {@link ListenableFuture#addListener ListenableFuture.addListener}
                * documentation.
                *
                * &lt;p&gt;For a more general interface to attach a completion listener to a
                * {@code Future}, see {@link ListenableFuture#addListener addListener}.
                *
                * @param future The future attach the callback to.
                * @param callback The callback to invoke when {@code future} is completed.
                * @since 10.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>void</name>
                </type>
                <name>addCallback</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>future</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>FutureCallback</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>V</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>callback</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>addCallback</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>future</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>callback</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>directExecutor</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Registers separate success and failure callbacks to be run when the {@code
                * Future}'s computation is {@linkplain java.util.concurrent.Future#isDone()
                * complete} or, if the computation is already complete, immediately.
                *
                * &lt;p&gt;The callback is run in {@code executor}.
                * There is no guaranteed ordering of execution of callbacks, but any
                * callback added through this method is guaranteed to be called once the
                * computation is complete.
                *
                * Example: &lt;pre&gt; {@code
                * ListenableFuture&lt;QueryResult&gt; future = ...;
                * Executor e = ...
                * addCallback(future,
                * new FutureCallback&lt;QueryResult&gt; {
                * public void onSuccess(QueryResult result) {
                * storeInCache(result);
                * }
                * public void onFailure(Throwable t) {
                * reportError(t);
                * }
                * }, e);}&lt;/pre&gt;
                *
                * &lt;p&gt;When selecting an executor, note that {@code directExecutor} is
                * dangerous in some cases. See the discussion in the {@link
                * ListenableFuture#addListener ListenableFuture.addListener} documentation.
                *
                * &lt;p&gt;For a more general interface to attach a completion listener to a
                * {@code Future}, see {@link ListenableFuture#addListener addListener}.
                *
                * @param future The future attach the callback to.
                * @param callback The callback to invoke when {@code future} is completed.
                * @param executor The executor to run {@code callback} when the future
                * completes.
                * @since 10.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>void</name>
                </type>
                <name>addCallback</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>
                                    <name>ListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>future</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>
                                    <name>FutureCallback</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>V</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>callback</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Executor</name>
                            </type>
                            <name>executor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>Preconditions</name>.
                                    <name>checkNotNull</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>callback</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Runnable</name>
                            </type>
                            <name>callbackListener</name> =
                            <init>
                                <expr>new
                                    <class>
                                        <super>
                                            <name>Runnable</name>
                                        </super>
                                        <argument_list>()</argument_list>
                                        <block>{
                                            <function>
                                                <type>
                                                    <annotation>@
                                                        <name>Override</name>
                                                    </annotation>
                                                    <specifier>public</specifier>
                                                    <name>void</name>
                                                </type>
                                                <name>run</name>
                                                <parameter_list>()</parameter_list>
                                                <block>{
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <specifier>final</specifier>
                                                                <name>V</name>
                                                            </type>
                                                            <name>value</name>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <try>try
                                                        <block>{
                                                            <comment type="line">// TODO(user): (Before Guava release),
                                                                validate that this
                                                            </comment>
                                                            <comment type="line">// is the thing for IE.</comment>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>value</name>
                                                                    =
                                                                    <call>
                                                                        <name>getUninterruptibly</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>future</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                        <catch>catch (
                                                            <param>
                                                                <decl>
                                                                    <type>
                                                                        <name>ExecutionException</name>
                                                                    </type>
                                                                    <name>e</name>
                                                                </decl>
                                                            </param>
                                                            )
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>callback</name>.
                                                                                <name>onFailure</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name><name>e</name>.
                                                                                                <name>getCause</name>
                                                                                            </name>
                                                                                            <argument_list>()
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <return>return;</return>
                                                                }
                                                            </block>
                                                        </catch>
                                                        <catch>catch (
                                                            <param>
                                                                <decl>
                                                                    <type>
                                                                        <name>RuntimeException</name>
                                                                    </type>
                                                                    <name>e</name>
                                                                </decl>
                                                            </param>
                                                            )
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>callback</name>.
                                                                                <name>onFailure</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>e</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <return>return;</return>
                                                                }
                                                            </block>
                                                        </catch>
                                                        <catch>catch (
                                                            <param>
                                                                <decl>
                                                                    <type>
                                                                        <name>Error</name>
                                                                    </type>
                                                                    <name>e</name>
                                                                </decl>
                                                            </param>
                                                            )
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>callback</name>.
                                                                                <name>onFailure</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>e</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <return>return;</return>
                                                                }
                                                            </block>
                                                        </catch>
                                                    </try>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>callback</name>.
                                                                    <name>onSuccess</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>value</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </function>
                                            }
                                        </block>
                                    </class>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>future</name>.
                                    <name>addListener</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>callbackListener</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>executor</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the result of {@link Future#get()}, converting most exceptions to a
                * new instance of the given checked exception type. This reduces boilerplate
                * for a common use of {@code Future} in which it is unnecessary to
                * programmatically distinguish between exception types or to extract other
                * information from the exception instance.
                *
                * &lt;p&gt;Exceptions from {@code Future.get} are treated as follows:
                * &lt;ul&gt;
                * &lt;li&gt;Any {@link ExecutionException} has its &lt;i&gt;cause&lt;/i&gt; wrapped in an
                * {@code X} if the cause is a checked exception, an {@link
                * UncheckedExecutionException} if the cause is a {@code
                * RuntimeException}, or an {@link ExecutionError} if the cause is an
                * {@code Error}.
                * &lt;li&gt;Any {@link InterruptedException} is wrapped in an {@code X} (after
                * restoring the interrupt).
                * &lt;li&gt;Any {@link CancellationException} is propagated untouched, as is any
                * other {@link RuntimeException} (though {@code get} implementations are
                * discouraged from throwing such exceptions).
                * &lt;/ul&gt;
                *
                * &lt;p&gt;The overall principle is to continue to treat every checked exception as a
                * checked exception, every unchecked exception as an unchecked exception, and
                * every error as an error. In addition, the cause of any {@code
                * ExecutionException} is wrapped in order to ensure that the new stack trace
                * matches that of the current thread.
                *
                * &lt;p&gt;Instances of {@code exceptionClass} are created by choosing an arbitrary
                * public constructor that accepts zero or more arguments, all of type {@code
                * String} or {@code Throwable} (preferring constructors with at least one
                * {@code String}) and calling the constructor via reflection. If the
                * exception did not already have a cause, one is set by calling {@link
                * Throwable#initCause(Throwable)} on it. If no such constructor exists, an
                * {@code IllegalArgumentException} is thrown.
                *
                * @throws X if {@code get} throws any checked exception except for an {@code
                * ExecutionException} whose cause is not itself a checked exception
                * @throws UncheckedExecutionException if {@code get} throws an {@code
                * ExecutionException} with a {@code RuntimeException} as its cause
                * @throws ExecutionError if {@code get} throws an {@code ExecutionException}
                * with an {@code Error} as its cause
                * @throws CancellationException if {@code get} throws a {@code
                * CancellationException}
                * @throws IllegalArgumentException if {@code exceptionClass} extends {@code
                * RuntimeException} or does not have a suitable constructor
                * @since 10.0
                * @deprecated Use {@link #getChecked(Future, Class)}. This method will be
                * removed in Guava release 20.0.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("reflection")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        ,
                        <argument>
                            <name>X</name>
                            <extends>extends
                                <name>Exception</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>V</name>
                </type>
                <name>get</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Future</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>future</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>exceptionClass</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>X</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getChecked</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>future</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>exceptionClass</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the result of {@link Future#get(long, TimeUnit)}, converting most
                * exceptions to a new instance of the given checked exception type. This
                * reduces boilerplate for a common use of {@code Future} in which it is
                * unnecessary to programmatically distinguish between exception types or to
                * extract other information from the exception instance.
                *
                * &lt;p&gt;Exceptions from {@code Future.get} are treated as follows:
                * &lt;ul&gt;
                * &lt;li&gt;Any {@link ExecutionException} has its &lt;i&gt;cause&lt;/i&gt; wrapped in an
                * {@code X} if the cause is a checked exception, an {@link
                * UncheckedExecutionException} if the cause is a {@code
                * RuntimeException}, or an {@link ExecutionError} if the cause is an
                * {@code Error}.
                * &lt;li&gt;Any {@link InterruptedException} is wrapped in an {@code X} (after
                * restoring the interrupt).
                * &lt;li&gt;Any {@link TimeoutException} is wrapped in an {@code X}.
                * &lt;li&gt;Any {@link CancellationException} is propagated untouched, as is any
                * other {@link RuntimeException} (though {@code get} implementations are
                * discouraged from throwing such exceptions).
                * &lt;/ul&gt;
                *
                * &lt;p&gt;The overall principle is to continue to treat every checked exception as a
                * checked exception, every unchecked exception as an unchecked exception, and
                * every error as an error. In addition, the cause of any {@code
                * ExecutionException} is wrapped in order to ensure that the new stack trace
                * matches that of the current thread.
                *
                * &lt;p&gt;Instances of {@code exceptionClass} are created by choosing an arbitrary
                * public constructor that accepts zero or more arguments, all of type {@code
                * String} or {@code Throwable} (preferring constructors with at least one
                * {@code String}) and calling the constructor via reflection. If the
                * exception did not already have a cause, one is set by calling {@link
                * Throwable#initCause(Throwable)} on it. If no such constructor exists, an
                * {@code IllegalArgumentException} is thrown.
                *
                * @throws X if {@code get} throws any checked exception except for an {@code
                * ExecutionException} whose cause is not itself a checked exception
                * @throws UncheckedExecutionException if {@code get} throws an {@code
                * ExecutionException} with a {@code RuntimeException} as its cause
                * @throws ExecutionError if {@code get} throws an {@code ExecutionException}
                * with an {@code Error} as its cause
                * @throws CancellationException if {@code get} throws a {@code
                * CancellationException}
                * @throws IllegalArgumentException if {@code exceptionClass} extends {@code
                * RuntimeException} or does not have a suitable constructor
                * @since 10.0
                * @deprecated Use {@link #getChecked(Future, Class, long, TimeUnit)}, noting
                * the change in parameter order. This method will be removed in Guava
                * release 20.0.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("reflection")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        ,
                        <argument>
                            <name>X</name>
                            <extends>extends
                                <name>Exception</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>V</name>
                </type>
                <name>get</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Future</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>future</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>timeout</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>TimeUnit</name>
                            </type>
                            <name>unit</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>exceptionClass</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>X</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getChecked</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>future</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>exceptionClass</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>timeout</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>unit</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the result of {@link Future#get()}, converting most exceptions to a
                * new instance of the given checked exception type. This reduces boilerplate
                * for a common use of {@code Future} in which it is unnecessary to
                * programmatically distinguish between exception types or to extract other
                * information from the exception instance.
                *
                * &lt;p&gt;Exceptions from {@code Future.get} are treated as follows:
                * &lt;ul&gt;
                * &lt;li&gt;Any {@link ExecutionException} has its &lt;i&gt;cause&lt;/i&gt; wrapped in an
                * {@code X} if the cause is a checked exception, an {@link
                * UncheckedExecutionException} if the cause is a {@code
                * RuntimeException}, or an {@link ExecutionError} if the cause is an
                * {@code Error}.
                * &lt;li&gt;Any {@link InterruptedException} is wrapped in an {@code X} (after
                * restoring the interrupt).
                * &lt;li&gt;Any {@link CancellationException} is propagated untouched, as is any
                * other {@link RuntimeException} (though {@code get} implementations are
                * discouraged from throwing such exceptions).
                * &lt;/ul&gt;
                *
                * &lt;p&gt;The overall principle is to continue to treat every checked exception as a
                * checked exception, every unchecked exception as an unchecked exception, and
                * every error as an error. In addition, the cause of any {@code
                * ExecutionException} is wrapped in order to ensure that the new stack trace
                * matches that of the current thread.
                *
                * &lt;p&gt;Instances of {@code exceptionClass} are created by choosing an arbitrary
                * public constructor that accepts zero or more arguments, all of type {@code
                * String} or {@code Throwable} (preferring constructors with at least one
                * {@code String}) and calling the constructor via reflection. If the
                * exception did not already have a cause, one is set by calling {@link
                * Throwable#initCause(Throwable)} on it. If no such constructor exists, an
                * {@code IllegalArgumentException} is thrown.
                *
                * @throws X if {@code get} throws any checked exception except for an {@code
                * ExecutionException} whose cause is not itself a checked exception
                * @throws UncheckedExecutionException if {@code get} throws an {@code
                * ExecutionException} with a {@code RuntimeException} as its cause
                * @throws ExecutionError if {@code get} throws an {@code ExecutionException}
                * with an {@code Error} as its cause
                * @throws CancellationException if {@code get} throws a {@code
                * CancellationException}
                * @throws IllegalArgumentException if {@code exceptionClass} extends {@code
                * RuntimeException} or does not have a suitable constructor
                * @since 19.0 (in 10.0 as {@code get})
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("reflection")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        ,
                        <argument>
                            <name>X</name>
                            <extends>extends
                                <name>Exception</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>V</name>
                </type>
                <name>getChecked</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Future</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>future</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>exceptionClass</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>X</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>FuturesGetChecked</name>.
                                    <name>getChecked</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>future</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>exceptionClass</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the result of {@link Future#get(long, TimeUnit)}, converting most
                * exceptions to a new instance of the given checked exception type. This
                * reduces boilerplate for a common use of {@code Future} in which it is
                * unnecessary to programmatically distinguish between exception types or to
                * extract other information from the exception instance.
                *
                * &lt;p&gt;Exceptions from {@code Future.get} are treated as follows:
                * &lt;ul&gt;
                * &lt;li&gt;Any {@link ExecutionException} has its &lt;i&gt;cause&lt;/i&gt; wrapped in an
                * {@code X} if the cause is a checked exception, an {@link
                * UncheckedExecutionException} if the cause is a {@code
                * RuntimeException}, or an {@link ExecutionError} if the cause is an
                * {@code Error}.
                * &lt;li&gt;Any {@link InterruptedException} is wrapped in an {@code X} (after
                * restoring the interrupt).
                * &lt;li&gt;Any {@link TimeoutException} is wrapped in an {@code X}.
                * &lt;li&gt;Any {@link CancellationException} is propagated untouched, as is any
                * other {@link RuntimeException} (though {@code get} implementations are
                * discouraged from throwing such exceptions).
                * &lt;/ul&gt;
                *
                * &lt;p&gt;The overall principle is to continue to treat every checked exception as a
                * checked exception, every unchecked exception as an unchecked exception, and
                * every error as an error. In addition, the cause of any {@code
                * ExecutionException} is wrapped in order to ensure that the new stack trace
                * matches that of the current thread.
                *
                * &lt;p&gt;Instances of {@code exceptionClass} are created by choosing an arbitrary
                * public constructor that accepts zero or more arguments, all of type {@code
                * String} or {@code Throwable} (preferring constructors with at least one
                * {@code String}) and calling the constructor via reflection. If the
                * exception did not already have a cause, one is set by calling {@link
                * Throwable#initCause(Throwable)} on it. If no such constructor exists, an
                * {@code IllegalArgumentException} is thrown.
                *
                * @throws X if {@code get} throws any checked exception except for an {@code
                * ExecutionException} whose cause is not itself a checked exception
                * @throws UncheckedExecutionException if {@code get} throws an {@code
                * ExecutionException} with a {@code RuntimeException} as its cause
                * @throws ExecutionError if {@code get} throws an {@code ExecutionException}
                * with an {@code Error} as its cause
                * @throws CancellationException if {@code get} throws a {@code
                * CancellationException}
                * @throws IllegalArgumentException if {@code exceptionClass} extends {@code
                * RuntimeException} or does not have a suitable constructor
                * @since 19.0 (in 10.0 as {@code get} and with different parameter order)
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("reflection")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        ,
                        <argument>
                            <name>X</name>
                            <extends>extends
                                <name>Exception</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>V</name>
                </type>
                <name>getChecked</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Future</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>future</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>exceptionClass</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>timeout</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>TimeUnit</name>
                            </type>
                            <name>unit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>X</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>FuturesGetChecked</name>.
                                    <name>getChecked</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>future</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>exceptionClass</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>timeout</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>unit</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the result of calling {@link Future#get()} uninterruptibly on a
                * task known not to throw a checked exception. This makes {@code Future} more
                * suitable for lightweight, fast-running tasks that, barring bugs in the
                * code, will not fail. This gives it exception-handling behavior similar to
                * that of {@code ForkJoinTask.join}.
                *
                * &lt;p&gt;Exceptions from {@code Future.get} are treated as follows:
                * &lt;ul&gt;
                * &lt;li&gt;Any {@link ExecutionException} has its &lt;i&gt;cause&lt;/i&gt; wrapped in an
                * {@link UncheckedExecutionException} (if the cause is an {@code
                * Exception}) or {@link ExecutionError} (if the cause is an {@code
                * Error}).
                * &lt;li&gt;Any {@link InterruptedException} causes a retry of the {@code get}
                * call. The interrupt is restored before {@code getUnchecked} returns.
                * &lt;li&gt;Any {@link CancellationException} is propagated untouched. So is any
                * other {@link RuntimeException} ({@code get} implementations are
                * discouraged from throwing such exceptions).
                * &lt;/ul&gt;
                *
                * &lt;p&gt;The overall principle is to eliminate all checked exceptions: to loop to
                * avoid {@code InterruptedException}, to pass through {@code
                * CancellationException}, and to wrap any exception from the underlying
                * computation in an {@code UncheckedExecutionException} or {@code
                * ExecutionError}.
                *
                * &lt;p&gt;For an uninterruptible {@code get} that preserves other exceptions, see
                * {@link Uninterruptibles#getUninterruptibly(Future)}.
                *
                * @throws UncheckedExecutionException if {@code get} throws an {@code
                * ExecutionException} with an {@code Exception} as its cause
                * @throws ExecutionError if {@code get} throws an {@code ExecutionException}
                * with an {@code Error} as its cause
                * @throws CancellationException if {@code get} throws a {@code
                * CancellationException}
                * @since 10.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>V</name>
                </type>
                <name>getUnchecked</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Future</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>future</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>future</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <try>try
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name>getUninterruptibly</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>future</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>ExecutionException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>wrapAndThrowUnchecked</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>e</name>.
                                                                <name>getCause</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>AssertionError</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>wrapAndThrowUnchecked</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>cause</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>cause</name>
                                <name>instanceof</name>
                                <name>Error</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ExecutionError</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>(<name>Error</name>)
                                                        <name>cause</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="block">/*
                        * It's a non-Error, non-Exception Throwable. From my survey of such
                        * classes, I believe that most users intended to extend Exception, so we'll
                        * treat it like an Exception.
                        */
                    </comment>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UncheckedExecutionException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cause</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="block">/*
                * Arguably we don't need a timed getUnchecked because any operation slow
                * enough to require a timeout is heavyweight enough to throw a checked
                * exception and therefore be inappropriate to use with getUnchecked. Further,
                * it's not clear that converting the checked TimeoutException to a
                * RuntimeException -- especially to an UncheckedExecutionException, since it
                * wasn't thrown by the computation -- makes sense, and if we don't convert
                * it, the user still has to write a try-catch block.
                *
                * If you think you would use this method, let us know. You might also also
                * look into the Fork-Join framework:
                * http://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html
                */
            </comment>

            <comment type="javadoc">/** Used for {@link #allAsList} and {@link #successfulAsList}. */</comment>
            <class>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class
                <name>
                    <name>ListFuture</name>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <super>
                    <extends>extends
                        <name>
                            <name>CollectionFuture</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                ,
                                <argument>
                                    <name>
                                        <name>List</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </super>
                <block>{
                    <constructor>
                        <name>ListFuture</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ImmutableCollection</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>
                                                            <name>ListenableFuture</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>?</name>
                                                                    <extends>extends
                                                                        <name>V</name>
                                                                    </extends>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>futures</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>boolean</name>
                                    </type>
                                    <name>allMustSucceed</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>init</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>ListFutureRunningState</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>futures</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>allMustSucceed</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <class>
                        <specifier>private</specifier>
                        <specifier>final</specifier> class <name>ListFutureRunningState</name>
                        <super>
                            <extends>extends
                                <name>CollectionFutureRunningState</name>
                            </extends>
                        </super>
                        <block>{
                            <constructor>
                                <name>ListFutureRunningState</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>ImmutableCollection</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                            <extends>extends
                                                                <name>
                                                                    <name>ListenableFuture</name>
                                                                    <argument_list>&lt;
                                                                        <argument>
                                                                            <name>?</name>
                                                                            <extends>extends
                                                                                <name>V</name>
                                                                            </extends>
                                                                        </argument>
                                                                        &gt;
                                                                    </argument_list>
                                                                </name>
                                                            </extends>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>futures</name>
                                        </decl>
                                    </param>
                                    ,
                                    <param>
                                        <decl>
                                            <type>
                                                <name>boolean</name>
                                            </type>
                                            <name>allMustSucceed</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>super</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>futures</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>allMustSucceed</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </constructor>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>
                                        <name>List</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>combine</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>List</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>
                                                                <name>Optional</name>
                                                                <argument_list>&lt;
                                                                    <argument>
                                                                        <name>V</name>
                                                                    </argument>
                                                                    &gt;
                                                                </argument_list>
                                                            </name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>values</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>List</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>result</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>Lists</name>.
                                                            <name>newArrayList</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <for>for (
                                        <init>
                                            <decl>
                                                <type>
                                                    <name>
                                                        <name>Optional</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>V</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </type>
                                                <name>element</name> :
                                                <range>
                                                    <expr>
                                                        <name>values</name>
                                                    </expr>
                                                </range>
                                            </decl>
                                        </init>
                                        )
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>result</name>.
                                                            <name>add</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>element</name>
                                                                    != <name>null</name> ?
                                                                    <call>
                                                                        <name><name>element</name>.
                                                                            <name>orNull</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                    :
                                                                    <name>null</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </for>
                                    <return>return
                                        <expr>
                                            <call>
                                                <name><name>Collections</name>.
                                                    <name>unmodifiableList</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>result</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </class>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * A checked future that uses a function to map from exceptions to the
                * appropriate checked type.
                */
            </comment>
            <class>
                <annotation>@
                    <name>GwtIncompatible</name>
                    <argument_list>("TODO")</argument_list>
                </annotation>
                <specifier>private</specifier>
                <specifier>static</specifier> class
                <name>
                    <name>MappingCheckedFuture</name>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        ,
                        <argument>
                            <name>X</name>
                            <extends>extends
                                <name>Exception</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <super>
                    <extends>extends
                        <name>
                            <name>AbstractCheckedFuture</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                ,
                                <argument>
                                    <name>X</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </super>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>
                                    <name>Function</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>Exception</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>mapper</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>MappingCheckedFuture</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ListenableFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>delegate</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Function</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <super>super
                                                        <name>Exception</name>
                                                    </super>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>X</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>mapper</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>delegate</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>mapper</name>
                                    </name>
                                    =
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>mapper</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>protected</specifier>
                            <name>X</name>
                        </type>
                        <name>mapException</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Exception</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>mapper</name>.
                                            <name>apply</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>e</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>
            }
        </block>
    </class>
</unit>
