<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\util\concurrent\FuturesGetChecked.java">
    <comment type="block">/*
        * Copyright (C) 2006 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
        * in compliance with the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software distributed under the License
        * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
        * or implied. See the License for the specific language governing permissions and limitations under
        * the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.
            <name>concurrent</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkArgument</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>lang</name>.<name>Thread</name>.
            <name>currentThread</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>util</name>.<name>Arrays</name>.
            <name>asList</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>VisibleForTesting</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Function</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.
            <name>Ordering</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>j2objc</name>.<name>annotations</name>.
            <name>J2ObjCIncompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>lang</name>.<name>ref</name>.
            <name>WeakReference</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Constructor</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>InvocationTargetException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Arrays</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Set</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>CopyOnWriteArraySet</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ExecutionException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>Future</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>TimeUnit</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>TimeoutException</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Static methods used to implement {@link Futures#getChecked(Future, Class)}.
        */
    </comment>
    <class>
        <specifier>final</specifier>
        class <name>FuturesGetChecked</name>
        <block>{
            <function>
                <type>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        ,
                        <argument>
                            <name>X</name>
                            <extends>extends
                                <name>Exception</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>V</name>
                </type>
                <name>getChecked</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Future</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>future</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>exceptionClass</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>X</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getChecked</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>bestGetCheckedTypeValidator</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>future</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>exceptionClass</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Implementation of {@link Futures#getChecked(Future, Class)}.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>VisibleForTesting</name>
                    </annotation>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        ,
                        <argument>
                            <name>X</name>
                            <extends>extends
                                <name>Exception</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>V</name>
                </type>
                <name>getChecked</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>GetCheckedTypeValidator</name>
                            </type>
                            <name>validator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Future</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>future</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>exceptionClass</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>X</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>validator</name>.
                                    <name>validateClass</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>exceptionClass</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <try>try
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>future</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>InterruptedException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>currentThread</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>interrupt</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <throw>throw
                                    <expr>
                                        <call>
                                            <name>newWithCause</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>exceptionClass</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>ExecutionException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>wrapAndThrowExceptionOrError</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>e</name>.
                                                                <name>getCause</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>exceptionClass</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>AssertionError</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Implementation of {@link Futures#getChecked(Future, Class, long, TimeUnit)}.
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        ,
                        <argument>
                            <name>X</name>
                            <extends>extends
                                <name>Exception</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>V</name>
                </type>
                <name>getChecked</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Future</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>future</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>exceptionClass</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>timeout</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>TimeUnit</name>
                            </type>
                            <name>unit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>X</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// TODO(cpovirk): benchmark a version of this method that accepts a
                        GetCheckedTypeValidator
                    </comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>bestGetCheckedTypeValidator</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>validateClass</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>exceptionClass</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <try>try
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>future</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>timeout</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>unit</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>InterruptedException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>currentThread</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>interrupt</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <throw>throw
                                    <expr>
                                        <call>
                                            <name>newWithCause</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>exceptionClass</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>TimeoutException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>
                                        <call>
                                            <name>newWithCause</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>exceptionClass</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>ExecutionException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>wrapAndThrowExceptionOrError</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>e</name>.
                                                                <name>getCause</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>exceptionClass</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>AssertionError</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <class type="interface">
                <annotation>@
                    <name>VisibleForTesting</name>
                </annotation>
                interface <name>GetCheckedTypeValidator</name>
                <block>{
                    <function_decl>
                        <type>
                            <name>void</name>
                        </type>
                        <name>validateClass</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Class</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>Exception</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>exceptionClass</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        ;
                    </function_decl>
                    }
                </block>
            </class>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>GetCheckedTypeValidator</name>
                </type>
                <name>bestGetCheckedTypeValidator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>GetCheckedTypeValidatorHolder</name>.
                                <name>BEST_VALIDATOR</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>VisibleForTesting</name>
                    </annotation>
                    <specifier>static</specifier>
                    <name>GetCheckedTypeValidator</name>
                </type>
                <name>weakSetValidator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>GetCheckedTypeValidatorHolder</name>.<name>WeakSetValidator</name>.
                                <name>INSTANCE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>J2ObjCIncompatible</name>
                    </annotation>
                    <comment type="line">// ClassValue</comment>
                    <annotation>@
                        <name>VisibleForTesting</name>
                    </annotation>
                    <specifier>static</specifier>
                    <name>GetCheckedTypeValidator</name>
                </type>
                <name>classValueValidator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>GetCheckedTypeValidatorHolder</name>.<name>ClassValueValidator</name>.
                                <name>INSTANCE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Provides a check of whether an exception type is valid for use with
                * {@link FuturesGetChecked#getChecked(Future, Class)}, possibly using caching.
                *
                * &lt;p&gt;Uses reflection to gracefully fall back to when certain implementations aren't available.
                */
            </comment>
            <class>
                <annotation>@
                    <name>VisibleForTesting</name>
                </annotation>
                <specifier>static</specifier>
                class <name>GetCheckedTypeValidatorHolder</name>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>String</name>
                            </type>
                            <name>CLASS_VALUE_VALIDATOR_NAME</name> =
                            <init>
                                <expr>
                                    <name><name>GetCheckedTypeValidatorHolder</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    class.
                                    <call>
                                        <name>getName</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    + "$ClassValueValidator"
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>GetCheckedTypeValidator</name>
                            </type>
                            <name>BEST_VALIDATOR</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getBestValidator</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <enum>
                        <annotation>@
                            <name><name>org</name>.<name>codehaus</name>.<name>mojo</name>.<name>animal_sniffer</name>.
                                <name>IgnoreJRERequirement</name>
                            </name>
                        </annotation>
                        <annotation>@
                            <name>J2ObjCIncompatible</name>
                        </annotation>
                        <comment type="line">// ClassValue</comment>
                        enum <name>ClassValueValidator</name>
                        <super>
                            <implements>implements
                                <name>GetCheckedTypeValidator</name>
                            </implements>
                        </super>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>INSTANCE</name>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="block">/*
                                * Static final fields are presumed to be fastest, based on our experience with
                                * UnsignedBytesBenchmark. TODO(cpovirk): benchmark this
                                */
                            </comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <specifier>private</specifier>
                                        <specifier>static</specifier>
                                        <specifier>final</specifier>
                                        <name>
                                            <name>ClassValue</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>Boolean</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>isValidClass</name> =
                                    <init>
                                        <expr>new
                                            <class>
                                                <super>
                                                    <name>
                                                        <name>ClassValue</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>Boolean</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </super>
                                                <argument_list>()</argument_list>
                                                <block>{
                                                    <function>
                                                        <type>
                                                            <annotation>@
                                                                <name>Override</name>
                                                            </annotation>
                                                            <specifier>protected</specifier>
                                                            <name>Boolean</name>
                                                        </type>
                                                        <name>computeValue</name>
                                                        <parameter_list>(
                                                            <param>
                                                                <decl>
                                                                    <type>
                                                                        <name>
                                                                            <name>Class</name>
                                                                            <argument_list>&lt;
                                                                                <argument>
                                                                                    <name>?</name>
                                                                                </argument>
                                                                                &gt;
                                                                            </argument_list>
                                                                        </name>
                                                                    </type>
                                                                    <name>type</name>
                                                                </decl>
                                                            </param>
                                                            )
                                                        </parameter_list>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name>checkExceptionClassValidity</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name><name>type</name>.
                                                                                            <name>asSubclass</name>
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name><name>
                                                                                                        Exception</name>
                                                                                                        .
                                                                                                        <name>
                                                                                                            <name/>
                                                                                                        </name>
                                                                                                    </name>
                                                                                                    class
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <return>return <expr>true</expr>;
                                                            </return>
                                                            }
                                                        </block>
                                                    </function>
                                                    }
                                                </block>
                                            </class>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>void</name>
                                </type>
                                <name>validateClass</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>Class</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                            <extends>extends
                                                                <name>Exception</name>
                                                            </extends>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>exceptionClass</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>isValidClass</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>exceptionClass</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <comment type="line">// throws if invalid; returns safely (and caches) if valid
                                    </comment>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </enum>

                    <enum>enum <name>WeakSetValidator</name>
                        <super>
                            <implements>implements
                                <name>GetCheckedTypeValidator</name>
                            </implements>
                        </super>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>INSTANCE</name>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="block">/*
                                * Static final fields are presumed to be fastest, based on our experience with
                                * UnsignedBytesBenchmark. TODO(cpovirk): benchmark this
                                */
                            </comment>
                            <comment type="block">/*
                                * A CopyOnWriteArraySet&lt;WeakReference&gt; is faster than a newSetFromMap of a
                                MapMaker map with
                                * weakKeys() and concurrencyLevel(1), even up to at least 12 cached exception types.
                                */
                            </comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <specifier>private</specifier>
                                        <specifier>static</specifier>
                                        <specifier>final</specifier>
                                        <name>
                                            <name>Set</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>
                                                        <name>WeakReference</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>
                                                                    <name>Class</name>
                                                                    <argument_list>&lt;
                                                                        <argument>
                                                                            <name>?</name>
                                                                            <extends>extends
                                                                                <name>Exception</name>
                                                                            </extends>
                                                                        </argument>
                                                                        &gt;
                                                                    </argument_list>
                                                                </name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>validClasses</name> =
                                    <init>
                                        <expr>new
                                            <call>
                                                <name>
                                                    <name>CopyOnWriteArraySet</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>
                                                                <name>WeakReference</name>
                                                                <argument_list>&lt;
                                                                    <argument>
                                                                        <name>
                                                                            <name>Class</name>
                                                                            <argument_list>&lt;
                                                                                <argument>
                                                                                    <name>?</name>
                                                                                    <extends>extends
                                                                                        <name>Exception</name>
                                                                                    </extends>
                                                                                </argument>
                                                                                &gt;
                                                                            </argument_list>
                                                                        </name>
                                                                    </argument>
                                                                    &gt;
                                                                </argument_list>
                                                            </name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>void</name>
                                </type>
                                <name>validateClass</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>Class</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                            <extends>extends
                                                                <name>Exception</name>
                                                            </extends>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>exceptionClass</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <for>for (
                                        <init>
                                            <decl>
                                                <type>
                                                    <name>
                                                        <name>WeakReference</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>
                                                                    <name>Class</name>
                                                                    <argument_list>&lt;
                                                                        <argument>
                                                                            <name>?</name>
                                                                            <extends>extends
                                                                                <name>Exception</name>
                                                                            </extends>
                                                                        </argument>
                                                                        &gt;
                                                                    </argument_list>
                                                                </name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </type>
                                                <name>knownGood</name> :
                                                <range>
                                                    <expr>
                                                        <name>validClasses</name>
                                                    </expr>
                                                </range>
                                            </decl>
                                        </init>
                                        )
                                        <block>{
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <call>
                                                            <name><name>exceptionClass</name>.
                                                                <name>equals</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>knownGood</name>.
                                                                                <name>get</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return;</return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            <comment type="line">// TODO(cpovirk): if reference has been cleared, remove
                                                it?
                                            </comment>
                                            }
                                        </block>
                                    </for>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>checkExceptionClassValidity</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>exceptionClass</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>

                                    <comment type="block">/*
                                        * It's very unlikely that any loaded Futures class will see getChecked called
                                        with more
                                        * than a handful of exceptions. But it seems prudent to set a cap on how many
                                        we'll cache.
                                        * This avoids out-of-control memory consumption, and it keeps the cache from
                                        growing so
                                        * large that doing the lookup is noticeably slower than redoing the work would
                                        be.
                                        *
                                        * Ideally we'd have a real eviction policy, but until we see a problem in
                                        practice, I hope
                                        * that this will suffice. I have not even benchmarked with different size
                                        limits.
                                        */
                                    </comment>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>validClasses</name>.
                                                        <name>size</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                &gt; 1000
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>validClasses</name>.
                                                                <name>clear</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                    </if>

                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>validClasses</name>.
                                                    <name>add</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>new
                                                            <call>
                                                                <name>
                                                                    <name>WeakReference</name>
                                                                    <argument_list>&lt;
                                                                        <argument>
                                                                            <name>
                                                                                <name>Class</name>
                                                                                <argument_list>&lt;
                                                                                    <argument>
                                                                                        <name>?</name>
                                                                                        <extends>extends
                                                                                            <name>Exception</name>
                                                                                        </extends>
                                                                                    </argument>
                                                                                    &gt;
                                                                                </argument_list>
                                                                            </name>
                                                                        </argument>
                                                                        &gt;
                                                                    </argument_list>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>exceptionClass</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </enum>

                    <comment type="javadoc">/**
                        * Returns the ClassValue-using validator, or falls back to the "weak Set" implementation if
                        * unable to do so.
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>static</specifier>
                            <name>GetCheckedTypeValidator</name>
                        </type>
                        <name>getBestValidator</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <try>try
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>Class</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>theClass</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>Class</name>.
                                                            <name>forName</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>CLASS_VALUE_VALIDATOR_NAME</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <return>return
                                        <expr>(<name>GetCheckedTypeValidator</name>)
                                            <call>
                                                <name><name>theClass</name>.
                                                    <name>getEnumConstants</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            <index>[<expr>0</expr>]
                                            </index>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                                <catch>catch (
                                    <param>
                                        <decl>
                                            <type>
                                                <name>Throwable</name>
                                            </type>
                                            <name>t</name>
                                        </decl>
                                    </param>
                                    )
                                    <block>{
                                        <comment type="line">// ensure we really catch *everything*</comment>
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>weakSetValidator</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </catch>
                            </try>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="line">// TODO(cpovirk): change parameter order to match other helper methods (Class,
                Throwable)?
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>X</name>
                            <extends>extends
                                <name>Exception</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>void</name>
                </type>
                <name>wrapAndThrowExceptionOrError</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>cause</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>exceptionClass</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>X</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>cause</name>
                                <name>instanceof</name>
                                <name>Error</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ExecutionError</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>(<name>Error</name>)
                                                        <name>cause</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>cause</name>
                                <name>instanceof</name>
                                <name>RuntimeException</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>UncheckedExecutionException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>cause</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <throw>throw
                        <expr>
                            <call>
                                <name>newWithCause</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>exceptionClass</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>cause</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="block">/*
                * TODO(user): FutureChecker interface for these to be static methods on? If
                * so, refer to it in the (static-method) Futures.getChecked documentation
                */
            </comment>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>hasConstructorUsableByGetChecked</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>Exception</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>exceptionClass</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>newWithCause</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>exceptionClass</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>Exception</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return <expr>true</expr>;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>Exception</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>X</name>
                            <extends>extends
                                <name>Exception</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>X</name>
                </type>
                <name>newWithCause</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>exceptionClass</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>cause</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// getConstructors() guarantees this as long as we don't modify the array.
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>SuppressWarnings</name>
                                    <argument_list>({"unchecked", "rawtypes"})</argument_list>
                                </annotation>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>Constructor</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>X</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>constructors</name> =
                            <init>
                                <expr>(<name>List</name>)
                                    <call>
                                        <name><name>Arrays</name>.
                                            <name>asList</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>exceptionClass</name>.
                                                            <name>getConstructors</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>
                                        <name>Constructor</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>X</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>constructor</name> :
                                <range>
                                    <expr>
                                        <call>
                                            <name>preferringStrings</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>constructors</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <annotation>@
                                            <name>Nullable</name>
                                        </annotation>
                                        <name>X</name>
                                    </type>
                                    <name>instance</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>newFromConstructor</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>constructor</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>cause</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>instance</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>instance</name>.
                                                            <name>getCause</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>instance</name>.
                                                                    <name>initCause</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>cause</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <return>return
                                            <expr>
                                                <name>instance</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>IllegalArgumentException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"No appropriate constructor for exception of type "
                                            +
                                            <name>exceptionClass</name>
                                            + " in response to chained exception"
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>cause</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>X</name>
                            <extends>extends
                                <name>Exception</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Constructor</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>preferringStrings</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>Constructor</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>X</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>constructors</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>WITH_STRING_PARAM_FIRST</name>.
                                    <name>sortedCopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>constructors</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>Ordering</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>Constructor</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>WITH_STRING_PARAM_FIRST</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Ordering</name>.
                                    <name>natural</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>onResultOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <class>
                                                <super>
                                                    <name>
                                                        <name>Function</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>
                                                                    <name>Constructor</name>
                                                                    <argument_list>&lt;
                                                                        <argument>
                                                                            <name>?</name>
                                                                        </argument>
                                                                        &gt;
                                                                    </argument_list>
                                                                </name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>Boolean</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </super>
                                                <argument_list>()</argument_list>
                                                <block>{
                                                    <function>
                                                        <type>
                                                            <annotation>@
                                                                <name>Override</name>
                                                            </annotation>
                                                            <specifier>public</specifier>
                                                            <name>Boolean</name>
                                                        </type>
                                                        <name>apply</name>
                                                        <parameter_list>(
                                                            <param>
                                                                <decl>
                                                                    <type>
                                                                        <name>
                                                                            <name>Constructor</name>
                                                                            <argument_list>&lt;
                                                                                <argument>
                                                                                    <name>?</name>
                                                                                </argument>
                                                                                &gt;
                                                                            </argument_list>
                                                                        </name>
                                                                    </type>
                                                                    <name>input</name>
                                                                </decl>
                                                            </param>
                                                            )
                                                        </parameter_list>
                                                        <block>{
                                                            <return>return
                                                                <expr>
                                                                    <call>
                                                                        <name>asList</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name><name>input</name>.
                                                                                            <name>getParameterTypes
                                                                                            </name>
                                                                                        </name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                    .
                                                                    <call>
                                                                        <name>contains</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>String</name>.
                                                                                        <name>
                                                                                            <name/>
                                                                                        </name>
                                                                                    </name>
                                                                                    class
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </return>
                                                            }
                                                        </block>
                                                    </function>
                                                    }
                                                </block>
                                            </class>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>reverse</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Nullable</name>
                    </annotation>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>X</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>X</name>
                </type>
                <name>newFromConstructor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Constructor</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>constructor</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>cause</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <index>[]</index>
                            </type>
                            <name>paramTypes</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>constructor</name>.
                                            <name>getParameterTypes</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                                <index>[]</index>
                            </type>
                            <name>params</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>Object</name>
                                        <index>[
                                            <expr>
                                                <name><name>paramTypes</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>paramTypes</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Class</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>paramType</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>paramTypes</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>paramType</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>String</name>.
                                                            <name>
                                                                <name/>
                                                            </name>
                                                        </name>
                                                        class
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>params</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                =
                                                <call>
                                                    <name><name>cause</name>.
                                                        <name>toString</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>paramType</name>.
                                                        <name>equals</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>Throwable</name>.
                                                                    <name>
                                                                        <name/>
                                                                    </name>
                                                                </name>
                                                                class
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>
                                                            <name>params</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                        =
                                                        <name>cause</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <name>null</name>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                </else>
                            </if>
                            }
                        </block>
                    </for>
                    <try>try
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>constructor</name>.
                                            <name>newInstance</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>params</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IllegalArgumentException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </catch>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>InstantiationException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </catch>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IllegalAccessException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </catch>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>InvocationTargetException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>VisibleForTesting</name>
                    </annotation>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isCheckedException</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>Exception</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>!
                            <name><name>RuntimeException</name>.
                                <name>
                                    <name/>
                                </name>
                            </name>
                            class.
                            <call>
                                <name>isAssignableFrom</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>type</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>VisibleForTesting</name>
                    </annotation>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>checkExceptionClassValidity</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>Exception</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>exceptionClass</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>isCheckedException</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>exceptionClass</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Futures.getChecked exception type (%s) must not be a RuntimeException"
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>exceptionClass</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>hasConstructorUsableByGetChecked</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>exceptionClass</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Futures.getChecked exception type (%s) must be an accessible class with
                                            an accessible "
                                            + "constructor whose parameters (if any) must be of type String and/or
                                            Throwable"
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>exceptionClass</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <constructor>
                <specifier>private</specifier>
                <name>FuturesGetChecked</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>
            }
        </block>
    </class>
</unit>
