<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\hash\HashCode.java">
    <comment type="block">/*
        * Copyright (C) 2011 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
        * in compliance with the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software distributed under the License
        * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
        * or implied. See the License for the specific language governing permissions and limitations under
        * the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>hash</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkArgument</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkState</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Preconditions</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>primitives</name>.
            <name>Ints</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>primitives</name>.
            <name>UnsignedInts</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>CheckReturnValue</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * An immutable hash code of arbitrary bit length.
        *
        * @author Dimitris Andreou
        * @author Kurt Alfred Kluever
        * @since 11.0
        */
    </comment>
    <class>
        <annotation>@
            <name>Beta</name>
        </annotation>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class <name>HashCode</name>
        <block>{
            <constructor>
                <name>HashCode</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="javadoc">/**
                * Returns the number of bits in this hash code; a positive multiple of 8.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>int</name>
                </type>
                <name>bits</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the first four bytes of {@linkplain #asBytes() this hashcode's bytes}, converted to
                * an {@code int} value in little-endian order.
                *
                * @throws IllegalStateException if {@code bits() &lt; 32}
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>int</name>
                </type>
                <name>asInt</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the first eight bytes of {@linkplain #asBytes() this hashcode's bytes}, converted to
                * a {@code long} value in little-endian order.
                *
                * @throws IllegalStateException if {@code bits() &lt; 64}
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>long</name>
                </type>
                <name>asLong</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * If this hashcode has enough bits, returns {@code asLong()}, otherwise returns a {@code long}
                * value with {@code asBytes()} as the least-significant bytes and {@code 0x00} as the remaining
                * most-significant bytes.
                *
                * @since 14.0 (since 11.0 as {@code Hashing.padToLong(HashCode)})
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>long</name>
                </type>
                <name>padToLong</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the value of this hash code as a byte array. The caller may modify the byte array;
                * changes to it will &lt;i&gt;not&lt;/i&gt; be reflected in this {@code HashCode} object or any other
                arrays
                * returned by this method.
                */
            </comment>
            <comment type="line">// TODO(user): consider ByteString here, when that is available</comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>asBytes</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Copies bytes from this hash code into {@code dest}.
                *
                * @param dest the byte array into which the hash code will be written
                * @param offset the start offset in the data
                * @param maxLength the maximum number of bytes to write
                * @return the number of bytes written to {@code dest}
                * @throws IndexOutOfBoundsException if there is not enough room in {@code dest}
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>writeBytesTo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>dest</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>maxLength</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>maxLength</name>
                            =
                            <call>
                                <name><name>Ints</name>.
                                    <name>min</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>maxLength</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>bits</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            / 8
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>Preconditions</name>.
                                    <name>checkPositionIndexes</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>offset</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>offset</name>
                                            +
                                            <name>maxLength</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>dest</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>writeBytesToImpl</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>dest</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>offset</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>maxLength</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>maxLength</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function_decl>
                <type>
                    <specifier>abstract</specifier>
                    <name>void</name>
                </type>
                <name>writeBytesToImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>dest</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>maxLength</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a mutable view of the underlying bytes for the given {@code HashCode} if it is a
                * byte-based hashcode. Otherwise it returns {@link HashCode#asBytes}. Do &lt;i&gt;not&lt;/i&gt; mutate
                this
                * array or else you will break the immutability contract of {@code HashCode}.
                */
            </comment>
            <function>
                <type>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>getBytesInternal</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>asBytes</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns whether this {@code HashCode} and that {@code HashCode} have the same value, given that
                * they have the same number of bits.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>abstract</specifier>
                    <name>boolean</name>
                </type>
                <name>equalsSameBits</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>HashCode</name>
                            </type>
                            <name>that</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Creates a 32-bit {@code HashCode} representation of the given int value. The underlying bytes
                * are interpreted in little endian order.
                *
                * @since 15.0 (since 12.0 in HashCodes)
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>HashCode</name>
                </type>
                <name>fromInt</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>IntHashCode</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>hash</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <class>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>IntHashCode</name>
                <super>
                    <extends>extends
                        <name>HashCode</name>
                    </extends>
                    <implements>implements
                        <name>Serializable</name>
                    </implements>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>IntHashCode</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>hash</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>hash</name>
                                    </name>
                                    =
                                    <name>hash</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>bits</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return <expr>32</expr>;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>byte</name>
                            <index>[]</index>
                        </type>
                        <name>asBytes</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>new
                                    <name>
                                        <name>byte</name>
                                        <index>[]</index>
                                    </name>
                                    <block>{
                                        <expr>(<name>byte</name>)
                                            <name>hash</name>
                                        </expr>
                                        ,
                                        <expr>
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>hash</name>
                                                            &gt;&gt; 8
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ,
                                        <expr>
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>hash</name>
                                                            &gt;&gt; 16
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ,
                                        <expr>
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>hash</name>
                                                            &gt;&gt; 24
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        }
                                    </block>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>asInt</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>hash</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>long</name>
                        </type>
                        <name>asLong</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>IllegalStateException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"this HashCode only has 32 bits; cannot create a long"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>long</name>
                        </type>
                        <name>padToLong</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>UnsignedInts</name>.
                                            <name>toLong</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>hash</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>void</name>
                        </type>
                        <name>writeBytesToImpl</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>byte</name>
                                            <index>[]</index>
                                        </name>
                                    </type>
                                    <name>dest</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>offset</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>maxLength</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name>maxLength</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>dest</name>
                                                <index>[
                                                    <expr>
                                                        <name>offset</name>
                                                        +
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            =
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>hash</name>
                                                            &gt;&gt; (<name>i</name> * 8)
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>boolean</name>
                        </type>
                        <name>equalsSameBits</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>HashCode</name>
                                    </type>
                                    <name>that</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>hash</name>
                                    ==
                                    <call>
                                        <name><name>that</name>.
                                            <name>asInt</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * Creates a 64-bit {@code HashCode} representation of the given long value. The underlying bytes
                * are interpreted in little endian order.
                *
                * @since 15.0 (since 12.0 in HashCodes)
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>HashCode</name>
                </type>
                <name>fromLong</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>LongHashCode</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>hash</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <class>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>LongHashCode</name>
                <super>
                    <extends>extends
                        <name>HashCode</name>
                    </extends>
                    <implements>implements
                        <name>Serializable</name>
                    </implements>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>hash</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>LongHashCode</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>hash</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>hash</name>
                                    </name>
                                    =
                                    <name>hash</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>bits</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return <expr>64</expr>;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>byte</name>
                            <index>[]</index>
                        </type>
                        <name>asBytes</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>new
                                    <name>
                                        <name>byte</name>
                                        <index>[]</index>
                                    </name>
                                    <block>{
                                        <expr>(<name>byte</name>)
                                            <name>hash</name>
                                        </expr>
                                        ,
                                        <expr>
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>hash</name>
                                                            &gt;&gt; 8
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ,
                                        <expr>
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>hash</name>
                                                            &gt;&gt; 16
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ,
                                        <expr>
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>hash</name>
                                                            &gt;&gt; 24
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ,
                                        <expr>
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>hash</name>
                                                            &gt;&gt; 32
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ,
                                        <expr>
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>hash</name>
                                                            &gt;&gt; 40
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ,
                                        <expr>
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>hash</name>
                                                            &gt;&gt; 48
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ,
                                        <expr>
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>hash</name>
                                                            &gt;&gt; 56
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        }
                                    </block>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>asInt</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>(<name>int</name>)
                                    <name>hash</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>long</name>
                        </type>
                        <name>asLong</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>hash</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>long</name>
                        </type>
                        <name>padToLong</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>hash</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>void</name>
                        </type>
                        <name>writeBytesToImpl</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>byte</name>
                                            <index>[]</index>
                                        </name>
                                    </type>
                                    <name>dest</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>offset</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>maxLength</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name>maxLength</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>
                                                <name>dest</name>
                                                <index>[
                                                    <expr>
                                                        <name>offset</name>
                                                        +
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            =
                                            <call>(<name>byte</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>hash</name>
                                                            &gt;&gt; (<name>i</name> * 8)
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>boolean</name>
                        </type>
                        <name>equalsSameBits</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>HashCode</name>
                                    </type>
                                    <name>that</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>hash</name>
                                    ==
                                    <call>
                                        <name><name>that</name>.
                                            <name>asLong</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * Creates a {@code HashCode} from a byte array. The array is defensively copied to preserve
                * the immutability contract of {@code HashCode}. The array cannot be empty.
                *
                * @since 15.0 (since 12.0 in HashCodes)
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>HashCode</name>
                </type>
                <name>fromBytes</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>bytes</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>bytes</name>.
                                                <name>length</name>
                                            </name>
                                            &gt;= 1
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"A HashCode must contain at least 1 byte."</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>fromBytesNoCopy</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>bytes</name>.
                                                    <name>clone</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates a {@code HashCode} from a byte array. The array is &lt;i&gt;not&lt;/i&gt; copied defensively,
                * so it must be handed-off so as to preserve the immutability contract of {@code HashCode}.
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>HashCode</name>
                </type>
                <name>fromBytesNoCopy</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>bytes</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>BytesHashCode</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bytes</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <class>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>BytesHashCode</name>
                <super>
                    <extends>extends
                        <name>HashCode</name>
                    </extends>
                    <implements>implements
                        <name>Serializable</name>
                    </implements>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>bytes</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>BytesHashCode</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>byte</name>
                                            <index>[]</index>
                                        </name>
                                    </type>
                                    <name>bytes</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>bytes</name>
                                    </name>
                                    =
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>bytes</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>bits</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name><name>bytes</name>.
                                        <name>length</name>
                                    </name>
                                    * 8
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>byte</name>
                            <index>[]</index>
                        </type>
                        <name>asBytes</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>bytes</name>.
                                            <name>clone</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>asInt</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkState</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>bytes</name>.
                                                        <name>length</name>
                                                    </name>
                                                    &gt;= 4
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>"HashCode#asInt() requires &gt;= 4 bytes (it only has %s
                                                    bytes)."
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>bytes</name>.
                                                        <name>length</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>(
                                    <name>
                                        <name>bytes</name>
                                        <index>[<expr>0</expr>]
                                        </index>
                                    </name>
                                    &amp; 0xFF)
                                    | ((
                                    <name>
                                        <name>bytes</name>
                                        <index>[<expr>1</expr>]
                                        </index>
                                    </name>
                                    &amp; 0xFF) &lt;&lt; 8)
                                    | ((
                                    <name>
                                        <name>bytes</name>
                                        <index>[<expr>2</expr>]
                                        </index>
                                    </name>
                                    &amp; 0xFF) &lt;&lt; 16)
                                    | ((
                                    <name>
                                        <name>bytes</name>
                                        <index>[<expr>3</expr>]
                                        </index>
                                    </name>
                                    &amp; 0xFF) &lt;&lt; 24)
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>long</name>
                        </type>
                        <name>asLong</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkState</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>bytes</name>.
                                                        <name>length</name>
                                                    </name>
                                                    &gt;= 8
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>"HashCode#asLong() requires &gt;= 8 bytes (it only has %s
                                                    bytes)."
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>bytes</name>.
                                                        <name>length</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <call>
                                        <name>padToLong</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>long</name>
                        </type>
                        <name>padToLong</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>retVal</name> =
                                    <init>
                                        <expr>(
                                            <name>
                                                <name>bytes</name>
                                                <index>[<expr>0</expr>]
                                                </index>
                                            </name>
                                            &amp; 0xFF)
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>1</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <call>
                                            <name><name>Math</name>.
                                                <name>min</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>bytes</name>.
                                                            <name>length</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>8</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>retVal</name>
                                            |= (
                                            <name>
                                                <name>bytes</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            &amp; 0xFFL) &lt;&lt; (<name>i</name> * 8)
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <return>return
                                <expr>
                                    <name>retVal</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>void</name>
                        </type>
                        <name>writeBytesToImpl</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>byte</name>
                                            <index>[]</index>
                                        </name>
                                    </type>
                                    <name>dest</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>offset</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>maxLength</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>System</name>.
                                            <name>arraycopy</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>bytes</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>dest</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>offset</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>maxLength</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>byte</name>
                            <index>[]</index>
                        </type>
                        <name>getBytesInternal</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>bytes</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>boolean</name>
                        </type>
                        <name>equalsSameBits</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>HashCode</name>
                                    </type>
                                    <name>that</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <comment type="line">// We don't use MessageDigest.isEqual() here because its contract does
                                not guarantee
                            </comment>
                            <comment type="line">// constant-time evaluation (no short-circuiting).</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>this</name>.<name>bytes</name>.
                                            <name>length</name>
                                        </name>
                                        !=
                                        <call>
                                            <name><name>that</name>.
                                                <name>getBytesInternal</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <name>length</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>boolean</name>
                                    </type>
                                    <name>areEqual</name> =
                                    <init>
                                        <expr>true</expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name><name>this</name>.<name>bytes</name>.
                                            <name>length</name>
                                        </name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>areEqual</name>
                                            &amp;= (
                                            <name><name>this</name>.
                                                <name>bytes</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            ==
                                            <call>
                                                <name><name>that</name>.
                                                    <name>getBytesInternal</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                            )
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <return>return
                                <expr>
                                    <name>areEqual</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * Creates a {@code HashCode} from a hexadecimal ({@code base 16}) encoded string. The string must
                * be at least 2 characters long, and contain only valid, lower-cased hexadecimal characters.
                *
                * &lt;p&gt;This method accepts the exact format generated by {@link #toString}. If you require more
                * lenient {@code base 16} decoding, please use
                * {@link com.google.common.io.BaseEncoding#decode} (and pass the result to {@link #fromBytes}).
                *
                * @since 15.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>HashCode</name>
                </type>
                <name>fromString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>string</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>string</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &gt;= 2
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"input string (%s) must have at least 2 characters"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>string</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>string</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            % 2 == 0
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"input string (%s) must have an even number of characters"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>string</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>bytes</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>byte</name>
                                        <index>[
                                            <expr>
                                                <call>
                                                    <name><name>string</name>.
                                                        <name>length</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                / 2
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <call>
                                    <name><name>string</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>i</name>
                                += 2
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>ch1</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>decode</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>string</name>.
                                                                    <name>charAt</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            &lt;&lt; 4
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>ch2</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>decode</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>string</name>.
                                                                    <name>charAt</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>i</name>
                                                                            + 1
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>bytes</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                                / 2
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <call>(<name>byte</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>ch1</name>
                                                    +
                                                    <name>ch2</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name>fromBytesNoCopy</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bytes</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>decode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>ch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>ch</name>
                                &gt;= '0' &amp;&amp; <name>ch</name> &lt;= '9'
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>ch</name>
                                        - '0'
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>ch</name>
                                &gt;= 'a' &amp;&amp; <name>ch</name> &lt;= 'f'
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>ch</name>
                                        - 'a' + 10
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>IllegalArgumentException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"Illegal hexadecimal character: " +
                                            <name>ch</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns {@code true} if {@code object} is a {@link HashCode} instance with the identical byte
                * representation to this hash code.
                *
                * &lt;p&gt;Security note:&lt;/p&gt; this method uses a constant-time (not short-circuiting)
                implementation
                * to protect against &lt;a href="http://en.wikipedia.org/wiki/Timing_attack"&gt;timing attacks&lt;/a&gt;.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>object</name>
                                <name>instanceof</name>
                                <name>HashCode</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>HashCode</name>
                                        </type>
                                        <name>that</name> =
                                        <init>
                                            <expr>(<name>HashCode</name>)
                                                <name>object</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name>bits</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <call>
                                            <name><name>that</name>.
                                                <name>bits</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        &amp;&amp;
                                        <call>
                                            <name>equalsSameBits</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>that</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a "Java hash code" for this {@code HashCode} instance; this is well-defined
                * (so, for example, you can safely put {@code HashCode} instances into a {@code
                * HashSet}) but is otherwise probably not what you want to use.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// If we have at least 4 bytes (32 bits), just take the first 4 bytes. Since
                        this is
                    </comment>
                    <comment type="line">// already a (presumably) high-quality hash code, any four bytes of it will
                        do.
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>bits</name>
                                    <argument_list>()</argument_list>
                                </call>
                                &gt;= 32
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>asInt</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// If we have less than 4 bytes, use them all.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>bytes</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getBytesInternal</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>val</name> =
                            <init>
                                <expr>(
                                    <name>
                                        <name>bytes</name>
                                        <index>[<expr>0</expr>]
                                        </index>
                                    </name>
                                    &amp; 0xFF)
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>1</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>bytes</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>val</name>
                                    |= ((
                                    <name>
                                        <name>bytes</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    &amp; 0xFF) &lt;&lt; (<name>i</name> * 8))
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>val</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a string containing each byte of {@link #asBytes}, in order, as a two-digit unsigned
                * hexadecimal number in lower case.
                *
                * &lt;p&gt;Note that if the output is considered to be a single hexadecimal number, this hash code's
                * bytes are the &lt;i&gt;big-endian&lt;/i&gt; representation of that number. This may be surprising
                since
                * everything else in the hashing API uniformly treats multibyte values as little-endian. But
                * this format conveniently matches that of utilities such as the UNIX {@code md5sum} command.
                *
                * &lt;p&gt;To create a {@code HashCode} from its string representation, see {@link #fromString}.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>bytes</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getBytesInternal</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuilder</name>
                            </type>
                            <name>sb</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>2 *
                                                    <name><name>bytes</name>.
                                                        <name>length</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>byte</name>
                                </type>
                                <name>b</name> :
                                <range>
                                    <expr>
                                        <name>bytes</name>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>sb</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>hexDigits</name>
                                                        <index>[
                                                            <expr>(<name>b</name> &gt;&gt; 4) &amp; 0xf
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>hexDigits</name>
                                                        <index>[
                                                            <expr>
                                                                <name>b</name>
                                                                &amp; 0xf
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name><name>sb</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>char</name>
                        <index>[]</index>
                    </type>
                    <name>hexDigits</name> =
                    <init>
                        <expr>"0123456789abcdef".
                            <call>
                                <name>toCharArray</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            }
        </block>
    </class>
</unit>
