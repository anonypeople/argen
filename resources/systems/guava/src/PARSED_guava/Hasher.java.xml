<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\hash\Hasher.java">
    <comment type="block">/*
        * Copyright (C) 2011 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
        * in compliance with the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software distributed under the License
        * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
        * or implied. See the License for the specific language governing permissions and limitations under
        * the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>hash</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>nio</name>.<name>charset</name>.
            <name>Charset</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>CheckReturnValue</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A {@link PrimitiveSink} that can compute a hash code after reading the input. Each hasher should
        * translate all multibyte values ({@link #putInt(int)}, {@link #putLong(long)}, etc) to bytes
        * in little-endian order.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; The result of calling any methods after calling {@link #hash} is
        undefined.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; Using a specific character encoding when hashing a {@link CharSequence}
        with
        * {@link #putString(CharSequence, Charset)} is generally only useful for cross-language
        * compatibility (otherwise prefer {@link #putUnencodedChars}). However, the character encodings
        * must be identical across languages. Also beware that {@link Charset} definitions may occasionally
        * change between Java releases.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; Chunks of data that are put into the {@link Hasher} are not delimited.
        * The resulting {@link HashCode} is dependent only on the bytes inserted, and the order in which
        * they were inserted, not how those bytes were chunked into discrete put() operations. For example,
        * the following three expressions all generate colliding hash codes: &lt;pre&gt; {@code
        *
        * newHasher().putByte(b1).putByte(b2).putByte(b3).hash()
        * newHasher().putByte(b1).putBytes(new byte[] { b2, b3 }).hash()
        * newHasher().putBytes(new byte[] { b1, b2, b3 }).hash()}&lt;/pre&gt;
        *
        * &lt;p&gt;If you wish to avoid this, you should either prepend or append the size of each chunk. Keep in
        * mind that when dealing with char sequences, the encoded form of two concatenated char sequences
        * is not equivalent to the concatenation of their encoded form. Therefore,
        * {@link #putString(CharSequence, Charset)} should only be used consistently with &lt;i&gt;complete&lt;/i&gt;
        * sequences and not broken into chunks.
        *
        * @author Kevin Bourrillion
        * @since 11.0
        */
    </comment>
    <class type="interface">
        <annotation>@
            <name>Beta</name>
        </annotation>
        <specifier>public</specifier>
        interface <name>Hasher</name>
        <super>
            <extends>extends
                <name>PrimitiveSink</name>
            </extends>
        </super>
        <block>{
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>Hasher</name>
                </type>
                <name>putByte</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>Hasher</name>
                </type>
                <name>putBytes</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>bytes</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>Hasher</name>
                </type>
                <name>putBytes</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>bytes</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>off</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>Hasher</name>
                </type>
                <name>putShort</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>s</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>Hasher</name>
                </type>
                <name>putInt</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>Hasher</name>
                </type>
                <name>putLong</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>l</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Equivalent to {@code putInt(Float.floatToRawIntBits(f))}.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>Hasher</name>
                </type>
                <name>putFloat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>f</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Equivalent to {@code putLong(Double.doubleToRawLongBits(d))}.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>Hasher</name>
                </type>
                <name>putDouble</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>d</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Equivalent to {@code putByte(b ? (byte) 1 : (byte) 0)}.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>Hasher</name>
                </type>
                <name>putBoolean</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>Hasher</name>
                </type>
                <name>putChar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Equivalent to processing each {@code char} value in the {@code CharSequence}, in order.
                * The input must not be updated while this method is in progress.
                *
                * @since 15.0 (since 11.0 as putString(CharSequence)).
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>Hasher</name>
                </type>
                <name>putUnencodedChars</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CharSequence</name>
                            </type>
                            <name>charSequence</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Equivalent to {@code putBytes(charSequence.toString().getBytes(charset))}.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>Hasher</name>
                </type>
                <name>putString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CharSequence</name>
                            </type>
                            <name>charSequence</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Charset</name>
                            </type>
                            <name>charset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * A simple convenience for {@code funnel.funnel(object, this)}.
                */
            </comment>
            <function_decl>
                <type>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>Hasher</name>
                </type>
                <name>putObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>instance</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Funnel</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>T</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>funnel</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Computes a hash code based on the data that have been provided to this hasher. The result is
                * unspecified if this method is called more than once on the same instance.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <name>HashCode</name>
                </type>
                <name>hash</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            }
        </block>
    </class>
</unit>
