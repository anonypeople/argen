<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\Hashing.java">
    <comment type="block">/*
        * Copyright (C) 2008 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>primitives</name>.
            <name>Ints</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Static methods for implementing hash-based collections.
        *
        * @author Kevin Bourrillion
        * @author Jesse Wilson
        * @author Austin Appleby
        */
    </comment>
    <class>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>final</specifier>
        class <name>Hashing</name>
        <block>{
            <constructor>
                <specifier>private</specifier>
                <name>Hashing</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>C1</name> =
                    <init>
                        <expr>0xcc9e2d51</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>C2</name> =
                    <init>
                        <expr>0x1b873593</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="block">/*
                * This method was rewritten in Java from an intermediate step of the Murmur hash function in
                * http://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.cpp, which contained the
                * following header:
                *
                * MurmurHash3 was written by Austin Appleby, and is placed in the public domain. The author
                * hereby disclaims copyright to this source code.
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>smear</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hashCode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>C2</name>
                            *
                            <call>
                                <name><name>Integer</name>.
                                    <name>rotateLeft</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>hashCode</name>
                                            *
                                            <name>C1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>15</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>smearedHash</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>o</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>smear</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>o</name> == <name>null</name>) ? 0 :
                                            <call>
                                                <name><name>o</name>.
                                                    <name>hashCode</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>int</name>
                    </type>
                    <name>MAX_TABLE_SIZE</name> =
                    <init>
                        <expr>
                            <name><name>Ints</name>.
                                <name>MAX_POWER_OF_TWO</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>closedTableSize</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>expectedEntries</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>loadFactor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Get the recommended table size.</comment>
                    <comment type="line">// Round down to the nearest power of 2.</comment>
                    <expr_stmt>
                        <expr>
                            <name>expectedEntries</name>
                            =
                            <call>
                                <name><name>Math</name>.
                                    <name>max</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>expectedEntries</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>2</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>tableSize</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Integer</name>.
                                            <name>highestOneBit</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>expectedEntries</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Check to make sure that we will not exceed the maximum load factor.
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>expectedEntries</name>
                                &gt;
                                <call>(<name>int</name>)
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>loadFactor</name>
                                                *
                                                <name>tableSize</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>tableSize</name>
                                        &lt;&lt;= 1
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>(<name>tableSize</name> &gt; 0) ? <name>tableSize</name> :
                                        <name>MAX_TABLE_SIZE</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>tableSize</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>needsResizing</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>tableSize</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>loadFactor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>size</name>
                            &gt; <name>loadFactor</name> * <name>tableSize</name> &amp;&amp; <name>tableSize</name> &lt;
                            <name>MAX_TABLE_SIZE</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
