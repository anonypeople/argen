<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\html\HtmlEscapers.java">
    <comment type="block">/*
        * Copyright (C) 2009 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>html</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>escape</name>.
            <name>Escaper</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>escape</name>.
            <name>Escapers</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * {@code Escaper} instances suitable for strings to be included in HTML
        * attribute values and &lt;em&gt;most&lt;/em&gt; elements' text contents. When possible,
        * avoid manual escaping by using templating systems and high-level APIs that
        * provide autoescaping.
        * One Google-authored templating system available for external use is &lt;a
        * href="https://developers.google.com/closure/templates/"&gt;Closure
        * Templates&lt;/a&gt;.
        *
        * &lt;p&gt;HTML escaping is particularly tricky: For example, &lt;a
        * href="http://goo.gl/5TgZb"&gt;some elements' text contents must not be HTML
        * escaped&lt;/a&gt;. As a result, it is impossible to escape an HTML document
        * correctly without domain-specific knowledge beyond what {@code HtmlEscapers}
        * provides. We strongly encourage the use of HTML templating systems.
        *
        * @author Sven Mawson
        * @author David Beaumont
        * @since 15.0
        */
    </comment>
    <class>
        <annotation>@
            <name>Beta</name>
        </annotation>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>HtmlEscapers</name>
        <block>{
            <comment type="javadoc">/**
                * Returns an {@link Escaper} instance that escapes HTML metacharacters as
                * specified by &lt;a href="http://www.w3.org/TR/html4/"&gt;HTML 4.01&lt;/a&gt;. The
                * resulting strings can be used both in attribute values and in &lt;em&gt;most&lt;/em&gt;
                * elements' text contents, provided that the HTML document's character
                * encoding can encode any non-ASCII code points in the input (as UTF-8 and
                * other Unicode encodings can).
                *
                *
                * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This escaper only performs minimal escaping to make content
                * structurally compatible with HTML. Specifically, it does not perform entity
                * replacement (symbolic or numeric), so it does not replace non-ASCII code
                * points with character references. This escaper escapes only the following
                * five ASCII characters: {@code '"&amp;&lt;&gt;}.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Escaper</name>
                </type>
                <name>htmlEscaper</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>HTML_ESCAPER</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// For each xxxEscaper() method, please add links to external reference pages</comment>
            <comment type="line">// that are considered authoritative for the behavior of that escaper.</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Escaper</name>
                    </type>
                    <name>HTML_ESCAPER</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Escapers</name>.
                                    <name>builder</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>addEscape</name>
                                <argument_list>(
                                    <argument>
                                        <expr>'"'</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"&amp;quot;"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            <comment type="line">// Note: "&amp;apos;" is not defined in HTML 4.01.</comment>
                            .
                            <call>
                                <name>addEscape</name>
                                <argument_list>(
                                    <argument>
                                        <expr>'\''</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"&amp;#39;"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>addEscape</name>
                                <argument_list>(
                                    <argument>
                                        <expr>'&amp;'</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"&amp;amp;"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>addEscape</name>
                                <argument_list>(
                                    <argument>
                                        <expr>'&lt;'</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"&amp;lt;"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>addEscape</name>
                                <argument_list>(
                                    <argument>
                                        <expr>'&gt;'</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"&amp;gt;"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>build</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <specifier>private</specifier>
                <name>HtmlEscapers</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>
            }
        </block>
    </class>
</unit>
