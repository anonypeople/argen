<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\ImmutableBiMap.java">
    <comment type="block">/*
        * Copyright (C) 2008 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Arrays</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Comparator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A {@link BiMap} whose contents will never change, with many other important properties detailed
        * at {@link ImmutableCollection}.
        *
        * @author Jared Levy
        * @since 2.0
        */
    </comment>
    <class>
        <annotation>@
            <name>GwtCompatible</name>
            <argument_list>(serializable = true, emulated = true)</argument_list>
        </annotation>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class
        <name>
            <name>ImmutableBiMap</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>ImmutableMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>BiMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Returns the empty bimap.
                */
            </comment>
            <comment type="line">// Casting to any type is safe because the set will never hold any elements.</comment>
            <function>
                <type>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("unchecked")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ImmutableBiMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>of</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>ImmutableBiMap</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            )
                            <name><name>RegularImmutableBiMap</name>.
                                <name>EMPTY</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an immutable bimap containing a single entry.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ImmutableBiMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>of</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>k1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>v1</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>SingletonImmutableBiMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>k1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>v1</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an immutable map containing the given entries, in order.
                *
                * @throws IllegalArgumentException if duplicate keys or values are added
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ImmutableBiMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>of</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>k1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>v1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>k2</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>v2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>RegularImmutableBiMap</name>.
                                    <name>fromEntries</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>entryOf</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>k1</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>v1</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>entryOf</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>k2</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>v2</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an immutable map containing the given entries, in order.
                *
                * @throws IllegalArgumentException if duplicate keys or values are added
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ImmutableBiMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>of</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>k1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>v1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>k2</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>v2</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>k3</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>v3</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>RegularImmutableBiMap</name>.
                                    <name>fromEntries</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>entryOf</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>k1</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>v1</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>entryOf</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>k2</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>v2</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>entryOf</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>k3</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>v3</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an immutable map containing the given entries, in order.
                *
                * @throws IllegalArgumentException if duplicate keys or values are added
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ImmutableBiMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>of</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>k1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>v1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>k2</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>v2</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>k3</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>v3</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>k4</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>v4</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>RegularImmutableBiMap</name>.
                                    <name>fromEntries</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>entryOf</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>k1</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>v1</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>entryOf</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>k2</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>v2</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>entryOf</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>k3</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>v3</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>entryOf</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>k4</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>v4</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an immutable map containing the given entries, in order.
                *
                * @throws IllegalArgumentException if duplicate keys or values are added
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ImmutableBiMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>of</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>k1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>v1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>k2</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>v2</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>k3</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>v3</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>k4</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>v4</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>k5</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>v5</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>RegularImmutableBiMap</name>.
                                    <name>fromEntries</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>entryOf</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>k1</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>v1</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>entryOf</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>k2</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>v2</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>entryOf</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>k3</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>v3</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>entryOf</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>k4</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>v4</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>entryOf</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>k5</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>v5</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// looking for of() with &gt; 5 entries? Use the builder instead.</comment>

            <comment type="javadoc">/**
                * Returns a new builder. The generated builder is equivalent to the builder
                * created by the {@link Builder} constructor.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Builder</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>builder</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>Builder</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A builder for creating immutable bimap instances, especially {@code public
                * static final} bimaps ("constant bimaps"). Example: &lt;pre&gt; {@code
                *
                * static final ImmutableBiMap&lt;String, Integer&gt; WORD_TO_INT =
                * new ImmutableBiMap.Builder&lt;String, Integer&gt;()
                * .put("one", 1)
                * .put("two", 2)
                * .put("three", 3)
                * .build();}&lt;/pre&gt;
                *
                * &lt;p&gt;For &lt;i&gt;small&lt;/i&gt; immutable bimaps, the {@code ImmutableBiMap.of()} methods
                * are even more convenient.
                *
                * &lt;p&gt;Builder instances can be reused - it is safe to call {@link #build}
                * multiple times to build multiple bimaps in series. Each bimap is a superset
                * of the bimaps created before it.
                *
                * @since 2.0
                */
            </comment>
            <class>
                <specifier>public</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class
                <name>
                    <name>Builder</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <super>
                    <extends>extends <name>ImmutableMap</name>.
                        <name>
                            <name>Builder</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </super>
                <block>{

                    <comment type="javadoc">/**
                        * Creates a new builder. The returned builder is equivalent to the builder
                        * generated by {@link ImmutableBiMap#builder}.
                        */
                    </comment>
                    <constructor>
                        <specifier>public</specifier>
                        <name>Builder</name>
                        <parameter_list>()</parameter_list>
                        <block>{}</block>
                    </constructor>

                    <constructor>
                        <name>Builder</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>size</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>size</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="javadoc">/**
                        * Associates {@code key} with {@code value} in the built bimap. Duplicate
                        * keys or values are not allowed, and will cause {@link #build} to fail.
                        */
                    </comment>
                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>
                                <name>Builder</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>put</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>K</name>
                                    </type>
                                    <name>key</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>V</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>super</name>.
                                            <name>put</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>key</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>value</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>this</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Adds the given {@code entry} to the bimap. Duplicate keys or values
                        * are not allowed, and will cause {@link #build} to fail.
                        *
                        * @since 19.0
                        */
                    </comment>
                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>
                                <name>Builder</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>put</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Entry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>K</name>
                                                    </extends>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>V</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>entry</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>super</name>.
                                            <name>put</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>entry</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>this</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Associates all of the given map's keys and values in the built bimap.
                        * Duplicate keys or values are not allowed, and will cause {@link #build}
                        * to fail.
                        *
                        * @throws NullPointerException if any key or value in {@code map} is null
                        */
                    </comment>
                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>
                                <name>Builder</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>putAll</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Map</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>K</name>
                                                    </extends>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>V</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>map</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>super</name>.
                                            <name>putAll</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>map</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>this</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Adds all of the given entries to the built bimap. Duplicate keys or
                        * values are not allowed, and will cause {@link #build} to fail.
                        *
                        * @throws NullPointerException if any key, value, or entry is null
                        * @since 19.0
                        */
                    </comment>
                    <function>
                        <type>
                            <annotation>@
                                <name>Beta</name>
                            </annotation>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>
                                <name>Builder</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>putAll</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Iterable</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>
                                                            <name>Entry</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>?</name>
                                                                    <extends>extends
                                                                        <name>K</name>
                                                                    </extends>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <name>?</name>
                                                                    <extends>extends
                                                                        <name>V</name>
                                                                    </extends>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>entries</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>super</name>.
                                            <name>putAll</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>entries</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>this</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Configures this {@code Builder} to order entries by value according to the specified
                        * comparator.
                        *
                        * &lt;p&gt;The sort order is stable, that is, if two entries have values that compare
                        * as equivalent, the entry that was inserted first will be first in the built map's
                        * iteration order.
                        *
                        * @throws IllegalStateException if this method was already called
                        * @since 19.0
                        */
                    </comment>
                    <function>
                        <type>
                            <annotation>@
                                <name>Beta</name>
                            </annotation>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>
                                <name>Builder</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>orderEntriesByValue</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Comparator</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <super>super
                                                        <name>V</name>
                                                    </super>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>valueComparator</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>super</name>.
                                            <name>orderEntriesByValue</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>valueComparator</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>this</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Returns a newly-created immutable bimap.
                        *
                        * @throws IllegalArgumentException if duplicate keys or values were added
                        */
                    </comment>
                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>
                                <name>ImmutableBiMap</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>build</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <switch>switch
                                <condition>(
                                    <expr>
                                        <name>size</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <case>case <expr>0</expr>:
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>of</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                    </case>
                                    <case>case <expr>1</expr>:
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>of</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>entries</name>
                                                                    <index>[<expr>0</expr>]
                                                                    </index>
                                                                </name>
                                                                .
                                                                <call>
                                                                    <name>getKey</name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>entries</name>
                                                                    <index>[<expr>0</expr>]
                                                                    </index>
                                                                </name>
                                                                .
                                                                <call>
                                                                    <name>getValue</name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                    </case>
                                    <default>default:
                                        <comment type="block">/*
                                            * If entries is full, then this implementation may end up using the entries
                                            array
                                            * directly and writing over the entry objects with non-terminal entries, but
                                            this is
                                            * safe; if this Builder is used further, it will grow the entries array (so
                                            it can't
                                            * affect the original array), and future build() calls will always copy any
                                            entry
                                            * objects that cannot be safely reused.
                                            */
                                        </comment>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>valueComparator</name>
                                                    !=
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>entriesUsed</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>entries</name>
                                                                        =
                                                                        <call>
                                                                            <name><name>ObjectArrays</name>.
                                                                                <name>arraysCopyOf</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>entries</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>size</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>Arrays</name>.
                                                                    <name>sort</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>entries</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>0</expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>size</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>Ordering</name>.
                                                                                    <name>from</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>valueComparator</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                            .
                                                                            <call>
                                                                                <name>onResultOf</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name><name>Maps</name>.
                                                                                                <name>
                                                                                                    <name/>
                                                                                                </name>
                                                                                            </name>
                                                                                            &lt;<name>V</name>&gt;
                                                                                            <call>
                                                                                                <name>valueFunction
                                                                                                </name>
                                                                                                <argument_list>()
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <name>entriesUsed</name>
                                                = <name>size</name> ==
                                                <name><name>entries</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>RegularImmutableBiMap</name>.
                                                        <name>fromEntryArray</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>size</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>entries</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                    </default>
                                    }
                                </block>
                            </switch>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * Returns an immutable bimap containing the same entries as {@code map}. If
                * {@code map} somehow contains entries with duplicate keys (for example, if
                * it is a {@code SortedMap} whose comparator is not &lt;i&gt;consistent with
                * equals&lt;/i&gt;), the results of this method are undefined.
                *
                * &lt;p&gt;Despite the method name, this method attempts to avoid actually copying
                * the data when it is safe to do so. The exact circumstances under which a
                * copy will or will not be performed are undocumented and subject to change.
                *
                * @throws IllegalArgumentException if two keys have the same value
                * @throws NullPointerException if any key or value in {@code map} is null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ImmutableBiMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>copyOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Map</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>K</name>
                                            </extends>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>map</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>map</name>
                                <name>instanceof</name>
                                <name>ImmutableBiMap</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <annotation>@
                                                <name>SuppressWarnings</name>
                                                <argument_list>("unchecked")</argument_list>
                                            </annotation>
                                            <comment type="line">// safe since map is not writable</comment>
                                            <name>
                                                <name>ImmutableBiMap</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>bimap</name> =
                                        <init>
                                            <expr>(
                                                <name>
                                                    <name>ImmutableBiMap</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                )
                                                <name>map</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <comment type="line">// TODO(lowasser): if we need to make a copy of a BiMap because
                                    the
                                </comment>
                                <comment type="line">// forward map is a view, don't make a copy of the non-view
                                    delegate map
                                </comment>
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <call>
                                                <name><name>bimap</name>.
                                                    <name>isPartialView</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>bimap</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>copyOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>map</name>.
                                                    <name>entrySet</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an immutable bimap containing the given entries.
                *
                * @throws IllegalArgumentException if two keys have the same value or two
                * values have the same key
                * @throws NullPointerException if any key, value, or entry is null
                * @since 19.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ImmutableBiMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>copyOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>
                                                    <name>Entry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                            <extends>extends
                                                                <name>K</name>
                                                            </extends>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>?</name>
                                                            <extends>extends
                                                                <name>V</name>
                                                            </extends>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entries</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>SuppressWarnings</name>
                                    <argument_list>("unchecked")</argument_list>
                                </annotation>
                                <comment type="line">// we'll only be using getKey and getValue, which are covariant
                                </comment>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <index>[]</index>
                            </type>
                            <name>entryArray</name> =
                            <init>
                                <expr>(
                                    <name>
                                        <name>
                                            <name>Entry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <index>[]</index>
                                    </name>
                                    )
                                    <call>
                                        <name><name>Iterables</name>.
                                            <name>toArray</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>entries</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>EMPTY_ENTRY_ARRAY</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name><name>entryArray</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case <expr>0</expr>:
                                <return>return
                                    <expr>
                                        <call>
                                            <name>of</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case <expr>1</expr>:
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>Entry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>entry</name> =
                                        <init>
                                            <expr>
                                                <name>
                                                    <name>entryArray</name>
                                                    <index>[<expr>0</expr>]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name>of</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>entry</name>.
                                                                <name>getKey</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>entry</name>.
                                                                <name>getValue</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <default>default:
                                <comment type="block">/*
                                    * The current implementation will end up using entryArray directly, though it will
                                    write
                                    * over the (arbitrary, potentially mutable) Entry objects actually stored in
                                    entryArray.
                                    */
                                </comment>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>RegularImmutableBiMap</name>.
                                                <name>fromEntries</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>entryArray</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>

            <constructor>
                <name>ImmutableBiMap</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="javadoc">/**
                * {@inheritDoc}
                *
                * &lt;p&gt;The inverse of an {@code ImmutableBiMap} is another
                * {@code ImmutableBiMap}.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>
                        <name>ImmutableBiMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            ,
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>inverse</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns an immutable set of the values in this map. The values are in the
                * same order as the parameters used to build this map.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ImmutableSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>values</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>inverse</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>keySet</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Guaranteed to throw an exception and leave the bimap unmodified.
                *
                * @throws UnsupportedOperationException always
                * @deprecated Unsupported operation.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>V</name>
                </type>
                <name>forcePut</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Serialized type for all ImmutableBiMap instances. It captures the logical
                * contents and they are reconstructed using public factory methods. This
                * ensures that the implementation types remain as implementation details.
                *
                * Since the bimap is immutable, ImmutableBiMap doesn't require special logic
                * for keeping the bimap and its inverse in sync during serialization, the way
                * AbstractBiMap does.
                */
            </comment>
            <class>
                <specifier>private</specifier>
                <specifier>static</specifier> class <name>SerializedForm</name>
                <super>
                    <extends>extends <name>ImmutableMap</name>.
                        <name>SerializedForm</name>
                    </extends>
                </super>
                <block>{
                    <constructor>
                        <name>SerializedForm</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ImmutableBiMap</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>?</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>bimap</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>bimap</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>Object</name>
                        </type>
                        <name>readResolve</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Builder</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>Object</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>Object</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>builder</name> =
                                    <init>
                                        <expr>new
                                            <call>
                                                <name>
                                                    <name>Builder</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>Object</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>Object</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <return>return
                                <expr>
                                    <call>
                                        <name>createMap</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>builder</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    }
                </block>
            </class>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>Object</name>
                </type>
                <name>writeReplace</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>SerializedForm</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
