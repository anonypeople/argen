<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\ImmutableClassToInstanceMap.java">
    <comment type="block">/*
        * Copyright (C) 2009 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>primitives</name>.
            <name>Primitives</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A {@link ClassToInstanceMap} whose contents will never change, with many
        * other important properties detailed at {@link ImmutableCollection}.
        *
        * @author Kevin Bourrillion
        * @since 2.0
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>final</specifier> class
        <name>
            <name>ImmutableClassToInstanceMap</name>
            <argument_list>&lt;
                <argument>
                    <name>B</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>ForwardingMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>
                                <name>Class</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>?</name>
                                        <extends>extends
                                            <name>B</name>
                                        </extends>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </argument>
                        ,
                        <argument>
                            <name>B</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>ClassToInstanceMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>B</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                ,
                <name>Serializable</name>
            </implements>
        </super>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>ImmutableClassToInstanceMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Object</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>EMPTY</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>
                                    <name>ImmutableClassToInstanceMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Object</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>ImmutableMap</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            &lt;
                                            <name>
                                                <name>Class</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>?</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr><name>Object</name>&gt;
                                            <call>
                                                <name>of</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Returns an empty {@code ImmutableClassToInstanceMap}.
                *
                * @since 19.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("unchecked")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>B</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ImmutableClassToInstanceMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>B</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>of</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>ImmutableClassToInstanceMap</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>B</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            )
                            <name>EMPTY</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an {@code ImmutableClassToInstanceMap} containing a single entry.
                *
                * @since 19.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>B</name>
                        </argument>
                        ,
                        <argument>
                            <name>T</name>
                            <extends>extends
                                <name>B</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ImmutableClassToInstanceMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>B</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>of</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ImmutableMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>Class</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>?</name>
                                                        <extends>extends
                                                            <name>B</name>
                                                        </extends>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>B</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>map</name> =
                            <init>
                                <expr>
                                    <name><name>ImmutableMap</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    &lt;
                                    <name>
                                        <name>Class</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                                <extends>extends
                                                    <name>B</name>
                                                </extends>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </expr>
                            </init>
                            , <name>B</name>&gt;
                            <name>of</name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name>type</name>
                                    </expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>value</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>ImmutableClassToInstanceMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>B</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>map</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a new builder. The generated builder is equivalent to the builder
                * created by the {@link Builder} constructor.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>B</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Builder</name>
                        <argument_list>&lt;
                            <argument>
                                <name>B</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>builder</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>Builder</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>B</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A builder for creating immutable class-to-instance maps. Example:
                * &lt;pre&gt; {@code
                *
                * static final ImmutableClassToInstanceMap&lt;Handler&gt; HANDLERS =
                * new ImmutableClassToInstanceMap.Builder&lt;Handler&gt;()
                * .put(FooHandler.class, new FooHandler())
                * .put(BarHandler.class, new SubBarHandler())
                * .put(Handler.class, new QuuxHandler())
                * .build();}&lt;/pre&gt;
                *
                * &lt;p&gt;After invoking {@link #build()} it is still possible to add more entries
                * and build again. Thus each map generated by this builder will be a superset
                * of any map generated before it.
                *
                * @since 2.0
                */
            </comment>
            <class>
                <specifier>public</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class
                <name>
                    <name>Builder</name>
                    <argument_list>&lt;
                        <argument>
                            <name>B</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name><name>ImmutableMap</name>.
                                    <name>
                                        <name>Builder</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>
                                                    <name>Class</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                            <extends>extends
                                                                <name>B</name>
                                                            </extends>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>B</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </name>
                            </type>
                            <name>mapBuilder</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ImmutableMap</name>.
                                            <name>builder</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * Associates {@code key} with {@code value} in the built map. Duplicate
                        * keys are not allowed, and will cause {@link #build} to fail.
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <argument_list>&lt;
                                <argument>
                                    <name>T</name>
                                    <extends>extends
                                        <name>B</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                            <name>
                                <name>Builder</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>B</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>put</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Class</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>T</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>key</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>T</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>mapBuilder</name>.
                                            <name>put</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>key</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>value</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>this</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Associates all of {@code map's} keys and values in the built map.
                        * Duplicate keys are not allowed, and will cause {@link #build} to fail.
                        *
                        * @throws NullPointerException if any key or value in {@code map} is null
                        * @throws ClassCastException if any value is not an instance of the type
                        * specified by its key
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <argument_list>&lt;
                                <argument>
                                    <name>T</name>
                                    <extends>extends
                                        <name>B</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                            <name>
                                <name>Builder</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>B</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>putAll</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Map</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>
                                                            <name>Class</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>?</name>
                                                                    <extends>extends
                                                                        <name>T</name>
                                                                    </extends>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                    </extends>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>T</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>map</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>Entry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>?</name>
                                                        <extends>extends
                                                            <name>
                                                                <name>Class</name>
                                                                <argument_list>&lt;
                                                                    <argument>
                                                                        <name>?</name>
                                                                        <extends>extends
                                                                            <name>T</name>
                                                                        </extends>
                                                                    </argument>
                                                                    &gt;
                                                                </argument_list>
                                                            </name>
                                                        </extends>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>?</name>
                                                        <extends>extends
                                                            <name>T</name>
                                                        </extends>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>entry</name> :
                                        <range>
                                            <expr>
                                                <call>
                                                    <name><name>map</name>.
                                                        <name>entrySet</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </range>
                                    </decl>
                                </init>
                                )
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>Class</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                            <extends>extends
                                                                <name>T</name>
                                                            </extends>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>type</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>entry</name>.
                                                            <name>getKey</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>T</name>
                                            </type>
                                            <name>value</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>entry</name>.
                                                            <name>getValue</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>mapBuilder</name>.
                                                    <name>put</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>type</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>cast</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>type</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>value</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <return>return
                                <expr>
                                    <name>this</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>private</specifier>
                            <specifier>static</specifier>
                            <argument_list>&lt;
                                <argument>
                                    <name>B</name>
                                </argument>
                                ,
                                <argument>
                                    <name>T</name>
                                    <extends>extends
                                        <name>B</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                            <name>T</name>
                        </type>
                        <name>cast</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Class</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>T</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>type</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>B</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>Primitives</name>.
                                            <name>wrap</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>type</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>cast</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>value</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Returns a new immutable class-to-instance map containing the entries
                        * provided to this builder.
                        *
                        * @throws IllegalArgumentException if duplicate keys were added
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>
                                <name>ImmutableClassToInstanceMap</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>B</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>build</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ImmutableMap</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>
                                                        <name>Class</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>?</name>
                                                                <extends>extends
                                                                    <name>B</name>
                                                                </extends>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>B</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>map</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>mapBuilder</name>.
                                                    <name>build</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>map</name>.
                                                <name>isEmpty</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>of</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <return>return
                                            <expr>new
                                                <call>
                                                    <name>
                                                        <name>ImmutableClassToInstanceMap</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>B</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>map</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * Returns an immutable map containing the same entries as {@code map}. If
                * {@code map} somehow contains entries with duplicate keys (for example, if
                * it is a {@code SortedMap} whose comparator is not &lt;i&gt;consistent with
                * equals&lt;/i&gt;), the results of this method are undefined.
                *
                * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; Despite what the method name suggests, if {@code map} is
                * an {@code ImmutableClassToInstanceMap}, no copy will actually be performed.
                *
                * @throws NullPointerException if any key or value in {@code map} is null
                * @throws ClassCastException if any value is not an instance of the type
                * specified by its key
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>B</name>
                        </argument>
                        ,
                        <argument>
                            <name>S</name>
                            <extends>extends
                                <name>B</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ImmutableClassToInstanceMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>B</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>copyOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Map</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>
                                                    <name>Class</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                            <extends>extends
                                                                <name>S</name>
                                                            </extends>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </extends>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>S</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>map</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>map</name>
                                <name>instanceof</name>
                                <name>ImmutableClassToInstanceMap</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <annotation>@
                                                <name>SuppressWarnings</name>
                                                <argument_list>("unchecked")</argument_list>
                                            </annotation>
                                            <comment type="line">// covariant casts safe (unmodifiable)</comment>
                                            <comment type="line">// Eclipse won't compile if we cast to the
                                                parameterized type.
                                            </comment>
                                            <name>
                                                <name>ImmutableClassToInstanceMap</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>B</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>cast</name> =
                                        <init>
                                            <expr>(<name>ImmutableClassToInstanceMap</name>)
                                                <name>map</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <name>cast</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>Builder</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>B</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>putAll</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>map</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>build</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>ImmutableMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>Class</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                                <extends>extends
                                                    <name>B</name>
                                                </extends>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                ,
                                <argument>
                                    <name>B</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>delegate</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <specifier>private</specifier>
                <name>ImmutableClassToInstanceMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ImmutableMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>Class</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>?</name>
                                                        <extends>extends
                                                            <name>B</name>
                                                        </extends>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>B</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>delegate</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>delegate</name>
                            </name>
                            =
                            <name>delegate</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>protected</specifier>
                    <name>
                        <name>Map</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>B</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            ,
                            <argument>
                                <name>B</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>delegate</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>delegate</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("unchecked")</argument_list>
                    </annotation>
                    <comment type="line">// value could not get in if not a T</comment>
                    <annotation>@
                        <name>Nullable</name>
                    </annotation>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                            <extends>extends
                                <name>B</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>T</name>
                </type>
                <name>getInstance</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>T</name>)
                            <call>
                                <name><name>delegate</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>checkNotNull</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>type</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Guaranteed to throw an exception and leave the map unmodified.
                *
                * @throws UnsupportedOperationException always
                * @deprecated Unsupported operation.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                            <extends>extends
                                <name>B</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>T</name>
                </type>
                <name>putInstance</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>Object</name>
                </type>
                <name>readResolve</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>isEmpty</name>
                                <argument_list>()</argument_list>
                            </call>
                            ?
                            <call>
                                <name>of</name>
                                <argument_list>()</argument_list>
                            </call>
                            :
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
