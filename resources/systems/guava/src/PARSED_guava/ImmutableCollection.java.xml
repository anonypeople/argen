<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\ImmutableCollection.java">
    <comment type="block">/*
        * Copyright (C) 2008 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>
            CollectPreconditions</name>.
            <name>checkNonnegative</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>ObjectArrays</name>.
            <name>checkElementsNotNull</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>AbstractCollection</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>ArrayList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collection</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collections</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A {@link Collection} whose contents will never change, and which offers a few additional
        * guarantees detailed below.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; avoid &lt;i&gt;direct&lt;/i&gt; usage of {@link ImmutableCollection} as a
        type (just as
        * with {@link Collection} itself). Prefer subtypes such as {@link ImmutableSet} or {@link
        * ImmutableList}, which have well-defined {@link #equals} semantics, thus avoiding a common source
        * of bugs and confusion.
        *
        * &lt;h3&gt;About &lt;i&gt;all&lt;/i&gt; {@code Immutable-} collections&lt;/h3&gt;
        *
        * &lt;p&gt;The remainder of this documentation applies to every public {@code Immutable-} type in this
        * package, whether it is a subtype of {@code ImmutableCollection} or not.
        *
        * &lt;h4&gt;Guarantees&lt;/h4&gt;
        *
        * &lt;p&gt;Each makes the following guarantees:
        *
        * &lt;ul&gt;
        * &lt;li&gt;&lt;b&gt;Shallow immutability.&lt;/b&gt; Elements can never be added, removed or replaced in this
        * collection. This is a stronger guarantee than that of
        * {@link Collections#unmodifiableCollection}, whose contents change whenever the wrapped
        * collection is modified.
        * &lt;li&gt;&lt;b&gt;Null-hostility.&lt;/b&gt; This collection will never contain a null element.
        * &lt;li&gt;&lt;b&gt;Deterministic iteration.&lt;/b&gt; The iteration order is always well-defined, depending on
        how
        * the collection was created (see the appropriate factory method for details). View collections
        * such as {@link ImmutableMultiset#elementSet} iterate in the same order as the parent, except
        * as noted.
        * &lt;li&gt;&lt;b&gt;Thread safety.&lt;/b&gt; It is safe to access this collection concurrently from multiple
        * threads.
        * &lt;li&gt;&lt;b&gt;Integrity.&lt;/b&gt; This type cannot be subclassed outside this package (which would allow
        * these guarantees to be violated).
        * &lt;/ul&gt;
        *
        * &lt;h4&gt;"Interfaces", not implementations&lt;/h4&gt;
        *
        * &lt;p&gt;Each public class, such as {@link ImmutableSet}, is a &lt;i&gt;type&lt;/i&gt; offering meaningful
        * behavioral guarantees -- not merely a specific &lt;i&gt;implementation&lt;/i&gt; as in the case of, say,
        * {@link ArrayList}. You should treat them as interfaces in every important sense of the word.
        *
        * &lt;p&gt;For field types and method return types, you should generally use the immutable type (such as
        * {@link ImmutableList}) instead of the general collection interface type (such as {@link List}).
        * This communicates to your callers all of the semantic guarantees listed above, which is almost
        * always very useful information.
        *
        * &lt;p&gt;On the other hand, a &lt;i&gt;parameter&lt;/i&gt; type of {@link ImmutableList} is generally a
        nuisance to
        * callers. Instead, accept {@link Iterable} and have your method or constructor body pass it to the
        * appropriate {@code copyOf} method itself.
        *
        * &lt;h4&gt;Creation&lt;/h4&gt;
        *
        * &lt;p&gt;Except for logically "abstract" types like {@code ImmutableCollection} itself, each {@code
        * Immutable} type provides the static operations you need to obtain instances of that type. These
        * usually include:
        *
        * &lt;ul&gt;
        * &lt;li&gt;Static methods named {@code of}, accepting an explicit list of elements or entries.
        * &lt;li&gt;Static methods named {@code copyOf} (or {@code copyOfSorted}), accepting an existing
        * collection whose contents should be copied.
        * &lt;li&gt;A static nested {@code Builder} class which can be used to populate a new immutable instance.
        * &lt;/ul&gt;
        *
        * &lt;h4&gt;Warnings&lt;/h4&gt;
        *
        * &lt;ul&gt;
        * &lt;li&gt;&lt;b&gt;Warning:&lt;/b&gt; as with any collection, it is almost always a bad idea to modify an
        element
        * (in a way that affects its {@link Object#equals} behavior) while it is contained in a
        * collection. Undefined behavior and bugs will result. It's generally best to avoid using
        * mutable objects as elements at all, as many users may expect your "immutable" object to be
        * &lt;i&gt;deeply&lt;/i&gt; immutable.
        * &lt;/ul&gt;
        *
        * &lt;h4&gt;Performance notes&lt;/h4&gt;
        *
        * &lt;ul&gt;
        * &lt;li&gt;Implementations can be generally assumed to prioritize memory efficiency, then speed of
        * access, and lastly speed of creation.
        * &lt;li&gt;The {@code copyOf} methods will sometimes recognize that the actual copy operation is
        * unnecessary; for example, {@code copyOf(copyOf(anArrayList))} should copy the data only once.
        * This reduces the expense of habitually making defensive copies at API boundaries. However,
        * the precise conditions for skipping the copy operation are undefined.
        * &lt;li&gt;&lt;b&gt;Warning:&lt;/b&gt; a view collection such as {@link ImmutableMap#keySet} or {@link
        * ImmutableList#subList} may retain a reference to the entire data set, preventing it from
        * being garbage collected. If some of the data is no longer reachable through other means, this
        * constitutes a memory leak. Pass the view collection to the appropriate {@code copyOf} method
        * to obtain a correctly-sized copy.
        * &lt;li&gt;The performance of using the associated {@code Builder} class can be assumed to be
        * no worse, and possibly better, than creating a mutable collection and copying it.
        * &lt;li&gt;Implementations generally do not cache hash codes. If your element or key type has a slow
        * {@code hashCode} implementation, it should cache it itself.
        * &lt;/ul&gt;
        *
        * &lt;h4&gt;Example usage&lt;/h4&gt;
        *
        * &lt;pre&gt; {@code
        *
        * class Foo {
        * private static final ImmutableSet&lt;String&gt; RESERVED_CODES =
        * ImmutableSet.of("AZ", "CQ", "ZX");
        *
        * private final ImmutableSet&lt;String&gt; codes;
        *
        * public Foo(Iterable&lt;String&gt; codes) {
        * this.codes = ImmutableSet.copyOf(codes);
        * checkArgument(Collections.disjoint(this.codes, RESERVED_CODES));
        * }
        * }}&lt;/pre&gt;
        *
        * &lt;h3&gt;See also&lt;/h3&gt;
        *
        * &lt;p&gt;See the Guava User Guide article on &lt;a href=
        * "https://github.com/google/guava/wiki/ImmutableCollectionsExplained"&gt;
        * immutable collections&lt;/a&gt;.
        *
        * @since 2.0
        */
    </comment>
    <class>
        <annotation>@
            <name>GwtCompatible</name>
            <argument_list>(emulated = true)</argument_list>
        </annotation>
        <annotation>@
            <name>SuppressWarnings</name>
            <argument_list>("serial")</argument_list>
        </annotation>
        <comment type="line">// we're overriding default serialization</comment>
        <comment type="line">// TODO(kevinb): I think we should push everything down to "BaseImmutableCollection" or
            something,
        </comment>
        <comment type="line">// just to do everything we can to emphasize the "practically an interface" nature of this
            class.
        </comment>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class
        <name>
            <name>ImmutableCollection</name>
            <argument_list>&lt;
                <argument>
                    <name>E</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>AbstractCollection</name>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>Serializable</name>
            </implements>
        </super>
        <block>{

            <constructor>
                <name>ImmutableCollection</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="javadoc">/**
                * Returns an unmodifiable iterator across the elements in this collection.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>
                        <name>UnmodifiableIterator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>iterator</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>Object</name>
                    <index>[]</index>
                </type>
                <name>toArray</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>size</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>size</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name><name>ObjectArrays</name>.
                                            <name>EMPTY_ARRAY</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>Object</name>
                                        <index>[
                                            <expr>
                                                <name>size</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>copyIntoArray</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>result</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>T</name>
                    <index>[]</index>
                </type>
                <name>toArray</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>T</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>other</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>other</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>size</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>other</name>.
                                    <name>length</name>
                                </name>
                                &lt;
                                <name>size</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>other</name>
                                        =
                                        <call>
                                            <name><name>ObjectArrays</name>.
                                                <name>newArray</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>other</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>size</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>other</name>.
                                            <name>length</name>
                                        </name>
                                        &gt;
                                        <name>size</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>other</name>
                                                    <index>[
                                                        <expr>
                                                            <name>size</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                =
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>copyIntoArray</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>other</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>other</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Guaranteed to throw an exception and leave the collection unmodified.
                *
                * @throws UnsupportedOperationException always
                * @deprecated Unsupported operation.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Guaranteed to throw an exception and leave the collection unmodified.
                *
                * @throws UnsupportedOperationException always
                * @deprecated Unsupported operation.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Guaranteed to throw an exception and leave the collection unmodified.
                *
                * @throws UnsupportedOperationException always
                * @deprecated Unsupported operation.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>addAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>E</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>newElements</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Guaranteed to throw an exception and leave the collection unmodified.
                *
                * @throws UnsupportedOperationException always
                * @deprecated Unsupported operation.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>removeAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>oldElements</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Guaranteed to throw an exception and leave the collection unmodified.
                *
                * @throws UnsupportedOperationException always
                * @deprecated Unsupported operation.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>retainAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>elementsToKeep</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Guaranteed to throw an exception and leave the collection unmodified.
                *
                * @throws UnsupportedOperationException always
                * @deprecated Unsupported operation.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="block">/*
                * TODO(kevinb): Restructure code so ImmutableList doesn't contain this
                * variable, which it doesn't use.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>transient</name>
                        <name>
                            <name>ImmutableList</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>asList</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Returns an {@code ImmutableList} containing the same elements, in the same order, as this
                * collection.
                *
                * &lt;p&gt;&lt;b&gt;Performance note:&lt;/b&gt; in most cases this method can return quickly without
                actually
                * copying anything. The exact circumstances under which the copy is performed are undefined and
                * subject to change.
                *
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>ImmutableList</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>asList</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ImmutableList</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>list</name> =
                            <init>
                                <expr>
                                    <name>asList</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>(<name>list</name> == <name>null</name>) ? (<name>asList</name> =
                            <call>
                                <name>createAsList</name>
                                <argument_list>()</argument_list>
                            </call>
                            ) :
                            <name>list</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>
                        <name>ImmutableList</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>createAsList</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <switch>switch
                        <condition>(
                            <expr>
                                <call>
                                    <name>size</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case <expr>0</expr>:
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>ImmutableList</name>.
                                                <name>of</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case <expr>1</expr>:
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>ImmutableList</name>.
                                                <name>of</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name>iterator</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        .
                                                        <call>
                                                            <name>next</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <default>default:
                                <return>return
                                    <expr>new
                                        <call>
                                            <name>
                                                <name>RegularImmutableAsList</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>E</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>this</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name>toArray</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns {@code true} if this immutable collection's implementation contains references to
                * user-created objects that aren't accessible via this collection's methods. This is generally
                * used to determine whether {@code copyOf} implementations should make an explicit copy to avoid
                * memory leaks.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>abstract</specifier>
                    <name>boolean</name>
                </type>
                <name>isPartialView</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Copies the contents of this immutable collection into the specified array at the specified
                * offset. Returns {@code offset + size()}.
                */
            </comment>
            <function>
                <type>
                    <name>int</name>
                </type>
                <name>copyIntoArray</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>dst</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>E</name>
                                </type>
                                <name>e</name> :
                                <range>
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>dst</name>
                                        <index>[
                                            <expr><name>offset</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>e</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>offset</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>Object</name>
                </type>
                <name>writeReplace</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// We serialize by default to ImmutableList, the simplest thing that works.
                    </comment>
                    <return>return
                        <expr>new
                            <call>
                                <name><name>ImmutableList</name>.
                                    <name>SerializedForm</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>toArray</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Abstract base class for builders of {@link ImmutableCollection} types.
                *
                * @since 10.0
                */
            </comment>
            <class>
                <specifier>public</specifier>
                <specifier>abstract</specifier>
                <specifier>static</specifier> class
                <name>
                    <name>Builder</name>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>DEFAULT_INITIAL_CAPACITY</name> =
                            <init>
                                <expr>4</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <function>
                        <type>
                            <specifier>static</specifier>
                            <name>int</name>
                        </type>
                        <name>expandedCapacity</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>oldCapacity</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>minCapacity</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>minCapacity</name>
                                        &lt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>AssertionError</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"cannot store more than MAX_VALUE elements"</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                            <comment type="line">// careful of overflow!</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>newCapacity</name> =
                                    <init>
                                        <expr>
                                            <name>oldCapacity</name>
                                            + (<name>oldCapacity</name> &gt;&gt; 1) + 1
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>newCapacity</name>
                                        &lt;
                                        <name>minCapacity</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>newCapacity</name>
                                                =
                                                <call>
                                                    <name><name>Integer</name>.
                                                        <name>highestOneBit</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>minCapacity</name>
                                                                - 1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                &lt;&lt; 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>newCapacity</name>
                                        &lt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>newCapacity</name>
                                                =
                                                <name><name>Integer</name>.
                                                    <name>MAX_VALUE</name>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <comment type="line">// guaranteed to be &gt;= newCapacity</comment>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return
                                <expr>
                                    <name>newCapacity</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <constructor>
                        <name>Builder</name>
                        <parameter_list>()</parameter_list>
                        <block>{}</block>
                    </constructor>

                    <comment type="javadoc">/**
                        * Adds {@code element} to the {@code ImmutableCollection} being built.
                        *
                        * &lt;p&gt;Note that each builder class covariantly returns its own type from
                        * this method.
                        *
                        * @param element the element to add
                        * @return this {@code Builder} instance
                        * @throws NullPointerException if {@code element} is null
                        */
                    </comment>
                    <function_decl>
                        <type>
                            <specifier>public</specifier>
                            <specifier>abstract</specifier>
                            <name>
                                <name>Builder</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>E</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>add</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>E</name>
                                    </type>
                                    <name>element</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        ;
                    </function_decl>

                    <comment type="javadoc">/**
                        * Adds each element of {@code elements} to the {@code ImmutableCollection}
                        * being built.
                        *
                        * &lt;p&gt;Note that each builder class overrides this method in order to
                        * covariantly return its own type.
                        *
                        * @param elements the elements to add
                        * @return this {@code Builder} instance
                        * @throws NullPointerException if {@code elements} is null or contains a
                        * null element
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>
                                <name>Builder</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>E</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>add</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type><name>E</name>...
                                    </type>
                                    <name>elements</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>E</name>
                                        </type>
                                        <name>element</name> :
                                        <range>
                                            <expr>
                                                <name>elements</name>
                                            </expr>
                                        </range>
                                    </decl>
                                </init>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>add</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>element</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <return>return
                                <expr>
                                    <name>this</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Adds each element of {@code elements} to the {@code ImmutableCollection}
                        * being built.
                        *
                        * &lt;p&gt;Note that each builder class overrides this method in order to
                        * covariantly return its own type.
                        *
                        * @param elements the elements to add
                        * @return this {@code Builder} instance
                        * @throws NullPointerException if {@code elements} is null or contains a
                        * null element
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>
                                <name>Builder</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>E</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>addAll</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Iterable</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>E</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>elements</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>E</name>
                                        </type>
                                        <name>element</name> :
                                        <range>
                                            <expr>
                                                <name>elements</name>
                                            </expr>
                                        </range>
                                    </decl>
                                </init>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>add</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>element</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <return>return
                                <expr>
                                    <name>this</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Adds each element of {@code elements} to the {@code ImmutableCollection}
                        * being built.
                        *
                        * &lt;p&gt;Note that each builder class overrides this method in order to
                        * covariantly return its own type.
                        *
                        * @param elements the elements to add
                        * @return this {@code Builder} instance
                        * @throws NullPointerException if {@code elements} is null or contains a
                        * null element
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>
                                <name>Builder</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>E</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>addAll</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Iterator</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>E</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>elements</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <while>while
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>elements</name>.
                                                <name>hasNext</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>add</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>elements</name>.
                                                                    <name>next</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </while>
                            <return>return
                                <expr>
                                    <name>this</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Returns a newly-created {@code ImmutableCollection} of the appropriate
                        * type, containing the elements provided to this builder.
                        *
                        * &lt;p&gt;Note that each builder class covariantly returns the appropriate type
                        * of {@code ImmutableCollection} from this method.
                        */
                    </comment>
                    <function_decl>
                        <type>
                            <specifier>public</specifier>
                            <specifier>abstract</specifier>
                            <name>
                                <name>ImmutableCollection</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>E</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>build</name>
                        <parameter_list>()</parameter_list>;
                    </function_decl>
                    }
                </block>
            </class>

            <class>
                <specifier>abstract</specifier>
                <specifier>static</specifier> class
                <name>
                    <name>ArrayBasedBuilder</name>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <super>
                    <extends>extends <name>ImmutableCollection</name>.
                        <name>
                            <name>Builder</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                                <index>[]</index>
                            </type>
                            <name>contents</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>ArrayBasedBuilder</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>initialCapacity</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkNonnegative</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>initialCapacity</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>"initialCapacity"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>contents</name>
                                    </name>
                                    = new
                                    <name>
                                        <name>Object</name>
                                        <index>[
                                            <expr>
                                                <name>initialCapacity</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>size</name>
                                    </name>
                                    = 0
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="javadoc">/**
                        * Expand the absolute capacity of the builder so it can accept at least
                        * the specified number of elements without being resized.
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>void</name>
                        </type>
                        <name>ensureCapacity</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>minCapacity</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>contents</name>.
                                            <name>length</name>
                                        </name>
                                        &lt;
                                        <name>minCapacity</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>contents</name>
                                                </name>
                                                =
                                                <call>
                                                    <name><name>ObjectArrays</name>.
                                                        <name>arraysCopyOf</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>contents</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name>expandedCapacity</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name><name>contents</name>.
                                                                                    <name>length</name>
                                                                                </name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>minCapacity</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>
                                <name>ArrayBasedBuilder</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>E</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>add</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>E</name>
                                    </type>
                                    <name>element</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>element</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>ensureCapacity</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>size</name>
                                                    + 1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>contents</name>
                                        <index>[
                                            <expr><name>size</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>element</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>this</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>
                                <name>Builder</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>E</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>add</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type><name>E</name>...
                                    </type>
                                    <name>elements</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkElementsNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>elements</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>ensureCapacity</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>size</name>
                                                    +
                                                    <name><name>elements</name>.
                                                        <name>length</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>System</name>.
                                            <name>arraycopy</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>elements</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>contents</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>size</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>elements</name>.
                                                        <name>length</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>size</name>
                                    +=
                                    <name><name>elements</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>this</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>
                                <name>Builder</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>E</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>addAll</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Iterable</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>E</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>elements</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>elements</name>
                                        <name>instanceof</name>
                                        <name>Collection</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>
                                                        <name>Collection</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>?</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </type>
                                                <name>collection</name> =
                                                <init>
                                                    <expr>(
                                                        <name>
                                                            <name>Collection</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>?</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                        )
                                                        <name>elements</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>ensureCapacity</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>size</name>
                                                                +
                                                                <call>
                                                                    <name><name>collection</name>.
                                                                        <name>size</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>super</name>.
                                            <name>addAll</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>elements</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>this</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>
            }
        </block>
    </class>
</unit>
