<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\io\InputSupplier.java">
    <comment type="block">/*
        * Copyright (C) 2007 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>io</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A factory for readable streams of bytes or characters.
        *
        * @author Chris Nokleberg
        * @since 1.0
        * @deprecated For {@code InputSupplier&lt;? extends InputStream&gt;}, use
        * {@link ByteSource} instead. For {@code InputSupplier&lt;? extends Reader&gt;},
        * use {@link CharSource}. Implementations of {@code InputSupplier} that
        * don't fall into one of those categories do not benefit from any of the
        * methods in {@code common.io} and should use a different interface. This
        * interface is scheduled for removal in December 2015.
        */
    </comment>
    <class type="interface">
        <annotation>@
            <name>Deprecated</name>
        </annotation>
        <specifier>public</specifier>
        interface
        <name>
            <name>InputSupplier</name>
            <argument_list>&lt;
                <argument>
                    <name>T</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <block>{

            <comment type="javadoc">/**
                * Returns an object that encapsulates a readable resource.
                * &lt;p&gt;
                * Like {@link Iterable#iterator}, this method may be called repeatedly to
                * get independent channels to the same underlying resource.
                * &lt;p&gt;
                * Where the channel maintains a position within the resource, moving that
                * cursor within one channel should not affect the starting position of
                * channels returned by other calls.
                */
            </comment>
            <function_decl>
                <type>
                    <name>T</name>
                </type>
                <name>getInput</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>
            }
        </block>
    </class>
</unit>
