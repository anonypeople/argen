<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\net\InternetDomainName.java">
    <comment type="block">/*
        * Copyright (C) 2009 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>net</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkArgument</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkState</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Ascii</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>CharMatcher</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Joiner</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Splitter</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.
            <name>ImmutableList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>thirdparty</name>.<name>publicsuffix</name>.
            <name>PublicSuffixPatterns</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * An immutable well-formed internet domain name, such as {@code com} or {@code
        * foo.co.uk}. Only syntactic analysis is performed; no DNS lookups or other
        * network interactions take place. Thus there is no guarantee that the domain
        * actually exists on the internet.
        *
        * &lt;p&gt;One common use of this class is to determine whether a given string is
        * likely to represent an addressable domain on the web -- that is, for a
        * candidate string {@code "xxx"}, might browsing to {@code "http://xxx/"}
        * result in a webpage being displayed? In the past, this test was frequently
        * done by determining whether the domain ended with a {@linkplain
        * #isPublicSuffix() public suffix} but was not itself a public suffix. However,
        * this test is no longer accurate. There are many domains which are both public
        * suffixes and addressable as hosts; {@code "uk.com"} is one example. As a
        * result, the only useful test to determine if a domain is a plausible web host
        * is {@link #hasPublicSuffix()}. This will return {@code true} for many domains
        * which (currently) are not hosts, such as {@code "com"}, but given that any
        * public suffix may become a host without warning, it is better to err on the
        * side of permissiveness and thus avoid spurious rejection of valid sites.
        *
        * &lt;p&gt;During construction, names are normalized in two ways:
        * &lt;ol&gt;
        * &lt;li&gt;ASCII uppercase characters are converted to lowercase.
        * &lt;li&gt;Unicode dot separators other than the ASCII period ({@code '.'}) are
        * converted to the ASCII period.
        * &lt;/ol&gt;
        * &lt;p&gt;The normalized values will be returned from {@link #toString()} and
        * {@link #parts()}, and will be reflected in the result of
        * {@link #equals(Object)}.
        *
        * &lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Internationalized_domain_name"&gt;
        * Internationalized domain names&lt;/a&gt; such as {@code ç½ç».cn} are supported, as
        * are the equivalent &lt;a
        * href="http://en.wikipedia.org/wiki/Internationalized_domain_name"&gt;IDNA
        * Punycode-encoded&lt;/a&gt; versions.
        *
        * @author Craig Berry
        * @since 5.0
        */
    </comment>
    <class>
        <annotation>@
            <name>Beta</name>
        </annotation>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>InternetDomainName</name>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>CharMatcher</name>
                    </type>
                    <name>DOTS_MATCHER</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>CharMatcher</name>.
                                    <name>anyOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>".\u3002\uFF0E\uFF61"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Splitter</name>
                    </type>
                    <name>DOT_SPLITTER</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Splitter</name>.
                                    <name>on</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>'.'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Joiner</name>
                    </type>
                    <name>DOT_JOINER</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Joiner</name>.
                                    <name>on</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>'.'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Value of {@link #publicSuffixIndex} which indicates that no public suffix
                * was found.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>NO_PUBLIC_SUFFIX_FOUND</name> =
                    <init>
                        <expr>-1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>DOT_REGEX</name> =
                    <init>
                        <expr>"\\."</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Maximum parts (labels) in a domain name. This value arises from
                * the 255-octet limit described in
                * &lt;a href="http://www.ietf.org/rfc/rfc2181.txt"&gt;RFC 2181&lt;/a&gt; part 11 with
                * the fact that the encoding of each part occupies at least two bytes
                * (dot plus label externally, length byte plus label internally). Thus, if
                * all labels have the minimum size of one byte, 127 of them will fit.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>MAX_PARTS</name> =
                    <init>
                        <expr>127</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Maximum length of a full domain name, including separators, and
                * leaving room for the root label. See
                * &lt;a href="http://www.ietf.org/rfc/rfc2181.txt"&gt;RFC 2181&lt;/a&gt; part 11.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>MAX_LENGTH</name> =
                    <init>
                        <expr>253</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Maximum size of a single part of a domain name. See
                * &lt;a href="http://www.ietf.org/rfc/rfc2181.txt"&gt;RFC 2181&lt;/a&gt; part 11.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>MAX_DOMAIN_PART_LENGTH</name> =
                    <init>
                        <expr>63</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The full domain name, converted to lower case.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>name</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The parts of the domain name, converted to lower case.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>ImmutableList</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>String</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>parts</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The index in the {@link #parts()} list at which the public suffix begins.
                * For example, for the domain name {@code www.google.co.uk}, the value would
                * be 2 (the index of the {@code co} part). The value is negative
                * (specifically, {@link #NO_PUBLIC_SUFFIX_FOUND}) if no public suffix was
                * found.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>publicSuffixIndex</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Constructor used to implement {@link #from(String)}, and from subclasses.
                */
            </comment>
            <constructor>
                <name>InternetDomainName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Normalize:</comment>
                    <comment type="line">// * ASCII characters to lowercase</comment>
                    <comment type="line">// * All dot-like characters to '.'</comment>
                    <comment type="line">// * Strip trailing '.'</comment>

                    <expr_stmt>
                        <expr>
                            <name>name</name>
                            =
                            <call>
                                <name><name>Ascii</name>.
                                    <name>toLowerCase</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>DOTS_MATCHER</name>.
                                                    <name>replaceFrom</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>name</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>'.'</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>name</name>.
                                        <name>endsWith</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"."</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>name</name>
                                        =
                                        <call>
                                            <name><name>name</name>.
                                                <name>substring</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>0</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>name</name>.
                                                                <name>length</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        - 1
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>name</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &lt;=
                                            <name>MAX_LENGTH</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Domain name too long: '%s':"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>name</name>
                            </name>
                            =
                            <name>name</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>parts</name>
                            </name>
                            =
                            <call>
                                <name><name>ImmutableList</name>.
                                    <name>copyOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>DOT_SPLITTER</name>.
                                                    <name>split</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>name</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>parts</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &lt;=
                                            <name>MAX_PARTS</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Domain has too many parts: '%s'"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>validateSyntax</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>parts</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Not a valid domain name: '%s'"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>publicSuffixIndex</name>
                            </name>
                            =
                            <call>
                                <name>findPublicSuffix</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Returns the index of the leftmost part of the public suffix, or -1 if not
                * found. Note that the value defined as the "public suffix" may not be a
                * public suffix according to {@link #isPublicSuffix()} if the domain ends
                * with an excluded domain pattern such as {@code "nhs.uk"}.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>int</name>
                </type>
                <name>findPublicSuffix</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>partsSize</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>parts</name>.
                                            <name>size</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>partsSize</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>ancestorName</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>DOT_JOINER</name>.
                                                    <name>join</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>parts</name>.
                                                                    <name>subList</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>partsSize</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>PublicSuffixPatterns</name>.<name>EXACT</name>.
                                                <name>containsKey</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>ancestorName</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>

                            <comment type="line">// Excluded domains (e.g. !nhs.uk) use the next highest</comment>
                            <comment type="line">// domain as the effective public suffix (e.g. uk).</comment>

                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>PublicSuffixPatterns</name>.<name>EXCLUDED</name>.
                                                <name>containsKey</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>ancestorName</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>i</name>
                                                + 1
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>

                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name>matchesWildcardPublicSuffix</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>ancestorName</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>

                    <return>return
                        <expr>
                            <name>NO_PUBLIC_SUFFIX_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an instance of {@link InternetDomainName} after lenient
                * validation. Specifically, validation against &lt;a
                * href="http://www.ietf.org/rfc/rfc3490.txt"&gt;RFC 3490&lt;/a&gt;
                * ("Internationalizing Domain Names in Applications") is skipped, while
                * validation against &lt;a
                * href="http://www.ietf.org/rfc/rfc1035.txt"&gt;RFC 1035&lt;/a&gt; is relaxed in
                * the following ways:
                * &lt;ul&gt;
                * &lt;li&gt;Any part containing non-ASCII characters is considered valid.
                * &lt;li&gt;Underscores ('_') are permitted wherever dashes ('-') are permitted.
                * &lt;li&gt;Parts other than the final part may start with a digit.
                * &lt;/ul&gt;
                *
                *
                * @param domain A domain name (not IP address)
                * @throws IllegalArgumentException if {@code name} is not syntactically valid
                * according to {@link #isValid}
                * @since 10.0 (previously named {@code fromLenient})
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>InternetDomainName</name>
                </type>
                <name>from</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>domain</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>InternetDomainName</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>checkNotNull</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>domain</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Validation method used by {@from} to ensure that the domain name is
                * syntactically valid according to RFC 1035.
                *
                * @return Is the domain name syntactically valid?
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>validateSyntax</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>parts</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>lastIndex</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>parts</name>.
                                            <name>size</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Validate the last part specially, as it has different syntax rules.
                    </comment>

                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name>validatePart</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>parts</name>.
                                                        <name>get</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>lastIndex</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>true</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>lastIndex</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>part</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>parts</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name>validatePart</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>part</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>

                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>CharMatcher</name>
                    </type>
                    <name>DASH_MATCHER</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>CharMatcher</name>.
                                    <name>anyOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"-_"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>CharMatcher</name>
                    </type>
                    <name>PART_CHAR_MATCHER</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>CharMatcher</name>.<name>JAVA_LETTER_OR_DIGIT</name>.
                                    <name>or</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>DASH_MATCHER</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Helper method for {@link #validateSyntax(List)}. Validates that one part of
                * a domain name is valid.
                *
                * @param part The domain name part to be validated
                * @param isFinalPart Is this the final (rightmost) domain part?
                * @return Whether the part is valid
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>validatePart</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>part</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>isFinalPart</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <comment type="line">// These tests could be collapsed into one big boolean expression, but
                    </comment>
                    <comment type="line">// they have been left as independent tests for clarity.</comment>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>part</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &lt; 1 ||
                                <call>
                                    <name><name>part</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &gt;
                                <name>MAX_DOMAIN_PART_LENGTH</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="block">/*
                        * GWT claims to support java.lang.Character's char-classification methods,
                        * but it actually only works for ASCII. So for now, assume any non-ASCII
                        * characters are valid. The only place this seems to be documented is here:
                        * http://osdir.com/ml/GoogleWebToolkitContributors/2010-03/msg00178.html
                        *
                        * &lt;p&gt;ASCII characters in the part are expected to be valid per RFC 1035,
                        * with underscore also being allowed due to widespread practice.
                        */
                    </comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>asciiChars</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>CharMatcher</name>.<name>ASCII</name>.
                                            <name>retainFrom</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>part</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>PART_CHAR_MATCHER</name>.
                                        <name>matchesAllOf</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>asciiChars</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// No initial or final dashes or underscores.</comment>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>DASH_MATCHER</name>.
                                        <name>matches</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>part</name>.
                                                        <name>charAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ||
                                <call>
                                    <name><name>DASH_MATCHER</name>.
                                        <name>matches</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>part</name>.
                                                        <name>charAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>part</name>.
                                                                        <name>length</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                - 1
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="block">/*
                        * Note that we allow (in contravention of a strict interpretation of the
                        * relevant RFCs) domain parts other than the last may begin with a digit
                        * (for example, "3com.com"). It's important to disallow an initial digit in
                        * the last part; it's the only thing that stops an IPv4 numeric address
                        * like 127.0.0.1 from looking like a valid domain name.
                        */
                    </comment>

                    <if>if
                        <condition>(
                            <expr>
                                <name>isFinalPart</name>
                                &amp;&amp;
                                <call>
                                    <name><name>CharMatcher</name>.<name>DIGIT</name>.
                                        <name>matches</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>part</name>.
                                                        <name>charAt</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the individual components of this domain name, normalized to all
                * lower case. For example, for the domain name {@code mail.google.com}, this
                * method returns the list {@code ["mail", "google", "com"]}.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>ImmutableList</name>
                        <argument_list>&lt;
                            <argument>
                                <name>String</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>parts</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>parts</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Indicates whether this domain name represents a &lt;i&gt;public suffix&lt;/i&gt;, as
                * defined by the Mozilla Foundation's
                * &lt;a href="http://publicsuffix.org/"&gt;Public Suffix List&lt;/a&gt; (PSL). A public
                * suffix is one under which Internet users can directly register names, such
                * as {@code com}, {@code co.uk} or {@code pvt.k12.wy.us}. Examples of domain
                * names that are &lt;i&gt;not&lt;/i&gt; public suffixes include {@code google}, {@code
                * google.com} and {@code foo.co.uk}.
                *
                * @return {@code true} if this domain name appears exactly on the public
                * suffix list
                * @since 6.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isPublicSuffix</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>publicSuffixIndex</name>
                            == 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Indicates whether this domain name ends in a {@linkplain #isPublicSuffix()
                * public suffix}, including if it is a public suffix itself. For example,
                * returns {@code true} for {@code www.google.com}, {@code foo.co.uk} and
                * {@code com}, but not for {@code google} or {@code google.foo}. This is
                * the recommended method for determining whether a domain is potentially an
                * addressable host.
                *
                * @since 6.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>hasPublicSuffix</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>publicSuffixIndex</name>
                            !=
                            <name>NO_PUBLIC_SUFFIX_FOUND</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the {@linkplain #isPublicSuffix() public suffix} portion of the
                * domain name, or {@code null} if no public suffix is present.
                *
                * @since 6.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>InternetDomainName</name>
                </type>
                <name>publicSuffix</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>hasPublicSuffix</name>
                                <argument_list>()</argument_list>
                            </call>
                            ?
                            <call>
                                <name>ancestor</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>publicSuffixIndex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            :
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Indicates whether this domain name ends in a {@linkplain #isPublicSuffix()
                * public suffix}, while not being a public suffix itself. For example,
                * returns {@code true} for {@code www.google.com}, {@code foo.co.uk} and
                * {@code bar.ca.us}, but not for {@code google}, {@code com}, or {@code
                * google.foo}.
                *
                * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; a {@code false} result from this method does not imply
                * that the domain does not represent an addressable host, as many public
                * suffixes are also addressable hosts. Use {@link #hasPublicSuffix()} for
                * that test.
                *
                * &lt;p&gt;This method can be used to determine whether it will probably be
                * possible to set cookies on the domain, though even that depends on
                * individual browsers' implementations of cookie controls. See
                * &lt;a href="http://www.ietf.org/rfc/rfc2109.txt"&gt;RFC 2109&lt;/a&gt; for details.
                *
                * @since 6.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isUnderPublicSuffix</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>publicSuffixIndex</name>
                            &gt; 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Indicates whether this domain name is composed of exactly one subdomain
                * component followed by a {@linkplain #isPublicSuffix() public suffix}. For
                * example, returns {@code true} for {@code google.com} and {@code foo.co.uk},
                * but not for {@code www.google.com} or {@code co.uk}.
                *
                * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; A {@code true} result from this method does not imply
                * that the domain is at the highest level which is addressable as a host, as
                * many public suffixes are also addressable hosts. For example, the domain
                * {@code bar.uk.com} has a public suffix of {@code uk.com}, so it would
                * return {@code true} from this method. But {@code uk.com} is itself an
                * addressable host.
                *
                * &lt;p&gt;This method can be used to determine whether a domain is probably the
                * highest level for which cookies may be set, though even that depends on
                * individual browsers' implementations of cookie controls. See
                * &lt;a href="http://www.ietf.org/rfc/rfc2109.txt"&gt;RFC 2109&lt;/a&gt; for details.
                *
                * @since 6.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isTopPrivateDomain</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>publicSuffixIndex</name>
                            == 1
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the portion of this domain name that is one level beneath the
                * public suffix. For example, for {@code x.adwords.google.co.uk} it returns
                * {@code google.co.uk}, since {@code co.uk} is a public suffix.
                *
                * &lt;p&gt;If {@link #isTopPrivateDomain()} is true, the current domain name
                * instance is returned.
                *
                * &lt;p&gt;This method should not be used to determine the topmost parent domain
                * which is addressable as a host, as many public suffixes are also
                * addressable hosts. For example, the domain {@code foo.bar.uk.com} has
                * a public suffix of {@code uk.com}, so it would return {@code bar.uk.com}
                * from this method. But {@code uk.com} is itself an addressable host.
                *
                * &lt;p&gt;This method can be used to determine the probable highest level parent
                * domain for which cookies may be set, though even that depends on individual
                * browsers' implementations of cookie controls.
                *
                * @throws IllegalStateException if this domain does not end with a
                * public suffix
                * @since 6.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>InternetDomainName</name>
                </type>
                <name>topPrivateDomain</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isTopPrivateDomain</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkState</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>isUnderPublicSuffix</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Not under a public suffix: %s"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>ancestor</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>publicSuffixIndex</name>
                                            - 1
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Indicates whether this domain is composed of two or more parts.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>hasParent</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>parts</name>.
                                    <name>size</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            &gt; 1
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an {@code InternetDomainName} that is the immediate ancestor of
                * this one; that is, the current domain with the leftmost part removed. For
                * example, the parent of {@code www.google.com} is {@code google.com}.
                *
                * @throws IllegalStateException if the domain has no parent, as determined
                * by {@link #hasParent}
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>InternetDomainName</name>
                </type>
                <name>parent</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkState</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>hasParent</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Domain '%s' has no parent"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>ancestor</name>
                                <argument_list>(
                                    <argument>
                                        <expr>1</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the ancestor of the current domain at the given number of levels
                * "higher" (rightward) in the subdomain list. The number of levels must be
                * non-negative, and less than {@code N-1}, where {@code N} is the number of
                * parts in the domain.
                *
                * &lt;p&gt;TODO: Reasonable candidate for addition to public API.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>InternetDomainName</name>
                </type>
                <name>ancestor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>levels</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>from</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>DOT_JOINER</name>.
                                                    <name>join</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>parts</name>.
                                                                    <name>subList</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>levels</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>parts</name>.
                                                                                    <name>size</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates and returns a new {@code InternetDomainName} by prepending the
                * argument and a dot to the current name. For example, {@code
                * InternetDomainName.from("foo.com").child("www.bar")} returns a new
                * {@code InternetDomainName} with the value {@code www.bar.foo.com}. Only
                * lenient validation is performed, as described {@link #from(String) here}.
                *
                * @throws NullPointerException if leftParts is null
                * @throws IllegalArgumentException if the resulting name is not valid
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>InternetDomainName</name>
                </type>
                <name>child</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>leftParts</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>from</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>checkNotNull</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>leftParts</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            + "." +
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Indicates whether the argument is a syntactically valid domain name using
                * lenient validation. Specifically, validation against &lt;a
                * href="http://www.ietf.org/rfc/rfc3490.txt"&gt;RFC 3490&lt;/a&gt;
                * ("Internationalizing Domain Names in Applications") is skipped.
                *
                * &lt;p&gt;The following two code snippets are equivalent:
                *
                * &lt;pre&gt; {@code
                * domainName = InternetDomainName.isValid(name)
                * ? InternetDomainName.from(name)
                * : DEFAULT_DOMAIN;}&lt;/pre&gt;
                *
                * &lt;pre&gt; {@code
                * try {
                * domainName = InternetDomainName.from(name);
                * } catch (IllegalArgumentException e) {
                * domainName = DEFAULT_DOMAIN;
                * }}&lt;/pre&gt;
                *
                * @since 8.0 (previously named {@code isValidLenient})
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isValid</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>from</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>name</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return <expr>true</expr>;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IllegalArgumentException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Does the domain name match one of the "wildcard" patterns (e.g.
                * {@code "*.ar"})?
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>matchesWildcardPublicSuffix</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>domain</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>String</name>
                                <index>[]</index>
                            </type>
                            <name>pieces</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>domain</name>.
                                            <name>split</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>DOT_REGEX</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>2</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name><name>pieces</name>.
                                <name>length</name>
                            </name>
                            == 2 &amp;&amp;
                            <call>
                                <name><name>PublicSuffixPatterns</name>.<name>UNDER</name>.
                                    <name>containsKey</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>
                                                <name>pieces</name>
                                                <index>[<expr>1</expr>]
                                                </index>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the domain name, normalized to all lower case.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>name</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Equality testing is based on the text supplied by the caller,
                * after normalization as described in the class documentation. For
                * example, a non-ASCII Unicode domain name and the Punycode version
                * of the same domain name would not be considered equal.
                *
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>object</name>
                                ==
                                <name>this</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name>object</name>
                                <name>instanceof</name>
                                <name>InternetDomainName</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>InternetDomainName</name>
                                        </type>
                                        <name>that</name> =
                                        <init>
                                            <expr>(<name>InternetDomainName</name>)
                                                <name>object</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>this</name>.<name>name</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>that</name>.
                                                            <name>name</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>name</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
