<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\util\concurrent\InterruptibleTask.java">
    <comment type="block">/*
        * Copyright (C) 2015 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.
            <name>concurrent</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.<name>
            AtomicReferenceFieldUpdater</name>.
            <name>newUpdater</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.
            <name>AtomicReferenceFieldUpdater</name>
        </name>
        ;
    </import>

    <class>
        <annotation>@
            <name>GwtCompatible</name>
            <argument_list>(emulated = true)</argument_list>
        </annotation>
        <specifier>abstract</specifier>
        class <name>InterruptibleTask</name>
        <super>
            <implements>implements
                <name>Runnable</name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>AtomicReferenceFieldUpdater</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>InterruptibleTask</name>
                                </argument>
                                ,
                                <argument>
                                    <name>Thread</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>RUNNER</name> =
                    <init>
                        <expr>
                            <call>
                                <name>newUpdater</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>InterruptibleTask</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Thread</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"runner"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// These two fields are used to interrupt running tasks. The thread executing the
                task
            </comment>
            <comment type="line">// publishes itself to the 'runner' field and the thread interrupting sets
                'doneInterrupting'
            </comment>
            <comment type="line">// when it has finished interrupting.</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>volatile</name>
                        <name>Thread</name>
                    </type>
                    <name>runner</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>volatile</name>
                        <name>boolean</name>
                    </type>
                    <name>doneInterrupting</name>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>run</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>RUNNER</name>.
                                        <name>compareAndSet</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>this</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>Thread</name>.
                                                        <name>currentThread</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return;</return>
                                <comment type="line">// someone else has run or is running.</comment>
                                }
                            </block>
                        </then>
                    </if>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>runInterruptibly</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <finally>finally
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name>wasInterrupted</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// We were interrupted, it is possible that the
                                                interrupted bit hasn't been set yet. Wait
                                            </comment>
                                            <comment type="line">// for the interrupting thread to set
                                                'doneInterrupting' to true. See interruptTask().
                                            </comment>
                                            <comment type="line">// We want to wait so that we don't interrupt the
                                                _next_ thing run on the thread.
                                            </comment>
                                            <comment type="line">// Note. We don't reset the interrupted bit, just wait
                                                for it to be set.
                                            </comment>
                                            <comment type="line">// If this is a thread pool thread, the thread pool
                                                will reset it for us. Otherwise, the
                                            </comment>
                                            <comment type="line">// interrupted bit may have been intended for something
                                                else, so don't clear it.
                                            </comment>
                                            <while>while
                                                <condition>(
                                                    <expr>!
                                                        <name>doneInterrupting</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>Thread</name>.
                                                                    <name>yield</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </while>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <function_decl>
                <type>
                    <specifier>abstract</specifier>
                    <name>void</name>
                </type>
                <name>runInterruptibly</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <function_decl>
                <type>
                    <specifier>abstract</specifier>
                    <name>boolean</name>
                </type>
                <name>wasInterrupted</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>interruptTask</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// interruptTask is guaranteed to be called at most once and if runner is
                        non-null when that
                    </comment>
                    <comment type="line">// happens then it must have been the first thread that entered run(). So there
                        is no risk
                    </comment>
                    <comment type="line">// that we are interrupting the wrong thread.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Thread</name>
                            </type>
                            <name>currentRunner</name> =
                            <init>
                                <expr>
                                    <name>runner</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>currentRunner</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>currentRunner</name>.
                                                <name>interrupt</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>doneInterrupting</name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
