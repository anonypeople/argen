<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\reflect\Invokable.java">
    <comment type="block">/*
        * Copyright (C) 2012 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>reflect</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.
            <name>ImmutableList</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>lang</name>.<name>annotation</name>.
            <name>Annotation</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>AccessibleObject</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Constructor</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>GenericDeclaration</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>InvocationTargetException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Member</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Method</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Modifier</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Type</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>TypeVariable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Arrays</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Wrapper around either a {@link Method} or a {@link Constructor}.
        * Convenience API is provided to make common reflective operation easier to deal with,
        * such as {@link #isPublic}, {@link #getParameters} etc.
        *
        * &lt;p&gt;In addition to convenience methods, {@link TypeToken#method} and {@link
        * TypeToken#constructor} will resolve the type parameters of the method or constructor in the
        * context of the owner type, which may be a subtype of the declaring class. For example:
        *
        * &lt;pre&gt; {@code
        * Method getMethod = List.class.getMethod("get", int.class);
        * Invokable&lt;List&lt;String&gt;, ?&gt; invokable = new TypeToken&lt;List&lt;String&gt;&gt;()
        {}.method(getMethod);
        * assertEquals(TypeToken.of(String.class), invokable.getReturnType()); // Not Object.class!
        * assertEquals(new TypeToken&lt;List&lt;String&gt;&gt;() {}, invokable.getOwnerType());}&lt;/pre&gt;
        *
        * @param &lt;T&gt; the type that owns this method or constructor.
        * @param &lt;R&gt; the return type of (or supertype thereof) the method or the declaring type of the
        * constructor.
        * @author Ben Yu
        * @since 14.0
        */
    </comment>
    <class>
        <annotation>@
            <name>Beta</name>
        </annotation>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class
        <name>
            <name>Invokable</name>
            <argument_list>&lt;
                <argument>
                    <name>T</name>
                </argument>
                ,
                <argument>
                    <name>R</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>Element</name>
            </extends>
            <implements>implements
                <name>GenericDeclaration</name>
            </implements>
        </super>
        <block>{

            <expr_stmt>
                <expr>&lt;<name>M</name> extends <name>AccessibleObject</name> &amp; <name>Member</name>&gt;
                    <call>
                        <name>Invokable</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>M</name>
                                    <name>member</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>member</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                        }
                    </block>

                    <comment type="javadoc">/** Returns {@link Invokable} of {@code method}. */</comment>
                    public static
                    <name>
                        <name>Invokable</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                            </argument>
                            ,
                            <argument>
                                <name>Object</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    <call>
                        <name>from</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>Method</name>
                                    <name>method</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <return>return
                            <expr>new
                                <call>
                                    <name>
                                        <name>MethodInvokable</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>Object</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>method</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                    </block>
                </expr>
            </expr_stmt>
            }
        </block>
    </class>

    <comment type="javadoc">/** Returns {@link Invokable} of {@code constructor}. */</comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>T</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Invokable</name>
                <argument_list>&lt;
                    <argument>
                        <name>T</name>
                    </argument>
                    ,
                    <argument>
                        <name>T</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>from</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Constructor</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>T</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>constructor</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>ConstructorInvokable</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>T</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>constructor</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns {@code true} if this is an overridable method. Constructors, private, static or final
        * methods, or methods declared by final classes are not overridable.
        */
    </comment>
    <function_decl>
        <type>
            <specifier>public</specifier>
            <specifier>abstract</specifier>
            <name>boolean</name>
        </type>
        <name>isOverridable</name>
        <parameter_list>()</parameter_list>;
    </function_decl>

    <comment type="javadoc">/** Returns {@code true} if this was declared to take a variable number of arguments. */
    </comment>
    <function_decl>
        <type>
            <specifier>public</specifier>
            <specifier>abstract</specifier>
            <name>boolean</name>
        </type>
        <name>isVarArgs</name>
        <parameter_list>()</parameter_list>;
    </function_decl>

    <comment type="javadoc">/**
        * Invokes with {@code receiver} as 'this' and {@code args} passed to the underlying method
        * and returns the return value; or calls the underlying constructor with {@code args} and returns
        * the constructed instance.
        *
        * @throws IllegalAccessException if this {@code Constructor} object enforces Java language
        * access control and the underlying method or constructor is inaccessible.
        * @throws IllegalArgumentException if the number of actual and formal parameters differ;
        * if an unwrapping conversion for primitive arguments fails; or if, after possible
        * unwrapping, a parameter value cannot be converted to the corresponding formal
        * parameter type by a method invocation conversion.
        * @throws InvocationTargetException if the underlying method or constructor throws an exception.
        */
    </comment>
    <comment type="line">// All subclasses are owned by us and we'll make sure to get the R type right.</comment>
    <function>
        <type>
            <annotation>@
                <name>SuppressWarnings</name>
                <argument_list>("unchecked")</argument_list>
            </annotation>
            <specifier>public</specifier>
            <specifier>final</specifier>
            <name>R</name>
        </type>
        <name>invoke</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>T</name>
                    </type>
                    <name>receiver</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type><name>Object</name>...
                    </type>
                    <name>args</name>
                </decl>
            </param>
            )
        </parameter_list>
        <throws>throws
            <argument>
                <expr>
                    <name>InvocationTargetException</name>
                </expr>
            </argument>
            ,
            <argument>
                <expr>
                    <name>IllegalAccessException</name>
                </expr>
            </argument>
        </throws>
        <block>{
            <return>return
                <expr>(<name>R</name>)
                    <call>
                        <name>invokeInternal</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>receiver</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>args</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/** Returns the return type of this {@code Invokable}. */</comment>
    <comment type="line">// All subclasses are owned by us and we'll make sure to get the R type right.</comment>
    <function>
        <type>
            <annotation>@
                <name>SuppressWarnings</name>
                <argument_list>("unchecked")</argument_list>
            </annotation>
            <specifier>public</specifier>
            <specifier>final</specifier>
            <name>
                <name>TypeToken</name>
                <argument_list>&lt;
                    <argument>
                        <name>?</name>
                        <extends>extends
                            <name>R</name>
                        </extends>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>getReturnType</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>(
                    <name>
                        <name>TypeToken</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                                <extends>extends
                                    <name>R</name>
                                </extends>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    )
                    <call>
                        <name><name>TypeToken</name>.
                            <name>of</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>getGenericReturnType</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns all declared parameters of this {@code Invokable}. Note that if this is a constructor
        * of a non-static inner class, unlike {@link Constructor#getParameterTypes}, the hidden
        * {@code this} parameter of the enclosing class is excluded from the returned parameters.
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>final</specifier>
            <name>
                <name>ImmutableList</name>
                <argument_list>&lt;
                    <argument>
                        <name>Parameter</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>getParameters</name>
        <parameter_list>()</parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>Type</name>
                        <index>[]</index>
                    </type>
                    <name>parameterTypes</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getGenericParameterTypes</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>Annotation</name>
                        <index>[]</index>
                        <index>[]</index>
                    </type>
                    <name>annotations</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getParameterAnnotations</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name><name>ImmutableList</name>.
                            <name>
                                <name>Builder</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>Parameter</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </name>
                    </type>
                    <name>builder</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>ImmutableList</name>.
                                    <name>builder</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <for>for (
                <init>
                    <decl>
                        <type>
                            <name>int</name>
                        </type>
                        <name>i</name> =
                        <init>
                            <expr>0</expr>
                        </init>
                    </decl>
                    ;
                </init>
                <condition>
                    <expr>
                        <name>i</name>
                        &lt;
                        <name><name>parameterTypes</name>.
                            <name>length</name>
                        </name>
                    </expr>
                    ;
                </condition>
                <incr>
                    <expr><name>i</name>++
                    </expr>
                </incr>
                )
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>add</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>Parameter</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>TypeToken</name>.
                                                                    <name>of</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>
                                                                                <name>parameterTypes</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>
                                                                <name>annotations</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </for>
            <return>return
                <expr>
                    <call>
                        <name><name>builder</name>.
                            <name>build</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/** Returns all declared exception types of this {@code Invokable}. */</comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>final</specifier>
            <name>
                <name>ImmutableList</name>
                <argument_list>&lt;
                    <argument>
                        <name>
                            <name>TypeToken</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>Throwable</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>getExceptionTypes</name>
        <parameter_list>()</parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name><name>ImmutableList</name>.
                            <name>
                                <name>Builder</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>
                                            <name>TypeToken</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>Throwable</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </name>
                    </type>
                    <name>builder</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>ImmutableList</name>.
                                    <name>builder</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <for>for (
                <init>
                    <decl>
                        <type>
                            <name>Type</name>
                        </type>
                        <name>type</name> :
                        <range>
                            <expr>
                                <call>
                                    <name>getGenericExceptionTypes</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </range>
                    </decl>
                </init>
                )
                <block>{
                    <comment type="line">// getGenericExceptionTypes() will never return a type that's not exception
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>SuppressWarnings</name>
                                    <argument_list>("unchecked")</argument_list>
                                </annotation>
                                <name>
                                    <name>TypeToken</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>Throwable</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>exceptionType</name> =
                            <init>
                                <expr>(
                                    <name>
                                        <name>TypeToken</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                                <extends>extends
                                                    <name>Throwable</name>
                                                </extends>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    )
                                    <call>
                                        <name><name>TypeToken</name>.
                                            <name>of</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>type</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>add</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>exceptionType</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </for>
            <return>return
                <expr>
                    <call>
                        <name><name>builder</name>.
                            <name>build</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Explicitly specifies the return type of this {@code Invokable}. For example:
        * &lt;pre&gt; {@code
        * Method factoryMethod = Person.class.getMethod("create");
        * Invokable&lt;?, Person&gt; factory = Invokable.of(getNameMethod).returning(Person.class);}&lt;/pre&gt;
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>final</specifier>
            <argument_list>&lt;
                <argument>
                    <name>R1</name>
                    <extends>extends
                        <name>R</name>
                    </extends>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Invokable</name>
                <argument_list>&lt;
                    <argument>
                        <name>T</name>
                    </argument>
                    ,
                    <argument>
                        <name>R1</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>returning</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Class</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>R1</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>returnType</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name>returning</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>TypeToken</name>.
                                            <name>of</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>returnType</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/** Explicitly specifies the return type of this {@code Invokable}. */</comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>final</specifier>
            <argument_list>&lt;
                <argument>
                    <name>R1</name>
                    <extends>extends
                        <name>R</name>
                    </extends>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Invokable</name>
                <argument_list>&lt;
                    <argument>
                        <name>T</name>
                    </argument>
                    ,
                    <argument>
                        <name>R1</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>returning</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>TypeToken</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>R1</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>returnType</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>!
                        <call>
                            <name><name>returnType</name>.
                                <name>isSupertypeOf</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <call>
                                            <name>getReturnType</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <throw>throw
                            <expr>new
                                <call>
                                    <name>IllegalArgumentException</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"Invokable is known to return " +
                                                <call>
                                                    <name>getReturnType</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                + ", not " +
                                                <name>returnType</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </throw>
                        }
                    </block>
                </then>
            </if>
            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>SuppressWarnings</name>
                            <argument_list>("unchecked")</argument_list>
                        </annotation>
                        <comment type="line">// guarded by previous check</comment>
                        <name>
                            <name>Invokable</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>T</name>
                                </argument>
                                ,
                                <argument>
                                    <name>R1</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>specialized</name> =
                    <init>
                        <expr>(
                            <name>
                                <name>Invokable</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>T</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>R1</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            )
                            <name>this</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <return>return
                <expr>
                    <name>specialized</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>SuppressWarnings</name>
                <argument_list>("unchecked")</argument_list>
            </annotation>
            <comment type="line">// The declaring class is T's raw class, or one of its supertypes.</comment>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>final</specifier>
            <name>
                <name>Class</name>
                <argument_list>&lt;
                    <argument>
                        <name>?</name>
                        <super>super
                            <name>T</name>
                        </super>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>getDeclaringClass</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>(
                    <name>
                        <name>Class</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                                <super>super
                                    <name>T</name>
                                </super>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    )
                    <call>
                        <name><name>super</name>.
                            <name>getDeclaringClass</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/** Returns the type of {@code T}. */</comment>
    <comment type="line">// Overridden in TypeToken#method() and TypeToken#constructor()</comment>
    <function>
        <type>
            <annotation>@
                <name>SuppressWarnings</name>
                <argument_list>("unchecked")</argument_list>
            </annotation>
            <comment type="line">// The declaring class is T.</comment>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>
                <name>TypeToken</name>
                <argument_list>&lt;
                    <argument>
                        <name>T</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>getOwnerType</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>(
                    <name>
                        <name>TypeToken</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    )
                    <call>
                        <name><name>TypeToken</name>.
                            <name>of</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>getDeclaringClass</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function_decl>
        <type>
            <specifier>abstract</specifier>
            <name>Object</name>
        </type>
        <name>invokeInternal</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>Object</name>
                    </type>
                    <name>receiver</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Object</name>
                            <index>[]</index>
                        </name>
                    </type>
                    <name>args</name>
                </decl>
            </param>
            )
        </parameter_list>
        <throws>throws
            <argument>
                <expr>
                    <name>InvocationTargetException</name>
                </expr>
            </argument>
            ,
            <argument>
                <expr>
                    <name>IllegalAccessException</name>
                </expr>
            </argument>
        </throws>
        ;
    </function_decl>

    <function_decl>
        <type>
            <specifier>abstract</specifier>
            <name>Type</name>
            <index>[]</index>
        </type>
        <name>getGenericParameterTypes</name>
        <parameter_list>()</parameter_list>;
    </function_decl>

    <comment type="javadoc">/** This should never return a type that's not a subtype of Throwable. */</comment>
    <function_decl>
        <type>
            <specifier>abstract</specifier>
            <name>Type</name>
            <index>[]</index>
        </type>
        <name>getGenericExceptionTypes</name>
        <parameter_list>()</parameter_list>;
    </function_decl>

    <function_decl>
        <type>
            <specifier>abstract</specifier>
            <name>Annotation</name>
            <index>[]</index>
            <index>[]</index>
        </type>
        <name>getParameterAnnotations</name>
        <parameter_list>()</parameter_list>;
    </function_decl>

    <function_decl>
        <type>
            <specifier>abstract</specifier>
            <name>Type</name>
        </type>
        <name>getGenericReturnType</name>
        <parameter_list>()</parameter_list>;
    </function_decl>

    <class>
        <specifier>static</specifier>
        class
        <name>
            <name>MethodInvokable</name>
            <argument_list>&lt;
                <argument>
                    <name>T</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>Invokable</name>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        ,
                        <argument>
                            <name>Object</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>Method</name>
                    </type>
                    <name>method</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>MethodInvokable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Method</name>
                            </type>
                            <name>method</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>method</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>method</name>
                            </name>
                            =
                            <name>method</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>final</specifier>
                    <name>Object</name>
                </type>
                <name>invokeInternal</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>receiver</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>args</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>InvocationTargetException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IllegalAccessException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>method</name>.
                                    <name>invoke</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>receiver</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>args</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>Type</name>
                </type>
                <name>getGenericReturnType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>method</name>.
                                    <name>getGenericReturnType</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>Type</name>
                    <index>[]</index>
                </type>
                <name>getGenericParameterTypes</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>method</name>.
                                    <name>getGenericParameterTypes</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>Type</name>
                    <index>[]</index>
                </type>
                <name>getGenericExceptionTypes</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>method</name>.
                                    <name>getGenericExceptionTypes</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>final</specifier>
                    <name>Annotation</name>
                    <index>[]</index>
                    <index>[]</index>
                </type>
                <name>getParameterAnnotations</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>method</name>.
                                    <name>getParameterAnnotations</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>
                        <name>TypeVariable</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    <index>[]</index>
                </type>
                <name>getTypeParameters</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>method</name>.
                                    <name>getTypeParameters</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>isOverridable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>!(
                            <call>
                                <name>isFinal</name>
                                <argument_list>()</argument_list>
                            </call>
                            ||
                            <call>
                                <name>isPrivate</name>
                                <argument_list>()</argument_list>
                            </call>
                            ||
                            <call>
                                <name>isStatic</name>
                                <argument_list>()</argument_list>
                            </call>
                            ||
                            <call>
                                <name><name>Modifier</name>.
                                    <name>isFinal</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getDeclaringClass</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>getModifiers</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            )
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>isVarArgs</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>method</name>.
                                    <name>isVarArgs</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <specifier>static</specifier>
        class
        <name>
            <name>ConstructorInvokable</name>
            <argument_list>&lt;
                <argument>
                    <name>T</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>Invokable</name>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        ,
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Constructor</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>constructor</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>ConstructorInvokable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Constructor</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>constructor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>constructor</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>constructor</name>
                            </name>
                            =
                            <name>constructor</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>final</specifier>
                    <name>Object</name>
                </type>
                <name>invokeInternal</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>receiver</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>args</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>InvocationTargetException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>IllegalAccessException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <try>try
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>constructor</name>.
                                            <name>newInstance</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>args</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>InstantiationException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>RuntimeException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>constructor</name>
                                                        + " failed."
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/** If the class is parameterized, such as ArrayList, this returns ArrayList&lt;E&gt;.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>Type</name>
                </type>
                <name>getGenericReturnType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>declaringClass</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getDeclaringClass</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>TypeVariable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <index>[]</index>
                            </type>
                            <name>typeParams</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>declaringClass</name>.
                                            <name>getTypeParameters</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>typeParams</name>.
                                    <name>length</name>
                                </name>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>Types</name>.
                                                <name>newParameterizedType</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>declaringClass</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>typeParams</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>
                                        <name>declaringClass</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>Type</name>
                    <index>[]</index>
                </type>
                <name>getGenericParameterTypes</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Type</name>
                                <index>[]</index>
                            </type>
                            <name>types</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>constructor</name>.
                                            <name>getGenericParameterTypes</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>types</name>.
                                    <name>length</name>
                                </name>
                                &gt; 0 &amp;&amp;
                                <call>
                                    <name>mayNeedHiddenThis</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>Class</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>?</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                            <index>[]</index>
                                        </type>
                                        <name>rawParamTypes</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>constructor</name>.
                                                        <name>getParameterTypes</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>types</name>.
                                                <name>length</name>
                                            </name>
                                            ==
                                            <name><name>rawParamTypes</name>.
                                                <name>length</name>
                                            </name>
                                            &amp;&amp;
                                            <name>
                                                <name>rawParamTypes</name>
                                                <index>[<expr>0</expr>]
                                                </index>
                                            </name>
                                            ==
                                            <call>
                                                <name>getDeclaringClass</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>getEnclosingClass</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// first parameter is the hidden 'this'</comment>
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>Arrays</name>.
                                                            <name>copyOfRange</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>types</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>1</expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name><name>types</name>.
                                                                        <name>length</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>types</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>Type</name>
                    <index>[]</index>
                </type>
                <name>getGenericExceptionTypes</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>constructor</name>.
                                    <name>getGenericExceptionTypes</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>final</specifier>
                    <name>Annotation</name>
                    <index>[]</index>
                    <index>[]</index>
                </type>
                <name>getParameterAnnotations</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>constructor</name>.
                                    <name>getParameterAnnotations</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * {@inheritDoc}
                *
                * {@code [&lt;E&gt;]} will be returned for ArrayList's constructor. When both the class and the
                * constructor have type parameters, the class parameters are prepended before those of the
                * constructor's. This is an arbitrary rule since no existing language spec mandates one way or
                * the other. From the declaration syntax, the class type parameter appears first, but the
                * call syntax may show up in opposite order such as {@code new &lt;A&gt;Foo&lt;B&gt;()}.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>
                        <name>TypeVariable</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    <index>[]</index>
                </type>
                <name>getTypeParameters</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>TypeVariable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <index>[]</index>
                            </type>
                            <name>declaredByClass</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getDeclaringClass</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>getTypeParameters</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>TypeVariable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <index>[]</index>
                            </type>
                            <name>declaredByConstructor</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>constructor</name>.
                                            <name>getTypeParameters</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>TypeVariable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>
                                            <name>TypeVariable</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <index>[
                                            <expr>
                                                <name><name>declaredByClass</name>.
                                                    <name>length</name>
                                                </name>
                                                +
                                                <name><name>declaredByConstructor</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>declaredByClass</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>result</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>declaredByClass</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>System</name>.
                                    <name>arraycopy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>declaredByConstructor</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>result</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>declaredByClass</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>declaredByConstructor</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>isOverridable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>boolean</name>
                </type>
                <name>isVarArgs</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>constructor</name>.
                                    <name>isVarArgs</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>boolean</name>
                </type>
                <name>mayNeedHiddenThis</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>declaringClass</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>constructor</name>.
                                            <name>getDeclaringClass</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>declaringClass</name>.
                                        <name>getEnclosingConstructor</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// Enclosed in a constructor, needs hidden this</comment>
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Method</name>
                            </type>
                            <name>enclosingMethod</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>declaringClass</name>.
                                            <name>getEnclosingMethod</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>enclosingMethod</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// Enclosed in a method, if it's not static, must need hidden
                                    this.
                                </comment>
                                <return>return
                                    <expr>!
                                        <call>
                                            <name><name>Modifier</name>.
                                                <name>isStatic</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>enclosingMethod</name>.
                                                                <name>getModifiers</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <comment type="line">// Strictly, this doesn't necessarily indicate a hidden 'this' in
                                    the case of
                                </comment>
                                <comment type="line">// static initializer. But there seems no way to tell in that case.
                                    :(
                                </comment>
                                <comment type="line">// This may cause issues when an anonymous class is created inside
                                    a static initializer,
                                </comment>
                                <comment type="line">// and the class's constructor's first parameter happens to be the
                                    enclosing class.
                                </comment>
                                <comment type="line">// In such case, we may mistakenly think that the class is within a
                                    non-static context
                                </comment>
                                <comment type="line">// and the first parameter is the hidden 'this'.</comment>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>declaringClass</name>.
                                                <name>getEnclosingClass</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        !=
                                        <name>null</name>
                                        &amp;&amp; !
                                        <call>
                                            <name><name>Modifier</name>.
                                                <name>isStatic</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>declaringClass</name>.
                                                                <name>getModifiers</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>
            }
        </block>
    </class>
    }
</unit>
