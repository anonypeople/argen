<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\util\concurrent\JdkFutureAdapters.java">
    <comment type="block">/*
        * Copyright (C) 2009 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.
            <name>concurrent</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.<name>concurrent</name>.<name>
            Uninterruptibles</name>.
            <name>getUninterruptibly</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>Executor</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>Executors</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>Future</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ThreadFactory</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.
            <name>AtomicBoolean</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Utilities necessary for working with libraries that supply plain {@link
        * Future} instances. Note that, whenver possible, it is strongly preferred to
        * modify those libraries to return {@code ListenableFuture} directly.
        *
        * @author Sven Mawson
        * @since 10.0 (replacing {@code Futures.makeListenable}, which
        * existed in 1.0)
        */
    </comment>
    <class>
        <annotation>@
            <name>Beta</name>
        </annotation>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>JdkFutureAdapters</name>
        <block>{
            <comment type="javadoc">/**
                * Assigns a thread to the given {@link Future} to provide {@link
                * ListenableFuture} functionality.
                *
                * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; If the input future does not already implement {@code
                * ListenableFuture}, the returned future will emulate {@link
                * ListenableFuture#addListener} by taking a thread from an internal,
                * unbounded pool at the first call to {@code addListener} and holding it
                * until the future is {@linkplain Future#isDone() done}.
                *
                * &lt;p&gt;Prefer to create {@code ListenableFuture} instances with {@link
                * SettableFuture}, {@link MoreExecutors#listeningDecorator(
                * java.util.concurrent.ExecutorService)}, {@link ListenableFutureTask},
                * {@link AbstractFuture}, and other utilities over creating plain {@code
                * Future} instances to be upgraded to {@code ListenableFuture} after the
                * fact.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>listenInPoolThread</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Future</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>future</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>future</name>
                                <name>instanceof</name>
                                <name>ListenableFuture</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>(
                                        <name>
                                            <name>ListenableFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        )
                                        <name>future</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>ListenableFutureAdapter</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>future</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Submits a blocking task for the given {@link Future} to provide {@link
                * ListenableFuture} functionality.
                *
                * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; If the input future does not already implement {@code
                * ListenableFuture}, the returned future will emulate {@link
                * ListenableFuture#addListener} by submitting a task to the given executor at
                * the first call to {@code addListener}. The task must be started by the
                * executor promptly, or else the returned {@code ListenableFuture} may fail
                * to work. The task's execution consists of blocking until the input future
                * is {@linkplain Future#isDone() done}, so each call to this method may
                * claim and hold a thread for an arbitrary length of time. Use of bounded
                * executors or other executors that may fail to execute a task promptly may
                * result in deadlocks.
                *
                * &lt;p&gt;Prefer to create {@code ListenableFuture} instances with {@link
                * SettableFuture}, {@link MoreExecutors#listeningDecorator(
                * java.util.concurrent.ExecutorService)}, {@link ListenableFutureTask},
                * {@link AbstractFuture}, and other utilities over creating plain {@code
                * Future} instances to be upgraded to {@code ListenableFuture} after the
                * fact.
                *
                * @since 12.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>listenInPoolThread</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Future</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>future</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Executor</name>
                            </type>
                            <name>executor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>executor</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>future</name>
                                <name>instanceof</name>
                                <name>ListenableFuture</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>(
                                        <name>
                                            <name>ListenableFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        )
                                        <name>future</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>ListenableFutureAdapter</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>future</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>executor</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * An adapter to turn a {@link Future} into a {@link ListenableFuture}. This
                * will wait on the future to finish, and when it completes, run the
                * listeners. This implementation will wait on the source future
                * indefinitely, so if the source future never completes, the adapter will
                * never complete either.
                *
                * &lt;p&gt;If the delegate future is interrupted or throws an unexpected unchecked
                * exception, the listeners will not be invoked.
                */
            </comment>
            <class>
                <specifier>private</specifier>
                <specifier>static</specifier> class
                <name>
                    <name>ListenableFutureAdapter</name>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <super>
                    <extends>extends
                        <name>
                            <name>ForwardingFuture</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                    <implements>implements
                        <name>
                            <name>ListenableFuture</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </implements>
                </super>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>ThreadFactory</name>
                            </type>
                            <name>threadFactory</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ThreadFactoryBuilder</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>setDaemon</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>true</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>setNameFormat</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"ListenableFutureAdapter-thread-%d"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>build</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>Executor</name>
                            </type>
                            <name>defaultAdapterExecutor</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Executors</name>.
                                            <name>newCachedThreadPool</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>threadFactory</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>Executor</name>
                            </type>
                            <name>adapterExecutor</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// The execution list to hold our listeners.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>ExecutionList</name>
                            </type>
                            <name>executionList</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ExecutionList</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// This allows us to only start up a thread waiting on the delegate future
                    </comment>
                    <comment type="line">// when the first listener is added.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>AtomicBoolean</name>
                            </type>
                            <name>hasListeners</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>AtomicBoolean</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>false</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// The delegate future.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>
                                    <name>Future</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>delegate</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>ListenableFutureAdapter</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Future</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>delegate</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>this</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>delegate</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>defaultAdapterExecutor</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <constructor>
                        <name>ListenableFutureAdapter</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Future</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>delegate</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Executor</name>
                                    </type>
                                    <name>adapterExecutor</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>delegate</name>
                                    </name>
                                    =
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>delegate</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>adapterExecutor</name>
                                    </name>
                                    =
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>adapterExecutor</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>protected</specifier>
                            <name>
                                <name>Future</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>delegate</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>delegate</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>addListener</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Runnable</name>
                                    </type>
                                    <name>listener</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Executor</name>
                                    </type>
                                    <name>exec</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>executionList</name>.
                                            <name>add</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>listener</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>exec</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">// When a listener is first added, we run a task that will wait for
                            </comment>
                            <comment type="line">// the delegate to finish, and when it is done will run the
                                listeners.
                            </comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>hasListeners</name>.
                                                <name>compareAndSet</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>false</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>true</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>delegate</name>.
                                                            <name>isDone</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">// If the delegate is already done, run the
                                                        execution list
                                                    </comment>
                                                    <comment type="line">// immediately on the current thread.</comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>executionList</name>.
                                                                    <name>execute</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <return>return;</return>
                                                    }
                                                </block>
                                            </then>
                                        </if>

                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>adapterExecutor</name>.
                                                        <name>execute</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>new
                                                                <class>
                                                                    <super>
                                                                        <name>Runnable</name>
                                                                    </super>
                                                                    <argument_list>()</argument_list>
                                                                    <block>{
                                                                        <function>
                                                                            <type>
                                                                                <annotation>@
                                                                                    <name>Override</name>
                                                                                </annotation>
                                                                                <specifier>public</specifier>
                                                                                <name>void</name>
                                                                            </type>
                                                                            <name>run</name>
                                                                            <parameter_list>()</parameter_list>
                                                                            <block>{
                                                                                <try>try
                                                                                    <block>{
                                                                                        <comment type="block">/*
                                                                                            * Threads from our private
                                                                                            pool are never interrupted.
                                                                                            Threads
                                                                                            * from a user-supplied
                                                                                            executor might be, but...
                                                                                            what can we do?
                                                                                            * This is another reason to
                                                                                            return a proper
                                                                                            ListenableFuture
                                                                                            * instead of using
                                                                                            listenInPoolThread.
                                                                                            */
                                                                                        </comment>
                                                                                        <expr_stmt>
                                                                                            <expr>
                                                                                                <call>
                                                                                                    <name>
                                                                                                        getUninterruptibly
                                                                                                    </name>
                                                                                                    <argument_list>(
                                                                                                        <argument>
                                                                                                            <expr>
                                                                                                                <name>
                                                                                                                    delegate
                                                                                                                </name>
                                                                                                            </expr>
                                                                                                        </argument>
                                                                                                        )
                                                                                                    </argument_list>
                                                                                                </call>
                                                                                            </expr>
                                                                                            ;
                                                                                        </expr_stmt>
                                                                                        }
                                                                                    </block>
                                                                                    <catch>catch (
                                                                                        <param>
                                                                                            <decl>
                                                                                                <type>
                                                                                                    <name>Error</name>
                                                                                                </type>
                                                                                                <name>e</name>
                                                                                            </decl>
                                                                                        </param>
                                                                                        )
                                                                                        <block>{
                                                                                            <throw>throw
                                                                                                <expr>
                                                                                                    <name>e</name>
                                                                                                </expr>
                                                                                                ;
                                                                                            </throw>
                                                                                            }
                                                                                        </block>
                                                                                    </catch>
                                                                                    <catch>catch (
                                                                                        <param>
                                                                                            <decl>
                                                                                                <type>
                                                                                                    <name>Throwable
                                                                                                    </name>
                                                                                                </type>
                                                                                                <name>e</name>
                                                                                            </decl>
                                                                                        </param>
                                                                                        )
                                                                                        <block>{
                                                                                            <comment type="line">//
                                                                                                ExecutionException /
                                                                                                CancellationException /
                                                                                                RuntimeException
                                                                                            </comment>
                                                                                            <comment type="line">// The
                                                                                                task is done, run the
                                                                                                listeners.
                                                                                            </comment>
                                                                                            }
                                                                                        </block>
                                                                                    </catch>
                                                                                </try>
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name><name>
                                                                                                executionList</name>.
                                                                                                <name>execute</name>
                                                                                            </name>
                                                                                            <argument_list>()
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                }
                                                                            </block>
                                                                        </function>
                                                                        }
                                                                    </block>
                                                                </class>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <constructor>
                <specifier>private</specifier>
                <name>JdkFutureAdapters</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>
            }
        </block>
    </class>
</unit>
