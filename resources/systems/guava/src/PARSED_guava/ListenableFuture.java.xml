<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\util\concurrent\ListenableFuture.java">
    <comment type="block">/*
        * Copyright (C) 2007 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.
            <name>concurrent</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>Executor</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ExecutorService</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>Future</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>FutureTask</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>RejectedExecutionException</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A {@link Future} that accepts completion listeners. Each listener has an
        * associated executor, and it is invoked using this executor once the future's
        * computation is {@linkplain Future#isDone() complete}. If the computation has
        * already completed when the listener is added, the listener will execute
        * immediately.
        *
        * &lt;p&gt;See the Guava User Guide article on &lt;a href=
        * "https://github.com/google/guava/wiki/ListenableFutureExplained"&gt;
        * {@code ListenableFuture}&lt;/a&gt;.
        *
        * &lt;h3&gt;Purpose&lt;/h3&gt;
        *
        * &lt;p&gt;Most commonly, {@code ListenableFuture} is used as an input to another
        * derived {@code Future}, as in {@link Futures#allAsList(Iterable)
        * Futures.allAsList}. Many such methods are impossible to implement efficiently
        * without listener support.
        *
        * &lt;p&gt;It is possible to call {@link #addListener addListener} directly, but this
        * is uncommon because the {@code Runnable} interface does not provide direct
        * access to the {@code Future} result. (Users who want such access may prefer
        * {@link Futures#addCallback Futures.addCallback}.) Still, direct {@code
        * addListener} calls are occasionally useful:&lt;pre&gt; {@code
        * final String name = ...;
        * inFlight.add(name);
        * ListenableFuture&lt;Result&gt; future = service.query(name);
        * future.addListener(new Runnable() {
        * public void run() {
        * processedCount.incrementAndGet();
        * inFlight.remove(name);
        * lastProcessed.set(name);
        * logger.info("Done with {0}", name);
        * }
        * }, executor);}&lt;/pre&gt;
        *
        * &lt;h3&gt;How to get an instance&lt;/h3&gt;
        *
        * &lt;p&gt;Developers are encouraged to return {@code ListenableFuture} from their
        * methods so that users can take advantages of the {@linkplain Futures
        * utilities built atop the class}. The way that they will create {@code
        * ListenableFuture} instances depends on how they currently create {@code
        * Future} instances:
        * &lt;ul&gt;
        * &lt;li&gt;If they are returned from an {@code ExecutorService}, convert that
        * service to a {@link ListeningExecutorService}, usually by calling {@link
        * MoreExecutors#listeningDecorator(ExecutorService)
        * MoreExecutors.listeningDecorator}. (Custom executors may find it more
        * convenient to use {@link ListenableFutureTask} directly.)
        * &lt;li&gt;If they are manually filled in by a call to {@link FutureTask#set} or a
        * similar method, create a {@link SettableFuture} instead. (Users with more
        * complex needs may prefer {@link AbstractFuture}.)
        * &lt;/ul&gt;
        *
        * &lt;p&gt;Occasionally, an API will return a plain {@code Future} and it will be
        * impossible to change the return type. For this case, we provide a more
        * expensive workaround in {@code JdkFutureAdapters}. However, when possible, it
        * is more efficient and reliable to create a {@code ListenableFuture} directly.
        *
        * @author Sven Mawson
        * @author Nishant Thakkar
        * @since 1.0
        */
    </comment>
    <class type="interface">
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        interface
        <name>
            <name>ListenableFuture</name>
            <argument_list>&lt;
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>Future</name>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <comment type="javadoc">/**
                * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on
                * the given executor. The listener will run when the {@code Future}'s
                * computation is {@linkplain Future#isDone() complete} or, if the computation
                * is already complete, immediately.
                *
                * &lt;p&gt;There is no guaranteed ordering of execution of listeners, but any
                * listener added through this method is guaranteed to be called once the
                * computation is complete.
                *
                * &lt;p&gt;Exceptions thrown by a listener will be propagated up to the executor.
                * Any exception thrown during {@code Executor.execute} (e.g., a {@code
                * RejectedExecutionException} or an exception thrown by {@linkplain
                * MoreExecutors#directExecutor direct execution}) will be caught and
                * logged.
                *
                * &lt;p&gt;Note: For fast, lightweight listeners that would be safe to execute in
                * any thread, consider {@link MoreExecutors#directExecutor}. Otherwise, avoid
                * it. Heavyweight {@code directExecutor} listeners can cause problems, and
                * these problems can be difficult to reproduce because they depend on timing.
                * For example:
                *
                * &lt;ul&gt;
                * &lt;li&gt;The listener may be executed by the caller of {@code addListener}. That
                * caller may be a UI thread or other latency-sensitive thread. This can harm
                * UI responsiveness.
                * &lt;li&gt;The listener may be executed by the thread that completes this {@code
                * Future}. That thread may be an internal system thread such as an RPC
                * network thread. Blocking that thread may stall progress of the whole
                * system. It may even cause a deadlock.
                * &lt;li&gt;The listener may delay other listeners, even listeners that are not
                * themselves {@code directExecutor} listeners.
                * &lt;/ul&gt;
                *
                * &lt;p&gt;This is the most general listener interface. For common operations
                * performed using listeners, see {@link Futures}. For a simplified but
                * general listener interface, see {@link Futures#addCallback addCallback()}.
                *
                * &lt;p&gt;Memory consistency effects: Actions in a thread prior to adding a listener
                * &lt;a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5"&gt;
                * &lt;i&gt;happen-before&lt;/i&gt;&lt;/a&gt; its execution begins, perhaps in another thread.
                *
                * @param listener the listener to run when the computation is complete
                * @param executor the executor to run the listener in
                * @throws NullPointerException if the executor or listener was null
                * @throws RejectedExecutionException if we tried to execute the listener
                * immediately but the executor rejected it.
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>addListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Runnable</name>
                            </type>
                            <name>listener</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Executor</name>
                            </type>
                            <name>executor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            }
        </block>
    </class>
</unit>
