<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\util\concurrent\ListeningExecutorService.java">
    <comment type="block">/*
        * Copyright (C) 2010 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.
            <name>concurrent</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collection</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>Callable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ExecutorService</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>Future</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>RejectedExecutionException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>TimeUnit</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * An {@link ExecutorService} that returns {@link ListenableFuture} instances. To create an instance
        * from an existing {@link ExecutorService}, call
        * {@link MoreExecutors#listeningDecorator(ExecutorService)}.
        *
        * @author Chris Povirk
        * @since 10.0
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>ListeningExecutorService</name>
        <super>
            <extends>extends
                <name>ExecutorService</name>
            </extends>
        </super>
        <block>{
            <comment type="javadoc">/**
                * @return a {@code ListenableFuture} representing pending completion of the task
                * @throws RejectedExecutionException {@inheritDoc}
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>
                            <name>Override</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>T</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </annotation>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>submit</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Callable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>task</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * @return a {@code ListenableFuture} representing pending completion of the task
                * @throws RejectedExecutionException {@inheritDoc}
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>submit</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Runnable</name>
                            </type>
                            <name>task</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * @return a {@code ListenableFuture} representing pending completion of the task
                * @throws RejectedExecutionException {@inheritDoc}
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>
                            <name>Override</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>T</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </annotation>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>submit</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Runnable</name>
                            </type>
                            <name>task</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>result</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * {@inheritDoc}
                *
                * &lt;p&gt;All elements in the returned list must be {@link ListenableFuture} instances. The easiest
                * way to obtain a {@code List&lt;ListenableFuture&lt;T&gt;&gt;} from this method is an unchecked (but
                safe)
                * cast:&lt;pre&gt;
                * {@code @SuppressWarnings("unchecked") // guaranteed by invokeAll contract}
                * {@code List&lt;ListenableFuture&lt;T&gt;&gt; futures = (List) executor.invokeAll(tasks);}
                * &lt;/pre&gt;
                *
                * @return A list of {@code ListenableFuture} instances representing the tasks, in the same
                * sequential order as produced by the iterator for the given task list, each of which has
                * completed.
                * @throws RejectedExecutionException {@inheritDoc}
                * @throws NullPointerException if any task is null
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>
                            <name>Override</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>T</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </annotation>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Future</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>invokeAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>
                                                    <name>Callable</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>T</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>tasks</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>InterruptedException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * {@inheritDoc}
                *
                * &lt;p&gt;All elements in the returned list must be {@link ListenableFuture} instances. The easiest
                * way to obtain a {@code List&lt;ListenableFuture&lt;T&gt;&gt;} from this method is an unchecked (but
                safe)
                * cast:&lt;pre&gt;
                * {@code @SuppressWarnings("unchecked") // guaranteed by invokeAll contract}
                * {@code List&lt;ListenableFuture&lt;T&gt;&gt; futures = (List) executor.invokeAll(tasks, timeout,
                unit);}
                * &lt;/pre&gt;
                *
                * @return a list of {@code ListenableFuture} instances representing the tasks, in the same
                * sequential order as produced by the iterator for the given task list. If the operation
                * did not time out, each task will have completed. If it did time out, some of these
                * tasks will not have completed.
                * @throws RejectedExecutionException {@inheritDoc}
                * @throws NullPointerException if any task is null
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>
                            <name>Override</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>T</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </annotation>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Future</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>invokeAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>
                                                    <name>Callable</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>T</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>tasks</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>timeout</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>TimeUnit</name>
                            </type>
                            <name>unit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>InterruptedException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>
            }
        </block>
    </class>
</unit>
