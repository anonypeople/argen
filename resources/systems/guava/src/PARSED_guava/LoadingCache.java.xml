<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\cache\LoadingCache.java">
    <comment type="block">/*
        * Copyright (C) 2011 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>cache</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Function</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.
            <name>ImmutableMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.<name>concurrent</name>.
            <name>ExecutionError</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.<name>concurrent</name>.
            <name>UncheckedExecutionException</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ConcurrentMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ExecutionException</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A semi-persistent mapping from keys to values. Values are automatically loaded by the cache,
        * and are stored in the cache until either evicted or manually invalidated.
        *
        * &lt;p&gt;Implementations of this interface are expected to be thread-safe, and can be safely accessed
        * by multiple concurrent threads.
        *
        * &lt;p&gt;When evaluated as a {@link Function}, a cache yields the same result as invoking
        * {@link #getUnchecked}.
        *
        * @author Charles Fry
        * @since 11.0
        */
    </comment>
    <class type="interface">
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        interface
        <name>
            <name>LoadingCache</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>Cache</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                ,
                <name>
                    <name>Function</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Returns the value associated with {@code key} in this cache, first loading that value if
                * necessary. No observable state associated with this cache is modified until loading completes.
                *
                * &lt;p&gt;If another call to {@link #get} or {@link #getUnchecked} is currently loading the value for
                * {@code key}, simply waits for that thread to finish and returns its loaded value. Note that
                * multiple threads can concurrently load values for distinct keys.
                *
                * &lt;p&gt;Caches loaded by a {@link CacheLoader} will call {@link CacheLoader#load} to load new values
                * into the cache. Newly loaded values are added to the cache using
                * {@code Cache.asMap().putIfAbsent} after loading has completed; if another value was associated
                * with {@code key} while the new value was loading then a removal notification will be sent for
                * the new value.
                *
                * &lt;p&gt;If the cache loader associated with this cache is known not to throw checked
                * exceptions, then prefer {@link #getUnchecked} over this method.
                *
                * @throws ExecutionException if a checked exception was thrown while loading the value. ({@code
                * ExecutionException} is thrown &lt;a
                * href="https://github.com/google/guava/wiki/CachesExplained#interruption"&gt;even if
                * computation was interrupted by an {@code InterruptedException}&lt;/a&gt;.)
                * @throws UncheckedExecutionException if an unchecked exception was thrown while loading the
                * value
                * @throws ExecutionError if an error was thrown while loading the value
                */
            </comment>
            <function_decl>
                <type>
                    <name>V</name>
                </type>
                <name>get</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ExecutionException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the value associated with {@code key} in this cache, first loading that value if
                * necessary. No observable state associated with this cache is modified until loading
                * completes. Unlike {@link #get}, this method does not throw a checked exception, and thus should
                * only be used in situations where checked exceptions are not thrown by the cache loader.
                *
                * &lt;p&gt;If another call to {@link #get} or {@link #getUnchecked} is currently loading the value for
                * {@code key}, simply waits for that thread to finish and returns its loaded value. Note that
                * multiple threads can concurrently load values for distinct keys.
                *
                * &lt;p&gt;Caches loaded by a {@link CacheLoader} will call {@link CacheLoader#load} to load new values
                * into the cache. Newly loaded values are added to the cache using
                * {@code Cache.asMap().putIfAbsent} after loading has completed; if another value was associated
                * with {@code key} while the new value was loading then a removal notification will be sent for
                * the new value.
                *
                * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; this method silently converts checked exceptions to unchecked
                exceptions,
                * and should not be used with cache loaders which throw checked exceptions. In such cases use
                * {@link #get} instead.
                *
                * @throws UncheckedExecutionException if an exception was thrown while loading the value. (As
                * explained in the last paragraph above, this should be an unchecked exception only.)
                * @throws ExecutionError if an error was thrown while loading the value
                */
            </comment>
            <function_decl>
                <type>
                    <name>V</name>
                </type>
                <name>getUnchecked</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a map of the values associated with {@code keys}, creating or retrieving those values
                * if necessary. The returned map contains entries that were already cached, combined with newly
                * loaded entries; it will never contain null keys or values.
                *
                * &lt;p&gt;Caches loaded by a {@link CacheLoader} will issue a single request to
                * {@link CacheLoader#loadAll} for all keys which are not already present in the cache. All
                * entries returned by {@link CacheLoader#loadAll} will be stored in the cache, over-writing
                * any previously cached values. This method will throw an exception if
                * {@link CacheLoader#loadAll} returns {@code null}, returns a map containing null keys or values,
                * or fails to return an entry for each requested key.
                *
                * &lt;p&gt;Note that duplicate elements in {@code keys}, as determined by {@link Object#equals}, will
                * be ignored.
                *
                * @throws ExecutionException if a checked exception was thrown while loading the value. ({@code
                * ExecutionException} is thrown &lt;a
                * href="https://github.com/google/guava/wiki/CachesExplained#interruption"&gt;even if
                * computation was interrupted by an {@code InterruptedException}&lt;/a&gt;.)
                * @throws UncheckedExecutionException if an unchecked exception was thrown while loading the
                * values
                * @throws ExecutionError if an error was thrown while loading the values
                * @since 11.0
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>ImmutableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>K</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>keys</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ExecutionException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * @deprecated Provided to satisfy the {@code Function} interface; use {@link #get} or
                * {@link #getUnchecked} instead.
                * @throws UncheckedExecutionException if an exception was thrown while loading the value. (As
                * described in the documentation for {@link #getUnchecked}, {@code LoadingCache} should be
                * used as a {@code Function} only with cache loaders that throw only unchecked exceptions.)
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>V</name>
                </type>
                <name>apply</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Loads a new value for key {@code key}, possibly asynchronously. While the new value is loading
                * the previous value (if any) will continue to be returned by {@code get(key)} unless it is
                * evicted. If the new value is loaded successfully it will replace the previous value in the
                * cache; if an exception is thrown while refreshing the previous value will remain, &lt;i&gt;and the
                * exception will be logged (using {@link java.util.logging.Logger}) and swallowed&lt;/i&gt;.
                *
                * &lt;p&gt;Caches loaded by a {@link CacheLoader} will call {@link CacheLoader#reload} if the
                * cache currently contains a value for {@code key}, and {@link CacheLoader#load} otherwise.
                * Loading is asynchronous only if {@link CacheLoader#reload} was overridden with an
                * asynchronous implementation.
                *
                * &lt;p&gt;Returns without doing anything if another thread is currently loading the value for
                * {@code key}. If the cache loader associated with this cache performs refresh asynchronously
                * then this method may return before refresh completes.
                *
                * @since 11.0
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>refresh</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * {@inheritDoc}
                *
                * &lt;p&gt;&lt;b&gt;Note that although the view &lt;i&gt;is&lt;/i&gt; modifiable, no method on the
                returned map will ever
                * cause entries to be automatically loaded.&lt;/b&gt;
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>ConcurrentMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>asMap</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            }
        </block>
    </class>
</unit>
