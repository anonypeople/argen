<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\cache\LongAddables.java">
    <comment type="block">/*
        * Copyright (C) 2012 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>cache</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Supplier</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.
            <name>AtomicLong</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Source of {@link LongAddable} objects that deals with GWT, Unsafe, and all
        * that.
        *
        * @author Louis Wasserman
        */
    </comment>
    <class>
        <annotation>@
            <name>GwtCompatible</name>
            <argument_list>(emulated = true)</argument_list>
        </annotation>
        <specifier>final</specifier>
        class <name>LongAddables</name>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>Supplier</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>LongAddable</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>SUPPLIER</name>
                </decl>
                ;
            </decl_stmt>

            static
            <block>{
                <decl_stmt>
                    <decl>
                        <type>
                            <name>
                                <name>Supplier</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>LongAddable</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>supplier</name>
                    </decl>
                    ;
                </decl_stmt>
                <try>try
                    <block>{
                        <expr_stmt>
                            <expr>new
                                <call>
                                    <name>LongAdder</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        <comment type="line">// trigger static initialization of the LongAdder class, which may fail
                        </comment>
                        <expr_stmt>
                            <expr>
                                <name>supplier</name>
                                = new
                                <class>
                                    <super>
                                        <name>
                                            <name>Supplier</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>LongAddable</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </super>
                                    <argument_list>()</argument_list>
                                    <block>{
                                        <function>
                                            <type>
                                                <annotation>@
                                                    <name>Override</name>
                                                </annotation>
                                                <specifier>public</specifier>
                                                <name>LongAddable</name>
                                            </type>
                                            <name>get</name>
                                            <parameter_list>()</parameter_list>
                                            <block>{
                                                <return>return
                                                    <expr>new
                                                        <call>
                                                            <name>LongAdder</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </function>
                                        }
                                    </block>
                                </class>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                    <catch>catch (
                        <param>
                            <decl>
                                <type>
                                    <name>Throwable</name>
                                </type>
                                <name>t</name>
                            </decl>
                        </param>
                        )
                        <block>{
                            <comment type="line">// we really want to catch *everything*</comment>
                            <expr_stmt>
                                <expr>
                                    <name>supplier</name>
                                    = new
                                    <class>
                                        <super>
                                            <name>
                                                <name>Supplier</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>LongAddable</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </super>
                                        <argument_list>()</argument_list>
                                        <block>{
                                            <function>
                                                <type>
                                                    <annotation>@
                                                        <name>Override</name>
                                                    </annotation>
                                                    <specifier>public</specifier>
                                                    <name>LongAddable</name>
                                                </type>
                                                <name>get</name>
                                                <parameter_list>()</parameter_list>
                                                <block>{
                                                    <return>return
                                                        <expr>new
                                                            <call>
                                                                <name>PureJavaLongAddable</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </function>
                                            }
                                        </block>
                                    </class>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </catch>
                </try>
                <expr_stmt>
                    <expr>
                        <name>SUPPLIER</name>
                        =
                        <name>supplier</name>
                    </expr>
                    ;
                </expr_stmt>
                }
            </block>

            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>LongAddable</name>
                </type>
                <name>create</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>SUPPLIER</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <class>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>PureJavaLongAddable</name>
                <super>
                    <extends>extends
                        <name>AtomicLong</name>
                    </extends>
                    <implements>implements
                        <name>LongAddable</name>
                    </implements>
                </super>
                <block>{
                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>increment</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>getAndIncrement</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>add</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>x</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>getAndAdd</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>x</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>long</name>
                        </type>
                        <name>sum</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name>get</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>
            }
        </block>
    </class>
</unit>
