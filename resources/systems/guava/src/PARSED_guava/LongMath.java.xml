<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\math\LongMath.java">
    <comment type="block">/*
        * Copyright (C) 2011 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>math</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkArgument</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>math</name>.<name>MathPreconditions</name>.
            <name>checkNoOverflow</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>math</name>.<name>MathPreconditions</name>.
            <name>checkNonNegative</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>math</name>.<name>MathPreconditions</name>.
            <name>checkPositive</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>math</name>.<name>MathPreconditions</name>.
            <name>checkRoundingUnnecessary</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>lang</name>.<name>Math</name>.
            <name>abs</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>lang</name>.<name>Math</name>.
            <name>min</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>math</name>.<name>RoundingMode</name>.
            <name>HALF_EVEN</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>math</name>.<name>RoundingMode</name>.
            <name>HALF_UP</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtIncompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>VisibleForTesting</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>primitives</name>.
            <name>UnsignedLongs</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>math</name>.
            <name>BigInteger</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>math</name>.
            <name>RoundingMode</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A class for arithmetic on values of type {@code long}. Where possible, methods are defined and
        * named analogously to their {@code BigInteger} counterparts.
        *
        * &lt;p&gt;The implementations of many methods in this class are based on material from Henry S. Warren,
        * Jr.'s &lt;i&gt;Hacker's Delight&lt;/i&gt;, (Addison Wesley, 2002).
        *
        * &lt;p&gt;Similar functionality for {@code int} and for {@link BigInteger} can be found in
        * {@link IntMath} and {@link BigIntegerMath} respectively. For other common operations on
        * {@code long} values, see {@link com.google.common.primitives.Longs}.
        *
        * @author Louis Wasserman
        * @since 11.0
        */
    </comment>
    <class>
        <annotation>@
            <name>GwtCompatible</name>
            <argument_list>(emulated = true)</argument_list>
        </annotation>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>LongMath</name>
        <block>{
            <comment type="line">// NOTE: Whenever both tests are cheap and functional, it's faster to use &amp;, |
                instead of &amp;&amp;, ||
            </comment>

            <comment type="javadoc">/**
                * Returns {@code true} if {@code x} represents a power of two.
                *
                * &lt;p&gt;This differs from {@code Long.bitCount(x) == 1}, because
                * {@code Long.bitCount(Long.MIN_VALUE) == 1}, but {@link Long#MIN_VALUE} is not a power of two.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isPowerOfTwo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>x</name>
                            &gt; 0 &amp; (<name>x</name> &amp; (<name>x</name> - 1)) == 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns 1 if {@code x &lt; y} as unsigned longs, and 0 otherwise. Assumes that x - y fits into a
                * signed long. The implementation is branch-free, and benchmarks suggest it is measurably
                * faster than the straightforward ternary expression.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>VisibleForTesting</name>
                    </annotation>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>lessThanBranchFree</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>y</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Returns the sign bit of x - y.</comment>
                    <return>return
                        <expr>
                            <call>(<name>int</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>~~(<name>x</name> - <name>y</name>) &gt;&gt;&gt; (
                                            <name><name>Long</name>.
                                                <name>SIZE</name>
                                            </name>
                                            - 1)
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode.
                *
                * @throws IllegalArgumentException if {@code x &lt;= 0}
                * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
                * is not a power of two
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("fallthrough")</argument_list>
                    </annotation>
                    <comment type="line">// TODO(kevinb): remove after this warning is disabled globally</comment>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>log2</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>RoundingMode</name>
                            </type>
                            <name>mode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkPositive</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"x"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>x</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>mode</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name>UNNECESSARY</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>checkRoundingUnnecessary</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name>isPowerOfTwo</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>x</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// fall through</comment>
                            </case>
                            <case>case
                                <expr>
                                    <name>DOWN</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>FLOOR</name>
                                </expr>
                                :
                                <return>return
                                    <expr>(
                                        <name><name>Long</name>.
                                            <name>SIZE</name>
                                        </name>
                                        - 1) -
                                        <call>
                                            <name><name>Long</name>.
                                                <name>numberOfLeadingZeros</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>x</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>UP</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>CEILING</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <name><name>Long</name>.
                                            <name>SIZE</name>
                                        </name>
                                        -
                                        <call>
                                            <name><name>Long</name>.
                                                <name>numberOfLeadingZeros</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>x</name>
                                                        - 1
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_DOWN</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_UP</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_EVEN</name>
                                </expr>
                                :
                                <comment type="line">// Since sqrt(2) is irrational, log2(x) - logFloor cannot be
                                    exactly 0.5
                                </comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>leadingZeros</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>Long</name>.
                                                        <name>numberOfLeadingZeros</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>x</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>long</name>
                                        </type>
                                        <name>cmp</name> =
                                        <init>
                                            <expr>
                                                <name>MAX_POWER_OF_SQRT2_UNSIGNED</name>
                                                &gt;&gt;&gt;
                                                <name>leadingZeros</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <comment type="line">// floor(2^(logFloor + 0.5))</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>logFloor</name> =
                                        <init>
                                            <expr>(
                                                <name><name>Long</name>.
                                                    <name>SIZE</name>
                                                </name>
                                                - 1) -
                                                <name>leadingZeros</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <name>logFloor</name>
                                        +
                                        <call>
                                            <name>lessThanBranchFree</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>cmp</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>x</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>

                            </case>
                            <default>default:
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>AssertionError</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"impossible"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>

            <comment type="javadoc">/** The biggest half power of two that fits into an unsigned long */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>VisibleForTesting</name>
                        </annotation>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>MAX_POWER_OF_SQRT2_UNSIGNED</name> =
                    <init>
                        <expr>0xB504F333F9DE6484L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Returns the base-10 logarithm of {@code x}, rounded according to the specified rounding mode.
                *
                * @throws IllegalArgumentException if {@code x &lt;= 0}
                * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
                * is not a power of ten
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("fallthrough")</argument_list>
                    </annotation>
                    <comment type="line">// TODO(kevinb): remove after this warning is disabled globally</comment>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>log10</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>RoundingMode</name>
                            </type>
                            <name>mode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkPositive</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"x"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>x</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>logFloor</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>log10Floor</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>x</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>floorPow</name> =
                            <init>
                                <expr>
                                    <name>
                                        <name>powersOf10</name>
                                        <index>[
                                            <expr>
                                                <name>logFloor</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>mode</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name>UNNECESSARY</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>checkRoundingUnnecessary</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>x</name>
                                                        ==
                                                        <name>floorPow</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// fall through</comment>
                            </case>
                            <case>case
                                <expr>
                                    <name>FLOOR</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>DOWN</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <name>logFloor</name>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>CEILING</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>UP</name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <name>logFloor</name>
                                        +
                                        <call>
                                            <name>lessThanBranchFree</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>floorPow</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>x</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_DOWN</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_UP</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_EVEN</name>
                                </expr>
                                :
                                <comment type="line">// sqrt(10) is irrational, so log10(x)-logFloor is never exactly
                                    0.5
                                </comment>
                                <return>return
                                    <expr>
                                        <name>logFloor</name>
                                        +
                                        <call>
                                            <name>lessThanBranchFree</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>
                                                            <name>halfPowersOf10</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>logFloor</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>x</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <default>default:
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>AssertionError</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>log10Floor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="block">/*
                        * Based on Hacker's Delight Fig. 11-5, the two-table-lookup, branch-free implementation.
                        *
                        * The key idea is that based on the number of leading zeros (equivalently, floor(log2(x))),
                        * we can narrow the possible floor(log10(x)) values to two. For example, if floor(log2(x))
                        * is 6, then 64 &lt;= x &lt; 128, so floor(log10(x)) is either 1 or 2.
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>y</name> =
                            <init>
                                <expr>
                                    <name>
                                        <name>maxLog10ForLeadingZeros</name>
                                        <index>[
                                            <expr>
                                                <call>
                                                    <name><name>Long</name>.
                                                        <name>numberOfLeadingZeros</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>x</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="block">/*
                        * y is the higher of the two possible values of floor(log10(x)). If x &lt; 10^y, then we want
                        the
                        * lower of the two possible values, or y - 1, otherwise, we want y.
                        */
                    </comment>
                    <return>return
                        <expr>
                            <name>y</name>
                            -
                            <call>
                                <name>lessThanBranchFree</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>x</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>
                                                <name>powersOf10</name>
                                                <index>[
                                                    <expr>
                                                        <name>y</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// maxLog10ForLeadingZeros[i] == floor(log10(2^(Long.SIZE - i)))</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>VisibleForTesting</name>
                        </annotation>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                        <index>[]</index>
                    </type>
                    <name>maxLog10ForLeadingZeros</name> =
                    <init>
                        <expr>
                            <block>{
                                <expr>19</expr>, <expr>18</expr>, <expr>18</expr>, <expr>18</expr>, <expr>
                                    18</expr>, <expr>17</expr>, <expr>17</expr>, <expr>17</expr>, <expr>
                                    16</expr>, <expr>16</expr>, <expr>16</expr>, <expr>15</expr>, <expr>
                                    15</expr>, <expr>15</expr>, <expr>15</expr>, <expr>14</expr>, <expr>
                                    14</expr>, <expr>14</expr>, <expr>13</expr>, <expr>13</expr>, <expr>
                                    13</expr>, <expr>12</expr>, <expr>12</expr>,
                                <expr>12</expr>, <expr>12</expr>, <expr>11</expr>, <expr>11</expr>, <expr>
                                    11</expr>, <expr>10</expr>, <expr>10</expr>, <expr>10</expr>, <expr>9</expr>, <expr>
                                    9</expr>, <expr>9</expr>, <expr>9</expr>, <expr>8</expr>, <expr>8</expr>, <expr>
                                    8</expr>, <expr>7</expr>, <expr>7</expr>, <expr>7</expr>, <expr>6</expr>, <expr>
                                    6</expr>, <expr>6</expr>, <expr>6</expr>, <expr>5</expr>, <expr>5</expr>, <expr>
                                    5</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>,
                                <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>2</expr>, <expr>
                                    2</expr>, <expr>2</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>
                                    0</expr>, <expr>0</expr>, <expr>0</expr> }
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>GwtIncompatible</name>
                            <argument_list>("TODO")</argument_list>
                        </annotation>
                        <annotation>@
                            <name>VisibleForTesting</name>
                        </annotation>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                        <index>[]</index>
                    </type>
                    <name>powersOf10</name> =
                    <init>
                        <expr>
                            <block>{
                                <expr>1L</expr>,
                                <expr>10L</expr>,
                                <expr>100L</expr>,
                                <expr>1000L</expr>,
                                <expr>10000L</expr>,
                                <expr>100000L</expr>,
                                <expr>1000000L</expr>,
                                <expr>10000000L</expr>,
                                <expr>100000000L</expr>,
                                <expr>1000000000L</expr>,
                                <expr>10000000000L</expr>,
                                <expr>100000000000L</expr>,
                                <expr>1000000000000L</expr>,
                                <expr>10000000000000L</expr>,
                                <expr>100000000000000L</expr>,
                                <expr>1000000000000000L</expr>,
                                <expr>10000000000000000L</expr>,
                                <expr>100000000000000000L</expr>,
                                <expr>1000000000000000000L</expr>
                                }
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// halfPowersOf10[i] = largest long less than 10^(i + 0.5)</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>GwtIncompatible</name>
                            <argument_list>("TODO")</argument_list>
                        </annotation>
                        <annotation>@
                            <name>VisibleForTesting</name>
                        </annotation>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                        <index>[]</index>
                    </type>
                    <name>halfPowersOf10</name> =
                    <init>
                        <expr>
                            <block>{
                                <expr>3L</expr>,
                                <expr>31L</expr>,
                                <expr>316L</expr>,
                                <expr>3162L</expr>,
                                <expr>31622L</expr>,
                                <expr>316227L</expr>,
                                <expr>3162277L</expr>,
                                <expr>31622776L</expr>,
                                <expr>316227766L</expr>,
                                <expr>3162277660L</expr>,
                                <expr>31622776601L</expr>,
                                <expr>316227766016L</expr>,
                                <expr>3162277660168L</expr>,
                                <expr>31622776601683L</expr>,
                                <expr>316227766016837L</expr>,
                                <expr>3162277660168379L</expr>,
                                <expr>31622776601683793L</expr>,
                                <expr>316227766016837933L</expr>,
                                <expr>3162277660168379331L</expr>
                                }
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Returns {@code b} to the {@code k}th power. Even if the result overflows, it will be equal to
                * {@code BigInteger.valueOf(b).pow(k).longValue()}. This implementation runs in {@code O(log k)}
                * time.
                *
                * @throws IllegalArgumentException if {@code k &lt; 0}
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>pow</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>k</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNonNegative</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"exponent"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>k</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>-2 &lt;= <name>b</name> &amp;&amp; <name>b</name> &lt;= 2
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <switch>switch
                                    <condition>(
                                        <expr>(<name>int</name>)
                                            <name>b</name>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <case>case <expr>0</expr>:
                                            <return>return
                                                <expr>(<name>k</name> == 0) ? 1 : 0
                                                </expr>
                                                ;
                                            </return>
                                        </case>
                                        <case>case <expr>1</expr>:
                                            <return>return <expr>1</expr>;
                                            </return>
                                        </case>
                                        <case>case <expr>(-1)</expr>:
                                            <return>return
                                                <expr>((<name>k</name> &amp; 1) == 0) ? 1 : -1
                                                </expr>
                                                ;
                                            </return>
                                        </case>
                                        <case>case <expr>2</expr>:
                                            <return>return
                                                <expr>(<name>k</name> &lt;
                                                    <name><name>Long</name>.
                                                        <name>SIZE</name>
                                                    </name>
                                                    ) ? 1L &lt;&lt; <name>k</name> : 0
                                                </expr>
                                                ;
                                            </return>
                                        </case>
                                        <case>case <expr>(-2)</expr>:
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>k</name>
                                                        &lt;
                                                        <name><name>Long</name>.
                                                            <name>SIZE</name>
                                                        </name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return
                                                            <expr>((<name>k</name> &amp; 1) == 0) ? 1L &lt;&lt; <name>
                                                                k
                                                            </name> : -(1L &lt;&lt; <name>k</name>)
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <return>return <expr>0</expr>;
                                                        </return>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                        </case>
                                        <default>default:
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>AssertionError</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                        </default>
                                        }
                                    </block>
                                </switch>
                                }
                            </block>
                        </then>
                    </if>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>long</name>
                                </type>
                                <name>accum</name> =
                                <init>
                                    <expr>1</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>;</condition>
                        <incr>
                            <expr>
                                <name>k</name>
                                &gt;&gt;= 1
                            </expr>
                        </incr>
                        )
                        <block>{
                            <switch>switch
                                <condition>(
                                    <expr>
                                        <name>k</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <case>case <expr>0</expr>:
                                        <return>return
                                            <expr>
                                                <name>accum</name>
                                            </expr>
                                            ;
                                        </return>
                                    </case>
                                    <case>case <expr>1</expr>:
                                        <return>return
                                            <expr>
                                                <name>accum</name>
                                                *
                                                <name>b</name>
                                            </expr>
                                            ;
                                        </return>
                                    </case>
                                    <default>default:
                                        <expr_stmt>
                                            <expr>
                                                <name>accum</name>
                                                *= ((<name>k</name> &amp; 1) == 0) ? 1 :
                                                <name>b</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>b</name>
                                                *=
                                                <name>b</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                    </default>
                                    }
                                </block>
                            </switch>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the square root of {@code x}, rounded with the specified rounding mode.
                *
                * @throws IllegalArgumentException if {@code x &lt; 0}
                * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and
                * {@code sqrt(x)} is not an integer
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("fallthrough")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>sqrt</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>RoundingMode</name>
                            </type>
                            <name>mode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNonNegative</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"x"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>x</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>fitsInInt</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>x</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>IntMath</name>.
                                                <name>sqrt</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>(<name>int</name>)
                                                        <name>x</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>mode</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="block">/*
                        * Let k be the true value of floor(sqrt(x)), so that
                        *
                        * k * k &lt;= x &lt; (k + 1) * (k + 1)
                        * (double) (k * k) &lt;= (double) x &lt;= (double) ((k + 1) * (k + 1))
                        * since casting to double is nondecreasing.
                        * Note that the right-hand inequality is no longer strict.
                        * Math.sqrt(k * k) &lt;= Math.sqrt(x) &lt;= Math.sqrt((k + 1) * (k + 1))
                        * since Math.sqrt is monotonic.
                        * (long) Math.sqrt(k * k) &lt;= (long) Math.sqrt(x) &lt;= (long) Math.sqrt((k + 1) * (k + 1))
                        * since casting to long is monotonic
                        * k &lt;= (long) Math.sqrt(x) &lt;= k + 1
                        * since (long) Math.sqrt(k * k) == k, as checked exhaustively in
                        * {@link LongMathTest#testSqrtOfPerfectSquareAsDoubleIsPerfect}
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>guess</name> =
                            <init>
                                <expr>(<name>long</name>)
                                    <call>
                                        <name><name>Math</name>.
                                            <name>sqrt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>x</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Note: guess is always &lt;= FLOOR_SQRT_MAX_LONG.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>guessSquared</name> =
                            <init>
                                <expr>
                                    <name>guess</name>
                                    *
                                    <name>guess</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Note (2013-2-26): benchmarks indicate that, inscrutably enough, using if
                        statements is
                    </comment>
                    <comment type="line">// faster here than using lessThanBranchFree.</comment>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>mode</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name>UNNECESSARY</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>checkRoundingUnnecessary</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>guessSquared</name>
                                                        ==
                                                        <name>x</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>guess</name>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>FLOOR</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>DOWN</name>
                                </expr>
                                :
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>x</name>
                                            &lt;
                                            <name>guessSquared</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>guess</name>
                                                    - 1
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <return>return
                                    <expr>
                                        <name>guess</name>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>CEILING</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>UP</name>
                                </expr>
                                :
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>x</name>
                                            &gt;
                                            <name>guessSquared</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>guess</name>
                                                    + 1
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <return>return
                                    <expr>
                                        <name>guess</name>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_DOWN</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_UP</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_EVEN</name>
                                </expr>
                                :
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>long</name>
                                        </type>
                                        <name>sqrtFloor</name> =
                                        <init>
                                            <expr>
                                                <name>guess</name>
                                                - ((<name>x</name> &lt; <name>guessSquared</name>) ? 1 : 0)
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>long</name>
                                        </type>
                                        <name>halfSquare</name> =
                                        <init>
                                            <expr>
                                                <name>sqrtFloor</name>
                                                * <name>sqrtFloor</name> +
                                                <name>sqrtFloor</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <comment type="block">/*
                                    * We wish to test whether or not x &lt;= (sqrtFloor + 0.5)^2 = halfSquare + 0.25.
                                    Since both
                                    * x and halfSquare are integers, this is equivalent to testing whether or not x &lt;=
                                    * halfSquare. (We have to deal with overflow, though.)
                                    *
                                    * If we treat halfSquare as an unsigned long, we know that
                                    * sqrtFloor^2 &lt;= x &lt; (sqrtFloor + 1)^2
                                    * halfSquare - sqrtFloor &lt;= x &lt; halfSquare + sqrtFloor + 1
                                    * so |x - halfSquare| &lt;= sqrtFloor. Therefore, it's safe to treat x - halfSquare
                                    as a
                                    * signed long, so lessThanBranchFree is safe for use.
                                    */
                                </comment>
                                <return>return
                                    <expr>
                                        <name>sqrtFloor</name>
                                        +
                                        <call>
                                            <name>lessThanBranchFree</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>halfSquare</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>x</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <default>default:
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>AssertionError</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the result of dividing {@code p} by {@code q}, rounding using the specified
                * {@code RoundingMode}.
                *
                * @throws ArithmeticException if {@code q == 0}, or if {@code mode == UNNECESSARY} and {@code a}
                * is not an integer multiple of {@code b}
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("fallthrough")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>divide</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>p</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>q</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>RoundingMode</name>
                            </type>
                            <name>mode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>mode</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>div</name> =
                            <init>
                                <expr>
                                    <name>p</name>
                                    /
                                    <name>q</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// throws if q == 0</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>rem</name> =
                            <init>
                                <expr>
                                    <name>p</name>
                                    - <name>q</name> *
                                    <name>div</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// equals p % q</comment>

                    <if>if
                        <condition>(
                            <expr>
                                <name>rem</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>div</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="block">/*
                        * Normal Java division rounds towards 0, consistently with RoundingMode.DOWN. We just have to
                        * deal with the cases where rounding towards 0 is wrong, which typically depends on the sign of
                        * p / q.
                        *
                        * signum is 1 if p and q are both nonnegative or both negative, and -1 otherwise.
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>signum</name> =
                            <init>
                                <expr>1 |
                                    <call>(<name>int</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>(<name>p</name> ^ <name>q</name>) &gt;&gt; (
                                                    <name><name>Long</name>.
                                                        <name>SIZE</name>
                                                    </name>
                                                    - 1)
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>increment</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>mode</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name>UNNECESSARY</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>checkRoundingUnnecessary</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>rem</name>
                                                        == 0
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// fall through</comment>
                            </case>
                            <case>case
                                <expr>
                                    <name>DOWN</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <name>increment</name>
                                        = false
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case
                                <expr>
                                    <name>UP</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <name>increment</name>
                                        = true
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case
                                <expr>
                                    <name>CEILING</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <name>increment</name>
                                        = <name>signum</name> &gt; 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case
                                <expr>
                                    <name>FLOOR</name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <name>increment</name>
                                        = <name>signum</name> &lt; 0
                                    </expr>
                                    ;
                                </expr_stmt>
                                <break>break;</break>
                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_EVEN</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_DOWN</name>
                                </expr>
                                :
                            </case>
                            <case>case
                                <expr>
                                    <name>HALF_UP</name>
                                </expr>
                                :
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>long</name>
                                        </type>
                                        <name>absRem</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>abs</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>rem</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>long</name>
                                        </type>
                                        <name>cmpRemToHalfDivisor</name> =
                                        <init>
                                            <expr>
                                                <name>absRem</name>
                                                - (
                                                <call>
                                                    <name>abs</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>q</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                - <name>absRem</name>)
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <comment type="line">// subtracting two nonnegative longs can't overflow</comment>
                                <comment type="line">// cmpRemToHalfDivisor has the same sign as compare(abs(rem),
                                    abs(q) / 2).
                                </comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>cmpRemToHalfDivisor</name>
                                            == 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// exactly on the half mark</comment>
                                            <expr_stmt>
                                                <expr>
                                                    <name>increment</name>
                                                    = (<name>mode</name> == <name>HALF_UP</name> | (<name>mode</name> == <name>
                                                    HALF_EVEN
                                                </name> &amp; (<name>div</name> &amp; 1) != 0))
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>increment</name>
                                                    = <name>cmpRemToHalfDivisor</name> &gt; 0
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <comment type="line">// closer to the UP value</comment>
                                            }
                                        </block>
                                    </else>
                                </if>
                                <break>break;</break>
                            </case>
                            <default>default:
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>AssertionError</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                            </default>
                            }
                        </block>
                    </switch>
                    <return>return
                        <expr>
                            <name>increment</name>
                            ? <name>div</name> + <name>signum</name> :
                            <name>div</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns {@code x mod m}, a non-negative value less than {@code m}.
                * This differs from {@code x % m}, which might be negative.
                *
                * &lt;p&gt;For example:
                *
                * &lt;pre&gt; {@code
                *
                * mod(7, 4) == 3
                * mod(-7, 4) == 1
                * mod(-1, 4) == 3
                * mod(-8, 4) == 0
                * mod(8, 4) == 0}&lt;/pre&gt;
                *
                * @throws ArithmeticException if {@code m &lt;= 0}
                * @see &lt;a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.17.3"&gt;
                * Remainder Operator&lt;/a&gt;
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>mod</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>m</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Cast is safe because the result is guaranteed in the range [0, m)</comment>
                    <return>return
                        <expr>(<name>int</name>)
                            <call>
                                <name>mod</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>x</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>(<name>long</name>)
                                            <name>m</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns {@code x mod m}, a non-negative value less than {@code m}.
                * This differs from {@code x % m}, which might be negative.
                *
                * &lt;p&gt;For example:
                *
                * &lt;pre&gt; {@code
                *
                * mod(7, 4) == 3
                * mod(-7, 4) == 1
                * mod(-1, 4) == 3
                * mod(-8, 4) == 0
                * mod(8, 4) == 0}&lt;/pre&gt;
                *
                * @throws ArithmeticException if {@code m &lt;= 0}
                * @see &lt;a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.17.3"&gt;
                * Remainder Operator&lt;/a&gt;
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>mod</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>m</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>m</name>
                                &lt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ArithmeticException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Modulus must be positive"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <name>x</name>
                                    %
                                    <name>m</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>(<name>result</name> &gt;= 0) ? <name>result</name> : <name>result</name> +
                            <name>m</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the greatest common divisor of {@code a, b}. Returns {@code 0} if
                * {@code a == 0 &amp;&amp; b == 0}.
                *
                * @throws IllegalArgumentException if {@code a &lt; 0} or {@code b &lt; 0}
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>gcd</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>a</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="block">/*
                        * The reason we require both arguments to be &gt;= 0 is because otherwise, what do you return on
                        * gcd(0, Long.MIN_VALUE)? BigInteger.gcd would return positive 2^63, but positive 2^63 isn't
                        * an int.
                        */
                    </comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNonNegative</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"a"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>a</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNonNegative</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"b"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>b</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>a</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// 0 % b == 0, so b divides a, but the converse doesn't hold.
                                </comment>
                                <comment type="line">// BigInteger.gcd is consistent with this decision.</comment>
                                <return>return
                                    <expr>
                                        <name>b</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>b</name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>a</name>
                                            </expr>
                                            ;
                                        </return>
                                        <comment type="line">// similar logic</comment>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <comment type="block">/*
                        * Uses the binary GCD algorithm; see http://en.wikipedia.org/wiki/Binary_GCD_algorithm.
                        * This is &gt;60% faster than the Euclidean algorithm in benchmarks.
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>aTwos</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Long</name>.
                                            <name>numberOfTrailingZeros</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>a</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>a</name>
                            &gt;&gt;=
                            <name>aTwos</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// divide out all 2s</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>bTwos</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Long</name>.
                                            <name>numberOfTrailingZeros</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>b</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>b</name>
                            &gt;&gt;=
                            <name>bTwos</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// divide out all 2s</comment>
                    <while>while
                        <condition>(
                            <expr>
                                <name>a</name>
                                !=
                                <name>b</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <comment type="line">// both a, b are odd</comment>
                            <comment type="line">// The key to the binary GCD algorithm is as follows:</comment>
                            <comment type="line">// Both a and b are odd. Assume a &gt; b; then gcd(a - b, b) = gcd(a,
                                b).
                            </comment>
                            <comment type="line">// But in gcd(a - b, b), a - b is even and b is odd, so we can divide
                                out powers of two.
                            </comment>

                            <comment type="line">// We bend over backwards to avoid branching, adapting a technique
                                from
                            </comment>
                            <comment type="line">//
                                http://graphics.stanford.edu/~seander/bithacks.html#IntegerMinOrMax
                            </comment>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>delta</name> =
                                    <init>
                                        <expr>
                                            <name>a</name>
                                            -
                                            <name>b</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <comment type="line">// can't overflow, since a and b are nonnegative</comment>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>minDeltaOrZero</name> =
                                    <init>
                                        <expr>
                                            <name>delta</name>
                                            &amp; (<name>delta</name> &gt;&gt; (
                                            <name><name>Long</name>.
                                                <name>SIZE</name>
                                            </name>
                                            - 1))
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <comment type="line">// equivalent to Math.min(delta, 0)</comment>

                            <expr_stmt>
                                <expr>
                                    <name>a</name>
                                    = <name>delta</name> - <name>minDeltaOrZero</name> -
                                    <name>minDeltaOrZero</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// sets a to Math.abs(a - b)</comment>
                            <comment type="line">// a is now nonnegative and even</comment>

                            <expr_stmt>
                                <expr>
                                    <name>b</name>
                                    +=
                                    <name>minDeltaOrZero</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// sets b to min(old a, b)</comment>
                            <expr_stmt>
                                <expr>
                                    <name>a</name>
                                    &gt;&gt;=
                                    <call>
                                        <name><name>Long</name>.
                                            <name>numberOfTrailingZeros</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>a</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// divide out all 2s, since 2 doesn't divide b</comment>
                            }
                        </block>
                    </while>
                    <return>return
                        <expr>
                            <name>a</name>
                            &lt;&lt;
                            <call>
                                <name>min</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>aTwos</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>bTwos</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the sum of {@code a} and {@code b}, provided it does not overflow.
                *
                * @throws ArithmeticException if {@code a + b} overflows in signed {@code long} arithmetic
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>checkedAdd</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>a</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <name>a</name>
                                    +
                                    <name>b</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNoOverflow</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>a</name> ^ <name>b</name>) &lt; 0 | (<name>a</name> ^ <name>
                                            result</name>) &gt;= 0
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the difference of {@code a} and {@code b}, provided it does not overflow.
                *
                * @throws ArithmeticException if {@code a - b} overflows in signed {@code long} arithmetic
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>checkedSubtract</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>a</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <name>a</name>
                                    -
                                    <name>b</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNoOverflow</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>a</name> ^ <name>b</name>) &gt;= 0 | (<name>a</name> ^ <name>
                                            result</name>) &gt;= 0
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the product of {@code a} and {@code b}, provided it does not overflow.
                *
                * @throws ArithmeticException if {@code a * b} overflows in signed {@code long} arithmetic
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>checkedMultiply</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>a</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Hacker's Delight, Section 2-12</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>leadingZeros</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Long</name>.
                                            <name>numberOfLeadingZeros</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>a</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    +
                                    <call>
                                        <name><name>Long</name>.
                                            <name>numberOfLeadingZeros</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>~
                                                    <name>a</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    +
                                    <call>
                                        <name><name>Long</name>.
                                            <name>numberOfLeadingZeros</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>b</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    +
                                    <call>
                                        <name><name>Long</name>.
                                            <name>numberOfLeadingZeros</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>~
                                                    <name>b</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="block">/*
                        * If leadingZeros &gt; Long.SIZE + 1 it's definitely fine, if it's &lt; Long.SIZE it's
                        definitely
                        * bad. We do the leadingZeros check to avoid the division below if at all possible.
                        *
                        * Otherwise, if b == Long.MIN_VALUE, then the only allowed values of a are 0 and 1. We take
                        * care of all a &lt; 0 with their own check, because in particular, the case a == -1 will
                        * incorrectly pass the division check below.
                        *
                        * In all other cases, we check that either a is 0 or the result is consistent with division.
                        */
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>leadingZeros</name>
                                &gt;
                                <name><name>Long</name>.
                                    <name>SIZE</name>
                                </name>
                                + 1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>a</name>
                                        *
                                        <name>b</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNoOverflow</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>leadingZeros</name>
                                            &gt;=
                                            <name><name>Long</name>.
                                                <name>SIZE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNoOverflow</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>a</name>
                                            &gt;= 0 | <name>b</name> !=
                                            <name><name>Long</name>.
                                                <name>MIN_VALUE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <name>a</name>
                                    *
                                    <name>b</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNoOverflow</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>a</name>
                                            == 0 || <name>result</name> / <name>a</name> ==
                                            <name>b</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the {@code b} to the {@code k}th power, provided it does not overflow.
                *
                * @throws ArithmeticException if {@code b} to the {@code k}th power overflows in signed
                * {@code long} arithmetic
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>checkedPow</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>k</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNonNegative</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"exponent"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>k</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>b</name>
                                &gt;= -2 &amp; <name>b</name> &lt;= 2
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <switch>switch
                                    <condition>(
                                        <expr>(<name>int</name>)
                                            <name>b</name>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <case>case <expr>0</expr>:
                                            <return>return
                                                <expr>(<name>k</name> == 0) ? 1 : 0
                                                </expr>
                                                ;
                                            </return>
                                        </case>
                                        <case>case <expr>1</expr>:
                                            <return>return <expr>1</expr>;
                                            </return>
                                        </case>
                                        <case>case <expr>(-1)</expr>:
                                            <return>return
                                                <expr>((<name>k</name> &amp; 1) == 0) ? 1 : -1
                                                </expr>
                                                ;
                                            </return>
                                        </case>
                                        <case>case <expr>2</expr>:
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>checkNoOverflow</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>k</name>
                                                                    &lt;
                                                                    <name><name>Long</name>.
                                                                        <name>SIZE</name>
                                                                    </name>
                                                                    - 1
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <return>return
                                                <expr>1L &lt;&lt;
                                                    <name>k</name>
                                                </expr>
                                                ;
                                            </return>
                                        </case>
                                        <case>case <expr>(-2)</expr>:
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>checkNoOverflow</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>k</name>
                                                                    &lt;
                                                                    <name><name>Long</name>.
                                                                        <name>SIZE</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <return>return
                                                <expr>((<name>k</name> &amp; 1) == 0) ? (1L &lt;&lt; <name>k</name>) :
                                                    (-1L &lt;&lt; <name>k</name>)
                                                </expr>
                                                ;
                                            </return>
                                        </case>
                                        <default>default:
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>AssertionError</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                        </default>
                                        }
                                    </block>
                                </switch>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>accum</name> =
                            <init>
                                <expr>1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(<expr>true</expr>)
                        </condition>
                        <block>{
                            <switch>switch
                                <condition>(
                                    <expr>
                                        <name>k</name>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <case>case <expr>0</expr>:
                                        <return>return
                                            <expr>
                                                <name>accum</name>
                                            </expr>
                                            ;
                                        </return>
                                    </case>
                                    <case>case <expr>1</expr>:
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>checkedMultiply</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>accum</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>b</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                    </case>
                                    <default>default:
                                        <if>if
                                            <condition>(
                                                <expr>(<name>k</name> &amp; 1) != 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>accum</name>
                                                            =
                                                            <call>
                                                                <name>checkedMultiply</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>accum</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>b</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <name>k</name>
                                                &gt;&gt;= 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>k</name>
                                                    &gt; 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>checkNoOverflow</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>-<name>FLOOR_SQRT_MAX_LONG</name> &lt;= <name>
                                                                            b
                                                                        </name> &amp;&amp; <name>b</name> &lt;=
                                                                            <name>FLOOR_SQRT_MAX_LONG</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>b</name>
                                                            *=
                                                            <name>b</name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                    </default>
                                    }
                                </block>
                            </switch>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>VisibleForTesting</name>
                        </annotation>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>FLOOR_SQRT_MAX_LONG</name> =
                    <init>
                        <expr>3037000499L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Returns {@code n!}, that is, the product of the first {@code n} positive
                * integers, {@code 1} if {@code n == 0}, or {@link Long#MAX_VALUE} if the
                * result does not fit in a {@code long}.
                *
                * @throws IllegalArgumentException if {@code n &lt; 0}
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>factorial</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>n</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNonNegative</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"n"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>n</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>(<name>n</name> &lt;
                            <name><name>factorials</name>.
                                <name>length</name>
                            </name>
                            ) ?
                            <name>
                                <name>factorials</name>
                                <index>[
                                    <expr>
                                        <name>n</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            :
                            <name><name>Long</name>.
                                <name>MAX_VALUE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                        <index>[]</index>
                    </type>
                    <name>factorials</name> =
                    <init>
                        <expr>
                            <block>{
                                <expr>1L</expr>,
                                <expr>1L</expr>,
                                <expr>1L * 2</expr>,
                                <expr>1L * 2 * 3</expr>,
                                <expr>1L * 2 * 3 * 4</expr>,
                                <expr>1L * 2 * 3 * 4 * 5</expr>,
                                <expr>1L * 2 * 3 * 4 * 5 * 6</expr>,
                                <expr>1L * 2 * 3 * 4 * 5 * 6 * 7</expr>,
                                <expr>1L * 2 * 3 * 4 * 5 * 6 * 7 * 8</expr>,
                                <expr>1L * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9</expr>,
                                <expr>1L * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10</expr>,
                                <expr>1L * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11</expr>,
                                <expr>1L * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12</expr>,
                                <expr>1L * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13</expr>,
                                <expr>1L * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14</expr>,
                                <expr>1L * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15</expr>,
                                <expr>1L * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16</expr>,
                                <expr>1L * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17</expr>,
                                <expr>1L * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17 *
                                    18</expr>,
                                <expr>1L * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17 * 18 *
                                    19</expr>,
                                <expr>1L * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17 * 18 *
                                    19 * 20
                                </expr>
                                }
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and
                * {@code k}, or {@link Long#MAX_VALUE} if the result does not fit in a {@code long}.
                *
                * @throws IllegalArgumentException if {@code n &lt; 0}, {@code k &lt; 0}, or {@code k &gt; n}
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>binomial</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>n</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>k</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNonNegative</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"n"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>n</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNonNegative</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"k"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>k</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>k</name>
                                            &lt;=
                                            <name>n</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"k (%s) &gt; n (%s)"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>k</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>n</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>k</name>
                                &gt; (<name>n</name> &gt;&gt; 1)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>k</name>
                                        = <name>n</name> -
                                        <name>k</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>k</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case <expr>0</expr>:
                                <return>return <expr>1</expr>;
                                </return>
                            </case>
                            <case>case <expr>1</expr>:
                                <return>return
                                    <expr>
                                        <name>n</name>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <default>default:
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>n</name>
                                            &lt;
                                            <name><name>factorials</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>
                                                        <name>factorials</name>
                                                        <index>[
                                                            <expr>
                                                                <name>n</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    / (
                                                    <name>
                                                        <name>factorials</name>
                                                        <index>[
                                                            <expr>
                                                                <name>k</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    *
                                                    <name>
                                                        <name>factorials</name>
                                                        <index>[
                                                            <expr>
                                                                <name>n</name>
                                                                -
                                                                <name>k</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    )
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>k</name>
                                                    &gt;=
                                                    <name><name>biggestBinomials</name>.
                                                        <name>length</name>
                                                    </name>
                                                    || <name>n</name> &gt;
                                                    <name>
                                                        <name>biggestBinomials</name>
                                                        <index>[
                                                            <expr>
                                                                <name>k</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name><name>Long</name>.
                                                                <name>MAX_VALUE</name>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>k</name>
                                                            &lt;
                                                            <name><name>biggestSimpleBinomials</name>.
                                                                <name>length</name>
                                                            </name>
                                                            &amp;&amp; <name>n</name> &lt;=
                                                            <name>
                                                                <name>biggestSimpleBinomials</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>k</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <comment type="line">// guaranteed not to overflow</comment>
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <name>long</name>
                                                                    </type>
                                                                    <name>result</name> =
                                                                    <init>
                                                                        <expr><name>n</name>--
                                                                        </expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>
                                                            <for>for (
                                                                <init>
                                                                    <decl>
                                                                        <type>
                                                                            <name>int</name>
                                                                        </type>
                                                                        <name>i</name> =
                                                                        <init>
                                                                            <expr>2</expr>
                                                                        </init>
                                                                    </decl>
                                                                    ;
                                                                </init>
                                                                <condition>
                                                                    <expr>
                                                                        <name>i</name>
                                                                        &lt;=
                                                                        <name>k</name>
                                                                    </expr>
                                                                    ;
                                                                </condition>
                                                                <incr>
                                                                    <expr><name>n</name>--
                                                                    </expr>
                                                                    ,
                                                                    <expr><name>i</name>++
                                                                    </expr>
                                                                </incr>
                                                                )
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>result</name>
                                                                            *=
                                                                            <name>n</name>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>result</name>
                                                                            /=
                                                                            <name>i</name>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </for>
                                                            <return>return
                                                                <expr>
                                                                    <name>result</name>
                                                                </expr>
                                                                ;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <block>{
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <name>int</name>
                                                                    </type>
                                                                    <name>nBits</name> =
                                                                    <init>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>LongMath</name>.
                                                                                    <name>log2</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>n</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name><name>
                                                                                                RoundingMode</name>.
                                                                                                <name>CEILING</name>
                                                                                            </name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>

                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <name>long</name>
                                                                    </type>
                                                                    <name>result</name> =
                                                                    <init>
                                                                        <expr>1</expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <name>long</name>
                                                                    </type>
                                                                    <name>numerator</name> =
                                                                    <init>
                                                                        <expr><name>n</name>--
                                                                        </expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <name>long</name>
                                                                    </type>
                                                                    <name>denominator</name> =
                                                                    <init>
                                                                        <expr>1</expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>

                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <name>int</name>
                                                                    </type>
                                                                    <name>numeratorBits</name> =
                                                                    <init>
                                                                        <expr>
                                                                            <name>nBits</name>
                                                                        </expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>
                                                            <comment type="line">// This is an upper bound on
                                                                log2(numerator, ceiling).
                                                            </comment>

                                                            <comment type="block">/*
                                                                * We want to do this in long math for speed, but want to
                                                                avoid overflow. We adapt the
                                                                * technique previously used by BigIntegerMath: maintain
                                                                separate numerator and
                                                                * denominator accumulators, multiplying the fraction
                                                                into result when near overflow.
                                                                */
                                                            </comment>
                                                            <for>for (
                                                                <init>
                                                                    <decl>
                                                                        <type>
                                                                            <name>int</name>
                                                                        </type>
                                                                        <name>i</name> =
                                                                        <init>
                                                                            <expr>2</expr>
                                                                        </init>
                                                                    </decl>
                                                                    ;
                                                                </init>
                                                                <condition>
                                                                    <expr>
                                                                        <name>i</name>
                                                                        &lt;=
                                                                        <name>k</name>
                                                                    </expr>
                                                                    ;
                                                                </condition>
                                                                <incr>
                                                                    <expr><name>i</name>++
                                                                    </expr>
                                                                    ,
                                                                    <expr><name>n</name>--
                                                                    </expr>
                                                                </incr>
                                                                )
                                                                <block>{
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>
                                                                                <name>numeratorBits</name>
                                                                                + <name>nBits</name> &lt;
                                                                                <name><name>Long</name>.
                                                                                    <name>SIZE</name>
                                                                                </name>
                                                                                - 1
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <comment type="line">// It's definitely
                                                                                    safe to multiply into numerator and
                                                                                    denominator.
                                                                                </comment>
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <name>numerator</name>
                                                                                        *=
                                                                                        <name>n</name>
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <name>denominator</name>
                                                                                        *=
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <name>numeratorBits</name>
                                                                                        +=
                                                                                        <name>nBits</name>
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                        <else>else
                                                                            <block>{
                                                                                <comment type="line">// It might not be
                                                                                    safe to multiply into numerator and
                                                                                    denominator,
                                                                                </comment>
                                                                                <comment type="line">// so multiply
                                                                                    (numerator / denominator) into
                                                                                    result.
                                                                                </comment>
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <name>result</name>
                                                                                        =
                                                                                        <call>
                                                                                            <name>multiplyFraction
                                                                                            </name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>result
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                ,
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>
                                                                                                            numerator
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                ,
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>
                                                                                                            denominator
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <name>numerator</name>
                                                                                        =
                                                                                        <name>n</name>
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <name>denominator</name>
                                                                                        =
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <name>numeratorBits</name>
                                                                                        =
                                                                                        <name>nBits</name>
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                }
                                                                            </block>
                                                                        </else>
                                                                    </if>
                                                                    }
                                                                </block>
                                                            </for>
                                                            <return>return
                                                                <expr>
                                                                    <call>
                                                                        <name>multiplyFraction</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>result</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>numerator</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>denominator</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </return>
                                                            }
                                                        </block>
                                                    </else>
                                                </if>
                                            </else>
                                        </if>
                                    </else>
                                </if>
                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns (x * numerator / denominator), which is assumed to come out to an integral value.
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>multiplyFraction</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>numerator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>denominator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>x</name>
                                == 1
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>numerator</name>
                                        /
                                        <name>denominator</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>commonDivisor</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>gcd</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>x</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>denominator</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>x</name>
                            /=
                            <name>commonDivisor</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>denominator</name>
                            /=
                            <name>commonDivisor</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// We know gcd(x, denominator) = 1, and x * numerator / denominator is exact,
                    </comment>
                    <comment type="line">// so denominator must be a divisor of numerator.</comment>
                    <return>return
                        <expr>
                            <name>x</name>
                            * (<name>numerator</name> / <name>denominator</name>)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="block">/*
                * binomial(biggestBinomials[k], k) fits in a long, but not
                * binomial(biggestBinomials[k] + 1, k).
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                        <index>[]</index>
                    </type>
                    <name>biggestBinomials</name> =
                    <init>
                        <expr>
                            <block>{
                                <expr>
                                    <name><name>Integer</name>.
                                        <name>MAX_VALUE</name>
                                    </name>
                                </expr>
                                ,
                                <expr>
                                    <name><name>Integer</name>.
                                        <name>MAX_VALUE</name>
                                    </name>
                                </expr>
                                ,
                                <expr>
                                    <name><name>Integer</name>.
                                        <name>MAX_VALUE</name>
                                    </name>
                                </expr>
                                , <expr>3810779</expr>, <expr>121977</expr>, <expr>16175</expr>, <expr>
                                    4337</expr>, <expr>1733</expr>,
                                <expr>887</expr>, <expr>534</expr>, <expr>361</expr>, <expr>265</expr>, <expr>206</expr>, <expr>
                                    169</expr>, <expr>143</expr>, <expr>125</expr>, <expr>111</expr>, <expr>101</expr>, <expr>
                                    94</expr>, <expr>88</expr>, <expr>83</expr>, <expr>79</expr>, <expr>
                                    76</expr>, <expr>74</expr>, <expr>72</expr>, <expr>70</expr>, <expr>
                                    69</expr>, <expr>68</expr>,
                                <expr>67</expr>, <expr>67</expr>, <expr>66</expr>, <expr>66</expr>, <expr>
                                    66</expr>, <expr>66</expr>}
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="block">/*
                * binomial(biggestSimpleBinomials[k], k) doesn't need to use the slower GCD-based impl,
                * but binomial(biggestSimpleBinomials[k] + 1, k) does.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>VisibleForTesting</name>
                        </annotation>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                        <index>[]</index>
                    </type>
                    <name>biggestSimpleBinomials</name> =
                    <init>
                        <expr>
                            <block>{
                                <expr>
                                    <name><name>Integer</name>.
                                        <name>MAX_VALUE</name>
                                    </name>
                                </expr>
                                ,
                                <expr>
                                    <name><name>Integer</name>.
                                        <name>MAX_VALUE</name>
                                    </name>
                                </expr>
                                ,
                                <expr>
                                    <name><name>Integer</name>.
                                        <name>MAX_VALUE</name>
                                    </name>
                                </expr>
                                , <expr>2642246</expr>, <expr>86251</expr>, <expr>11724</expr>, <expr>
                                    3218</expr>, <expr>1313</expr>,
                                <expr>684</expr>, <expr>419</expr>, <expr>287</expr>, <expr>214</expr>, <expr>169</expr>, <expr>
                                    139</expr>, <expr>119</expr>, <expr>105</expr>, <expr>95</expr>, <expr>
                                    87</expr>, <expr>81</expr>, <expr>76</expr>, <expr>73</expr>, <expr>
                                    70</expr>, <expr>68</expr>, <expr>66</expr>, <expr>64</expr>, <expr>
                                    63</expr>, <expr>62</expr>, <expr>62</expr>,
                                <expr>61</expr>, <expr>61</expr>, <expr>61</expr>}
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// These values were generated by using checkedMultiply to see when the simple
                multiply/divide
            </comment>
            <comment type="line">// algorithm would lead to an overflow.</comment>

            <function>
                <type>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>fitsInInt</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>int</name>) <name>x</name> ==
                            <name>x</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the arithmetic mean of {@code x} and {@code y}, rounded toward
                * negative infinity. This method is resilient to overflow.
                *
                * @since 14.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>mean</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>y</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Efficient method for computing the arithmetic mean.</comment>
                    <comment type="line">// The alternative (x + y) / 2 fails for large values.</comment>
                    <comment type="line">// The alternative (x + y) &gt;&gt;&gt; 1 fails for negative values.</comment>
                    <return>return
                        <expr>(<name>x</name> &amp; <name>y</name>) + ((<name>x</name> ^ <name>y</name>) &gt;&gt; 1)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="block">/*
                * If n &lt;= millerRabinBases[i][0], then testing n against bases millerRabinBases[i][1..]
                * suffices to prove its primality. Values from miller-rabin.appspot.com.
                *
                * NOTE: We could get slightly better bases that would be treated as unsigned, but benchmarks
                * showed negligible performance improvements.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                        <index>[]</index>
                        <index>[]</index>
                    </type>
                    <name>millerRabinBaseSets</name> =
                    <init>
                        <expr>
                            <block>{
                                <expr>
                                    <block>{<expr>291830</expr>, <expr>126401071349994536L</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>885594168</expr>, <expr>725270293939359937L</expr>, <expr>
                                        3569819667048198375L</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>273919523040L</expr>, <expr>15</expr>, <expr>
                                        7363882082L</expr>, <expr>992620450144556L</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>47636622961200L</expr>, <expr>2</expr>, <expr>2570940</expr>, <expr>
                                        211991001</expr>, <expr>3749873356L</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>7999252175582850L</expr>,
                                        <expr>2</expr>, <expr>4130806001517L</expr>, <expr>
                                            149795463772692060L</expr>, <expr>186635894390467037L</expr>, <expr>
                                            3967304179347715805L</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{<expr>585226005592931976L</expr>,
                                        <expr>2</expr>, <expr>123635709730000L</expr>, <expr>
                                            9233062284813009L</expr>, <expr>43835965440333360L</expr>, <expr>
                                            761179012939631437L</expr>,
                                        <expr>1263739024124850375L</expr>}
                                    </block>
                                </expr>
                                ,
                                <expr>
                                    <block>{
                                        <expr>
                                            <name><name>Long</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                        </expr>
                                        ,
                                        <expr>2</expr>, <expr>325</expr>, <expr>9375</expr>, <expr>28178</expr>, <expr>
                                            450775</expr>, <expr>9780504</expr>, <expr>1795265022</expr>}
                                    </block>
                                </expr>
                                }
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <enum>
                <specifier>private</specifier>
                enum <name>MillerRabinTester</name>
                <block>{
                    <comment type="javadoc">/**
                        * Works for inputs &lt;= FLOOR_SQRT_MAX_LONG.
                        */
                    </comment>
                    <expr_stmt>
                        <expr>
                            <name>SMALL</name>
                            <block>{
                                @
                                <expr>
                                    <name>Override</name>
                                    <name>long</name>
                                    <call>
                                        <name>mulMod</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>long</name>
                                                    <name>a</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>long</name>
                                                    <name>b</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>long</name>
                                                    <name>m</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    <block>{
                                        <comment type="block">/*
                                            * NOTE(lowasser, 2015-Feb-12): Benchmarks suggest that changing this to
                                            * UnsignedLongs.remainder and increasing the threshold to 2^32 doesn't pay
                                            for itself,
                                            * and adding another enum constant hurts performance further -- I suspect
                                            because
                                            * bimorphic implementation is a sweet spot for the JVM.
                                            */
                                        </comment>
                                        <return>return
                                            <expr>(<name>a</name> * <name>b</name>) %
                                                <name>m</name>
                                            </expr>
                                            ;
                                        </return>
                                    </block>
                                </expr>
                            </block>
                        </expr>
                    </expr_stmt>
                    }
                </block>
            </enum>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>long</name>
                </type>
                <name>squareMod</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>a</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>m</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>a</name> * <name>a</name>) %
                            <name>m</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
    ,
    <comment type="javadoc">/**
        * Works for all nonnegative signed longs.
        */
    </comment>
    <expr_stmt>
        <expr>
            <name>LARGE</name>
            <block>{
                <comment type="javadoc">/**
                    * Returns (a + b) mod m. Precondition: 0 &lt;= a, b &lt; m &lt; 2^63.
                    */
                </comment>
                private
                <expr>
                    <name>long</name>
                    <call>
                        <name>plusMod</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>long</name>
                                    <name>a</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>long</name>
                                    <name>b</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>long</name>
                                    <name>m</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <return>return
                            <expr>(<name>a</name> &gt;= <name>m</name> - <name>b</name>) ? (<name>a</name> + <name>b
                            </name> - <name>m</name>) : (<name>a</name> + <name>b</name>)
                            </expr>
                            ;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }

    <comment type="javadoc">/**
        * Returns (a * 2^32) mod m. a may be any unsigned long.
        */
    </comment>
    <function>
        <type>
            <specifier>private</specifier>
            <name>long</name>
        </type>
        <name>times2ToThe32Mod</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>a</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>m</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>remainingPowersOf2</name> =
                    <init>
                        <expr>32</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <do>do
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>shift</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Math</name>.
                                            <name>min</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>remainingPowersOf2</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>Long</name>.
                                                            <name>numberOfLeadingZeros</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>a</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// shift is either the number of powers of 2 left to multiply a by, or the
                        biggest shift
                    </comment>
                    <comment type="line">// possible while keeping a in an unsigned long.</comment>
                    <expr_stmt>
                        <expr>
                            <name>a</name>
                            =
                            <call>
                                <name><name>UnsignedLongs</name>.
                                    <name>remainder</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>a</name>
                                            &lt;&lt;
                                            <name>shift</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>m</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>remainingPowersOf2</name>
                            -=
                            <name>shift</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
                while
                <condition>(
                    <expr>
                        <name>remainingPowersOf2</name>
                        &gt; 0
                    </expr>
                    )
                </condition>
                ;
            </do>
            <return>return
                <expr>
                    <name>a</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <name>long</name>
        </type>
        <name>mulMod</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>a</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>b</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>m</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>aHi</name> =
                    <init>
                        <expr>
                            <name>a</name>
                            &gt;&gt;&gt; 32
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// &lt; 2^31</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>bHi</name> =
                    <init>
                        <expr>
                            <name>b</name>
                            &gt;&gt;&gt; 32
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// &lt; 2^31</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>aLo</name> =
                    <init>
                        <expr>
                            <name>a</name>
                            &amp; 0xFFFFFFFFL
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// &lt; 2^32</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>bLo</name> =
                    <init>
                        <expr>
                            <name>b</name>
                            &amp; 0xFFFFFFFFL
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// &lt; 2^32</comment>

            <comment type="block">/*
                * a * b == aHi * bHi * 2^64 + (aHi * bLo + aLo * bHi) * 2^63 + aLo * bLo.
                * == (aHi * bHi * 2^32 + aHi * bLo + aLo * bHi) * 2^32 + aLo * bLo
                *
                * We carry out this computation in modular arithmetic. Since times2ToThe32Mod accepts
                * any unsigned long, we don't have to do a mod on every operation, only when intermediate
                * results can exceed 2^63.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>result</name> =
                    <init>
                        <expr>
                            <call>
                                <name>times2ToThe32Mod</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>aHi</name>
                                            *
                                            <name>bHi</name>
                                        </expr>
                                    </argument>
                                    <comment type="block">/* &lt; 2^62 */</comment>,
                                    <argument>
                                        <expr>
                                            <name>m</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// &lt; m &lt; 2^63</comment>
            <expr_stmt>
                <expr>
                    <name>result</name>
                    += <name>aHi</name> *
                    <name>bLo</name>
                </expr>
                ;
            </expr_stmt>
            <comment type="line">// aHi * bLo &lt; 2^63, result &lt; 2^64</comment>
            <if>if
                <condition>(
                    <expr>
                        <name>result</name>
                        &lt; 0
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>result</name>
                                =
                                <call>
                                    <name><name>UnsignedLongs</name>.
                                        <name>remainder</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>result</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>m</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </then>
            </if>
            <comment type="line">// result &lt; 2^63 again</comment>
            <expr_stmt>
                <expr>
                    <name>result</name>
                    += <name>aLo</name> *
                    <name>bHi</name>
                </expr>
                ;
            </expr_stmt>
            <comment type="line">// aLo * bHi &lt; 2^63, result &lt; 2^64</comment>
            <expr_stmt>
                <expr>
                    <name>result</name>
                    =
                    <call>
                        <name>times2ToThe32Mod</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>result</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>m</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <comment type="line">// result &lt; m &lt; 2^63</comment>
            <return>return
                <expr>
                    <call>
                        <name>plusMod</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>result</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>UnsignedLongs</name>.
                                            <name>remainder</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>aLo</name>
                                                    *
                                                    <name>bLo</name>
                                                </expr>
                                            </argument>
                                            <comment type="block">/* &lt; 2^64 */</comment>,
                                            <argument>
                                                <expr>
                                                    <name>m</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>m</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <name>long</name>
        </type>
        <name>squareMod</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>a</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>m</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>aHi</name> =
                    <init>
                        <expr>
                            <name>a</name>
                            &gt;&gt;&gt; 32
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// &lt; 2^31</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>aLo</name> =
                    <init>
                        <expr>
                            <name>a</name>
                            &amp; 0xFFFFFFFFL
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// &lt; 2^32</comment>

            <comment type="block">/*
                * a^2 == aHi^2 * 2^64 + aHi * aLo * 2^33 + aLo^2
                * == (aHi^2 * 2^32 + aHi * aLo * 2) * 2^32 + aLo^2
                * We carry out this computation in modular arithmetic. Since times2ToThe32Mod accepts
                * any unsigned long, we don't have to do a mod on every operation, only when intermediate
                * results can exceed 2^63.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>result</name> =
                    <init>
                        <expr>
                            <call>
                                <name>times2ToThe32Mod</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>aHi</name>
                                            *
                                            <name>aHi</name>
                                        </expr>
                                    </argument>
                                    <comment type="block">/* &lt; 2^62 */</comment>,
                                    <argument>
                                        <expr>
                                            <name>m</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// &lt; m &lt; 2^63</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>hiLo</name> =
                    <init>
                        <expr>
                            <name>aHi</name>
                            * <name>aLo</name> * 2
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <if>if
                <condition>(
                    <expr>
                        <name>hiLo</name>
                        &lt; 0
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>hiLo</name>
                                =
                                <call>
                                    <name><name>UnsignedLongs</name>.
                                        <name>remainder</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>hiLo</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>m</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </then>
            </if>
            <comment type="line">// hiLo &lt; 2^63</comment>
            <expr_stmt>
                <expr>
                    <name>result</name>
                    +=
                    <name>hiLo</name>
                </expr>
                ;
            </expr_stmt>
            <comment type="line">// result &lt; 2^64</comment>
            <expr_stmt>
                <expr>
                    <name>result</name>
                    =
                    <call>
                        <name>times2ToThe32Mod</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>result</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>m</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <comment type="line">// result &lt; m &lt; 2^63</comment>
            <return>return
                <expr>
                    <call>
                        <name>plusMod</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>result</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>UnsignedLongs</name>.
                                            <name>remainder</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>aLo</name>
                                                    *
                                                    <name>aLo</name>
                                                </expr>
                                            </argument>
                                            <comment type="block">/* &lt; 2^64 */</comment>,
                                            <argument>
                                                <expr>
                                                    <name>m</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>m</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    };

    <function>
        <type>
            <specifier>static</specifier>
            <name>boolean</name>
        </type>
        <name>test</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>base</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>n</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <comment type="line">// Since base will be considered % n, it's okay if base &gt; FLOOR_SQRT_MAX_LONG,
            </comment>
            <comment type="line">// so long as n &lt;= FLOOR_SQRT_MAX_LONG.</comment>
            <return>return
                <expr>((<name>n</name> &lt;= <name>FLOOR_SQRT_MAX_LONG</name>) ? <name>SMALL</name> : <name>LARGE</name>).
                    <call>
                        <name>testWitness</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>base</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>n</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a * b mod m.
        */
    </comment>
    <function_decl>
        <type>
            <specifier>abstract</specifier>
            <name>long</name>
        </type>
        <name>mulMod</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>a</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>b</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>m</name>
                </decl>
            </param>
            )
        </parameter_list>
        ;
    </function_decl>

    <comment type="javadoc">/**
        * Returns a^2 mod m.
        */
    </comment>
    <function_decl>
        <type>
            <specifier>abstract</specifier>
            <name>long</name>
        </type>
        <name>squareMod</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>a</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>m</name>
                </decl>
            </param>
            )
        </parameter_list>
        ;
    </function_decl>

    <comment type="javadoc">/**
        * Returns a^p mod m.
        */
    </comment>
    <function>
        <type>
            <specifier>private</specifier>
            <name>long</name>
        </type>
        <name>powMod</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>a</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>p</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>m</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>res</name> =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <for>for (<init>;</init>
                <condition>
                    <expr>
                        <name>p</name>
                        != 0
                    </expr>
                    ;
                </condition>
                <incr>
                    <expr>
                        <name>p</name>
                        &gt;&gt;= 1
                    </expr>
                </incr>
                )
                <block>{
                    <if>if
                        <condition>(
                            <expr>(<name>p</name> &amp; 1) != 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>res</name>
                                        =
                                        <call>
                                            <name>mulMod</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>res</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>a</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>m</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>a</name>
                            =
                            <call>
                                <name>squareMod</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>a</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>m</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </for>
            <return>return
                <expr>
                    <name>res</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns true if n is a strong probable prime relative to the specified base.
        */
    </comment>
    <function>
        <type>
            <specifier>private</specifier>
            <name>boolean</name>
        </type>
        <name>testWitness</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>base</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>n</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>r</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Long</name>.
                                    <name>numberOfTrailingZeros</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>n</name>
                                            - 1
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>d</name> =
                    <init>
                        <expr>(<name>n</name> - 1) &gt;&gt;
                            <name>r</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <expr_stmt>
                <expr>
                    <name>base</name>
                    %=
                    <name>n</name>
                </expr>
                ;
            </expr_stmt>
            <if>if
                <condition>(
                    <expr>
                        <name>base</name>
                        == 0
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return <expr>true</expr>;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <comment type="line">// Calculate a := base^d mod n.</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>a</name> =
                    <init>
                        <expr>
                            <call>
                                <name>powMod</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>base</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>d</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>n</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// n passes this test if</comment>
            <comment type="line">// base^d = 1 (mod n)</comment>
            <comment type="line">// or base^(2^j * d) = -1 (mod n) for some 0 &lt;= j &lt; r.</comment>
            <if>if
                <condition>(
                    <expr>
                        <name>a</name>
                        == 1
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return <expr>true</expr>;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>j</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <while>while
                <condition>(
                    <expr>
                        <name>a</name>
                        != <name>n</name> - 1
                    </expr>
                    )
                </condition>
                <block>{
                    <if>if
                        <condition>(
                            <expr>++<name>j</name> ==
                                <name>r</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>a</name>
                            =
                            <call>
                                <name>squareMod</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>a</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>n</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </while>
            <return>return <expr>true</expr>;
            </return>
            }
        </block>
    </function>
    }

    private
    <expr_stmt>
        <expr>
            <call>
                <name>LongMath</name>
                <argument_list>()</argument_list>
            </call>
            <block>{}</block>
        </expr>
    </expr_stmt>
    }
</unit>
