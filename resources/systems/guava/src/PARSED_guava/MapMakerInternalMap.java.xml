<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\MapMakerInternalMap.java">
    <comment type="block">/*
        * Copyright (C) 2009 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
        * in compliance with the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software distributed under the License
        * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
        * or implied. See the License for the specific language governing permissions and limitations under
        * the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>
            CollectPreconditions</name>.
            <name>checkRemove</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>VisibleForTesting</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Equivalence</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Ticker</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>GenericMapMaker</name>.
            <name>NullListener</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>MapMaker</name>.
            <name>RemovalCause</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>MapMaker</name>.
            <name>RemovalListener</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>MapMaker</name>.
            <name>RemovalNotification</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>primitives</name>.
            <name>Ints</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>j2objc</name>.<name>annotations</name>.
            <name>Weak</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>j2objc</name>.<name>annotations</name>.
            <name>WeakOuter</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>ObjectInputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>ObjectOutputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>ref</name>.
            <name>Reference</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>ref</name>.
            <name>ReferenceQueue</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>ref</name>.
            <name>SoftReference</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>ref</name>.
            <name>WeakReference</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>AbstractCollection</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>AbstractMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>AbstractQueue</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>AbstractSet</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collection</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>NoSuchElementException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Queue</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Set</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>CancellationException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ConcurrentLinkedQueue</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ConcurrentMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ExecutionException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>TimeUnit</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.
            <name>AtomicInteger</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.
            <name>AtomicReferenceArray</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>locks</name>.
            <name>ReentrantLock</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>logging</name>.
            <name>Level</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>logging</name>.
            <name>Logger</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>javax</name>.<name>annotation</name>.<name>concurrent</name>.
            <name>GuardedBy</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * The concurrent hash map implementation built by {@link MapMaker}.
        *
        * &lt;p&gt;This implementation is heavily derived from revision 1.96 of &lt;a
        * href="http://tinyurl.com/ConcurrentHashMap"&gt;ConcurrentHashMap.java&lt;/a&gt;.
        *
        * @author Bob Lee
        * @author Charles Fry
        * @author Doug Lea ({@code ConcurrentHashMap})
        */
    </comment>
    <class>class
        <name>
            <name>MapMakerInternalMap</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>AbstractMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>ConcurrentMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                ,
                <name>Serializable</name>
            </implements>
        </super>
        <block>{

            <comment type="block">/*
                * The basic strategy is to subdivide the table among Segments, each of which itself is a
                * concurrently readable hash table. The map supports non-blocking reads and concurrent writes
                * across different segments.
                *
                * If a maximum size is specified, a best-effort bounding is performed per segment, using a
                * page-replacement algorithm to determine which entries to evict when the capacity has been
                * exceeded.
                *
                * The page replacement algorithm's data structures are kept casually consistent with the map. The
                * ordering of writes to a segment is sequentially consistent. An update to the map and recording
                * of reads may not be immediately reflected on the algorithm's data structures. These structures
                * are guarded by a lock and operations are applied in batches to avoid lock contention. The
                * penalty of applying the batches is spread across threads so that the amortized cost is slightly
                * higher than performing just the operation without enforcing the capacity constraint.
                *
                * This implementation uses a per-segment queue to record a memento of the additions, removals,
                * and accesses that were performed on the map. The queue is drained on writes and when it exceeds
                * its capacity threshold.
                *
                * The Least Recently Used page replacement algorithm was chosen due to its simplicity, high hit
                * rate, and ability to be implemented with O(1) time complexity. The initial LRU implementation
                * operates per-segment rather than globally for increased implementation simplicity. We expect
                * the cache hit rate to be similar to that of a global LRU algorithm.
                */
            </comment>

            <comment type="line">// Constants</comment>

            <comment type="javadoc">/**
                * The maximum capacity, used if a higher value is implicitly specified by either of the
                * constructors with arguments. MUST be a power of two &lt;= 1&lt;&lt;30 to ensure that entries are
                * indexable using ints.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>MAXIMUM_CAPACITY</name> =
                    <init>
                        <expr>
                            <name><name>Ints</name>.
                                <name>MAX_POWER_OF_TWO</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The maximum number of segments to allow; used to bound constructor arguments.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>MAX_SEGMENTS</name> =
                    <init>
                        <expr>1 &lt;&lt; 16</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// slightly conservative</comment>

            <comment type="javadoc">/** Number of (unsynchronized) retries in the containsValue method. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CONTAINS_VALUE_RETRIES</name> =
                    <init>
                        <expr>3</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Number of cache access operations that can be buffered per segment before the cache's recency
                * ordering information is updated. This is used to avoid lock contention by recording a memento
                * of reads and delaying a lock acquisition until the threshold is crossed or a mutation occurs.
                *
                * &lt;p&gt;This must be a (2^n)-1 as it is used as a mask.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>DRAIN_THRESHOLD</name> =
                    <init>
                        <expr>0x3F</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Maximum number of entries to be drained in a single cleanup run. This applies independently to
                * the cleanup queue and both reference queues.
                */
            </comment>
            <comment type="line">// TODO(fry): empirically optimize this</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>DRAIN_MAX</name> =
                    <init>
                        <expr>16</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>CLEANUP_EXECUTOR_DELAY_SECS</name> =
                    <init>
                        <expr>60</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// Fields</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Logger</name>
                    </type>
                    <name>logger</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Logger</name>.
                                    <name>getLogger</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>MapMakerInternalMap</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class.
                                            <call>
                                                <name>getName</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Mask value for indexing into segments. The upper bits of a key's hash code are used to choose
                * the segment.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>transient</name>
                        <name>int</name>
                    </type>
                    <name>segmentMask</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Shift value for indexing within segments. Helps prevent entries that end up in the same segment
                * from also ending up in the same bucket.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>transient</name>
                        <name>int</name>
                    </type>
                    <name>segmentShift</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The segments, each of which is a specialized hash table. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>transient</name>
                        <name>
                            <name>Segment</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <index>[]</index>
                    </type>
                    <name>segments</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The concurrency level. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>concurrencyLevel</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Strategy for comparing keys. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Equivalence</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Object</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>keyEquivalence</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Strategy for comparing values. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Equivalence</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Object</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>valueEquivalence</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Strategy for referencing keys. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>Strength</name>
                    </type>
                    <name>keyStrength</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Strategy for referencing values. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>Strength</name>
                    </type>
                    <name>valueStrength</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The maximum size of this map. MapMaker.UNSET_INT if there is no maximum. */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>maximumSize</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** How long after the last access to an entry the map will retain that entry. */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>expireAfterAccessNanos</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** How long after the last write to an entry the map will retain that entry. */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>expireAfterWriteNanos</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Entries waiting to be consumed by the removal listener. */</comment>
            <comment type="line">// TODO(fry): define a new type which creates event objects and automates the clear
                logic
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Queue</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>RemovalNotification</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>removalNotificationQueue</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * A listener that is invoked when an entry is removed due to expiration or garbage collection of
                * soft/weak entries.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>RemovalListener</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>removalListener</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Factory used to create new entries. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>transient</name>
                        <name>EntryFactory</name>
                    </type>
                    <name>entryFactory</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Measures time in a testable way. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>Ticker</name>
                    </type>
                    <name>ticker</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Creates a new, empty map with the specified strategy, initial capacity and concurrency level.
                */
            </comment>
            <constructor>
                <name>MapMakerInternalMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>MapMaker</name>
                            </type>
                            <name>builder</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>concurrencyLevel</name>
                            =
                            <call>
                                <name><name>Math</name>.
                                    <name>min</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>builder</name>.
                                                    <name>getConcurrencyLevel</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>MAX_SEGMENTS</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>keyStrength</name>
                            =
                            <call>
                                <name><name>builder</name>.
                                    <name>getKeyStrength</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>valueStrength</name>
                            =
                            <call>
                                <name><name>builder</name>.
                                    <name>getValueStrength</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>keyEquivalence</name>
                            =
                            <call>
                                <name><name>builder</name>.
                                    <name>getKeyEquivalence</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>valueEquivalence</name>
                            =
                            <call>
                                <name><name>valueStrength</name>.
                                    <name>defaultEquivalence</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>maximumSize</name>
                            =
                            <name><name>builder</name>.
                                <name>maximumSize</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>expireAfterAccessNanos</name>
                            =
                            <call>
                                <name><name>builder</name>.
                                    <name>getExpireAfterAccessNanos</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>expireAfterWriteNanos</name>
                            =
                            <call>
                                <name><name>builder</name>.
                                    <name>getExpireAfterWriteNanos</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>entryFactory</name>
                            =
                            <call>
                                <name><name>EntryFactory</name>.
                                    <name>getFactory</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>keyStrength</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>expires</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>evictsBySize</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>ticker</name>
                            =
                            <call>
                                <name><name>builder</name>.
                                    <name>getTicker</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>removalListener</name>
                            =
                            <call>
                                <name><name>builder</name>.
                                    <name>getRemovalListener</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>removalNotificationQueue</name>
                            = (<name>removalListener</name> ==
                            <name><name>NullListener</name>.
                                <name>INSTANCE</name>
                            </name>
                            )
                            ?
                            <name><name>MapMakerInternalMap</name>.
                                <name>
                                    <name/>
                                </name>
                            </name>
                            &lt;
                            <name>
                                <name>RemovalNotification</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            &gt;
                            <call>
                                <name>discardingQueue</name>
                                <argument_list>()</argument_list>
                            </call>
                            : new
                            <call>
                                <name>
                                    <name>ConcurrentLinkedQueue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>RemovalNotification</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>initialCapacity</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Math</name>.
                                            <name>min</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>builder</name>.
                                                            <name>getInitialCapacity</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>MAXIMUM_CAPACITY</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>evictsBySize</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>initialCapacity</name>
                                        =
                                        <call>
                                            <name><name>Math</name>.
                                                <name>min</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>initialCapacity</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>maximumSize</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Find power-of-two sizes best matching arguments. Constraints:</comment>
                    <comment type="line">// (segmentCount &lt;= maximumSize)</comment>
                    <comment type="line">// &amp;&amp; (concurrencyLevel &gt; maximumSize || segmentCount &gt;
                        concurrencyLevel)
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>segmentShift</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>segmentCount</name> =
                            <init>
                                <expr>1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>segmentCount</name>
                                &lt;
                                <name>concurrencyLevel</name>
                                &amp;&amp; (!
                                <call>
                                    <name>evictsBySize</name>
                                    <argument_list>()</argument_list>
                                </call>
                                || <name>segmentCount</name> * 2 &lt;= <name>maximumSize</name>)
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>++
                                    <name>segmentShift</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>segmentCount</name>
                                    &lt;&lt;= 1
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>segmentShift</name>
                            </name>
                            = 32 -
                            <name>segmentShift</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>segmentMask</name>
                            = <name>segmentCount</name> - 1
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>segments</name>
                            </name>
                            =
                            <call>
                                <name>newSegmentArray</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>segmentCount</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>segmentCapacity</name> =
                            <init>
                                <expr>
                                    <name>initialCapacity</name>
                                    /
                                    <name>segmentCount</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>segmentCapacity</name>
                                * <name>segmentCount</name> &lt;
                                <name>initialCapacity</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>++
                                        <name>segmentCapacity</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>segmentSize</name> =
                            <init>
                                <expr>1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>segmentSize</name>
                                &lt;
                                <name>segmentCapacity</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>segmentSize</name>
                                    &lt;&lt;= 1
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>evictsBySize</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// Ensure sum of segment max sizes = overall max size</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>maximumSegmentSize</name> =
                                        <init>
                                            <expr>
                                                <name>maximumSize</name>
                                                / <name>segmentCount</name> + 1
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>remainder</name> =
                                        <init>
                                            <expr>
                                                <name>maximumSize</name>
                                                %
                                                <name>segmentCount</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <name><name>this</name>.<name>segments</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr>++
                                            <name>i</name>
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>i</name>
                                                    ==
                                                    <name>remainder</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr><name>maximumSegmentSize</name>--
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>segments</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                =
                                                <call>
                                                    <name>createSegment</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>segmentSize</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>maximumSegmentSize</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>i</name> =
                                            <init>
                                                <expr>0</expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <name><name>this</name>.<name>segments</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr>++
                                            <name>i</name>
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>segments</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                =
                                                <call>
                                                    <name>createSegment</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>segmentSize</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>MapMaker</name>.
                                                                    <name>UNSET_INT</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <name>boolean</name>
                </type>
                <name>evictsBySize</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>maximumSize</name>
                            !=
                            <name><name>MapMaker</name>.
                                <name>UNSET_INT</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>boolean</name>
                </type>
                <name>expires</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>expiresAfterWrite</name>
                                <argument_list>()</argument_list>
                            </call>
                            ||
                            <call>
                                <name>expiresAfterAccess</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>boolean</name>
                </type>
                <name>expiresAfterWrite</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>expireAfterWriteNanos</name>
                            &gt; 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>boolean</name>
                </type>
                <name>expiresAfterAccess</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>expireAfterAccessNanos</name>
                            &gt; 0
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>boolean</name>
                </type>
                <name>usesKeyReferences</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>keyStrength</name>
                            !=
                            <name><name>Strength</name>.
                                <name>STRONG</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>boolean</name>
                </type>
                <name>usesValueReferences</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>valueStrength</name>
                            !=
                            <name><name>Strength</name>.
                                <name>STRONG</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <enum>enum <name>Strength</name>
                <block>{
                    <comment type="block">/*
                        * TODO(kevinb): If we strongly reference the value and aren't computing, we needn't wrap the
                        * value. This could save ~8 bytes per entry.
                        */
                    </comment>

                    <expr_stmt>
                        <expr>
                            <name>STRONG</name>
                            <block>{
                                @
                                <expr>
                                    <name>
                                        <name>Override</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>
                                        <name>ValueReference</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <call>
                                        <name>referenceValue</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>Segment</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>K</name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>V</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                    <name>segment</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>ReferenceEntry</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>K</name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>V</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                    <name>entry</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>V</name>
                                                    <name>value</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    <block>{
                                        <return>return
                                            <expr>new
                                                <call>
                                                    <name>
                                                        <name>StrongValueReference</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>K</name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>V</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>value</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                    </block>
                                </expr>
                            </block>
                        </expr>
                    </expr_stmt>
                    }
                </block>
            </enum>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>Equivalence</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Object</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>defaultEquivalence</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Equivalence</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
    ,

    <expr_stmt>
        <expr>
            <name>SOFT</name>
            <block>{
                @
                <expr>
                    <name>
                        <name>Override</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    <name>
                        <name>ValueReference</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    <call>
                        <name>referenceValue</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>
                                        <name>Segment</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>segment</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>
                                        <name>ReferenceEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>entry</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>V</name>
                                    <name>value</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <return>return
                            <expr>new
                                <call>
                                    <name>
                                        <name>SoftValueReference</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>segment</name>.
                                                    <name>valueReferenceQueue</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>value</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>entry</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }

    @
    <function>
        <type>
            <name>Override</name>
            <name>
                <name>Equivalence</name>
                <argument_list>&lt;
                    <argument>
                        <name>Object</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>defaultEquivalence</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>Equivalence</name>.
                            <name>identity</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    },

    <expr_stmt>
        <expr>
            <name>WEAK</name>
            <block>{
                @
                <expr>
                    <name>
                        <name>Override</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    <name>
                        <name>ValueReference</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    <call>
                        <name>referenceValue</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>
                                        <name>Segment</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>segment</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>
                                        <name>ReferenceEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>entry</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>V</name>
                                    <name>value</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <return>return
                            <expr>new
                                <call>
                                    <name>
                                        <name>WeakValueReference</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>segment</name>.
                                                    <name>valueReferenceQueue</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>value</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>entry</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }

    @
    <function>
        <type>
            <name>Override</name>
            <name>
                <name>Equivalence</name>
                <argument_list>&lt;
                    <argument>
                        <name>Object</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>defaultEquivalence</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>Equivalence</name>.
                            <name>identity</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    };

    <comment type="javadoc">/**
        * Creates a reference for the given value according to this value strength.
        */
    </comment>
    <function_decl>
        <type>
            <specifier>abstract</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>ValueReference</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>referenceValue</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Segment</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>segment</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entry</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>V</name>
                    </type>
                    <name>value</name>
                </decl>
            </param>
            )
        </parameter_list>
        ;
    </function_decl>

    <comment type="javadoc">/**
        * Returns the default equivalence strategy used to compare and hash keys or values referenced
        * at this strength. This strategy will be used unless the user explicitly specifies an
        * alternate strategy.
        */
    </comment>
    <function_decl>
        <type>
            <specifier>abstract</specifier>
            <name>
                <name>Equivalence</name>
                <argument_list>&lt;
                    <argument>
                        <name>Object</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>defaultEquivalence</name>
        <parameter_list>()</parameter_list>;
    </function_decl>
    }

    <comment type="javadoc">/**
        * Creates new entries.
        */
    </comment>
    <enum>enum <name>EntryFactory</name>
        <block>{
            <expr_stmt>
                <expr>
                    <name>STRONG</name>
                    <block>{
                        @
                        <expr>
                            <name>
                                <name>Override</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            <name>
                                <name>ReferenceEntry</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            <call>
                                <name>newEntry</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>
                                                <name>Segment</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                            <name>segment</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>K</name>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>int</name>
                                            <name>hash</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <annotation>@
                                            <name>Nullable</name>
                                        </annotation>
                                        <expr>
                                            <name>
                                                <name>ReferenceEntry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                            <name>next</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            <block>{
                                <return>return
                                    <expr>new
                                        <call>
                                            <name>
                                                <name>StrongEntry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>key</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>hash</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>next</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </block>
                        </expr>
                    </block>
                </expr>
            </expr_stmt>
            }
        </block>
    </enum>
    },
    <expr_stmt>
        <expr>
            <name>STRONG_EXPIRABLE</name>
            <block>{
                @
                <expr>
                    <name>
                        <name>Override</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    <call>
                        <name>newEntry</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>
                                        <name>Segment</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>segment</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>K</name>
                                    <name>key</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>int</name>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <expr>
                                    <name>
                                        <name>ReferenceEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>next</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <return>return
                            <expr>new
                                <call>
                                    <name>
                                        <name>StrongExpirableEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>key</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>hash</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>next</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }

    @
    <function>
        <type>
            <name>
                <name>Override</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
            <name>
                <name>ReferenceEntry</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>copyEntry</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Segment</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>segment</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>original</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>newNext</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>newEntry</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>copyEntry</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>segment</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>original</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>newNext</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>copyExpirableEntry</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>original</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>newEntry</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>
                    <name>newEntry</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    },
    <expr_stmt>
        <expr>
            <name>STRONG_EVICTABLE</name>
            <block>{
                @
                <expr>
                    <name>
                        <name>Override</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    <call>
                        <name>newEntry</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>
                                        <name>Segment</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>segment</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>K</name>
                                    <name>key</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>int</name>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <expr>
                                    <name>
                                        <name>ReferenceEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>next</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <return>return
                            <expr>new
                                <call>
                                    <name>
                                        <name>StrongEvictableEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>key</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>hash</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>next</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }

    @
    <function>
        <type>
            <name>
                <name>Override</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
            <name>
                <name>ReferenceEntry</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>copyEntry</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Segment</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>segment</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>original</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>newNext</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>newEntry</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>copyEntry</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>segment</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>original</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>newNext</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>copyEvictableEntry</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>original</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>newEntry</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>
                    <name>newEntry</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    },
    <expr_stmt>
        <expr>
            <name>STRONG_EXPIRABLE_EVICTABLE</name>
            <block>{
                @
                <expr>
                    <name>
                        <name>Override</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    <call>
                        <name>newEntry</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>
                                        <name>Segment</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>segment</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>K</name>
                                    <name>key</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>int</name>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <expr>
                                    <name>
                                        <name>ReferenceEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>next</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <return>return
                            <expr>new
                                <call>
                                    <name>
                                        <name>StrongExpirableEvictableEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>key</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>hash</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>next</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }

    @
    <function>
        <type>
            <name>
                <name>Override</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
            <name>
                <name>ReferenceEntry</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>copyEntry</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Segment</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>segment</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>original</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>newNext</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>newEntry</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>copyEntry</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>segment</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>original</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>newNext</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>copyExpirableEntry</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>original</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>newEntry</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>copyEvictableEntry</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>original</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>newEntry</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>
                    <name>newEntry</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    },

    <expr_stmt>
        <expr>
            <name>WEAK</name>
            <block>{
                @
                <expr>
                    <name>
                        <name>Override</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    <call>
                        <name>newEntry</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>
                                        <name>Segment</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>segment</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>K</name>
                                    <name>key</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>int</name>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <expr>
                                    <name>
                                        <name>ReferenceEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>next</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <return>return
                            <expr>new
                                <call>
                                    <name>
                                        <name>WeakEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>segment</name>.
                                                    <name>keyReferenceQueue</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>key</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>hash</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>next</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }
    },
    <expr_stmt>
        <expr>
            <name>WEAK_EXPIRABLE</name>
            <block>{
                @
                <expr>
                    <name>
                        <name>Override</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    <call>
                        <name>newEntry</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>
                                        <name>Segment</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>segment</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>K</name>
                                    <name>key</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>int</name>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <expr>
                                    <name>
                                        <name>ReferenceEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>next</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <return>return
                            <expr>new
                                <call>
                                    <name>
                                        <name>WeakExpirableEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>segment</name>.
                                                    <name>keyReferenceQueue</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>key</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>hash</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>next</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }

    @
    <function>
        <type>
            <name>
                <name>Override</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
            <name>
                <name>ReferenceEntry</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>copyEntry</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Segment</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>segment</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>original</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>newNext</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>newEntry</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>copyEntry</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>segment</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>original</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>newNext</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>copyExpirableEntry</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>original</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>newEntry</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>
                    <name>newEntry</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    },
    <expr_stmt>
        <expr>
            <name>WEAK_EVICTABLE</name>
            <block>{
                @
                <expr>
                    <name>
                        <name>Override</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    <call>
                        <name>newEntry</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>
                                        <name>Segment</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>segment</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>K</name>
                                    <name>key</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>int</name>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <expr>
                                    <name>
                                        <name>ReferenceEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>next</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <return>return
                            <expr>new
                                <call>
                                    <name>
                                        <name>WeakEvictableEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>segment</name>.
                                                    <name>keyReferenceQueue</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>key</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>hash</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>next</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }

    @
    <function>
        <type>
            <name>
                <name>Override</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
            <name>
                <name>ReferenceEntry</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>copyEntry</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Segment</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>segment</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>original</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>newNext</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>newEntry</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>copyEntry</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>segment</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>original</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>newNext</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>copyEvictableEntry</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>original</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>newEntry</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>
                    <name>newEntry</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    },
    <expr_stmt>
        <expr>
            <name>WEAK_EXPIRABLE_EVICTABLE</name>
            <block>{
                @
                <expr>
                    <name>
                        <name>Override</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    <call>
                        <name>newEntry</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>
                                        <name>Segment</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>segment</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>K</name>
                                    <name>key</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>int</name>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <expr>
                                    <name>
                                        <name>ReferenceEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>next</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <return>return
                            <expr>new
                                <call>
                                    <name>
                                        <name>WeakExpirableEvictableEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>segment</name>.
                                                    <name>keyReferenceQueue</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>key</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>hash</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>next</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }

    @
    <function>
        <type>
            <name>
                <name>Override</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
            <name>
                <name>ReferenceEntry</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>copyEntry</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Segment</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>segment</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>original</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>newNext</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>newEntry</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>copyEntry</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>segment</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>original</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>newNext</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>copyExpirableEntry</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>original</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>newEntry</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>copyEvictableEntry</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>original</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>newEntry</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>
                    <name>newEntry</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    };

    <comment type="javadoc">/**
        * Masks used to compute indices in the following table.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>static</specifier>
                <specifier>final</specifier>
                <name>int</name>
            </type>
            <name>EXPIRABLE_MASK</name> =
            <init>
                <expr>1</expr>
            </init>
        </decl>
        ;
    </decl_stmt>
    <decl_stmt>
        <decl>
            <type>
                <specifier>static</specifier>
                <specifier>final</specifier>
                <name>int</name>
            </type>
            <name>EVICTABLE_MASK</name> =
            <init>
                <expr>2</expr>
            </init>
        </decl>
        ;
    </decl_stmt>

    <comment type="javadoc">/**
        * Look-up table for factories. First dimension is the reference type. The second dimension is
        * the result of OR-ing the feature masks.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>static</specifier>
                <specifier>final</specifier>
                <name>EntryFactory</name>
                <index>[]</index>
                <index>[]</index>
            </type>
            <name>factories</name> =
            <init>
                <expr>
                    <block>{
                        <expr>
                            <block>{
                                <expr>
                                    <name>STRONG</name>
                                </expr>
                                ,
                                <expr>
                                    <name>STRONG_EXPIRABLE</name>
                                </expr>
                                ,
                                <expr>
                                    <name>STRONG_EVICTABLE</name>
                                </expr>
                                ,
                                <expr>
                                    <name>STRONG_EXPIRABLE_EVICTABLE</name>
                                </expr>
                                }
                            </block>
                        </expr>
                        ,
                        <expr>
                            <block>{}</block>
                        </expr>
                        ,
                        <comment type="line">// no support for SOFT keys</comment>
                        <expr>
                            <block>{
                                <expr>
                                    <name>WEAK</name>
                                </expr>
                                ,
                                <expr>
                                    <name>WEAK_EXPIRABLE</name>
                                </expr>
                                ,
                                <expr>
                                    <name>WEAK_EVICTABLE</name>
                                </expr>
                                ,
                                <expr>
                                    <name>WEAK_EXPIRABLE_EVICTABLE</name>
                                </expr>
                                }
                            </block>
                        </expr>
                        }
                    </block>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>

    <function>
        <type>
            <specifier>static</specifier>
            <name>EntryFactory</name>
        </type>
        <name>getFactory</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Strength</name>
                    </type>
                    <name>keyStrength</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>boolean</name>
                    </type>
                    <name>expireAfterWrite</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>boolean</name>
                    </type>
                    <name>evictsBySize</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>flags</name> =
                    <init>
                        <expr>(<name>expireAfterWrite</name> ? <name>EXPIRABLE_MASK</name> : 0) | (<name>evictsBySize
                        </name> ? <name>EVICTABLE_MASK</name> : 0)
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <return>return
                <expr>
                    <name>
                        <name>factories</name>
                        <index>[
                            <expr>
                                <call>
                                    <name><name>keyStrength</name>.
                                        <name>ordinal</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ]
                        </index>
                        <index>[
                            <expr>
                                <name>flags</name>
                            </expr>
                            ]
                        </index>
                    </name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Creates a new entry.
        *
        * @param segment to create the entry for
        * @param key of the entry
        * @param hash of the key
        * @param next entry in the same bucket
        */
    </comment>
    <function_decl>
        <type>
            <specifier>abstract</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>ReferenceEntry</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>newEntry</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Segment</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>segment</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>K</name>
                    </type>
                    <name>key</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>hash</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>next</name>
                </decl>
            </param>
            )
        </parameter_list>
        ;
    </function_decl>

    <comment type="javadoc">/**
        * Copies an entry, assigning it a new {@code next} entry.
        *
        * @param original the entry to copy
        * @param newNext entry in the same bucket
        */
    </comment>
    <comment type="line">// Guarded By Segment.this</comment>
    <function>
        <type>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>ReferenceEntry</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>copyEntry</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Segment</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>segment</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>original</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>newNext</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name>newEntry</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>segment</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>original</name>.
                                            <name>getKey</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>original</name>.
                                            <name>getHash</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>newNext</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="line">// Guarded By Segment.this</comment>
    <function>
        <type>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>void</name>
        </type>
        <name>copyExpirableEntry</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>original</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>newEntry</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <comment type="line">// TODO(fry): when we link values instead of entries this method can go</comment>
            <comment type="line">// away, as can connectExpirables, nullifyExpirable.</comment>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>newEntry</name>.
                            <name>setExpirationTime</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>original</name>.
                                            <name>getExpirationTime</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>

            <expr_stmt>
                <expr>
                    <call>
                        <name>connectExpirables</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>original</name>.
                                            <name>getPreviousExpirable</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>newEntry</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>connectExpirables</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>newEntry</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>original</name>.
                                            <name>getNextExpirable</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>

            <expr_stmt>
                <expr>
                    <call>
                        <name>nullifyExpirable</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>original</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            }
        </block>
    </function>

    <comment type="line">// Guarded By Segment.this</comment>
    <function>
        <type>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>void</name>
        </type>
        <name>copyEvictableEntry</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>original</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>newEntry</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <comment type="line">// TODO(fry): when we link values instead of entries this method can go</comment>
            <comment type="line">// away, as can connectEvictables, nullifyEvictable.</comment>
            <expr_stmt>
                <expr>
                    <call>
                        <name>connectEvictables</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>original</name>.
                                            <name>getPreviousEvictable</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>newEntry</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>connectEvictables</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>newEntry</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>original</name>.
                                            <name>getNextEvictable</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>

            <expr_stmt>
                <expr>
                    <call>
                        <name>nullifyEvictable</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>original</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            }
        </block>
    </function>
    }

    <comment type="javadoc">/**
        * A reference to a value.
        */
    </comment>
    <class type="interface">interface
        <name>
            <name>ValueReference</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <block>{
            <comment type="javadoc">/**
                * Gets the value. Does not block or throw exceptions.
                */
            </comment>
            <function_decl>
                <type>
                    <name>V</name>
                </type>
                <name>get</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Waits for a value that may still be computing. Unlike get(), this method can block (in the
                * case of FutureValueReference).
                *
                * @throws ExecutionException if the computing thread throws an exception
                */
            </comment>
            <function_decl>
                <type>
                    <name>V</name>
                </type>
                <name>waitForValue</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ExecutionException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the entry associated with this value reference, or {@code null} if this value
                * reference is independent of any entry.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getEntry</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Creates a copy of this reference for the given entry.
                *
                * &lt;p&gt;{@code value} may be null only for a loading reference.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>ValueReference</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>copyFor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceQueue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>queue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>V</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entry</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Clears this reference object.
                *
                * @param newValue the new value reference which will replace this one; this is only used during
                * computation to immediately notify blocked threads of the new value
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>
                                    <name>ValueReference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns {@code true} if the value type is a computing reference (regardless of whether or not
                * computation has completed). This is necessary to distiguish between partially-collected
                * entries and computing entries, which need to be cleaned up differently.
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>isComputingReference</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            }
        </block>
    </class>

    <comment type="javadoc">/**
        * Placeholder. Indicates that the value hasn't been set yet.
        */
    </comment>
    <decl_stmt>
        <decl>
            <type>
                <specifier>static</specifier>
                <specifier>final</specifier>
                <name>
                    <name>ValueReference</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Object</name>
                        </argument>
                        ,
                        <argument>
                            <name>Object</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>UNSET</name> =
            <init>
                <expr>new
                    <class>
                        <super>
                            <name>
                                <name>ValueReference</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>Object</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>Object</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </super>
                        <argument_list>()</argument_list>
                        <block>{
                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>Object</name>
                                </type>
                                <name>get</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>
                                        <name>ReferenceEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>Object</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>Object</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>getEntry</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>
                                        <name>ValueReference</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>Object</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>Object</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>copyFor</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>ReferenceQueue</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>Object</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>queue</name>
                                        </decl>
                                    </param>
                                    ,
                                    <param>
                                        <decl>
                                            <type>
                                                <annotation>@
                                                    <name>Nullable</name>
                                                </annotation>
                                                <name>Object</name>
                                            </type>
                                            <name>value</name>
                                        </decl>
                                    </param>
                                    ,
                                    <param>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>ReferenceEntry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>Object</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>Object</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>entry</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>boolean</name>
                                </type>
                                <name>isComputingReference</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return <expr>false</expr>;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>Object</name>
                                </type>
                                <name>waitForValue</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>void</name>
                                </type>
                                <name>clear</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>ValueReference</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>Object</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>Object</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>newValue</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{}</block>
                            </function>
                            }
                        </block>
                    </class>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>

    <comment type="javadoc">/**
        * Singleton placeholder that indicates a value is being computed.
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>SuppressWarnings</name>
                <argument_list>("unchecked")</argument_list>
            </annotation>
            <comment type="line">// impl never uses a parameter or returns any non-null value</comment>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>ValueReference</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>unset</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>(
                    <name>
                        <name>ValueReference</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    )
                    <name>UNSET</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * An entry in a reference map.
        *
        * Entries in the map can be in the following states:
        *
        * Valid:
        * - Live: valid key/value are set
        * - Computing: computation is pending
        *
        * Invalid:
        * - Expired: time expired (key/value may still be set)
        * - Collected: key/value was partially collected, but not yet cleaned up
        */
    </comment>
    <class type="interface">interface
        <name>
            <name>ReferenceEntry</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <block>{
            <comment type="javadoc">/**
                * Gets the value reference from this entry.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>ValueReference</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getValueReference</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the value reference for this entry.
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>setValueReference</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ValueReference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>valueReference</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Gets the next entry in the chain.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNext</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Gets the entry's hash.
                */
            </comment>
            <function_decl>
                <type>
                    <name>int</name>
                </type>
                <name>getHash</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Gets the key for this entry.
                */
            </comment>
            <function_decl>
                <type>
                    <name>K</name>
                </type>
                <name>getKey</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="block">/*
                * Used by entries that are expirable. Expirable entries are maintained in a doubly-linked list.
                * New entries are added at the tail of the list at write time; stale entries are expired from
                * the head of the list.
                */
            </comment>

            <comment type="javadoc">/**
                * Gets the entry expiration time in ns.
                */
            </comment>
            <function_decl>
                <type>
                    <name>long</name>
                </type>
                <name>getExpirationTime</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the entry expiration time in ns.
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>setExpirationTime</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>time</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Gets the next entry in the recency list.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNextExpirable</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the next entry in the recency list.
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>setNextExpirable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Gets the previous entry in the recency list.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getPreviousExpirable</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the previous entry in the recency list.
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>setPreviousExpirable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="block">/*
                * Implemented by entries that are evictable. Evictable entries are maintained in a
                * doubly-linked list. New entries are added at the tail of the list at write time and stale
                * entries are expired from the head of the list.
                */
            </comment>

            <comment type="javadoc">/**
                * Gets the next entry in the recency list.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNextEvictable</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the next entry in the recency list.
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>setNextEvictable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Gets the previous entry in the recency list.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getPreviousEvictable</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the previous entry in the recency list.
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>setPreviousEvictable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            }
        </block>
    </class>

    <enum>
        <specifier>private</specifier>
        enum <name>NullEntry</name>
        <super>
            <implements>implements
                <name>
                    <name>ReferenceEntry</name>
                    <argument_list>&lt;
                        <argument>
                            <name>Object</name>
                        </argument>
                        ,
                        <argument>
                            <name>Object</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <expr_stmt>
                <expr>
                    <name>INSTANCE</name>
                </expr>
                ;
            </expr_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ValueReference</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Object</name>
                            </argument>
                            ,
                            <argument>
                                <name>Object</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getValueReference</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setValueReference</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ValueReference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Object</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>Object</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>valueReference</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{}</block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Object</name>
                            </argument>
                            ,
                            <argument>
                                <name>Object</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNext</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getHash</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr>0</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>getKey</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>getExpirationTime</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr>0</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setExpirationTime</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>time</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{}</block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Object</name>
                            </argument>
                            ,
                            <argument>
                                <name>Object</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNextExpirable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNextExpirable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Object</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>Object</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{}</block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Object</name>
                            </argument>
                            ,
                            <argument>
                                <name>Object</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getPreviousExpirable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPreviousExpirable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Object</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>Object</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{}</block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Object</name>
                            </argument>
                            ,
                            <argument>
                                <name>Object</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNextEvictable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNextEvictable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Object</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>Object</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{}</block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Object</name>
                            </argument>
                            ,
                            <argument>
                                <name>Object</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getPreviousEvictable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPreviousEvictable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Object</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>Object</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{}</block>
            </function>
            }
        </block>
    </enum>

    <class>
        <specifier>abstract</specifier>
        <specifier>static</specifier> class
        <name>
            <name>AbstractReferenceEntry</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <implements>implements
                <name>
                    <name>ReferenceEntry</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ValueReference</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getValueReference</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setValueReference</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ValueReference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>valueReference</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNext</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getHash</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>getKey</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>getExpirationTime</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setExpirationTime</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>time</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNextExpirable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNextExpirable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getPreviousExpirable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPreviousExpirable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNextEvictable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNextEvictable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getPreviousEvictable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPreviousEvictable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <function>
        <type>
            <annotation>@
                <name>SuppressWarnings</name>
                <argument_list>("unchecked")</argument_list>
            </annotation>
            <comment type="line">// impl never uses a parameter or returns any non-null value</comment>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>ReferenceEntry</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>nullEntry</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>(
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    )
                    <name><name>NullEntry</name>.
                        <name>INSTANCE</name>
                    </name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <decl_stmt>
        <decl>
            <type>
                <specifier>static</specifier>
                <specifier>final</specifier>
                <name>
                    <name>Queue</name>
                    <argument_list>&lt;
                        <argument>
                            <name>?</name>
                            <extends>extends
                                <name>Object</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>DISCARDING_QUEUE</name> =
            <init>
                <expr>new
                    <class>
                        <super>
                            <name>
                                <name>AbstractQueue</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>Object</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </super>
                        <argument_list>()</argument_list>
                        <block>{
                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>boolean</name>
                                </type>
                                <name>offer</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>Object</name>
                                            </type>
                                            <name>o</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <return>return <expr>true</expr>;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>Object</name>
                                </type>
                                <name>peek</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>Object</name>
                                </type>
                                <name>poll</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>int</name>
                                </type>
                                <name>size</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return <expr>0</expr>;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>
                                        <name>Iterator</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>Object</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>iterator</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name><name>Iterators</name>.
                                                    <name>emptyIterator</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </class>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>

    <comment type="javadoc">/**
        * Queue that discards all elements.
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>SuppressWarnings</name>
                <argument_list>("unchecked")</argument_list>
            </annotation>
            <comment type="line">// impl never uses a parameter or returns any non-null value</comment>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>E</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Queue</name>
                <argument_list>&lt;
                    <argument>
                        <name>E</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>discardingQueue</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>(<name>Queue</name>)
                    <name>DISCARDING_QUEUE</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="block">/*
        * Note: All of this duplicate code sucks, but it saves a lot of memory. If only Java had mixins!
        * To maintain this code, make a change for the strong reference type. Then, cut and paste, and
        * replace "Strong" with "Soft" or "Weak" within the pasted text. The primary difference is that
        * strong entries store the key reference directly while soft and weak entries delegate to their
        * respective superclasses.
        */
    </comment>

    <comment type="javadoc">/**
        * Used for strongly-referenced keys.
        */
    </comment>
    <class>
        <specifier>static</specifier>
        class
        <name>
            <name>StrongEntry</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <implements>implements
                <name>
                    <name>ReferenceEntry</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>K</name>
                    </type>
                    <name>key</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>StrongEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>key</name>
                            </name>
                            =
                            <name>key</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>hash</name>
                            </name>
                            =
                            <name>hash</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>next</name>
                            </name>
                            =
                            <name>next</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>getKey</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>key</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// null expiration</comment>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>getExpirationTime</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setExpirationTime</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>time</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNextExpirable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNextExpirable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getPreviousExpirable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPreviousExpirable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="line">// null eviction</comment>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNextEvictable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNextEvictable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getPreviousEvictable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPreviousEvictable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="line">// The code below is exactly the same for each entry type.</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>hash</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>next</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>volatile</name>
                        <name>
                            <name>ValueReference</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>valueReference</name> =
                    <init>
                        <expr>
                            <call>
                                <name>unset</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ValueReference</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getValueReference</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>valueReference</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setValueReference</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ValueReference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>valueReference</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ValueReference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name> =
                            <init>
                                <expr>
                                    <name><name>this</name>.
                                        <name>valueReference</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>valueReference</name>
                            </name>
                            =
                            <name>valueReference</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>previous</name>.
                                    <name>clear</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>valueReference</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getHash</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>hash</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNext</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>next</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <specifier>static</specifier>
        <specifier>final</specifier> class
        <name>
            <name>StrongExpirableEntry</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>StrongEntry</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>ReferenceEntry</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <constructor>
                <name>StrongExpirableEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>hash</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>next</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">// The code below is exactly the same for each expirable entry type.</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <name>volatile</name>
                        <name>long</name>
                    </type>
                    <name>time</name> =
                    <init>
                        <expr>
                            <name><name>Long</name>.
                                <name>MAX_VALUE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>getExpirationTime</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>time</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setExpirationTime</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>time</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>time</name>
                            </name>
                            =
                            <name>time</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// Guarded By Segment.this</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>nextExpirable</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNextExpirable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>nextExpirable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNextExpirable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>nextExpirable</name>
                            </name>
                            =
                            <name>next</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// Guarded By Segment.this</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>previousExpirable</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getPreviousExpirable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>previousExpirable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPreviousExpirable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>previousExpirable</name>
                            </name>
                            =
                            <name>previous</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <specifier>static</specifier>
        <specifier>final</specifier> class
        <name>
            <name>StrongEvictableEntry</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>StrongEntry</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>ReferenceEntry</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <constructor>
                <name>StrongEvictableEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>hash</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>next</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">// The code below is exactly the same for each evictable entry type.</comment>

            <comment type="line">// Guarded By Segment.this</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>nextEvictable</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNextEvictable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>nextEvictable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNextEvictable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>nextEvictable</name>
                            </name>
                            =
                            <name>next</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// Guarded By Segment.this</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>previousEvictable</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getPreviousEvictable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>previousEvictable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPreviousEvictable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>previousEvictable</name>
                            </name>
                            =
                            <name>previous</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <specifier>static</specifier>
        <specifier>final</specifier> class
        <name>
            <name>StrongExpirableEvictableEntry</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>StrongEntry</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>ReferenceEntry</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <constructor>
                <name>StrongExpirableEvictableEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>hash</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>next</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">// The code below is exactly the same for each expirable entry type.</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <name>volatile</name>
                        <name>long</name>
                    </type>
                    <name>time</name> =
                    <init>
                        <expr>
                            <name><name>Long</name>.
                                <name>MAX_VALUE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>getExpirationTime</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>time</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setExpirationTime</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>time</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>time</name>
                            </name>
                            =
                            <name>time</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// Guarded By Segment.this</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>nextExpirable</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNextExpirable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>nextExpirable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNextExpirable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>nextExpirable</name>
                            </name>
                            =
                            <name>next</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// Guarded By Segment.this</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>previousExpirable</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getPreviousExpirable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>previousExpirable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPreviousExpirable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>previousExpirable</name>
                            </name>
                            =
                            <name>previous</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// The code below is exactly the same for each evictable entry type.</comment>

            <comment type="line">// Guarded By Segment.this</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>nextEvictable</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNextEvictable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>nextEvictable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNextEvictable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>nextEvictable</name>
                            </name>
                            =
                            <name>next</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// Guarded By Segment.this</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>previousEvictable</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getPreviousEvictable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>previousEvictable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPreviousEvictable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>previousEvictable</name>
                            </name>
                            =
                            <name>previous</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <comment type="javadoc">/**
        * Used for softly-referenced keys.
        */
    </comment>
    <class>
        <specifier>static</specifier>
        class
        <name>
            <name>SoftEntry</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>SoftReference</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>ReferenceEntry</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <constructor>
                <name>SoftEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceQueue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>queue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>queue</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>hash</name>
                            </name>
                            =
                            <name>hash</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>next</name>
                            </name>
                            =
                            <name>next</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>getKey</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>get</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// null expiration</comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>getExpirationTime</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setExpirationTime</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>time</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNextExpirable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNextExpirable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getPreviousExpirable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPreviousExpirable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="line">// null eviction</comment>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNextEvictable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNextEvictable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getPreviousEvictable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPreviousEvictable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="line">// The code below is exactly the same for each entry type.</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>hash</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>next</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>volatile</name>
                        <name>
                            <name>ValueReference</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>valueReference</name> =
                    <init>
                        <expr>
                            <call>
                                <name>unset</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ValueReference</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getValueReference</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>valueReference</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setValueReference</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ValueReference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>valueReference</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ValueReference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name> =
                            <init>
                                <expr>
                                    <name><name>this</name>.
                                        <name>valueReference</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>valueReference</name>
                            </name>
                            =
                            <name>valueReference</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>previous</name>.
                                    <name>clear</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>valueReference</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getHash</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>hash</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNext</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>next</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <specifier>static</specifier>
        <specifier>final</specifier> class
        <name>
            <name>SoftExpirableEntry</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>SoftEntry</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>ReferenceEntry</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <constructor>
                <name>SoftExpirableEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceQueue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>queue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>queue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>hash</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>next</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">// The code below is exactly the same for each expirable entry type.</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <name>volatile</name>
                        <name>long</name>
                    </type>
                    <name>time</name> =
                    <init>
                        <expr>
                            <name><name>Long</name>.
                                <name>MAX_VALUE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>getExpirationTime</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>time</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setExpirationTime</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>time</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>time</name>
                            </name>
                            =
                            <name>time</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// Guarded By Segment.this</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>nextExpirable</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNextExpirable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>nextExpirable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNextExpirable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>nextExpirable</name>
                            </name>
                            =
                            <name>next</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// Guarded By Segment.this</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>previousExpirable</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getPreviousExpirable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>previousExpirable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPreviousExpirable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>previousExpirable</name>
                            </name>
                            =
                            <name>previous</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <specifier>static</specifier>
        <specifier>final</specifier> class
        <name>
            <name>SoftEvictableEntry</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>SoftEntry</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>ReferenceEntry</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <constructor>
                <name>SoftEvictableEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceQueue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>queue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>queue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>hash</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>next</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">// The code below is exactly the same for each evictable entry type.</comment>

            <comment type="line">// Guarded By Segment.this</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>nextEvictable</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNextEvictable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>nextEvictable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNextEvictable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>nextEvictable</name>
                            </name>
                            =
                            <name>next</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// Guarded By Segment.this</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>previousEvictable</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getPreviousEvictable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>previousEvictable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPreviousEvictable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>previousEvictable</name>
                            </name>
                            =
                            <name>previous</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <specifier>static</specifier>
        <specifier>final</specifier> class
        <name>
            <name>SoftExpirableEvictableEntry</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>SoftEntry</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>ReferenceEntry</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <constructor>
                <name>SoftExpirableEvictableEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceQueue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>queue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>queue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>hash</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>next</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">// The code below is exactly the same for each expirable entry type.</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <name>volatile</name>
                        <name>long</name>
                    </type>
                    <name>time</name> =
                    <init>
                        <expr>
                            <name><name>Long</name>.
                                <name>MAX_VALUE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>getExpirationTime</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>time</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setExpirationTime</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>time</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>time</name>
                            </name>
                            =
                            <name>time</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// Guarded By Segment.this</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>nextExpirable</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNextExpirable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>nextExpirable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNextExpirable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>nextExpirable</name>
                            </name>
                            =
                            <name>next</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// Guarded By Segment.this</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>previousExpirable</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getPreviousExpirable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>previousExpirable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPreviousExpirable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>previousExpirable</name>
                            </name>
                            =
                            <name>previous</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// The code below is exactly the same for each evictable entry type.</comment>

            <comment type="line">// Guarded By Segment.this</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>nextEvictable</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNextEvictable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>nextEvictable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNextEvictable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>nextEvictable</name>
                            </name>
                            =
                            <name>next</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// Guarded By Segment.this</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>previousEvictable</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getPreviousEvictable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>previousEvictable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPreviousEvictable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>previousEvictable</name>
                            </name>
                            =
                            <name>previous</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <comment type="javadoc">/**
        * Used for weakly-referenced keys.
        */
    </comment>
    <class>
        <specifier>static</specifier>
        class
        <name>
            <name>WeakEntry</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>WeakReference</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>ReferenceEntry</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <constructor>
                <name>WeakEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceQueue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>queue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>queue</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>hash</name>
                            </name>
                            =
                            <name>hash</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>next</name>
                            </name>
                            =
                            <name>next</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>getKey</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>get</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// null expiration</comment>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>getExpirationTime</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setExpirationTime</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>time</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNextExpirable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNextExpirable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getPreviousExpirable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPreviousExpirable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="line">// null eviction</comment>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNextEvictable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNextEvictable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getPreviousEvictable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPreviousEvictable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="line">// The code below is exactly the same for each entry type.</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>hash</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>next</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>volatile</name>
                        <name>
                            <name>ValueReference</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>valueReference</name> =
                    <init>
                        <expr>
                            <call>
                                <name>unset</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ValueReference</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getValueReference</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>valueReference</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setValueReference</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ValueReference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>valueReference</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ValueReference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name> =
                            <init>
                                <expr>
                                    <name><name>this</name>.
                                        <name>valueReference</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>valueReference</name>
                            </name>
                            =
                            <name>valueReference</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>previous</name>.
                                    <name>clear</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>valueReference</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getHash</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>hash</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNext</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>next</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <specifier>static</specifier>
        <specifier>final</specifier> class
        <name>
            <name>WeakExpirableEntry</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>WeakEntry</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>ReferenceEntry</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <constructor>
                <name>WeakExpirableEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceQueue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>queue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>queue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>hash</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>next</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">// The code below is exactly the same for each expirable entry type.</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <name>volatile</name>
                        <name>long</name>
                    </type>
                    <name>time</name> =
                    <init>
                        <expr>
                            <name><name>Long</name>.
                                <name>MAX_VALUE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>getExpirationTime</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>time</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setExpirationTime</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>time</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>time</name>
                            </name>
                            =
                            <name>time</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// Guarded By Segment.this</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>nextExpirable</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNextExpirable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>nextExpirable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNextExpirable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>nextExpirable</name>
                            </name>
                            =
                            <name>next</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// Guarded By Segment.this</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>previousExpirable</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getPreviousExpirable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>previousExpirable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPreviousExpirable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>previousExpirable</name>
                            </name>
                            =
                            <name>previous</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <specifier>static</specifier>
        <specifier>final</specifier> class
        <name>
            <name>WeakEvictableEntry</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>WeakEntry</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>ReferenceEntry</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <constructor>
                <name>WeakEvictableEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceQueue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>queue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>queue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>hash</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>next</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">// The code below is exactly the same for each evictable entry type.</comment>

            <comment type="line">// Guarded By Segment.this</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>nextEvictable</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNextEvictable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>nextEvictable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNextEvictable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>nextEvictable</name>
                            </name>
                            =
                            <name>next</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// Guarded By Segment.this</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>previousEvictable</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getPreviousEvictable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>previousEvictable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPreviousEvictable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>previousEvictable</name>
                            </name>
                            =
                            <name>previous</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <specifier>static</specifier>
        <specifier>final</specifier> class
        <name>
            <name>WeakExpirableEvictableEntry</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>WeakEntry</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>ReferenceEntry</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <constructor>
                <name>WeakExpirableEvictableEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceQueue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>queue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>queue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>hash</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>next</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">// The code below is exactly the same for each expirable entry type.</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <name>volatile</name>
                        <name>long</name>
                    </type>
                    <name>time</name> =
                    <init>
                        <expr>
                            <name><name>Long</name>.
                                <name>MAX_VALUE</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>getExpirationTime</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>time</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setExpirationTime</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>time</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>time</name>
                            </name>
                            =
                            <name>time</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// Guarded By Segment.this</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>nextExpirable</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNextExpirable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>nextExpirable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNextExpirable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>nextExpirable</name>
                            </name>
                            =
                            <name>next</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// Guarded By Segment.this</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>previousExpirable</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getPreviousExpirable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>previousExpirable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPreviousExpirable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>previousExpirable</name>
                            </name>
                            =
                            <name>previous</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// The code below is exactly the same for each evictable entry type.</comment>

            <comment type="line">// Guarded By Segment.this</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>nextEvictable</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getNextEvictable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>nextEvictable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setNextEvictable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>nextEvictable</name>
                            </name>
                            =
                            <name>next</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// Guarded By Segment.this</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>previousEvictable</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getPreviousEvictable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>previousEvictable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPreviousEvictable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>previousEvictable</name>
                            </name>
                            =
                            <name>previous</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <comment type="javadoc">/**
        * References a weak value.
        */
    </comment>
    <class>
        <specifier>static</specifier>
        <specifier>final</specifier> class
        <name>
            <name>WeakValueReference</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>WeakReference</name>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>ValueReference</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entry</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>WeakValueReference</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceQueue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>queue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>referent</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entry</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>referent</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>queue</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>entry</name>
                            </name>
                            =
                            <name>entry</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getEntry</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>entry</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ValueReference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>clear</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ValueReference</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>copyFor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceQueue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>queue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entry</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>WeakValueReference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>queue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>entry</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isComputingReference</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>V</name>
                </type>
                <name>waitForValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>get</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <comment type="javadoc">/**
        * References a soft value.
        */
    </comment>
    <class>
        <specifier>static</specifier>
        <specifier>final</specifier> class
        <name>
            <name>SoftValueReference</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>SoftReference</name>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>ValueReference</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entry</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>SoftValueReference</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceQueue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>queue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>referent</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entry</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>referent</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>queue</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>entry</name>
                            </name>
                            =
                            <name>entry</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getEntry</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>entry</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ValueReference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>clear</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ValueReference</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>copyFor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceQueue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>queue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entry</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>SoftValueReference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>queue</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>entry</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isComputingReference</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>V</name>
                </type>
                <name>waitForValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>get</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <comment type="javadoc">/**
        * References a strong value.
        */
    </comment>
    <class>
        <specifier>static</specifier>
        <specifier>final</specifier> class
        <name>
            <name>StrongValueReference</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <implements>implements
                <name>
                    <name>ValueReference</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>V</name>
                    </type>
                    <name>referent</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>StrongValueReference</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>referent</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>referent</name>
                            </name>
                            =
                            <name>referent</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>V</name>
                </type>
                <name>get</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>referent</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getEntry</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ValueReference</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>copyFor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceQueue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>queue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entry</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isComputingReference</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>V</name>
                </type>
                <name>waitForValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>get</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ValueReference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{}</block>
            </function>
            }
        </block>
    </class>

    <comment type="javadoc">/**
        * Applies a supplemental hash function to a given hash code, which defends against poor quality
        * hash functions. This is critical when the concurrent hash map uses power-of-two length hash
        * tables, that otherwise encounter collisions for hash codes that do not differ in lower or
        * upper bits.
        *
        * @param h hash code
        */
    </comment>
    <function>
        <type>
            <specifier>static</specifier>
            <name>int</name>
        </type>
        <name>rehash</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>h</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <comment type="line">// Spread bits to regularize both segment and index locations,</comment>
            <comment type="line">// using variant of single-word Wang/Jenkins hash.</comment>
            <comment type="line">// TODO(kevinb): use Hashing/move this to Hashing?</comment>
            <expr_stmt>
                <expr>
                    <name>h</name>
                    += (<name>h</name> &lt;&lt; 15) ^ 0xffffcd7d
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <name>h</name>
                    ^= (<name>h</name> &gt;&gt;&gt; 10)
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <name>h</name>
                    += (<name>h</name> &lt;&lt; 3)
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <name>h</name>
                    ^= (<name>h</name> &gt;&gt;&gt; 6)
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <name>h</name>
                    += (<name>h</name> &lt;&lt; 2) + (<name>h</name> &lt;&lt; 14)
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>
                    <name>h</name>
                    ^ (<name>h</name> &gt;&gt;&gt; 16)
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * This method is a convenience for testing. Code should call {@link Segment#newEntry} directly.
        */
    </comment>
    <comment type="line">// Guarded By Segment.this</comment>
    <function>
        <type>
            <annotation>@
                <name>VisibleForTesting</name>
            </annotation>
            <name>
                <name>ReferenceEntry</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>newEntry</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>K</name>
                    </type>
                    <name>key</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>hash</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>next</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name>segmentFor</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    .
                    <call>
                        <name>newEntry</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>key</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>next</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * This method is a convenience for testing. Code should call {@link Segment#copyEntry} directly.
        */
    </comment>
    <comment type="line">// Guarded By Segment.this</comment>
    <function>
        <type>
            <annotation>@
                <name>VisibleForTesting</name>
            </annotation>
            <name>
                <name>ReferenceEntry</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>copyEntry</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>original</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>newNext</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>hash</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>original</name>.
                                    <name>getHash</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <return>return
                <expr>
                    <call>
                        <name>segmentFor</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    .
                    <call>
                        <name>copyEntry</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>original</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>newNext</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * This method is a convenience for testing. Code should call {@link Segment#setValue} instead.
        */
    </comment>
    <comment type="line">// Guarded By Segment.this</comment>
    <function>
        <type>
            <annotation>@
                <name>VisibleForTesting</name>
            </annotation>
            <name>
                <name>ValueReference</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>newValueReference</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entry</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>V</name>
                    </type>
                    <name>value</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>hash</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>entry</name>.
                                    <name>getHash</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <return>return
                <expr>
                    <call>
                        <name><name>valueStrength</name>.
                            <name>referenceValue</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>segmentFor</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>hash</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>entry</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>value</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <name>int</name>
        </type>
        <name>hash</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Object</name>
                    </type>
                    <name>key</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>h</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>keyEquivalence</name>.
                                    <name>hash</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <return>return
                <expr>
                    <call>
                        <name>rehash</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>h</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <name>void</name>
        </type>
        <name>reclaimValue</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ValueReference</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>valueReference</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entry</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>valueReference</name>.
                                    <name>getEntry</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>hash</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>entry</name>.
                                    <name>getHash</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>segmentFor</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    .
                    <call>
                        <name>reclaimValue</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>entry</name>.
                                            <name>getKey</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>valueReference</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            }
        </block>
    </function>

    <function>
        <type>
            <name>void</name>
        </type>
        <name>reclaimKey</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entry</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>hash</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>entry</name>.
                                    <name>getHash</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>segmentFor</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    .
                    <call>
                        <name>reclaimKey</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>entry</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * This method is a convenience for testing. Code should call {@link Segment#getLiveValue}
        * instead.
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>VisibleForTesting</name>
            </annotation>
            <name>boolean</name>
        </type>
        <name>isLive</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entry</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name>segmentFor</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>entry</name>.
                                            <name>getHash</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    .
                    <call>
                        <name>getLiveValue</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>entry</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    !=
                    <name>null</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns the segment that should be used for a key with the given hash.
        *
        * @param hash the hash code for the key
        * @return the segment
        */
    </comment>
    <function>
        <type>
            <name>
                <name>Segment</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>segmentFor</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>hash</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <comment type="line">// TODO(fry): Lazily create segments?</comment>
            <return>return
                <expr>
                    <name>
                        <name>segments</name>
                        <index>[
                            <expr>(<name>hash</name> &gt;&gt;&gt; <name>segmentShift</name>) &amp;
                                <name>segmentMask</name>
                            </expr>
                            ]
                        </index>
                    </name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <name>
                <name>Segment</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>createSegment</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>initialCapacity</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>maxSegmentSize</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>Segment</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>this</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>initialCapacity</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>maxSegmentSize</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Gets the value from an entry. Returns {@code null} if the entry is invalid,
        * partially-collected, computing, or expired. Unlike {@link Segment#getLiveValue} this method
        * does not attempt to clean up stale entries.
        */
    </comment>
    <function>
        <type>
            <name>V</name>
        </type>
        <name>getLiveValue</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entry</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>
                        <call>
                            <name><name>entry</name>.
                                <name>getKey</name>
                            </name>
                            <argument_list>()</argument_list>
                        </call>
                        ==
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <name>null</name>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <decl_stmt>
                <decl>
                    <type>
                        <name>V</name>
                    </type>
                    <name>value</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>entry</name>.
                                    <name>getValueReference</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>get</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <if>if
                <condition>(
                    <expr>
                        <name>value</name>
                        ==
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <name>null</name>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
            </if>

            <if>if
                <condition>(
                    <expr>
                        <call>
                            <name>expires</name>
                            <argument_list>()</argument_list>
                        </call>
                        &amp;&amp;
                        <call>
                            <name>isExpired</name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name>entry</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <name>null</name>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <return>return
                <expr>
                    <name>value</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="line">// expiration</comment>

    <comment type="javadoc">/**
        * Returns {@code true} if the entry has expired.
        */
    </comment>
    <function>
        <type>
            <name>boolean</name>
        </type>
        <name>isExpired</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entry</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name>isExpired</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>entry</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>ticker</name>.
                                            <name>read</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns {@code true} if the entry has expired.
        */
    </comment>
    <function>
        <type>
            <name>boolean</name>
        </type>
        <name>isExpired</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entry</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>now</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <comment type="line">// if the expiration time had overflowed, this "undoes" the overflow</comment>
            <return>return
                <expr>
                    <name>now</name>
                    -
                    <call>
                        <name><name>entry</name>.
                            <name>getExpirationTime</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                    &gt; 0
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="line">// Guarded By Segment.this</comment>
    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>void</name>
        </type>
        <name>connectExpirables</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>previous</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>next</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>previous</name>.
                            <name>setNextExpirable</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>next</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>next</name>.
                            <name>setPreviousExpirable</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>previous</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            }
        </block>
    </function>

    <comment type="line">// Guarded By Segment.this</comment>
    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>void</name>
        </type>
        <name>nullifyExpirable</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>nulled</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>nullEntry</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>nulled</name>.
                            <name>setNextExpirable</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>nullEntry</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>nulled</name>.
                            <name>setPreviousExpirable</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>nullEntry</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            }
        </block>
    </function>

    <comment type="line">// eviction</comment>

    <comment type="javadoc">/**
        * Notifies listeners that an entry has been automatically removed due to expiration, eviction,
        * or eligibility for garbage collection. This should be called every time expireEntries or
        * evictEntry is called (once the lock is released).
        */
    </comment>
    <function>
        <type>
            <name>void</name>
        </type>
        <name>processPendingNotifications</name>
        <parameter_list>()</parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>RemovalNotification</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>notification</name>
                </decl>
                ;
            </decl_stmt>
            <while>while
                <condition>(
                    <expr>(<name>notification</name> =
                        <call>
                            <name><name>removalNotificationQueue</name>.
                                <name>poll</name>
                            </name>
                            <argument_list>()</argument_list>
                        </call>
                        ) !=
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <block>{
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>removalListener</name>.
                                            <name>onRemoval</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>notification</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>Exception</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>logger</name>.
                                                <name>log</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>Level</name>.
                                                            <name>WARNING</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>"Exception thrown by removal listener"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </while>
            }
        </block>
    </function>

    <comment type="javadoc">/** Links the evitables together. */</comment>
    <comment type="line">// Guarded By Segment.this</comment>
    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>void</name>
        </type>
        <name>connectEvictables</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>previous</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>next</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>previous</name>.
                            <name>setNextEvictable</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>next</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>next</name>.
                            <name>setPreviousEvictable</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>previous</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            }
        </block>
    </function>

    <comment type="line">// Guarded By Segment.this</comment>
    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>void</name>
        </type>
        <name>nullifyEvictable</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>nulled</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>nullEntry</name> =
                    <init>
                        <expr>
                            <call>
                                <name>nullEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>nulled</name>.
                            <name>setNextEvictable</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>nullEntry</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>nulled</name>.
                            <name>setPreviousEvictable</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>nullEntry</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>SuppressWarnings</name>
                <argument_list>("unchecked")</argument_list>
            </annotation>
            <specifier>final</specifier>
            <name>
                <name>Segment</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
            <index>[]</index>
        </type>
        <name>newSegmentArray</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>ssize</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <name>
                        <name>Segment</name>
                        <index>[
                            <expr>
                                <name>ssize</name>
                            </expr>
                            ]
                        </index>
                    </name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="line">// Inner Classes</comment>

    <comment type="javadoc">/**
        * Segments are specialized versions of hash tables. This subclass inherits from ReentrantLock
        * opportunistically, just to simplify some locking and avoid separate construction.
        */
    </comment>
    <class>
        <annotation>@
            <name>SuppressWarnings</name>
            <argument_list>("serial")</argument_list>
        </annotation>
        <comment type="line">// This class is never serialized.</comment>
        <specifier>static</specifier>
        class
        <name>
            <name>Segment</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>ReentrantLock</name>
            </extends>
        </super>
        <block>{

            <comment type="block">/*
                * TODO(fry): Consider copying variables (like evictsBySize) from outer class into this class.
                * It will require more memory but will reduce indirection.
                */
            </comment>

            <comment type="block">/*
                * Segments maintain a table of entry lists that are ALWAYS kept in a consistent state, so can
                * be read without locking. Next fields of nodes are immutable (final). All list additions are
                * performed at the front of each bin. This makes it easy to check changes, and also fast to
                * traverse. When nodes would otherwise be changed, new nodes are created to replace them. This
                * works well for hash tables since the bin lists tend to be short. (The average length is less
                * than two.)
                *
                * Read operations can thus proceed without locking, but rely on selected uses of volatiles to
                * ensure that completed write operations performed by other threads are noticed. For most
                * purposes, the "count" field, tracking the number of elements, serves as that volatile
                * variable ensuring visibility. This is convenient because this field needs to be read in many
                * read operations anyway:
                *
                * - All (unsynchronized) read operations must first read the "count" field, and should not
                * look at table entries if it is 0.
                *
                * - All (synchronized) write operations should write to the "count" field after structurally
                * changing any bin. The operations must not take any action that could even momentarily
                * cause a concurrent read operation to see inconsistent data. This is made easier by the
                * nature of the read operations in Map. For example, no operation can reveal that the table
                * has grown but the threshold has not yet been updated, so there are no atomicity requirements
                * for this with respect to reads.
                *
                * As a guide, all critical volatile reads and writes to the count field are marked in code
                * comments.
                */
            </comment>

            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>Weak</name>
                        </annotation>
                        <specifier>final</specifier>
                        <name>
                            <name>MapMakerInternalMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>map</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The number of live elements in this segment's region. This does not include unset elements
                * which are awaiting cleanup.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>volatile</name>
                        <name>int</name>
                    </type>
                    <name>count</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Number of updates that alter the size of the table. This is used during bulk-read methods to
                * make sure they see a consistent snapshot: If modCounts change during a traversal of segments
                * computing size or checking containsValue, then we might have an inconsistent view of state
                * so (usually) must retry.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>modCount</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The table is expanded when its size exceeds this threshold. (The value of this field is
                * always {@code (int) (capacity * 0.75)}.)
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>threshold</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The per-segment table.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>volatile</name>
                        <name>
                            <name>AtomicReferenceArray</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>ReferenceEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>table</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The maximum size of this map. MapMaker.UNSET_INT if there is no maximum.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>maxSegmentSize</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The key reference queue contains entries whose keys have been garbage collected, and which
                * need to be cleaned up internally.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>ReferenceQueue</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>keyReferenceQueue</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The value reference queue contains value references whose values have been garbage collected,
                * and which need to be cleaned up internally.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>ReferenceQueue</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>valueReferenceQueue</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The recency queue is used to record which entries were accessed for updating the eviction
                * list's ordering. It is drained as a batch operation when either the DRAIN_THRESHOLD is
                * crossed or a write occurs on the segment.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Queue</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>ReferenceEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>recencyQueue</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * A counter of the number of reads since the last write, used to drain queues on a small
                * fraction of read operations.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>AtomicInteger</name>
                    </type>
                    <name>readCount</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>AtomicInteger</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * A queue of elements currently in the map, ordered by access time. Elements are added to the
                * tail of the queue on access/write.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>GuardedBy</name>
                            <argument_list>("this")</argument_list>
                        </annotation>
                        <specifier>final</specifier>
                        <name>
                            <name>Queue</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>ReferenceEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>evictionQueue</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * A queue of elements currently in the map, ordered by expiration time (either access or write
                * time). Elements are added to the tail of the queue on access/write.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>GuardedBy</name>
                            <argument_list>("this")</argument_list>
                        </annotation>
                        <specifier>final</specifier>
                        <name>
                            <name>Queue</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>ReferenceEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>expirationQueue</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>Segment</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>MapMakerInternalMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>map</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>initialCapacity</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>maxSegmentSize</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>map</name>
                            </name>
                            =
                            <name>map</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>maxSegmentSize</name>
                            </name>
                            =
                            <name>maxSegmentSize</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>initTable</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>newEntryArray</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>initialCapacity</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>keyReferenceQueue</name>
                            =
                            <call>
                                <name><name>map</name>.
                                    <name>usesKeyReferences</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ? new
                            <call>
                                <name>
                                    <name>ReferenceQueue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            :
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>valueReferenceQueue</name>
                            =
                            <call>
                                <name><name>map</name>.
                                    <name>usesValueReferences</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ? new
                            <call>
                                <name>
                                    <name>ReferenceQueue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            :
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>recencyQueue</name>
                            = (
                            <call>
                                <name><name>map</name>.
                                    <name>evictsBySize</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ||
                            <call>
                                <name><name>map</name>.
                                    <name>expiresAfterAccess</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            )
                            ? new
                            <call>
                                <name>
                                    <name>ConcurrentLinkedQueue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>ReferenceEntry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            :
                            <name><name>MapMakerInternalMap</name>.
                                <name>
                                    <name/>
                                </name>
                            </name>
                            &lt;
                            <name>
                                <name>ReferenceEntry</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            &gt;
                            <call>
                                <name>discardingQueue</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>evictionQueue</name>
                            =
                            <call>
                                <name><name>map</name>.
                                    <name>evictsBySize</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ? new
                            <call>
                                <name>
                                    <name>EvictionQueue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            :
                            <name><name>MapMakerInternalMap</name>.
                                <name>
                                    <name/>
                                </name>
                            </name>
                            &lt;
                            <name>
                                <name>ReferenceEntry</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            &gt;
                            <call>
                                <name>discardingQueue</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>expirationQueue</name>
                            =
                            <call>
                                <name><name>map</name>.
                                    <name>expires</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ? new
                            <call>
                                <name>
                                    <name>ExpirationQueue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            :
                            <name><name>MapMakerInternalMap</name>.
                                <name>
                                    <name/>
                                </name>
                            </name>
                            &lt;
                            <name>
                                <name>ReferenceEntry</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            &gt;
                            <call>
                                <name>discardingQueue</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <name>
                        <name>AtomicReferenceArray</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>newEntryArray</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>AtomicReferenceArray</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>ReferenceEntry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>size</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>void</name>
                </type>
                <name>initTable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>AtomicReferenceArray</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>ReferenceEntry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>newTable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>threshold</name>
                            </name>
                            =
                            <call>
                                <name><name>newTable</name>.
                                    <name>length</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            * 3 / 4
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// 0.75</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>threshold</name>
                                </name>
                                ==
                                <name>maxSegmentSize</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// prevent spurious expansion before eviction</comment>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>threshold</name>
                                        </name>
                                        ++
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>table</name>
                            </name>
                            =
                            <name>newTable</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>GuardedBy</name>
                        <argument_list>("this")</argument_list>
                    </annotation>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>newEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>map</name>.<name>entryFactory</name>.
                                    <name>newEntry</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>hash</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>next</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Copies {@code original} into a new entry chained to {@code newNext}. Returns the new entry,
                * or {@code null} if {@code original} was already garbage collected.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GuardedBy</name>
                        <argument_list>("this")</argument_list>
                    </annotation>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>copyEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>original</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>newNext</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>original</name>.
                                        <name>getKey</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// key collected</comment>
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ValueReference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>valueReference</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>original</name>.
                                            <name>getValueReference</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>value</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>valueReference</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>(<name>value</name> == <name>null</name>) &amp;&amp; !
                                <call>
                                    <name><name>valueReference</name>.
                                        <name>isComputingReference</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// value collected</comment>
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>newEntry</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>map</name>.<name>entryFactory</name>.
                                            <name>copyEntry</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>this</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>original</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>newNext</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>newEntry</name>.
                                    <name>setValueReference</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>valueReference</name>.
                                                    <name>copyFor</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>this</name>.
                                                                <name>valueReferenceQueue</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>value</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>newEntry</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>newEntry</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets a new value of an entry. Adds newly created entries at the end of the expiration queue.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GuardedBy</name>
                        <argument_list>("this")</argument_list>
                    </annotation>
                    <name>void</name>
                </type>
                <name>setValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entry</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ValueReference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>valueReference</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>map</name>.<name>valueStrength</name>.
                                            <name>referenceValue</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>this</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>entry</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>value</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>entry</name>.
                                    <name>setValueReference</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>valueReference</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>recordWrite</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>entry</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="line">// reference queues, for garbage collection cleanup</comment>

            <comment type="javadoc">/**
                * Cleanup collected entries when the lock is available.
                */
            </comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>tryDrainReferenceQueues</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>tryLock</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <try>try
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>drainReferenceQueues</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <finally>finally
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>unlock</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </finally>
                                </try>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Drain the key and value reference queues, cleaning up internal entries containing garbage
                * collected keys or values.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GuardedBy</name>
                        <argument_list>("this")</argument_list>
                    </annotation>
                    <name>void</name>
                </type>
                <name>drainReferenceQueues</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>map</name>.
                                        <name>usesKeyReferences</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>drainKeyReferenceQueue</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>map</name>.
                                        <name>usesValueReferences</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>drainValueReferenceQueue</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>GuardedBy</name>
                        <argument_list>("this")</argument_list>
                    </annotation>
                    <name>void</name>
                </type>
                <name>drainKeyReferenceQueue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Reference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>K</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>ref</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>(<name>ref</name> =
                                <call>
                                    <name><name>keyReferenceQueue</name>.
                                        <name>poll</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ) !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <annotation>@
                                            <name>SuppressWarnings</name>
                                            <argument_list>("unchecked")</argument_list>
                                        </annotation>
                                        <name>
                                            <name>ReferenceEntry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>entry</name> =
                                    <init>
                                        <expr>(
                                            <name>
                                                <name>ReferenceEntry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                            )
                                            <name>ref</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>map</name>.
                                            <name>reclaimKey</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>entry</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>++<name>i</name> ==
                                        <name>DRAIN_MAX</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <break>break;</break>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>GuardedBy</name>
                        <argument_list>("this")</argument_list>
                    </annotation>
                    <name>void</name>
                </type>
                <name>drainValueReferenceQueue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Reference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>ref</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>(<name>ref</name> =
                                <call>
                                    <name><name>valueReferenceQueue</name>.
                                        <name>poll</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ) !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <annotation>@
                                            <name>SuppressWarnings</name>
                                            <argument_list>("unchecked")</argument_list>
                                        </annotation>
                                        <name>
                                            <name>ValueReference</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>valueReference</name> =
                                    <init>
                                        <expr>(
                                            <name>
                                                <name>ValueReference</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                            )
                                            <name>ref</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>map</name>.
                                            <name>reclaimValue</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>valueReference</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>++<name>i</name> ==
                                        <name>DRAIN_MAX</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <break>break;</break>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Clears all entries from the key and value reference queues.
                */
            </comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>clearReferenceQueues</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>map</name>.
                                        <name>usesKeyReferences</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>clearKeyReferenceQueue</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>map</name>.
                                        <name>usesValueReferences</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>clearValueReferenceQueue</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>void</name>
                </type>
                <name>clearKeyReferenceQueue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <while>while
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>keyReferenceQueue</name>.
                                        <name>poll</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{}</block>
                    </while>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>void</name>
                </type>
                <name>clearValueReferenceQueue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <while>while
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>valueReferenceQueue</name>.
                                        <name>poll</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{}</block>
                    </while>
                    }
                </block>
            </function>

            <comment type="line">// recency queue, shared by expiration and eviction</comment>

            <comment type="javadoc">/**
                * Records the relative order in which this read was performed by adding {@code entry} to the
                * recency queue. At write-time, or when the queue is full past the threshold, the queue will
                * be drained and the entries therein processed.
                *
                * &lt;p&gt;Note: locked reads should use {@link #recordLockedRead}.
                */
            </comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>recordRead</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entry</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>map</name>.
                                        <name>expiresAfterAccess</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>recordExpirationTime</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>entry</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>map</name>.
                                                            <name>expireAfterAccessNanos</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>recencyQueue</name>.
                                    <name>add</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>entry</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Updates the eviction metadata that {@code entry} was just read. This currently amounts to
                * adding {@code entry} to relevant eviction lists.
                *
                * &lt;p&gt;Note: this method should only be called under lock, as it directly manipulates the
                * eviction queues. Unlocked reads should use {@link #recordRead}.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GuardedBy</name>
                        <argument_list>("this")</argument_list>
                    </annotation>
                    <name>void</name>
                </type>
                <name>recordLockedRead</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entry</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>evictionQueue</name>.
                                    <name>add</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>entry</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>map</name>.
                                        <name>expiresAfterAccess</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>recordExpirationTime</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>entry</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>map</name>.
                                                            <name>expireAfterAccessNanos</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>expirationQueue</name>.
                                                <name>add</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>entry</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Updates eviction metadata that {@code entry} was just written. This currently amounts to
                * adding {@code entry} to relevant eviction lists.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GuardedBy</name>
                        <argument_list>("this")</argument_list>
                    </annotation>
                    <name>void</name>
                </type>
                <name>recordWrite</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entry</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// we are already under lock, so drain the recency queue immediately</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>drainRecencyQueue</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>evictionQueue</name>.
                                    <name>add</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>entry</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>map</name>.
                                        <name>expires</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// currently MapMaker ensures that expireAfterWrite and</comment>
                                <comment type="line">// expireAfterAccess are mutually exclusive</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>long</name>
                                        </type>
                                        <name>expiration</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>map</name>.
                                                        <name>expiresAfterAccess</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                ?
                                                <name><name>map</name>.
                                                    <name>expireAfterAccessNanos</name>
                                                </name>
                                                :
                                                <name><name>map</name>.
                                                    <name>expireAfterWriteNanos</name>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>recordExpirationTime</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>entry</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>expiration</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>expirationQueue</name>.
                                                <name>add</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>entry</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Drains the recency queue, updating eviction metadata that the entries therein were read in
                * the specified relative order. This currently amounts to adding them to relevant eviction
                * lists (accounting for the fact that they could have been removed from the map since being
                * added to the recency queue).
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GuardedBy</name>
                        <argument_list>("this")</argument_list>
                    </annotation>
                    <name>void</name>
                </type>
                <name>drainRecencyQueue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>e</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>(<name>e</name> =
                                <call>
                                    <name><name>recencyQueue</name>.
                                        <name>poll</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ) !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <comment type="line">// An entry may be in the recency queue despite it being removed from
                            </comment>
                            <comment type="line">// the map . This can occur when the entry was concurrently read while
                                a
                            </comment>
                            <comment type="line">// writer is removing it from the segment or after a clear has
                                removed
                            </comment>
                            <comment type="line">// all of the segment's entries.</comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>evictionQueue</name>.
                                                <name>contains</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>evictionQueue</name>.
                                                        <name>add</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>e</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>map</name>.
                                                <name>expiresAfterAccess</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        &amp;&amp;
                                        <call>
                                            <name><name>expirationQueue</name>.
                                                <name>contains</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>expirationQueue</name>.
                                                        <name>add</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>e</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>

            <comment type="line">// expiration</comment>

            <function>
                <type>
                    <name>void</name>
                </type>
                <name>recordExpirationTime</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entry</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>expirationNanos</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// might overflow, but that's okay (see isExpired())</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>entry</name>.
                                    <name>setExpirationTime</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>map</name>.<name>ticker</name>.
                                                    <name>read</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            +
                                            <name>expirationNanos</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Cleanup expired entries when the lock is available.
                */
            </comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>tryExpireEntries</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>tryLock</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <try>try
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>expireEntries</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <finally>finally
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>unlock</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <comment type="line">// don't call postWriteCleanup as we're in a read
                                            </comment>
                                            }
                                        </block>
                                    </finally>
                                </try>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>GuardedBy</name>
                        <argument_list>("this")</argument_list>
                    </annotation>
                    <name>void</name>
                </type>
                <name>expireEntries</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>drainRecencyQueue</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>expirationQueue</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// There's no point in calling nanoTime() if we have no entries
                                    to
                                </comment>
                                <comment type="line">// expire.</comment>
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>now</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>map</name>.<name>ticker</name>.
                                            <name>read</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>e</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>(<name>e</name> =
                                <call>
                                    <name><name>expirationQueue</name>.
                                        <name>peek</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ) != <name>null</name> &amp;&amp;
                                <call>
                                    <name><name>map</name>.
                                        <name>isExpired</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>e</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>now</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name>removeEntry</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>e</name>.
                                                                <name>getHash</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>RemovalCause</name>.
                                                            <name>EXPIRED</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>AssertionError</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>

            <comment type="line">// eviction</comment>

            <function>
                <type>
                    <name>void</name>
                </type>
                <name>enqueueNotification</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entry</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>RemovalCause</name>
                            </type>
                            <name>cause</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>enqueueNotification</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>entry</name>.
                                                    <name>getKey</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>entry</name>.
                                                    <name>getHash</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>entry</name>.
                                                    <name>getValueReference</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>get</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>cause</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>void</name>
                </type>
                <name>enqueueNotification</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>V</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>RemovalCause</name>
                            </type>
                            <name>cause</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>map</name>.
                                    <name>removalNotificationQueue</name>
                                </name>
                                !=
                                <name>DISCARDING_QUEUE</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>RemovalNotification</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>notification</name> =
                                        <init>
                                            <expr>new
                                                <call>
                                                    <name>
                                                        <name>RemovalNotification</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>K</name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>V</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>key</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>value</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>cause</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>map</name>.<name>removalNotificationQueue</name>.
                                                <name>offer</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>notification</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Performs eviction if the segment is full. This should only be called prior to adding a new
                * entry and increasing {@code count}.
                *
                * @return {@code true} if eviction occurred
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GuardedBy</name>
                        <argument_list>("this")</argument_list>
                    </annotation>
                    <name>boolean</name>
                </type>
                <name>evictEntries</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>map</name>.
                                        <name>evictsBySize</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &amp;&amp; <name>count</name> &gt;=
                                <name>maxSegmentSize</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>drainRecencyQueue</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>ReferenceEntry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>e</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>evictionQueue</name>.
                                                        <name>remove</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <call>
                                                <name>removeEntry</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>e</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>e</name>.
                                                                    <name>getHash</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>RemovalCause</name>.
                                                                <name>SIZE</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>AssertionError</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns first entry of bin for given hash.
                */
            </comment>
            <function>
                <type>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getFirst</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// read this volatile field only once</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>AtomicReferenceArray</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>ReferenceEntry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>table</name> =
                            <init>
                                <expr>
                                    <name><name>this</name>.
                                        <name>table</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>table</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>hash</name>
                                            &amp; (
                                            <call>
                                                <name><name>table</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            - 1)
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Specialized implementations of map methods</comment>

            <function>
                <type>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>count</name>
                                != 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// read-volatile</comment>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>ReferenceEntry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>e</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name>getFirst</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>hash</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>e</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr>
                                            <name>e</name>
                                            =
                                            <call>
                                                <name><name>e</name>.
                                                    <name>getNext</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>e</name>.
                                                            <name>getHash</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    !=
                                                    <name>hash</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <continue>continue;</continue>
                                                    }
                                                </block>
                                            </then>
                                        </if>

                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>K</name>
                                                </type>
                                                <name>entryKey</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>e</name>.
                                                                <name>getKey</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>entryKey</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>tryDrainReferenceQueues</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <continue>continue;</continue>
                                                    }
                                                </block>
                                            </then>
                                        </if>

                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>map</name>.<name>keyEquivalence</name>.
                                                            <name>equivalent</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>key</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>entryKey</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <name>e</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getLiveEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>e</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getEntry</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>key</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>hash</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>e</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>map</name>.
                                                <name>expires</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        &amp;&amp;
                                        <call>
                                            <name><name>map</name>.
                                                <name>isExpired</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>tryExpireEntries</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>
                    <return>return
                        <expr>
                            <name>e</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>V</name>
                </type>
                <name>get</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ReferenceEntry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>e</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>getLiveEntry</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>hash</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>e</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>V</name>
                                    </type>
                                    <name>value</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>e</name>.
                                                    <name>getValueReference</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>get</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>value</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>recordRead</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>e</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>tryDrainReferenceQueues</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            <return>return
                                <expr>
                                    <name>value</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>postReadCleanup</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>boolean</name>
                </type>
                <name>containsKey</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <try>try
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>count</name>
                                        != 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// read-volatile</comment>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>
                                                        <name>ReferenceEntry</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>K</name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>V</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </type>
                                                <name>e</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name>getLiveEntry</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>key</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>hash</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>e</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return <expr>false</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>e</name>.
                                                        <name>getValueReference</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>get</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                !=
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>

                            <return>return <expr>false</expr>;
                            </return>
                            }
                        </block>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>postReadCleanup</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * This method is a convenience for testing. Code should call {@link
                * MapMakerInternalMap#containsValue} directly.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>VisibleForTesting</name>
                    </annotation>
                    <name>boolean</name>
                </type>
                <name>containsValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <try>try
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>count</name>
                                        != 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// read-volatile</comment>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>
                                                        <name>AtomicReferenceArray</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>
                                                                    <name>ReferenceEntry</name>
                                                                    <argument_list>&lt;
                                                                        <argument>
                                                                            <name>K</name>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <name>V</name>
                                                                        </argument>
                                                                        &gt;
                                                                    </argument_list>
                                                                </name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </type>
                                                <name>table</name> =
                                                <init>
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>table</name>
                                                        </name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>length</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>table</name>.
                                                                <name>length</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <for>for (
                                            <init>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>i</name> =
                                                    <init>
                                                        <expr>0</expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </init>
                                            <condition>
                                                <expr>
                                                    <name>i</name>
                                                    &lt;
                                                    <name>length</name>
                                                </expr>
                                                ;
                                            </condition>
                                            <incr>
                                                <expr>++
                                                    <name>i</name>
                                                </expr>
                                            </incr>
                                            )
                                            <block>{
                                                <for>for (
                                                    <init>
                                                        <decl>
                                                            <type>
                                                                <name>
                                                                    <name>ReferenceEntry</name>
                                                                    <argument_list>&lt;
                                                                        <argument>
                                                                            <name>K</name>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <name>V</name>
                                                                        </argument>
                                                                        &gt;
                                                                    </argument_list>
                                                                </name>
                                                            </type>
                                                            <name>e</name> =
                                                            <init>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>table</name>.
                                                                            <name>get</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </init>
                                                    <condition>
                                                        <expr>
                                                            <name>e</name>
                                                            !=
                                                            <name>null</name>
                                                        </expr>
                                                        ;
                                                    </condition>
                                                    <incr>
                                                        <expr>
                                                            <name>e</name>
                                                            =
                                                            <call>
                                                                <name><name>e</name>.
                                                                    <name>getNext</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </incr>
                                                    )
                                                    <block>{
                                                        <decl_stmt>
                                                            <decl>
                                                                <type>
                                                                    <name>V</name>
                                                                </type>
                                                                <name>entryValue</name> =
                                                                <init>
                                                                    <expr>
                                                                        <call>
                                                                            <name>getLiveValue</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>e</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </decl_stmt>
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>entryValue</name>
                                                                    ==
                                                                    <name>null</name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <continue>continue;</continue>
                                                                    }
                                                                </block>
                                                            </then>
                                                        </if>
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <call>
                                                                        <name><name>map</name>.<name>
                                                                            valueEquivalence</name>.
                                                                            <name>equivalent</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>value</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>entryValue</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <return>return <expr>true</expr>;
                                                                    </return>
                                                                    }
                                                                </block>
                                                            </then>
                                                        </if>
                                                        }
                                                    </block>
                                                </for>
                                                }
                                            </block>
                                        </for>
                                        }
                                    </block>
                                </then>
                            </if>

                            <return>return <expr>false</expr>;
                            </return>
                            }
                        </block>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>postReadCleanup</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>V</name>
                </type>
                <name>put</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>onlyIfAbsent</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>lock</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>preWriteCleanup</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>newCount</name> =
                                    <init>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>count</name>
                                            </name>
                                            + 1
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>newCount</name>
                                        &gt;
                                        <name><name>this</name>.
                                            <name>threshold</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// ensure capacity</comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>expand</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>newCount</name>
                                                =
                                                <name><name>this</name>.
                                                    <name>count</name>
                                                </name>
                                                + 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>AtomicReferenceArray</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>
                                                        <name>ReferenceEntry</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>K</name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>V</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>table</name> =
                                    <init>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>table</name>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index</name> =
                                    <init>
                                        <expr>
                                            <name>hash</name>
                                            &amp; (
                                            <call>
                                                <name><name>table</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            - 1)
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ReferenceEntry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>first</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>table</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>index</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <comment type="line">// Look for an existing entry.</comment>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>ReferenceEntry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>e</name> =
                                        <init>
                                            <expr>
                                                <name>first</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>e</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr>
                                        <name>e</name>
                                        =
                                        <call>
                                            <name><name>e</name>.
                                                <name>getNext</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>K</name>
                                            </type>
                                            <name>entryKey</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>e</name>.
                                                            <name>getKey</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>e</name>.
                                                        <name>getHash</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                == <name>hash</name> &amp;&amp; <name>entryKey</name> !=
                                                <name>null</name>
                                                &amp;&amp;
                                                <call>
                                                    <name><name>map</name>.<name>keyEquivalence</name>.
                                                        <name>equivalent</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>key</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>entryKey</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <comment type="line">// We found an existing entry.</comment>

                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>
                                                                <name>ValueReference</name>
                                                                <argument_list>&lt;
                                                                    <argument>
                                                                        <name>K</name>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <name>V</name>
                                                                    </argument>
                                                                    &gt;
                                                                </argument_list>
                                                            </name>
                                                        </type>
                                                        <name>valueReference</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>e</name>.
                                                                        <name>getValueReference</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>V</name>
                                                        </type>
                                                        <name>entryValue</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>valueReference</name>.
                                                                        <name>get</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>

                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>entryValue</name>
                                                            ==
                                                            <name>null</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>++
                                                                    <name>modCount</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name>setValue</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>e</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>value</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <if>if
                                                                <condition>(
                                                                    <expr>!
                                                                        <call>
                                                                            <name><name>valueReference</name>.
                                                                                <name>isComputingReference</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <call>
                                                                                    <name>enqueueNotification</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>key</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>hash</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>entryValue</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name><name>
                                                                                                    RemovalCause</name>.
                                                                                                    <name>COLLECTED
                                                                                                    </name>
                                                                                                </name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>newCount</name>
                                                                                =
                                                                                <name><name>this</name>.
                                                                                    <name>count</name>
                                                                                </name>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        <comment type="line">// count remains
                                                                            unchanged
                                                                        </comment>
                                                                        }
                                                                    </block>
                                                                </then>
                                                                <else>else
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>
                                                                                <call>
                                                                                    <name>evictEntries</name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <comment type="line">// evictEntries
                                                                                    after setting new value
                                                                                </comment>
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <name>newCount</name>
                                                                                        =
                                                                                        <name><name>this</name>.
                                                                                            <name>count</name>
                                                                                        </name>
                                                                                        + 1
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                    </if>
                                                                </else>
                                                            </if>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name><name>this</name>.
                                                                        <name>count</name>
                                                                    </name>
                                                                    =
                                                                    <name>newCount</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <comment type="line">// write-volatile</comment>
                                                            <return>return
                                                                <expr>
                                                                    <name>null</name>
                                                                </expr>
                                                                ;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>onlyIfAbsent</name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <comment type="line">// Mimic</comment>
                                                                    <comment type="line">// "if (!map.containsKey(key))
                                                                        ...
                                                                    </comment>
                                                                    <comment type="line">// else return map.get(key);
                                                                    </comment>
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name>recordLockedRead</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>e</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <return>return
                                                                        <expr>
                                                                            <name>entryValue</name>
                                                                        </expr>
                                                                        ;
                                                                    </return>
                                                                    }
                                                                </block>
                                                            </then>
                                                            <else>else
                                                                <block>{
                                                                    <comment type="line">// clobber existing entry,
                                                                        count remains unchanged
                                                                    </comment>
                                                                    <expr_stmt>
                                                                        <expr>++
                                                                            <name>modCount</name>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name>enqueueNotification</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>key</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>hash</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>entryValue</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name><name>
                                                                                                RemovalCause</name>.
                                                                                                <name>REPLACED</name>
                                                                                            </name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name>setValue</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>e</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>value</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <return>return
                                                                        <expr>
                                                                            <name>entryValue</name>
                                                                        </expr>
                                                                        ;
                                                                    </return>
                                                                    }
                                                                </block>
                                                            </else>
                                                        </if>
                                                    </else>
                                                </if>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>

                            <comment type="line">// Create a new entry.</comment>
                            <expr_stmt>
                                <expr>++
                                    <name>modCount</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ReferenceEntry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>newEntry</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>newEntry</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>hash</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>first</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>setValue</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>newEntry</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>value</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>table</name>.
                                            <name>set</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>newEntry</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name>evictEntries</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// evictEntries after setting new value</comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>newCount</name>
                                                =
                                                <name><name>this</name>.
                                                    <name>count</name>
                                                </name>
                                                + 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>count</name>
                                    </name>
                                    =
                                    <name>newCount</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// write-volatile</comment>
                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>unlock</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>postWriteCleanup</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Expands the table if possible.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GuardedBy</name>
                        <argument_list>("this")</argument_list>
                    </annotation>
                    <name>void</name>
                </type>
                <name>expand</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>AtomicReferenceArray</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>ReferenceEntry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>oldTable</name> =
                            <init>
                                <expr>
                                    <name>table</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>oldCapacity</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>oldTable</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>oldCapacity</name>
                                &gt;=
                                <name>MAXIMUM_CAPACITY</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="block">/*
                        * Reclassify nodes in each list to new Map. Because we are using power-of-two expansion, the
                        * elements from each bin must either stay at same index, or move with a power of two offset.
                        * We eliminate unnecessary node creation by catching cases where old nodes can be reused
                        * because their next fields won't change. Statistically, at the default threshold, only
                        * about one-sixth of them need cloning when a table doubles. The nodes they replace will be
                        * garbage collectable as soon as they are no longer referenced by any reader thread that may
                        * be in the midst of traversing table right now.
                        */
                    </comment>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>newCount</name> =
                            <init>
                                <expr>
                                    <name>count</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>AtomicReferenceArray</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>ReferenceEntry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>newTable</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>newEntryArray</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>oldCapacity</name>
                                                    &lt;&lt; 1
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>threshold</name>
                            =
                            <call>
                                <name><name>newTable</name>.
                                    <name>length</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            * 3 / 4
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>newMask</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>newTable</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>oldIndex</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>oldIndex</name>
                                &lt;
                                <name>oldCapacity</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>++
                                <name>oldIndex</name>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <comment type="line">// We need to guarantee that any existing reads of old Map can
                            </comment>
                            <comment type="line">// proceed. So we cannot yet null out each bin.</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ReferenceEntry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>head</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>oldTable</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>oldIndex</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <if>if
                                <condition>(
                                    <expr>
                                        <name>head</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>
                                                        <name>ReferenceEntry</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>K</name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>V</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </type>
                                                <name>next</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>head</name>.
                                                                <name>getNext</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>headIndex</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>head</name>.
                                                                <name>getHash</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                        &amp;
                                                        <name>newMask</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>

                                        <comment type="line">// Single node on list</comment>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>next</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>newTable</name>.
                                                                    <name>set</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>headIndex</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>head</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <block>{
                                                    <comment type="line">// Reuse the consecutive sequence of nodes with
                                                        the same target
                                                    </comment>
                                                    <comment type="line">// index from the end of the list. tail points
                                                        to the first
                                                    </comment>
                                                    <comment type="line">// entry in the reusable list.</comment>
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>
                                                                    <name>ReferenceEntry</name>
                                                                    <argument_list>&lt;
                                                                        <argument>
                                                                            <name>K</name>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <name>V</name>
                                                                        </argument>
                                                                        &gt;
                                                                    </argument_list>
                                                                </name>
                                                            </type>
                                                            <name>tail</name> =
                                                            <init>
                                                                <expr>
                                                                    <name>head</name>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>int</name>
                                                            </type>
                                                            <name>tailIndex</name> =
                                                            <init>
                                                                <expr>
                                                                    <name>headIndex</name>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <for>for (
                                                        <init>
                                                            <decl>
                                                                <type>
                                                                    <name>
                                                                        <name>ReferenceEntry</name>
                                                                        <argument_list>&lt;
                                                                            <argument>
                                                                                <name>K</name>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <name>V</name>
                                                                            </argument>
                                                                            &gt;
                                                                        </argument_list>
                                                                    </name>
                                                                </type>
                                                                <name>e</name> =
                                                                <init>
                                                                    <expr>
                                                                        <name>next</name>
                                                                    </expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </init>
                                                        <condition>
                                                            <expr>
                                                                <name>e</name>
                                                                !=
                                                                <name>null</name>
                                                            </expr>
                                                            ;
                                                        </condition>
                                                        <incr>
                                                            <expr>
                                                                <name>e</name>
                                                                =
                                                                <call>
                                                                    <name><name>e</name>.
                                                                        <name>getNext</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </incr>
                                                        )
                                                        <block>{
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <name>int</name>
                                                                    </type>
                                                                    <name>newIndex</name> =
                                                                    <init>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>e</name>.
                                                                                    <name>getHash</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                            &amp;
                                                                            <name>newMask</name>
                                                                        </expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>newIndex</name>
                                                                        !=
                                                                        <name>tailIndex</name>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <comment type="line">// The index changed. We'll
                                                                            need to copy the previous entry.
                                                                        </comment>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>tailIndex</name>
                                                                                =
                                                                                <name>newIndex</name>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>tail</name>
                                                                                =
                                                                                <name>e</name>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                            }
                                                        </block>
                                                    </for>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>newTable</name>.
                                                                    <name>set</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>tailIndex</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>tail</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>

                                                    <comment type="line">// Clone nodes leading up to the tail.
                                                    </comment>
                                                    <for>for (
                                                        <init>
                                                            <decl>
                                                                <type>
                                                                    <name>
                                                                        <name>ReferenceEntry</name>
                                                                        <argument_list>&lt;
                                                                            <argument>
                                                                                <name>K</name>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <name>V</name>
                                                                            </argument>
                                                                            &gt;
                                                                        </argument_list>
                                                                    </name>
                                                                </type>
                                                                <name>e</name> =
                                                                <init>
                                                                    <expr>
                                                                        <name>head</name>
                                                                    </expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </init>
                                                        <condition>
                                                            <expr>
                                                                <name>e</name>
                                                                !=
                                                                <name>tail</name>
                                                            </expr>
                                                            ;
                                                        </condition>
                                                        <incr>
                                                            <expr>
                                                                <name>e</name>
                                                                =
                                                                <call>
                                                                    <name><name>e</name>.
                                                                        <name>getNext</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </incr>
                                                        )
                                                        <block>{
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <name>int</name>
                                                                    </type>
                                                                    <name>newIndex</name> =
                                                                    <init>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>e</name>.
                                                                                    <name>getHash</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                            &amp;
                                                                            <name>newMask</name>
                                                                        </expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <name>
                                                                            <name>ReferenceEntry</name>
                                                                            <argument_list>&lt;
                                                                                <argument>
                                                                                    <name>K</name>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <name>V</name>
                                                                                </argument>
                                                                                &gt;
                                                                            </argument_list>
                                                                        </name>
                                                                    </type>
                                                                    <name>newNext</name> =
                                                                    <init>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>newTable</name>.
                                                                                    <name>get</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>newIndex</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <name>
                                                                            <name>ReferenceEntry</name>
                                                                            <argument_list>&lt;
                                                                                <argument>
                                                                                    <name>K</name>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <name>V</name>
                                                                                </argument>
                                                                                &gt;
                                                                            </argument_list>
                                                                        </name>
                                                                    </type>
                                                                    <name>newFirst</name> =
                                                                    <init>
                                                                        <expr>
                                                                            <call>
                                                                                <name>copyEntry</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>e</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>newNext</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>newFirst</name>
                                                                        !=
                                                                        <name>null</name>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>newTable</name>.
                                                                                        <name>set</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>newIndex</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>newFirst</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        }
                                                                    </block>
                                                                </then>
                                                                <else>else
                                                                    <block>{
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <call>
                                                                                    <name>removeCollectedEntry</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>e</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        <expr_stmt>
                                                                            <expr><name>newCount</name>--
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        }
                                                                    </block>
                                                                </else>
                                                            </if>
                                                            }
                                                        </block>
                                                    </for>
                                                    }
                                                </block>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <name>table</name>
                            =
                            <name>newTable</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>count</name>
                            </name>
                            =
                            <name>newCount</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>boolean</name>
                </type>
                <name>replace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>oldValue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>lock</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>preWriteCleanup</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>AtomicReferenceArray</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>
                                                        <name>ReferenceEntry</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>K</name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>V</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>table</name> =
                                    <init>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>table</name>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index</name> =
                                    <init>
                                        <expr>
                                            <name>hash</name>
                                            &amp; (
                                            <call>
                                                <name><name>table</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            - 1)
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ReferenceEntry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>first</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>table</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>index</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>ReferenceEntry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>e</name> =
                                        <init>
                                            <expr>
                                                <name>first</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>e</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr>
                                        <name>e</name>
                                        =
                                        <call>
                                            <name><name>e</name>.
                                                <name>getNext</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>K</name>
                                            </type>
                                            <name>entryKey</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>e</name>.
                                                            <name>getKey</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>e</name>.
                                                        <name>getHash</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                == <name>hash</name> &amp;&amp; <name>entryKey</name> !=
                                                <name>null</name>
                                                &amp;&amp;
                                                <call>
                                                    <name><name>map</name>.<name>keyEquivalence</name>.
                                                        <name>equivalent</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>key</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>entryKey</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <comment type="line">// If the value disappeared, this entry is
                                                    partially collected,
                                                </comment>
                                                <comment type="line">// and we should pretend like it doesn't exist.
                                                </comment>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>
                                                                <name>ValueReference</name>
                                                                <argument_list>&lt;
                                                                    <argument>
                                                                        <name>K</name>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <name>V</name>
                                                                    </argument>
                                                                    &gt;
                                                                </argument_list>
                                                            </name>
                                                        </type>
                                                        <name>valueReference</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>e</name>.
                                                                        <name>getValueReference</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>V</name>
                                                        </type>
                                                        <name>entryValue</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>valueReference</name>.
                                                                        <name>get</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>entryValue</name>
                                                            ==
                                                            <name>null</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <call>
                                                                            <name>isCollected</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>valueReference</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <decl_stmt>
                                                                            <decl>
                                                                                <type>
                                                                                    <name>int</name>
                                                                                </type>
                                                                                <name>newCount</name> =
                                                                                <init>
                                                                                    <expr>
                                                                                        <name><name>this</name>.
                                                                                            <name>count</name>
                                                                                        </name>
                                                                                        - 1
                                                                                    </expr>
                                                                                </init>
                                                                            </decl>
                                                                            ;
                                                                        </decl_stmt>
                                                                        <expr_stmt>
                                                                            <expr>++
                                                                                <name>modCount</name>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <call>
                                                                                    <name>enqueueNotification</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>entryKey</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>hash</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>entryValue</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name><name>
                                                                                                    RemovalCause</name>.
                                                                                                    <name>COLLECTED
                                                                                                    </name>
                                                                                                </name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        <decl_stmt>
                                                                            <decl>
                                                                                <type>
                                                                                    <name>
                                                                                        <name>ReferenceEntry</name>
                                                                                        <argument_list>&lt;
                                                                                            <argument>
                                                                                                <name>K</name>
                                                                                            </argument>
                                                                                            ,
                                                                                            <argument>
                                                                                                <name>V</name>
                                                                                            </argument>
                                                                                            &gt;
                                                                                        </argument_list>
                                                                                    </name>
                                                                                </type>
                                                                                <name>newFirst</name> =
                                                                                <init>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name>removeFromChain</name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>first
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                ,
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>e</name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                </init>
                                                                            </decl>
                                                                            ;
                                                                        </decl_stmt>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>newCount</name>
                                                                                =
                                                                                <name><name>this</name>.
                                                                                    <name>count</name>
                                                                                </name>
                                                                                - 1
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>table</name>.
                                                                                        <name>set</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>index</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>newFirst</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name><name>this</name>.
                                                                                    <name>count</name>
                                                                                </name>
                                                                                =
                                                                                <name>newCount</name>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        <comment type="line">// write-volatile</comment>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                            <return>return <expr>false</expr>;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>

                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name><name>map</name>.<name>valueEquivalence</name>.
                                                                    <name>equivalent</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>oldValue</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>entryValue</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>++
                                                                    <name>modCount</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name>enqueueNotification</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>key</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>hash</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>entryValue</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>RemovalCause</name>.
                                                                                        <name>REPLACED</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name>setValue</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>e</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>newValue</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <return>return <expr>true</expr>;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <block>{
                                                            <comment type="line">// Mimic</comment>
                                                            <comment type="line">// "if (map.containsKey(key) &amp;&amp;
                                                                map.get(key).equals(oldValue))..."
                                                            </comment>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name>recordLockedRead</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>e</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <return>return <expr>false</expr>;
                                                            </return>
                                                            }
                                                        </block>
                                                    </else>
                                                </if>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>

                            <return>return <expr>false</expr>;
                            </return>
                            }
                        </block>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>unlock</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>postWriteCleanup</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>V</name>
                </type>
                <name>replace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>lock</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>preWriteCleanup</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>AtomicReferenceArray</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>
                                                        <name>ReferenceEntry</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>K</name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>V</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>table</name> =
                                    <init>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>table</name>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index</name> =
                                    <init>
                                        <expr>
                                            <name>hash</name>
                                            &amp; (
                                            <call>
                                                <name><name>table</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            - 1)
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ReferenceEntry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>first</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>table</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>index</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>ReferenceEntry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>e</name> =
                                        <init>
                                            <expr>
                                                <name>first</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>e</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr>
                                        <name>e</name>
                                        =
                                        <call>
                                            <name><name>e</name>.
                                                <name>getNext</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>K</name>
                                            </type>
                                            <name>entryKey</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>e</name>.
                                                            <name>getKey</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>e</name>.
                                                        <name>getHash</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                == <name>hash</name> &amp;&amp; <name>entryKey</name> !=
                                                <name>null</name>
                                                &amp;&amp;
                                                <call>
                                                    <name><name>map</name>.<name>keyEquivalence</name>.
                                                        <name>equivalent</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>key</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>entryKey</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <comment type="line">// If the value disappeared, this entry is
                                                    partially collected,
                                                </comment>
                                                <comment type="line">// and we should pretend like it doesn't exist.
                                                </comment>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>
                                                                <name>ValueReference</name>
                                                                <argument_list>&lt;
                                                                    <argument>
                                                                        <name>K</name>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <name>V</name>
                                                                    </argument>
                                                                    &gt;
                                                                </argument_list>
                                                            </name>
                                                        </type>
                                                        <name>valueReference</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>e</name>.
                                                                        <name>getValueReference</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>V</name>
                                                        </type>
                                                        <name>entryValue</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>valueReference</name>.
                                                                        <name>get</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>entryValue</name>
                                                            ==
                                                            <name>null</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <call>
                                                                            <name>isCollected</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>valueReference</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <decl_stmt>
                                                                            <decl>
                                                                                <type>
                                                                                    <name>int</name>
                                                                                </type>
                                                                                <name>newCount</name> =
                                                                                <init>
                                                                                    <expr>
                                                                                        <name><name>this</name>.
                                                                                            <name>count</name>
                                                                                        </name>
                                                                                        - 1
                                                                                    </expr>
                                                                                </init>
                                                                            </decl>
                                                                            ;
                                                                        </decl_stmt>
                                                                        <expr_stmt>
                                                                            <expr>++
                                                                                <name>modCount</name>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <call>
                                                                                    <name>enqueueNotification</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>entryKey</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>hash</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>entryValue</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name><name>
                                                                                                    RemovalCause</name>.
                                                                                                    <name>COLLECTED
                                                                                                    </name>
                                                                                                </name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        <decl_stmt>
                                                                            <decl>
                                                                                <type>
                                                                                    <name>
                                                                                        <name>ReferenceEntry</name>
                                                                                        <argument_list>&lt;
                                                                                            <argument>
                                                                                                <name>K</name>
                                                                                            </argument>
                                                                                            ,
                                                                                            <argument>
                                                                                                <name>V</name>
                                                                                            </argument>
                                                                                            &gt;
                                                                                        </argument_list>
                                                                                    </name>
                                                                                </type>
                                                                                <name>newFirst</name> =
                                                                                <init>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name>removeFromChain</name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>first
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                ,
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>e</name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                </init>
                                                                            </decl>
                                                                            ;
                                                                        </decl_stmt>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>newCount</name>
                                                                                =
                                                                                <name><name>this</name>.
                                                                                    <name>count</name>
                                                                                </name>
                                                                                - 1
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>table</name>.
                                                                                        <name>set</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>index</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>newFirst</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name><name>this</name>.
                                                                                    <name>count</name>
                                                                                </name>
                                                                                =
                                                                                <name>newCount</name>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        <comment type="line">// write-volatile</comment>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                            <return>return
                                                                <expr>
                                                                    <name>null</name>
                                                                </expr>
                                                                ;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>

                                                <expr_stmt>
                                                    <expr>++
                                                        <name>modCount</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>enqueueNotification</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>key</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>hash</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>entryValue</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>RemovalCause</name>.
                                                                            <name>REPLACED</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>setValue</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>e</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>newValue</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <return>return
                                                    <expr>
                                                        <name>entryValue</name>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>

                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>unlock</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>postWriteCleanup</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>V</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>lock</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>preWriteCleanup</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>newCount</name> =
                                    <init>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>count</name>
                                            </name>
                                            - 1
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>AtomicReferenceArray</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>
                                                        <name>ReferenceEntry</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>K</name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>V</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>table</name> =
                                    <init>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>table</name>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index</name> =
                                    <init>
                                        <expr>
                                            <name>hash</name>
                                            &amp; (
                                            <call>
                                                <name><name>table</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            - 1)
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ReferenceEntry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>first</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>table</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>index</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>ReferenceEntry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>e</name> =
                                        <init>
                                            <expr>
                                                <name>first</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>e</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr>
                                        <name>e</name>
                                        =
                                        <call>
                                            <name><name>e</name>.
                                                <name>getNext</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>K</name>
                                            </type>
                                            <name>entryKey</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>e</name>.
                                                            <name>getKey</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>e</name>.
                                                        <name>getHash</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                == <name>hash</name> &amp;&amp; <name>entryKey</name> !=
                                                <name>null</name>
                                                &amp;&amp;
                                                <call>
                                                    <name><name>map</name>.<name>keyEquivalence</name>.
                                                        <name>equivalent</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>key</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>entryKey</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>
                                                                <name>ValueReference</name>
                                                                <argument_list>&lt;
                                                                    <argument>
                                                                        <name>K</name>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <name>V</name>
                                                                    </argument>
                                                                    &gt;
                                                                </argument_list>
                                                            </name>
                                                        </type>
                                                        <name>valueReference</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>e</name>.
                                                                        <name>getValueReference</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>V</name>
                                                        </type>
                                                        <name>entryValue</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>valueReference</name>.
                                                                        <name>get</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>

                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>RemovalCause</name>
                                                        </type>
                                                        <name>cause</name>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>entryValue</name>
                                                            !=
                                                            <name>null</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>cause</name>
                                                                    =
                                                                    <name><name>RemovalCause</name>.
                                                                        <name>EXPLICIT</name>
                                                                    </name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <call>
                                                                        <name>isCollected</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>valueReference</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>cause</name>
                                                                            =
                                                                            <name><name>RemovalCause</name>.
                                                                                <name>COLLECTED</name>
                                                                            </name>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </then>
                                                            <else>else
                                                                <block>{
                                                                    <return>return
                                                                        <expr>
                                                                            <name>null</name>
                                                                        </expr>
                                                                        ;
                                                                    </return>
                                                                    }
                                                                </block>
                                                            </else>
                                                        </if>
                                                    </else>
                                                </if>

                                                <expr_stmt>
                                                    <expr>++
                                                        <name>modCount</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>enqueueNotification</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>entryKey</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>hash</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>entryValue</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>cause</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>
                                                                <name>ReferenceEntry</name>
                                                                <argument_list>&lt;
                                                                    <argument>
                                                                        <name>K</name>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <name>V</name>
                                                                    </argument>
                                                                    &gt;
                                                                </argument_list>
                                                            </name>
                                                        </type>
                                                        <name>newFirst</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name>removeFromChain</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>first</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>e</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>newCount</name>
                                                        =
                                                        <name><name>this</name>.
                                                            <name>count</name>
                                                        </name>
                                                        - 1
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>table</name>.
                                                                <name>set</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>index</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>newFirst</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>count</name>
                                                        </name>
                                                        =
                                                        <name>newCount</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <comment type="line">// write-volatile</comment>
                                                <return>return
                                                    <expr>
                                                        <name>entryValue</name>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>

                            <return>return
                                <expr>
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>unlock</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>postWriteCleanup</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>boolean</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>lock</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>preWriteCleanup</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>newCount</name> =
                                    <init>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>count</name>
                                            </name>
                                            - 1
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>AtomicReferenceArray</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>
                                                        <name>ReferenceEntry</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>K</name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>V</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>table</name> =
                                    <init>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>table</name>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index</name> =
                                    <init>
                                        <expr>
                                            <name>hash</name>
                                            &amp; (
                                            <call>
                                                <name><name>table</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            - 1)
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ReferenceEntry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>first</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>table</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>index</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>ReferenceEntry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>e</name> =
                                        <init>
                                            <expr>
                                                <name>first</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>e</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr>
                                        <name>e</name>
                                        =
                                        <call>
                                            <name><name>e</name>.
                                                <name>getNext</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>K</name>
                                            </type>
                                            <name>entryKey</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>e</name>.
                                                            <name>getKey</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>e</name>.
                                                        <name>getHash</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                == <name>hash</name> &amp;&amp; <name>entryKey</name> !=
                                                <name>null</name>
                                                &amp;&amp;
                                                <call>
                                                    <name><name>map</name>.<name>keyEquivalence</name>.
                                                        <name>equivalent</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>key</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>entryKey</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>
                                                                <name>ValueReference</name>
                                                                <argument_list>&lt;
                                                                    <argument>
                                                                        <name>K</name>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <name>V</name>
                                                                    </argument>
                                                                    &gt;
                                                                </argument_list>
                                                            </name>
                                                        </type>
                                                        <name>valueReference</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>e</name>.
                                                                        <name>getValueReference</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>V</name>
                                                        </type>
                                                        <name>entryValue</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>valueReference</name>.
                                                                        <name>get</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>

                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>RemovalCause</name>
                                                        </type>
                                                        <name>cause</name>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name><name>map</name>.<name>valueEquivalence</name>.
                                                                    <name>equivalent</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>value</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>entryValue</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>cause</name>
                                                                    =
                                                                    <name><name>RemovalCause</name>.
                                                                        <name>EXPLICIT</name>
                                                                    </name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <call>
                                                                        <name>isCollected</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>valueReference</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>cause</name>
                                                                            =
                                                                            <name><name>RemovalCause</name>.
                                                                                <name>COLLECTED</name>
                                                                            </name>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </then>
                                                            <else>else
                                                                <block>{
                                                                    <return>return <expr>false</expr>;
                                                                    </return>
                                                                    }
                                                                </block>
                                                            </else>
                                                        </if>
                                                    </else>
                                                </if>

                                                <expr_stmt>
                                                    <expr>++
                                                        <name>modCount</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>enqueueNotification</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>entryKey</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>hash</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>entryValue</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>cause</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>
                                                                <name>ReferenceEntry</name>
                                                                <argument_list>&lt;
                                                                    <argument>
                                                                        <name>K</name>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <name>V</name>
                                                                    </argument>
                                                                    &gt;
                                                                </argument_list>
                                                            </name>
                                                        </type>
                                                        <name>newFirst</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name>removeFromChain</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>first</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>e</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>newCount</name>
                                                        =
                                                        <name><name>this</name>.
                                                            <name>count</name>
                                                        </name>
                                                        - 1
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>table</name>.
                                                                <name>set</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>index</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>newFirst</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>count</name>
                                                        </name>
                                                        =
                                                        <name>newCount</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <comment type="line">// write-volatile</comment>
                                                <return>return
                                                    <expr>(<name>cause</name> ==
                                                        <name><name>RemovalCause</name>.
                                                            <name>EXPLICIT</name>
                                                        </name>
                                                        )
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>

                            <return>return <expr>false</expr>;
                            </return>
                            }
                        </block>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>unlock</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>postWriteCleanup</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>count</name>
                                != 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>lock</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <try>try
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>
                                                        <name>AtomicReferenceArray</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>
                                                                    <name>ReferenceEntry</name>
                                                                    <argument_list>&lt;
                                                                        <argument>
                                                                            <name>K</name>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <name>V</name>
                                                                        </argument>
                                                                        &gt;
                                                                    </argument_list>
                                                                </name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </type>
                                                <name>table</name> =
                                                <init>
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>table</name>
                                                        </name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name><name>map</name>.
                                                        <name>removalNotificationQueue</name>
                                                    </name>
                                                    !=
                                                    <name>DISCARDING_QUEUE</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <for>for (
                                                        <init>
                                                            <decl>
                                                                <type>
                                                                    <name>int</name>
                                                                </type>
                                                                <name>i</name> =
                                                                <init>
                                                                    <expr>0</expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </init>
                                                        <condition>
                                                            <expr>
                                                                <name>i</name>
                                                                &lt;
                                                                <call>
                                                                    <name><name>table</name>.
                                                                        <name>length</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </condition>
                                                        <incr>
                                                            <expr>++
                                                                <name>i</name>
                                                            </expr>
                                                        </incr>
                                                        )
                                                        <block>{
                                                            <for>for (
                                                                <init>
                                                                    <decl>
                                                                        <type>
                                                                            <name>
                                                                                <name>ReferenceEntry</name>
                                                                                <argument_list>&lt;
                                                                                    <argument>
                                                                                        <name>K</name>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <name>V</name>
                                                                                    </argument>
                                                                                    &gt;
                                                                                </argument_list>
                                                                            </name>
                                                                        </type>
                                                                        <name>e</name> =
                                                                        <init>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>table</name>.
                                                                                        <name>get</name>
                                                                                    </name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>i</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </init>
                                                                    </decl>
                                                                    ;
                                                                </init>
                                                                <condition>
                                                                    <expr>
                                                                        <name>e</name>
                                                                        !=
                                                                        <name>null</name>
                                                                    </expr>
                                                                    ;
                                                                </condition>
                                                                <incr>
                                                                    <expr>
                                                                        <name>e</name>
                                                                        =
                                                                        <call>
                                                                            <name><name>e</name>.
                                                                                <name>getNext</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </incr>
                                                                )
                                                                <block>{
                                                                    <comment type="line">// Computing references aren't
                                                                        actually in the map yet.
                                                                    </comment>
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>!
                                                                                <call>
                                                                                    <name><name>e</name>.
                                                                                        <name>getValueReference</name>
                                                                                    </name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                                .
                                                                                <call>
                                                                                    <name>isComputingReference</name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name>enqueueNotification
                                                                                            </name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>e</name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                ,
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name><name>
                                                                                                            RemovalCause</name>
                                                                                                            .
                                                                                                            <name>
                                                                                                                EXPLICIT
                                                                                                            </name>
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                    </if>
                                                                    }
                                                                </block>
                                                            </for>
                                                            }
                                                        </block>
                                                    </for>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <for>for (
                                            <init>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>i</name> =
                                                    <init>
                                                        <expr>0</expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </init>
                                            <condition>
                                                <expr>
                                                    <name>i</name>
                                                    &lt;
                                                    <call>
                                                        <name><name>table</name>.
                                                            <name>length</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </condition>
                                            <incr>
                                                <expr>++
                                                    <name>i</name>
                                                </expr>
                                            </incr>
                                            )
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>table</name>.
                                                                <name>set</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>null</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </for>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>clearReferenceQueues</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>evictionQueue</name>.
                                                        <name>clear</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>expirationQueue</name>.
                                                        <name>clear</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>readCount</name>.
                                                        <name>set</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <expr_stmt>
                                            <expr>++
                                                <name>modCount</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>count</name>
                                                = 0
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <comment type="line">// write-volatile</comment>
                                        }
                                    </block>
                                    <finally>finally
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>unlock</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>postWriteCleanup</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </finally>
                                </try>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Removes an entry from within a table. All entries following the removed node can stay, but
                * all preceding ones need to be cloned.
                *
                * &lt;p&gt;This method does not decrement count for the removed entry, but does decrement count for
                * all partially collected entries which are skipped. As such callers which are modifying count
                * must re-read it after calling removeFromChain.
                *
                * @param first the first entry of the table
                * @param entry the entry being removed from the table
                * @return the new first entry for the table
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GuardedBy</name>
                        <argument_list>("this")</argument_list>
                    </annotation>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>removeFromChain</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>first</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entry</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>evictionQueue</name>.
                                    <name>remove</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>entry</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>expirationQueue</name>.
                                    <name>remove</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>entry</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>newCount</name> =
                            <init>
                                <expr>
                                    <name>count</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>newFirst</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>entry</name>.
                                            <name>getNext</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>
                                        <name>ReferenceEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>e</name> =
                                <init>
                                    <expr>
                                        <name>first</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>e</name>
                                !=
                                <name>entry</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>e</name>
                                =
                                <call>
                                    <name><name>e</name>.
                                        <name>getNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ReferenceEntry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>next</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>copyEntry</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>e</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>newFirst</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>next</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>newFirst</name>
                                                =
                                                <name>next</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>removeCollectedEntry</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>e</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr><name>newCount</name>--
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>count</name>
                            </name>
                            =
                            <name>newCount</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>newFirst</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>void</name>
                </type>
                <name>removeCollectedEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entry</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>enqueueNotification</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>entry</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>RemovalCause</name>.
                                                <name>COLLECTED</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>evictionQueue</name>.
                                    <name>remove</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>entry</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>expirationQueue</name>.
                                    <name>remove</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>entry</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Removes an entry whose key has been garbage collected.
                */
            </comment>
            <function>
                <type>
                    <name>boolean</name>
                </type>
                <name>reclaimKey</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entry</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>lock</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>newCount</name> =
                                    <init>
                                        <expr>
                                            <name>count</name>
                                            - 1
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>AtomicReferenceArray</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>
                                                        <name>ReferenceEntry</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>K</name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>V</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>table</name> =
                                    <init>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>table</name>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index</name> =
                                    <init>
                                        <expr>
                                            <name>hash</name>
                                            &amp; (
                                            <call>
                                                <name><name>table</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            - 1)
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ReferenceEntry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>first</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>table</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>index</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>ReferenceEntry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>e</name> =
                                        <init>
                                            <expr>
                                                <name>first</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>e</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr>
                                        <name>e</name>
                                        =
                                        <call>
                                            <name><name>e</name>.
                                                <name>getNext</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>e</name>
                                                ==
                                                <name>entry</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>++
                                                        <name>modCount</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>enqueueNotification</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>e</name>.
                                                                                <name>getKey</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>hash</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>e</name>.
                                                                                <name>getValueReference</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                        .
                                                                        <call>
                                                                            <name>get</name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name><name>RemovalCause</name>.
                                                                            <name>COLLECTED</name>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>
                                                                <name>ReferenceEntry</name>
                                                                <argument_list>&lt;
                                                                    <argument>
                                                                        <name>K</name>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <name>V</name>
                                                                    </argument>
                                                                    &gt;
                                                                </argument_list>
                                                            </name>
                                                        </type>
                                                        <name>newFirst</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name>removeFromChain</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>first</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>e</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>newCount</name>
                                                        =
                                                        <name><name>this</name>.
                                                            <name>count</name>
                                                        </name>
                                                        - 1
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>table</name>.
                                                                <name>set</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>index</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>newFirst</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>count</name>
                                                        </name>
                                                        =
                                                        <name>newCount</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <comment type="line">// write-volatile</comment>
                                                <return>return <expr>true</expr>;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>

                            <return>return <expr>false</expr>;
                            </return>
                            }
                        </block>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>unlock</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>postWriteCleanup</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Removes an entry whose value has been garbage collected.
                */
            </comment>
            <function>
                <type>
                    <name>boolean</name>
                </type>
                <name>reclaimValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ValueReference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>valueReference</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>lock</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>newCount</name> =
                                    <init>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>count</name>
                                            </name>
                                            - 1
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>AtomicReferenceArray</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>
                                                        <name>ReferenceEntry</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>K</name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>V</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>table</name> =
                                    <init>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>table</name>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index</name> =
                                    <init>
                                        <expr>
                                            <name>hash</name>
                                            &amp; (
                                            <call>
                                                <name><name>table</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            - 1)
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ReferenceEntry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>first</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>table</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>index</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>ReferenceEntry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>e</name> =
                                        <init>
                                            <expr>
                                                <name>first</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>e</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr>
                                        <name>e</name>
                                        =
                                        <call>
                                            <name><name>e</name>.
                                                <name>getNext</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>K</name>
                                            </type>
                                            <name>entryKey</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>e</name>.
                                                            <name>getKey</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>e</name>.
                                                        <name>getHash</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                == <name>hash</name> &amp;&amp; <name>entryKey</name> !=
                                                <name>null</name>
                                                &amp;&amp;
                                                <call>
                                                    <name><name>map</name>.<name>keyEquivalence</name>.
                                                        <name>equivalent</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>key</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>entryKey</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>
                                                                <name>ValueReference</name>
                                                                <argument_list>&lt;
                                                                    <argument>
                                                                        <name>K</name>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <name>V</name>
                                                                    </argument>
                                                                    &gt;
                                                                </argument_list>
                                                            </name>
                                                        </type>
                                                        <name>v</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>e</name>.
                                                                        <name>getValueReference</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>v</name>
                                                            ==
                                                            <name>valueReference</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>++
                                                                    <name>modCount</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name>enqueueNotification</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>key</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>hash</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name><name>
                                                                                            valueReference</name>.
                                                                                            <name>get</name>
                                                                                        </name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>RemovalCause</name>.
                                                                                        <name>COLLECTED</name>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <name>
                                                                            <name>ReferenceEntry</name>
                                                                            <argument_list>&lt;
                                                                                <argument>
                                                                                    <name>K</name>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <name>V</name>
                                                                                </argument>
                                                                                &gt;
                                                                            </argument_list>
                                                                        </name>
                                                                    </type>
                                                                    <name>newFirst</name> =
                                                                    <init>
                                                                        <expr>
                                                                            <call>
                                                                                <name>removeFromChain</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>first</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>e</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>newCount</name>
                                                                    =
                                                                    <name><name>this</name>.
                                                                        <name>count</name>
                                                                    </name>
                                                                    - 1
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>table</name>.
                                                                            <name>set</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>index</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>newFirst</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name><name>this</name>.
                                                                        <name>count</name>
                                                                    </name>
                                                                    =
                                                                    <name>newCount</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <comment type="line">// write-volatile</comment>
                                                            <return>return <expr>true</expr>;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                <return>return <expr>false</expr>;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>

                            <return>return <expr>false</expr>;
                            </return>
                            }
                        </block>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>unlock</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <call>
                                                <name>isHeldByCurrentThread</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// don't cleanup inside of put</comment>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>postWriteCleanup</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Clears a value that has not yet been set, and thus does not require count to be modified.
                */
            </comment>
            <function>
                <type>
                    <name>boolean</name>
                </type>
                <name>clearValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ValueReference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>valueReference</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>lock</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>AtomicReferenceArray</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>
                                                        <name>ReferenceEntry</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>K</name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>V</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>table</name> =
                                    <init>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>table</name>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>index</name> =
                                    <init>
                                        <expr>
                                            <name>hash</name>
                                            &amp; (
                                            <call>
                                                <name><name>table</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            - 1)
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ReferenceEntry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>first</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>table</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>index</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>ReferenceEntry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>e</name> =
                                        <init>
                                            <expr>
                                                <name>first</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>e</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr>
                                        <name>e</name>
                                        =
                                        <call>
                                            <name><name>e</name>.
                                                <name>getNext</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>K</name>
                                            </type>
                                            <name>entryKey</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>e</name>.
                                                            <name>getKey</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <call>
                                                    <name><name>e</name>.
                                                        <name>getHash</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                == <name>hash</name> &amp;&amp; <name>entryKey</name> !=
                                                <name>null</name>
                                                &amp;&amp;
                                                <call>
                                                    <name><name>map</name>.<name>keyEquivalence</name>.
                                                        <name>equivalent</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>key</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>entryKey</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>
                                                                <name>ValueReference</name>
                                                                <argument_list>&lt;
                                                                    <argument>
                                                                        <name>K</name>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <name>V</name>
                                                                    </argument>
                                                                    &gt;
                                                                </argument_list>
                                                            </name>
                                                        </type>
                                                        <name>v</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name><name>e</name>.
                                                                        <name>getValueReference</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>v</name>
                                                            ==
                                                            <name>valueReference</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <name>
                                                                            <name>ReferenceEntry</name>
                                                                            <argument_list>&lt;
                                                                                <argument>
                                                                                    <name>K</name>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <name>V</name>
                                                                                </argument>
                                                                                &gt;
                                                                            </argument_list>
                                                                        </name>
                                                                    </type>
                                                                    <name>newFirst</name> =
                                                                    <init>
                                                                        <expr>
                                                                            <call>
                                                                                <name>removeFromChain</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>first</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>e</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>table</name>.
                                                                            <name>set</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>index</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>newFirst</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <return>return <expr>true</expr>;
                                                            </return>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                <return>return <expr>false</expr>;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>

                            <return>return <expr>false</expr>;
                            </return>
                            }
                        </block>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>unlock</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>postWriteCleanup</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>GuardedBy</name>
                        <argument_list>("this")</argument_list>
                    </annotation>
                    <name>boolean</name>
                </type>
                <name>removeEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entry</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>hash</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>RemovalCause</name>
                            </type>
                            <name>cause</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>newCount</name> =
                            <init>
                                <expr>
                                    <name><name>this</name>.
                                        <name>count</name>
                                    </name>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>AtomicReferenceArray</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>ReferenceEntry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>table</name> =
                            <init>
                                <expr>
                                    <name><name>this</name>.
                                        <name>table</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name> =
                            <init>
                                <expr>
                                    <name>hash</name>
                                    &amp; (
                                    <call>
                                        <name><name>table</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    - 1)
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>first</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>table</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>index</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>
                                        <name>ReferenceEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>e</name> =
                                <init>
                                    <expr>
                                        <name>first</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>e</name>
                                !=
                                <name>null</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>e</name>
                                =
                                <call>
                                    <name><name>e</name>.
                                        <name>getNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>e</name>
                                        ==
                                        <name>entry</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>++
                                                <name>modCount</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>enqueueNotification</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>e</name>.
                                                                        <name>getKey</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>hash</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>e</name>.
                                                                        <name>getValueReference</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                                .
                                                                <call>
                                                                    <name>get</name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>cause</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>
                                                        <name>ReferenceEntry</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>K</name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>V</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </type>
                                                <name>newFirst</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name>removeFromChain</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>first</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>e</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>newCount</name>
                                                =
                                                <name><name>this</name>.
                                                    <name>count</name>
                                                </name>
                                                - 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>table</name>.
                                                        <name>set</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>index</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>newFirst</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>count</name>
                                                </name>
                                                =
                                                <name>newCount</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <comment type="line">// write-volatile</comment>
                                        <return>return <expr>true</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>

                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns {@code true} if the value has been partially collected, meaning that the value is
                * null and it is not computing.
                */
            </comment>
            <function>
                <type>
                    <name>boolean</name>
                </type>
                <name>isCollected</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ValueReference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>valueReference</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>valueReference</name>.
                                        <name>isComputingReference</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(
                            <call>
                                <name><name>valueReference</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            == <name>null</name>)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets the value from an entry. Returns {@code null} if the entry is invalid,
                * partially-collected, computing, or expired.
                */
            </comment>
            <function>
                <type>
                    <name>V</name>
                </type>
                <name>getLiveValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entry</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>entry</name>.
                                        <name>getKey</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>tryDrainReferenceQueues</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>value</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>entry</name>.
                                            <name>getValueReference</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>get</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>tryDrainReferenceQueues</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>map</name>.
                                        <name>expires</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &amp;&amp;
                                <call>
                                    <name><name>map</name>.
                                        <name>isExpired</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>entry</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>tryExpireEntries</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>value</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Performs routine cleanup following a read. Normally cleanup happens during writes, or from
                * the cleanupExecutor. If cleanup is not observed after a sufficient number of reads, try
                * cleaning up from the read thread.
                */
            </comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>postReadCleanup</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>(
                                <call>
                                    <name><name>readCount</name>.
                                        <name>incrementAndGet</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                &amp; <name>DRAIN_THRESHOLD</name>) == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>runCleanup</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Performs routine cleanup prior to executing a write. This should be called every time a
                * write thread acquires the segment lock, immediately after acquiring the lock.
                *
                * &lt;p&gt;Post-condition: expireEntries has been run.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GuardedBy</name>
                        <argument_list>("this")</argument_list>
                    </annotation>
                    <name>void</name>
                </type>
                <name>preWriteCleanup</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>runLockedCleanup</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Performs routine cleanup following a write.
                */
            </comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>postWriteCleanup</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>runUnlockedCleanup</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>void</name>
                </type>
                <name>runCleanup</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>runLockedCleanup</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>runUnlockedCleanup</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>void</name>
                </type>
                <name>runLockedCleanup</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>tryLock</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <try>try
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>drainReferenceQueues</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>expireEntries</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <comment type="line">// calls drainRecencyQueue</comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>readCount</name>.
                                                        <name>set</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>0</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <finally>finally
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>unlock</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </finally>
                                </try>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>void</name>
                </type>
                <name>runUnlockedCleanup</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// locked cleanup may generate notifications we can send unlocked</comment>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name>isHeldByCurrentThread</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>map</name>.
                                                <name>processPendingNotifications</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            }
        </block>
    </class>

    <comment type="line">// Queues</comment>

    <comment type="javadoc">/**
        * A custom queue for managing eviction order. Note that this is tightly integrated with {@code
        * ReferenceEntry}, upon which it relies to perform its linking.
        *
        * &lt;p&gt;Note that this entire implementation makes the assumption that all elements which are in
        * the map are also in this queue, and that all elements not in the queue are not in the map.
        *
        * &lt;p&gt;The benefits of creating our own queue are that (1) we can replace elements in the middle
        * of the queue as part of copyEvictableEntry, and (2) the contains method is highly optimized
        * for the current model.
        */
    </comment>
    <class>
        <specifier>static</specifier>
        <specifier>final</specifier> class
        <name>
            <name>EvictionQueue</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>AbstractQueue</name>
                    <argument_list>&lt;
                        <argument>
                            <name>
                                <name>ReferenceEntry</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>head</name> =
                    <init>
                        <expr>new
                            <class>
                                <super>
                                    <name>
                                        <name>AbstractReferenceEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </super>
                                <argument_list>()</argument_list>
                                <block>{

                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>ReferenceEntry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>nextEvictable</name> =
                                            <init>
                                                <expr>
                                                    <name>this</name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>

                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>
                                                <name>ReferenceEntry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>getNextEvictable</name>
                                        <parameter_list>()</parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>nextEvictable</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>

                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>void</name>
                                        </type>
                                        <name>setNextEvictable</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>
                                                            <name>ReferenceEntry</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>K</name>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <name>V</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                    </type>
                                                    <name>next</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>nextEvictable</name>
                                                    </name>
                                                    =
                                                    <name>next</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </function>

                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>ReferenceEntry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>previousEvictable</name> =
                                            <init>
                                                <expr>
                                                    <name>this</name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>

                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>
                                                <name>ReferenceEntry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>getPreviousEvictable</name>
                                        <parameter_list>()</parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>previousEvictable</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>

                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>void</name>
                                        </type>
                                        <name>setPreviousEvictable</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>
                                                            <name>ReferenceEntry</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>K</name>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <name>V</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                    </type>
                                                    <name>previous</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>previousEvictable</name>
                                                    </name>
                                                    =
                                                    <name>previous</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// implements Queue</comment>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>offer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entry</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// unlink</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>connectEvictables</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>entry</name>.
                                                    <name>getPreviousEvictable</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>entry</name>.
                                                    <name>getNextEvictable</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// add to tail</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>connectEvictables</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>head</name>.
                                                    <name>getPreviousEvictable</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>entry</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>connectEvictables</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>entry</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>head</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>peek</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>head</name>.
                                            <name>getNextEvictable</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>(<name>next</name> == <name>head</name>) ? <name>null</name> :
                            <name>next</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>poll</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>head</name>.
                                            <name>getNextEvictable</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>next</name>
                                ==
                                <name>head</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>remove</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>next</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>next</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("unchecked")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>o</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>e</name> =
                            <init>
                                <expr>(<name>ReferenceEntry</name>)
                                    <name>o</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>e</name>.
                                            <name>getPreviousEvictable</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>e</name>.
                                            <name>getNextEvictable</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>connectEvictables</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>previous</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>next</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>nullifyEvictable</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>e</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>
                            <name>next</name>
                            !=
                            <name><name>NullEntry</name>.
                                <name>INSTANCE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("unchecked")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>o</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>e</name> =
                            <init>
                                <expr>(<name>ReferenceEntry</name>)
                                    <name>o</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>e</name>.
                                    <name>getNextEvictable</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            !=
                            <name><name>NullEntry</name>.
                                <name>INSTANCE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>head</name>.
                                    <name>getNextEvictable</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ==
                            <name>head</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>size</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>
                                        <name>ReferenceEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>e</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>head</name>.
                                                <name>getNextEvictable</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>e</name>
                                !=
                                <name>head</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>e</name>
                                =
                                <call>
                                    <name><name>e</name>.
                                        <name>getNextEvictable</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr><name>size</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>size</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>e</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>head</name>.
                                            <name>getNextEvictable</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>e</name>
                                !=
                                <name>head</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ReferenceEntry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>next</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>e</name>.
                                                    <name>getNextEvictable</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>nullifyEvictable</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>e</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>e</name>
                                    =
                                    <name>next</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>head</name>.
                                    <name>setNextEvictable</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>head</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>head</name>.
                                    <name>setPreviousEvictable</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>head</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Iterator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>iterator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <class>
                                <super>
                                    <name>
                                        <name>AbstractSequentialIterator</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>
                                                    <name>ReferenceEntry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </super>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>peek</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>protected</specifier>
                                            <name>
                                                <name>ReferenceEntry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>computeNext</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>
                                                            <name>ReferenceEntry</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>K</name>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <name>V</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                    </type>
                                                    <name>previous</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>
                                                            <name>ReferenceEntry</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>K</name>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <name>V</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                    </type>
                                                    <name>next</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>previous</name>.
                                                                    <name>getNextEvictable</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <return>return
                                                <expr>(<name>next</name> == <name>head</name>) ? <name>null</name> :
                                                    <name>next</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <comment type="javadoc">/**
        * A custom queue for managing expiration order. Note that this is tightly integrated with
        * {@code ReferenceEntry}, upon which it reliese to perform its linking.
        *
        * &lt;p&gt;Note that this entire implementation makes the assumption that all elements which are in
        * the map are also in this queue, and that all elements not in the queue are not in the map.
        *
        * &lt;p&gt;The benefits of creating our own queue are that (1) we can replace elements in the middle
        * of the queue as part of copyEvictableEntry, and (2) the contains method is highly optimized
        * for the current model.
        */
    </comment>
    <class>
        <specifier>static</specifier>
        <specifier>final</specifier> class
        <name>
            <name>ExpirationQueue</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>AbstractQueue</name>
                    <argument_list>&lt;
                        <argument>
                            <name>
                                <name>ReferenceEntry</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>head</name> =
                    <init>
                        <expr>new
                            <class>
                                <super>
                                    <name>
                                        <name>AbstractReferenceEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </super>
                                <argument_list>()</argument_list>
                                <block>{

                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>long</name>
                                        </type>
                                        <name>getExpirationTime</name>
                                        <parameter_list>()</parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name><name>Long</name>.
                                                        <name>MAX_VALUE</name>
                                                    </name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>

                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>void</name>
                                        </type>
                                        <name>setExpirationTime</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>long</name>
                                                    </type>
                                                    <name>time</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{}</block>
                                    </function>

                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>ReferenceEntry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>nextExpirable</name> =
                                            <init>
                                                <expr>
                                                    <name>this</name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>

                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>
                                                <name>ReferenceEntry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>getNextExpirable</name>
                                        <parameter_list>()</parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>nextExpirable</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>

                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>void</name>
                                        </type>
                                        <name>setNextExpirable</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>
                                                            <name>ReferenceEntry</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>K</name>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <name>V</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                    </type>
                                                    <name>next</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>nextExpirable</name>
                                                    </name>
                                                    =
                                                    <name>next</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </function>

                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>ReferenceEntry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>previousExpirable</name> =
                                            <init>
                                                <expr>
                                                    <name>this</name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>

                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>
                                                <name>ReferenceEntry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>getPreviousExpirable</name>
                                        <parameter_list>()</parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>previousExpirable</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>

                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>void</name>
                                        </type>
                                        <name>setPreviousExpirable</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>
                                                            <name>ReferenceEntry</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>K</name>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <name>V</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                    </type>
                                                    <name>previous</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>previousExpirable</name>
                                                    </name>
                                                    =
                                                    <name>previous</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// implements Queue</comment>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>offer</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entry</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// unlink</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>connectExpirables</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>entry</name>.
                                                    <name>getPreviousExpirable</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>entry</name>.
                                                    <name>getNextExpirable</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// add to tail</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>connectExpirables</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>head</name>.
                                                    <name>getPreviousExpirable</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>entry</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>connectExpirables</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>entry</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>head</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>peek</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>head</name>.
                                            <name>getNextExpirable</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>(<name>next</name> == <name>head</name>) ? <name>null</name> :
                            <name>next</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>ReferenceEntry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>poll</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>head</name>.
                                            <name>getNextExpirable</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>next</name>
                                ==
                                <name>head</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>remove</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>next</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>next</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("unchecked")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>o</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>e</name> =
                            <init>
                                <expr>(<name>ReferenceEntry</name>)
                                    <name>o</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>previous</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>e</name>.
                                            <name>getPreviousExpirable</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>next</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>e</name>.
                                            <name>getNextExpirable</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>connectExpirables</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>previous</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>next</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>nullifyExpirable</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>e</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>
                            <name>next</name>
                            !=
                            <name><name>NullEntry</name>.
                                <name>INSTANCE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("unchecked")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>o</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>e</name> =
                            <init>
                                <expr>(<name>ReferenceEntry</name>)
                                    <name>o</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>e</name>.
                                    <name>getNextExpirable</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            !=
                            <name><name>NullEntry</name>.
                                <name>INSTANCE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>head</name>.
                                    <name>getNextExpirable</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ==
                            <name>head</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>size</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>
                                        <name>ReferenceEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>e</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>head</name>.
                                                <name>getNextExpirable</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>e</name>
                                !=
                                <name>head</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>e</name>
                                =
                                <call>
                                    <name><name>e</name>.
                                        <name>getNextExpirable</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr><name>size</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <name>size</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>e</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>head</name>.
                                            <name>getNextExpirable</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>e</name>
                                !=
                                <name>head</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ReferenceEntry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>next</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>e</name>.
                                                    <name>getNextExpirable</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>nullifyExpirable</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>e</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>e</name>
                                    =
                                    <name>next</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>head</name>.
                                    <name>setNextExpirable</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>head</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>head</name>.
                                    <name>setPreviousExpirable</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>head</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Iterator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>iterator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <class>
                                <super>
                                    <name>
                                        <name>AbstractSequentialIterator</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>
                                                    <name>ReferenceEntry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </super>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>peek</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>protected</specifier>
                                            <name>
                                                <name>ReferenceEntry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>computeNext</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>
                                                            <name>ReferenceEntry</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>K</name>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <name>V</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                    </type>
                                                    <name>previous</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>
                                                            <name>ReferenceEntry</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>K</name>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <name>V</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                    </type>
                                                    <name>next</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>previous</name>.
                                                                    <name>getNextExpirable</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <return>return
                                                <expr>(<name>next</name> == <name>head</name>) ? <name>null</name> :
                                                    <name>next</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <specifier>static</specifier>
        <specifier>final</specifier> class <name>CleanupMapTask</name>
        <super>
            <implements>implements
                <name>Runnable</name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>WeakReference</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>MapMakerInternalMap</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>?</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>mapReference</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <specifier>public</specifier>
                <name>CleanupMapTask</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>MapMakerInternalMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>map</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>mapReference</name>
                            </name>
                            = new
                            <call>
                                <name>
                                    <name>WeakReference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>MapMakerInternalMap</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>?</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>?</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>map</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>run</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>MapMakerInternalMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>map</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>mapReference</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>map</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>CancellationException</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>
                                        <name>Segment</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>?</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>segment</name> :
                                <range>
                                    <expr>
                                        <name><name>map</name>.
                                            <name>segments</name>
                                        </name>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>segment</name>.
                                            <name>runCleanup</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <comment type="line">// ConcurrentMap methods</comment>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>boolean</name>
        </type>
        <name>isEmpty</name>
        <parameter_list>()</parameter_list>
        <block>{
            <comment type="block">/*
                * Sum per-segment modCounts to avoid mis-reporting when elements are concurrently added and
                * removed in one segment while checking another, in which case the table was never actually
                * empty at any point. (The sum ensures accuracy up through at least 1&lt;&lt;31 per-segment
                * modifications before recheck.) Method containsValue() uses similar constructions for
                * stability checks.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>sum</name> =
                    <init>
                        <expr>0L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>Segment</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <index>[]</index>
                    </type>
                    <name>segments</name> =
                    <init>
                        <expr>
                            <name><name>this</name>.
                                <name>segments</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <for>for (
                <init>
                    <decl>
                        <type>
                            <name>int</name>
                        </type>
                        <name>i</name> =
                        <init>
                            <expr>0</expr>
                        </init>
                    </decl>
                    ;
                </init>
                <condition>
                    <expr>
                        <name>i</name>
                        &lt;
                        <name><name>segments</name>.
                            <name>length</name>
                        </name>
                    </expr>
                    ;
                </condition>
                <incr>
                    <expr>++
                        <name>i</name>
                    </expr>
                </incr>
                )
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>
                                    <name>segments</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                .<name>count</name> != 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>sum</name>
                            +=
                            <name>
                                <name>segments</name>
                                <index>[
                                    <expr>
                                        <name>i</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            .
                            <name>modCount</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </for>

            <if>if
                <condition>(
                    <expr>
                        <name>sum</name>
                        != 0L
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <comment type="line">// recheck unless no modifications</comment>
                        <for>for (
                            <init>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>i</name> =
                                    <init>
                                        <expr>0</expr>
                                    </init>
                                </decl>
                                ;
                            </init>
                            <condition>
                                <expr>
                                    <name>i</name>
                                    &lt;
                                    <name><name>segments</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                                ;
                            </condition>
                            <incr>
                                <expr>++
                                    <name>i</name>
                                </expr>
                            </incr>
                            )
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>
                                                <name>segments</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                            .<name>count</name> != 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>false</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>sum</name>
                                        -=
                                        <name>
                                            <name>segments</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        .
                                        <name>modCount</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </for>
                        <if>if
                            <condition>(
                                <expr>
                                    <name>sum</name>
                                    != 0L
                                </expr>
                                )
                            </condition>
                            <then>
                                <block>{
                                    <return>return <expr>false</expr>;
                                    </return>
                                    }
                                </block>
                            </then>
                        </if>
                        }
                    </block>
                </then>
            </if>
            <return>return <expr>true</expr>;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>int</name>
        </type>
        <name>size</name>
        <parameter_list>()</parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>Segment</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <index>[]</index>
                    </type>
                    <name>segments</name> =
                    <init>
                        <expr>
                            <name><name>this</name>.
                                <name>segments</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>sum</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <for>for (
                <init>
                    <decl>
                        <type>
                            <name>int</name>
                        </type>
                        <name>i</name> =
                        <init>
                            <expr>0</expr>
                        </init>
                    </decl>
                    ;
                </init>
                <condition>
                    <expr>
                        <name>i</name>
                        &lt;
                        <name><name>segments</name>.
                            <name>length</name>
                        </name>
                    </expr>
                    ;
                </condition>
                <incr>
                    <expr>++
                        <name>i</name>
                    </expr>
                </incr>
                )
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>sum</name>
                            +=
                            <name>
                                <name>segments</name>
                                <index>[
                                    <expr>
                                        <name>i</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            .
                            <name>count</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </for>
            <return>return
                <expr>
                    <call>
                        <name><name>Ints</name>.
                            <name>saturatedCast</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>sum</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>V</name>
        </type>
        <name>get</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>Object</name>
                    </type>
                    <name>key</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>
                        <name>key</name>
                        ==
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <name>null</name>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>hash</name> =
                    <init>
                        <expr>
                            <call>
                                <name>hash</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <return>return
                <expr>
                    <call>
                        <name>segmentFor</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    .
                    <call>
                        <name>get</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>key</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns the internal entry for the specified key. The entry may be computing, expired, or
        * partially collected. Does not impact recency ordering.
        */
    </comment>
    <function>
        <type>
            <name>
                <name>ReferenceEntry</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>getEntry</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>Object</name>
                    </type>
                    <name>key</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>
                        <name>key</name>
                        ==
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <name>null</name>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>hash</name> =
                    <init>
                        <expr>
                            <call>
                                <name>hash</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <return>return
                <expr>
                    <call>
                        <name>segmentFor</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    .
                    <call>
                        <name>getEntry</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>key</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>boolean</name>
        </type>
        <name>containsKey</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>Object</name>
                    </type>
                    <name>key</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>
                        <name>key</name>
                        ==
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return <expr>false</expr>;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>hash</name> =
                    <init>
                        <expr>
                            <call>
                                <name>hash</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <return>return
                <expr>
                    <call>
                        <name>segmentFor</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    .
                    <call>
                        <name>containsKey</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>key</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>boolean</name>
        </type>
        <name>containsValue</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>Object</name>
                    </type>
                    <name>value</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>
                        <name>value</name>
                        ==
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return <expr>false</expr>;
                        </return>
                        }
                    </block>
                </then>
            </if>

            <comment type="line">// This implementation is patterned after ConcurrentHashMap, but without the locking.
                The only
            </comment>
            <comment type="line">// way for it to return a false negative would be for the target value to jump around
                in the map
            </comment>
            <comment type="line">// such that none of the subsequent iterations observed it, despite the fact that at
                every point
            </comment>
            <comment type="line">// in time it was present somewhere int the map. This becomes increasingly unlikely
                as
            </comment>
            <comment type="line">// CONTAINS_VALUE_RETRIES increases, though without locking it is theoretically
                possible.
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Segment</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <index>[]</index>
                    </type>
                    <name>segments</name> =
                    <init>
                        <expr>
                            <name><name>this</name>.
                                <name>segments</name>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>last</name> =
                    <init>
                        <expr>-1L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <for>for (
                <init>
                    <decl>
                        <type>
                            <name>int</name>
                        </type>
                        <name>i</name> =
                        <init>
                            <expr>0</expr>
                        </init>
                    </decl>
                    ;
                </init>
                <condition>
                    <expr>
                        <name>i</name>
                        &lt;
                        <name>CONTAINS_VALUE_RETRIES</name>
                    </expr>
                    ;
                </condition>
                <incr>
                    <expr><name>i</name>++
                    </expr>
                </incr>
                )
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>sum</name> =
                            <init>
                                <expr>0L</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>
                                        <name>Segment</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>segment</name> :
                                <range>
                                    <expr>
                                        <name>segments</name>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <comment type="line">// ensure visibility of most recent completed write</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <annotation>@
                                            <name>SuppressWarnings</name>
                                            <argument_list>({"UnusedDeclaration", "unused"})</argument_list>
                                        </annotation>
                                        <name>int</name>
                                    </type>
                                    <name>c</name> =
                                    <init>
                                        <expr>
                                            <name><name>segment</name>.
                                                <name>count</name>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <comment type="line">// read-volatile</comment>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>AtomicReferenceArray</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>
                                                        <name>ReferenceEntry</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>K</name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>V</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>table</name> =
                                    <init>
                                        <expr>
                                            <name><name>segment</name>.
                                                <name>table</name>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>j</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>j</name>
                                        &lt;
                                        <call>
                                            <name><name>table</name>.
                                                <name>length</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>j</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <for>for (
                                        <init>
                                            <decl>
                                                <type>
                                                    <name>
                                                        <name>ReferenceEntry</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>K</name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>V</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </type>
                                                <name>e</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>table</name>.
                                                                <name>get</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>j</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </init>
                                        <condition>
                                            <expr>
                                                <name>e</name>
                                                !=
                                                <name>null</name>
                                            </expr>
                                            ;
                                        </condition>
                                        <incr>
                                            <expr>
                                                <name>e</name>
                                                =
                                                <call>
                                                    <name><name>e</name>.
                                                        <name>getNext</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </incr>
                                        )
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>V</name>
                                                    </type>
                                                    <name>v</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>segment</name>.
                                                                    <name>getLiveValue</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>e</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>v</name>
                                                        != <name>null</name> &amp;&amp;
                                                        <call>
                                                            <name><name>valueEquivalence</name>.
                                                                <name>equivalent</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>value</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>v</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return <expr>true</expr>;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </for>
                                    }
                                </block>
                            </for>
                            <expr_stmt>
                                <expr>
                                    <name>sum</name>
                                    +=
                                    <name><name>segment</name>.
                                        <name>modCount</name>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <if>if
                        <condition>(
                            <expr>
                                <name>sum</name>
                                ==
                                <name>last</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <break>break;</break>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>last</name>
                            =
                            <name>sum</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </for>
            <return>return <expr>false</expr>;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>V</name>
        </type>
        <name>put</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>K</name>
                    </type>
                    <name>key</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>V</name>
                    </type>
                    <name>value</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>key</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>value</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>hash</name> =
                    <init>
                        <expr>
                            <call>
                                <name>hash</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <return>return
                <expr>
                    <call>
                        <name>segmentFor</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    .
                    <call>
                        <name>put</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>key</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>value</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>false</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>V</name>
        </type>
        <name>putIfAbsent</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>K</name>
                    </type>
                    <name>key</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>V</name>
                    </type>
                    <name>value</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>key</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>value</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>hash</name> =
                    <init>
                        <expr>
                            <call>
                                <name>hash</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <return>return
                <expr>
                    <call>
                        <name>segmentFor</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    .
                    <call>
                        <name>put</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>key</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>value</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>true</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>void</name>
        </type>
        <name>putAll</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>K</name>
                                    </extends>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>V</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>m</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <for>for (
                <init>
                    <decl>
                        <type>
                            <name>
                                <name>Entry</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>?</name>
                                        <extends>extends
                                            <name>K</name>
                                        </extends>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>?</name>
                                        <extends>extends
                                            <name>V</name>
                                        </extends>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>e</name> :
                        <range>
                            <expr>
                                <call>
                                    <name><name>m</name>.
                                        <name>entrySet</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </range>
                    </decl>
                </init>
                )
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>put</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>e</name>.
                                                    <name>getKey</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>e</name>.
                                                    <name>getValue</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </for>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>V</name>
        </type>
        <name>remove</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>Object</name>
                    </type>
                    <name>key</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>
                        <name>key</name>
                        ==
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <name>null</name>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>hash</name> =
                    <init>
                        <expr>
                            <call>
                                <name>hash</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <return>return
                <expr>
                    <call>
                        <name>segmentFor</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    .
                    <call>
                        <name>remove</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>key</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>boolean</name>
        </type>
        <name>remove</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>Object</name>
                    </type>
                    <name>key</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>Object</name>
                    </type>
                    <name>value</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>
                        <name>key</name>
                        == <name>null</name> || <name>value</name> ==
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return <expr>false</expr>;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>hash</name> =
                    <init>
                        <expr>
                            <call>
                                <name>hash</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <return>return
                <expr>
                    <call>
                        <name>segmentFor</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    .
                    <call>
                        <name>remove</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>key</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>value</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>boolean</name>
        </type>
        <name>replace</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>K</name>
                    </type>
                    <name>key</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>V</name>
                    </type>
                    <name>oldValue</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>V</name>
                    </type>
                    <name>newValue</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>key</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>newValue</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <if>if
                <condition>(
                    <expr>
                        <name>oldValue</name>
                        ==
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return <expr>false</expr>;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>hash</name> =
                    <init>
                        <expr>
                            <call>
                                <name>hash</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <return>return
                <expr>
                    <call>
                        <name>segmentFor</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    .
                    <call>
                        <name>replace</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>key</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>oldValue</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>newValue</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>V</name>
        </type>
        <name>replace</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>K</name>
                    </type>
                    <name>key</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>V</name>
                    </type>
                    <name>value</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>key</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>value</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>hash</name> =
                    <init>
                        <expr>
                            <call>
                                <name>hash</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <return>return
                <expr>
                    <call>
                        <name>segmentFor</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    .
                    <call>
                        <name>replace</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>key</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>hash</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>value</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>void</name>
        </type>
        <name>clear</name>
        <parameter_list>()</parameter_list>
        <block>{
            <for>for (
                <init>
                    <decl>
                        <type>
                            <name>
                                <name>Segment</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>segment</name> :
                        <range>
                            <expr>
                                <name>segments</name>
                            </expr>
                        </range>
                    </decl>
                </init>
                )
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>segment</name>.
                                    <name>clear</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </for>
            }
        </block>
    </function>

    <decl_stmt>
        <decl>
            <type>
                <name>transient</name>
                <name>
                    <name>Set</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>keySet</name>
        </decl>
        ;
    </decl_stmt>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>
                <name>Set</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>keySet</name>
        <parameter_list>()</parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>Set</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>ks</name> =
                    <init>
                        <expr>
                            <name>keySet</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <return>return
                <expr>(<name>ks</name> != <name>null</name>) ? <name>ks</name> : (<name>keySet</name> = new
                    <call>
                        <name>KeySet</name>
                        <argument_list>()</argument_list>
                    </call>
                    )
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <decl_stmt>
        <decl>
            <type>
                <name>transient</name>
                <name>
                    <name>Collection</name>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>values</name>
        </decl>
        ;
    </decl_stmt>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>
                <name>Collection</name>
                <argument_list>&lt;
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>values</name>
        <parameter_list>()</parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>Collection</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>vs</name> =
                    <init>
                        <expr>
                            <name>values</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <return>return
                <expr>(<name>vs</name> != <name>null</name>) ? <name>vs</name> : (<name>values</name> = new
                    <call>
                        <name>Values</name>
                        <argument_list>()</argument_list>
                    </call>
                    )
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <decl_stmt>
        <decl>
            <type>
                <name>transient</name>
                <name>
                    <name>Set</name>
                    <argument_list>&lt;
                        <argument>
                            <name>
                                <name>Entry</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </type>
            <name>entrySet</name>
        </decl>
        ;
    </decl_stmt>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>
                <name>Set</name>
                <argument_list>&lt;
                    <argument>
                        <name>
                            <name>Entry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>entrySet</name>
        <parameter_list>()</parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>Set</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>es</name> =
                    <init>
                        <expr>
                            <name>entrySet</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <return>return
                <expr>(<name>es</name> != <name>null</name>) ? <name>es</name> : (<name>entrySet</name> = new
                    <call>
                        <name>EntrySet</name>
                        <argument_list>()</argument_list>
                    </call>
                    )
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="line">// Iterator Support</comment>

    <class>
        <specifier>abstract</specifier>
        class
        <name>
            <name>HashIterator</name>
            <argument_list>&lt;
                <argument>
                    <name>E</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <implements>implements
                <name>
                    <name>Iterator</name>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>nextSegmentIndex</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>nextTableIndex</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>Segment</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>currentSegment</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>AtomicReferenceArray</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>ReferenceEntry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>currentTable</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>ReferenceEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>nextEntry</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>WriteThroughEntry</name>
                    </type>
                    <name>nextExternal</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>WriteThroughEntry</name>
                    </type>
                    <name>lastReturned</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>HashIterator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>nextSegmentIndex</name>
                            =
                            <name><name>segments</name>.
                                <name>length</name>
                            </name>
                            - 1
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>nextTableIndex</name>
                            = -1
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>advance</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>E</name>
                </type>
                <name>next</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>advance</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>nextExternal</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>nextInChain</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>nextInTable</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return;</return>
                                }
                            </block>
                        </then>
                    </if>

                    <while>while
                        <condition>(
                            <expr>
                                <name>nextSegmentIndex</name>
                                &gt;= 0
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>currentSegment</name>
                                    =
                                    <name>
                                        <name>segments</name>
                                        <index>[
                                            <expr><name>nextSegmentIndex</name>--
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name><name>currentSegment</name>.
                                            <name>count</name>
                                        </name>
                                        != 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>currentTable</name>
                                                =
                                                <name><name>currentSegment</name>.
                                                    <name>table</name>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>nextTableIndex</name>
                                                =
                                                <call>
                                                    <name><name>currentTable</name>.
                                                        <name>length</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                - 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name>nextInTable</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return;</return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Finds the next entry in the current chain. Returns {@code true} if an entry was found.
                */
            </comment>
            <function>
                <type>
                    <name>boolean</name>
                </type>
                <name>nextInChain</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>nextEntry</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <for>for (
                                    <init>
                                        <expr>
                                            <name>nextEntry</name>
                                            =
                                            <call>
                                                <name><name>nextEntry</name>.
                                                    <name>getNext</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </init>
                                    <condition>
                                        <expr>
                                            <name>nextEntry</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </condition>
                                    <incr>
                                        <expr>
                                            <name>nextEntry</name>
                                            =
                                            <call>
                                                <name><name>nextEntry</name>.
                                                    <name>getNext</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </incr>
                                    )
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name>advanceTo</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>nextEntry</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return <expr>true</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Finds the next entry in the current table. Returns {@code true} if an entry was found.
                */
            </comment>
            <function>
                <type>
                    <name>boolean</name>
                </type>
                <name>nextInTable</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <while>while
                        <condition>(
                            <expr>
                                <name>nextTableIndex</name>
                                &gt;= 0
                            </expr>
                            )
                        </condition>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>(<name>nextEntry</name> =
                                        <call>
                                            <name><name>currentTable</name>.
                                                <name>get</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr><name>nextTableIndex</name>--
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        ) !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name>advanceTo</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>nextEntry</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    ||
                                                    <call>
                                                        <name>nextInChain</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return <expr>true</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </while>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Advances to the given entry. Returns {@code true} if the entry was valid, {@code false} if it
                * should be skipped.
                */
            </comment>
            <function>
                <type>
                    <name>boolean</name>
                </type>
                <name>advanceTo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ReferenceEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entry</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>K</name>
                                    </type>
                                    <name>key</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>entry</name>.
                                                    <name>getKey</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>V</name>
                                    </type>
                                    <name>value</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>getLiveValue</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>entry</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>value</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>nextExternal</name>
                                                = new
                                                <call>
                                                    <name>WriteThroughEntry</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>key</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>value</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return <expr>true</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <comment type="line">// Skip stale entry.</comment>
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                        <finally>finally
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>currentSegment</name>.
                                                <name>postReadCleanup</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>hasNext</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>nextExternal</name>
                            !=
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>WriteThroughEntry</name>
                </type>
                <name>nextEntry</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>nextExternal</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NoSuchElementException</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>lastReturned</name>
                            =
                            <name>nextExternal</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>advance</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>lastReturned</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>remove</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkRemove</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>lastReturned</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>MapMakerInternalMap</name>.<name>this</name>.
                                    <name>remove</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>lastReturned</name>.
                                                    <name>getKey</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>lastReturned</name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <specifier>final</specifier>
        class <name>KeyIterator</name>
        <super>
            <extends>extends
                <name>
                    <name>HashIterator</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>next</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>nextEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>getKey</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <specifier>final</specifier>
        class <name>ValueIterator</name>
        <super>
            <extends>extends
                <name>
                    <name>HashIterator</name>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>V</name>
                </type>
                <name>next</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>nextEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>getValue</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <comment type="javadoc">/**
        * Custom Entry class used by EntryIterator.next(), that relays setValue changes to the
        * underlying map.
        */
    </comment>
    <class>
        <specifier>final</specifier>
        class <name>WriteThroughEntry</name>
        <super>
            <extends>extends
                <name>
                    <name>AbstractMapEntry</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>K</name>
                    </type>
                    <name>key</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// non-null</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>V</name>
                    </type>
                    <name>value</name>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// non-null</comment>

            <constructor>
                <name>WriteThroughEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>key</name>
                            </name>
                            =
                            <name>key</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>value</name>
                            </name>
                            =
                            <name>value</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>getKey</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>key</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>V</name>
                </type>
                <name>getValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>value</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Cannot use key and value equivalence</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>object</name>
                                <name>instanceof</name>
                                <name>Entry</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>Entry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>?</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>?</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>that</name> =
                                        <init>
                                            <expr>(
                                                <name>
                                                    <name>Entry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                )
                                                <name>object</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>key</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>that</name>.
                                                                <name>getKey</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &amp;&amp;
                                        <call>
                                            <name><name>value</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>that</name>.
                                                                <name>getValue</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// Cannot use key and value equivalence</comment>
                    <return>return
                        <expr>
                            <call>
                                <name><name>key</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ^
                            <call>
                                <name><name>value</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>V</name>
                </type>
                <name>setValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>oldValue</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>put</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>key</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>newValue</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>value</name>
                            =
                            <name>newValue</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// only if put succeeds</comment>
                    <return>return
                        <expr>
                            <name>oldValue</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <specifier>final</specifier>
        class <name>EntryIterator</name>
        <super>
            <extends>extends
                <name>
                    <name>HashIterator</name>
                    <argument_list>&lt;
                        <argument>
                            <name>
                                <name>Entry</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>next</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>nextEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <annotation>@
            <name>WeakOuter</name>
        </annotation>
        <specifier>final</specifier>
        class <name>KeySet</name>
        <super>
            <extends>extends
                <name>
                    <name>AbstractSet</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Iterator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>iterator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>KeyIterator</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>size</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>MapMakerInternalMap</name>.<name>this</name>.
                                    <name>size</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>MapMakerInternalMap</name>.<name>this</name>.
                                    <name>isEmpty</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>o</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>MapMakerInternalMap</name>.<name>this</name>.
                                    <name>containsKey</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>o</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>o</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>MapMakerInternalMap</name>.<name>this</name>.
                                    <name>remove</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>o</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            !=
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>MapMakerInternalMap</name>.<name>this</name>.
                                    <name>clear</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <annotation>@
            <name>WeakOuter</name>
        </annotation>
        <specifier>final</specifier>
        class <name>Values</name>
        <super>
            <extends>extends
                <name>
                    <name>AbstractCollection</name>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Iterator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>iterator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>ValueIterator</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>size</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>MapMakerInternalMap</name>.<name>this</name>.
                                    <name>size</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>MapMakerInternalMap</name>.<name>this</name>.
                                    <name>isEmpty</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>o</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>MapMakerInternalMap</name>.<name>this</name>.
                                    <name>containsValue</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>o</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>MapMakerInternalMap</name>.<name>this</name>.
                                    <name>clear</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <annotation>@
            <name>WeakOuter</name>
        </annotation>
        <specifier>final</specifier>
        class <name>EntrySet</name>
        <super>
            <extends>extends
                <name>
                    <name>AbstractSet</name>
                    <argument_list>&lt;
                        <argument>
                            <name>
                                <name>Entry</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Iterator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>iterator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>EntryIterator</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>o</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!(<name>o</name>
                                <name>instanceof</name>
                                <name>Entry</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>e</name> =
                            <init>
                                <expr>(
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>?</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    )
                                    <name>o</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>key</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>e</name>.
                                            <name>getKey</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>key</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>v</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>MapMakerInternalMap</name>.<name>this</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>key</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <return>return
                        <expr>
                            <name>v</name>
                            != <name>null</name> &amp;&amp;
                            <call>
                                <name><name>valueEquivalence</name>.
                                    <name>equivalent</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>e</name>.
                                                    <name>getValue</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>v</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>o</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!(<name>o</name>
                                <name>instanceof</name>
                                <name>Entry</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>e</name> =
                            <init>
                                <expr>(
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>?</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    )
                                    <name>o</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>key</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>e</name>.
                                            <name>getKey</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>key</name>
                            != <name>null</name> &amp;&amp;
                            <call>
                                <name><name>MapMakerInternalMap</name>.<name>this</name>.
                                    <name>remove</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>e</name>.
                                                    <name>getValue</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>size</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>MapMakerInternalMap</name>.<name>this</name>.
                                    <name>size</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>MapMakerInternalMap</name>.<name>this</name>.
                                    <name>isEmpty</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>MapMakerInternalMap</name>.<name>this</name>.
                                    <name>clear</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <comment type="line">// Serialization Support</comment>

    <decl_stmt>
        <decl>
            <type>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier>
                <name>long</name>
            </type>
            <name>serialVersionUID</name> =
            <init>
                <expr>5</expr>
            </init>
        </decl>
        ;
    </decl_stmt>

    <function>
        <type>
            <name>Object</name>
        </type>
        <name>writeReplace</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>SerializationProxy</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>keyStrength</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>valueStrength</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>keyEquivalence</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>valueEquivalence</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>expireAfterWriteNanos</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>expireAfterAccessNanos</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>maximumSize</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>concurrencyLevel</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>removalListener</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>this</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * The actual object that gets serialized. Unfortunately, readResolve() doesn't get called when a
        * circular dependency is present, so the proxy must be able to behave as the map itself.
        */
    </comment>
    <class>
        <specifier>abstract</specifier>
        <specifier>static</specifier> class
        <name>
            <name>AbstractSerializationProxy</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>ForwardingConcurrentMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>Serializable</name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>3</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>Strength</name>
                    </type>
                    <name>keyStrength</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>Strength</name>
                    </type>
                    <name>valueStrength</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Equivalence</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Object</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>keyEquivalence</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Equivalence</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Object</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>valueEquivalence</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>expireAfterWriteNanos</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>expireAfterAccessNanos</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>maximumSize</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>concurrencyLevel</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>RemovalListener</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>V</name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>removalListener</name>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <name>transient</name>
                        <name>
                            <name>ConcurrentMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>delegate</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>AbstractSerializationProxy</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Strength</name>
                            </type>
                            <name>keyStrength</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Strength</name>
                            </type>
                            <name>valueStrength</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Equivalence</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Object</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>keyEquivalence</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Equivalence</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Object</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>valueEquivalence</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>expireAfterWriteNanos</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>expireAfterAccessNanos</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>maximumSize</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>concurrencyLevel</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>RemovalListener</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>K</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>V</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>removalListener</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ConcurrentMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>delegate</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>keyStrength</name>
                            </name>
                            =
                            <name>keyStrength</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>valueStrength</name>
                            </name>
                            =
                            <name>valueStrength</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>keyEquivalence</name>
                            </name>
                            =
                            <name>keyEquivalence</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>valueEquivalence</name>
                            </name>
                            =
                            <name>valueEquivalence</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>expireAfterWriteNanos</name>
                            </name>
                            =
                            <name>expireAfterWriteNanos</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>expireAfterAccessNanos</name>
                            </name>
                            =
                            <name>expireAfterAccessNanos</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>maximumSize</name>
                            </name>
                            =
                            <name>maximumSize</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>concurrencyLevel</name>
                            </name>
                            =
                            <name>concurrencyLevel</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>removalListener</name>
                            </name>
                            =
                            <name>removalListener</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>delegate</name>
                            </name>
                            =
                            <name>delegate</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>protected</specifier>
                    <name>
                        <name>ConcurrentMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>delegate</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>delegate</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>void</name>
                </type>
                <name>writeMapTo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ObjectOutputStream</name>
                            </type>
                            <name>out</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>out</name>.
                                    <name>writeInt</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>delegate</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>entry</name> :
                                <range>
                                    <expr>
                                        <call>
                                            <name><name>delegate</name>.
                                                <name>entrySet</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>out</name>.
                                            <name>writeObject</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>entry</name>.
                                                            <name>getKey</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>out</name>.
                                            <name>writeObject</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>entry</name>.
                                                            <name>getValue</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>out</name>.
                                    <name>writeObject</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// terminate entries</comment>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("deprecation")</argument_list>
                    </annotation>
                    <comment type="line">// serialization of deprecated feature</comment>
                    <name>MapMaker</name>
                </type>
                <name>readMapMaker</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ObjectInputStream</name>
                            </type>
                            <name>in</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>in</name>.
                                            <name>readInt</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>MapMaker</name>
                            </type>
                            <name>mapMaker</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>MapMaker</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>initialCapacity</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>size</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>setKeyStrength</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>keyStrength</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>setValueStrength</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>valueStrength</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>keyEquivalence</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>keyEquivalence</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>concurrencyLevel</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>concurrencyLevel</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>mapMaker</name>.
                                    <name>removalListener</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>removalListener</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>expireAfterWriteNanos</name>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>mapMaker</name>.
                                                <name>expireAfterWrite</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>expireAfterWriteNanos</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>TimeUnit</name>.
                                                            <name>NANOSECONDS</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>expireAfterAccessNanos</name>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>mapMaker</name>.
                                                <name>expireAfterAccess</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>expireAfterAccessNanos</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>TimeUnit</name>.
                                                            <name>NANOSECONDS</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>maximumSize</name>
                                !=
                                <name><name>MapMaker</name>.
                                    <name>UNSET_INT</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>mapMaker</name>.
                                                <name>maximumSize</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>maximumSize</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>mapMaker</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("unchecked")</argument_list>
                    </annotation>
                    <name>void</name>
                </type>
                <name>readEntries</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ObjectInputStream</name>
                            </type>
                            <name>in</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>ClassNotFoundException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <while>while
                        <condition>(<expr>true</expr>)
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>K</name>
                                    </type>
                                    <name>key</name> =
                                    <init>
                                        <expr>(<name>K</name>)
                                            <call>
                                                <name><name>in</name>.
                                                    <name>readObject</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>key</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <break>break;</break>
                                        <comment type="line">// terminator</comment>
                                        }
                                    </block>
                                </then>
                            </if>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>V</name>
                                    </type>
                                    <name>value</name> =
                                    <init>
                                        <expr>(<name>V</name>)
                                            <call>
                                                <name><name>in</name>.
                                                    <name>readObject</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>delegate</name>.
                                            <name>put</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>key</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>value</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <comment type="javadoc">/**
        * The actual object that gets serialized. Unfortunately, readResolve() doesn't get called when a
        * circular dependency is present, so the proxy must be able to behave as the map itself.
        */
    </comment>
    <class>
        <specifier>private</specifier>
        <specifier>static</specifier>
        <specifier>final</specifier> class
        <name>
            <name>SerializationProxy</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>AbstractSerializationProxy</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>3</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>SerializationProxy</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Strength</name>
                            </type>
                            <name>keyStrength</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Strength</name>
                            </type>
                            <name>valueStrength</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Equivalence</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Object</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>keyEquivalence</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Equivalence</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Object</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>valueEquivalence</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>expireAfterWriteNanos</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>expireAfterAccessNanos</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>maximumSize</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>concurrencyLevel</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>RemovalListener</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>K</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>V</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>removalListener</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ConcurrentMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>delegate</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>keyStrength</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueStrength</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>keyEquivalence</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>valueEquivalence</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>expireAfterWriteNanos</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>expireAfterAccessNanos</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>maximumSize</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>concurrencyLevel</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>removalListener</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>delegate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>writeObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ObjectOutputStream</name>
                            </type>
                            <name>out</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>out</name>.
                                    <name>defaultWriteObject</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>writeMapTo</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>out</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>readObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ObjectInputStream</name>
                            </type>
                            <name>in</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>ClassNotFoundException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>in</name>.
                                    <name>defaultReadObject</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>MapMaker</name>
                            </type>
                            <name>mapMaker</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>readMapMaker</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>in</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>delegate</name>
                            =
                            <call>
                                <name><name>mapMaker</name>.
                                    <name>makeMap</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>readEntries</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>in</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>Object</name>
                </type>
                <name>readResolve</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>delegate</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
    }
</unit>
