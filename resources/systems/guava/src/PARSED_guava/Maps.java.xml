<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\Maps.java">
    <comment type="block">/*
        * Copyright (C) 2007 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkArgument</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Predicates</name>.
            <name>compose</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Predicates</name>.
            <name>equalTo</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Predicates</name>.
            <name>in</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Predicates</name>.
            <name>not</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>
            CollectPreconditions</name>.
            <name>checkNonnegative</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtIncompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Converter</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Equivalence</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Function</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Joiner</name>.
            <name>MapJoiner</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Objects</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Preconditions</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Predicate</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Predicates</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>MapDifference</name>.
            <name>ValueDifference</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>primitives</name>.
            <name>Ints</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>j2objc</name>.<name>annotations</name>.
            <name>Weak</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>j2objc</name>.<name>annotations</name>.
            <name>WeakOuter</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>AbstractCollection</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>AbstractMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collection</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collections</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Comparator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>EnumMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Enumeration</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>HashMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>IdentityHashMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>LinkedHashMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>Map</name>.
            <name>Entry</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>NavigableMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>NavigableSet</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Properties</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Set</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>SortedMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>SortedSet</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>TreeMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ConcurrentMap</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>CheckReturnValue</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Static utility methods pertaining to {@link Map} instances (including instances of
        * {@link SortedMap}, {@link BiMap}, etc.). Also see this class's counterparts
        * {@link Lists}, {@link Sets} and {@link Queues}.
        *
        * &lt;p&gt;See the Guava User Guide article on &lt;a href=
        * "https://github.com/google/guava/wiki/CollectionUtilitiesExplained#maps"&gt;
        * {@code Maps}&lt;/a&gt;.
        *
        * @author Kevin Bourrillion
        * @author Mike Bostock
        * @author Isaac Shum
        * @author Louis Wasserman
        * @since 2.0
        */
    </comment>
    <class>
        <annotation>@
            <name>GwtCompatible</name>
            <argument_list>(emulated = true)</argument_list>
        </annotation>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>Maps</name>
        <block>{
            <constructor>
                <specifier>private</specifier>
                <name>Maps</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <enum>
                <specifier>private</specifier>
                enum <name>EntryFunction</name>
                <super>
                    <implements>implements
                        <name>
                            <name>Function</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>?</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                ,
                                <argument>
                                    <name>Object</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </implements>
                </super>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>KEY</name>
                            <block>{
                                @
                                <expr>
                                    <name>Override</name>
                                    @
                                    <name>Nullable</name>
                                    public <name>Object</name>
                                    <call>
                                        <name>apply</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>Entry</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>?</name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>?</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                    <name>entry</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>entry</name>.
                                                        <name>getKey</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                    </block>
                                </expr>
                            </block>
                        </expr>
                    </expr_stmt>
                    }
                </block>
            </enum>
            }
        </block>
    </class>
    ,
    <expr_stmt>
        <expr>
            <name>VALUE</name>
            <block>{
                @
                <expr>
                    <name>Override</name>
                    @
                    <name>Nullable</name>
                    public <name>Object</name>
                    <call>
                        <name>apply</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>?</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>entry</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name><name>entry</name>.
                                        <name>getValue</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }
    }
    <empty_stmt>;</empty_stmt>
    }

    @
    <expr_stmt>
        <expr>
            <call>
                <name>SuppressWarnings</name>
                <argument_list>(
                    <argument>
                        <expr>"unchecked"</expr>
                    </argument>
                    )
                </argument_list>
            </call>
            static &lt;<name>K</name>&gt;
            <name>
                <name>Function</name>
                <argument_list>&lt;
                    <argument>
                        <name>
                            <name>Entry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </argument>
                    ,
                    <argument>
                        <name>K</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
            <call>
                <name>keyFunction</name>
                <argument_list>()</argument_list>
            </call>
            <block>{
                <return>return
                    <expr>(<name>Function</name>)
                        <name><name>EntryFunction</name>.
                            <name>KEY</name>
                        </name>
                    </expr>
                    ;
                </return>
            </block>
        </expr>
    </expr_stmt>
    }

    @
    <expr_stmt>
        <expr>
            <call>
                <name>SuppressWarnings</name>
                <argument_list>(
                    <argument>
                        <expr>"unchecked"</expr>
                    </argument>
                    )
                </argument_list>
            </call>
            static &lt;<name>V</name>&gt;
            <name>
                <name>Function</name>
                <argument_list>&lt;
                    <argument>
                        <name>
                            <name>Entry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
            <call>
                <name>valueFunction</name>
                <argument_list>()</argument_list>
            </call>
            <block>{
                <return>return
                    <expr>(<name>Function</name>)
                        <name><name>EntryFunction</name>.
                            <name>VALUE</name>
                        </name>
                    </expr>
                    ;
                </return>
            </block>
        </expr>
    </expr_stmt>
    }

    static
    <function>
        <type>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Iterator</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>keyIterator</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Iterator</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entryIterator</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>Iterators</name>.
                            <name>transform</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>entryIterator</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name><name>Maps</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    &lt;<name>K</name>&gt;
                                    <call>
                                        <name>keyFunction</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Iterator</name>
                <argument_list>&lt;
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>valueIterator</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Iterator</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entryIterator</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>Iterators</name>.
                            <name>transform</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>entryIterator</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name><name>Maps</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    &lt;<name>V</name>&gt;
                                    <call>
                                        <name>valueFunction</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns an immutable map instance containing the given entries.
        * Internally, the returned map will be backed by an {@link EnumMap}.
        *
        * &lt;p&gt;The iteration order of the returned map follows the enum's iteration
        * order, not the order in which the elements appear in the given map.
        *
        * @param map the map to make an immutable copy of
        * @return an immutable map containing those entries
        * @since 14.0
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>GwtCompatible</name>
                <argument_list>(serializable = true)</argument_list>
            </annotation>
            <annotation>@
                <name>Beta</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                    <extends>extends
                        <name>
                            <name>Enum</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>ImmutableMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>immutableEnumMap</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>V</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>map</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>
                        <name>map</name>
                        <name>instanceof</name>
                        <name>ImmutableEnumMap</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <decl_stmt>
                            <decl>
                                <type>
                                    <annotation>@
                                        <name>SuppressWarnings</name>
                                        <argument_list>("unchecked")</argument_list>
                                    </annotation>
                                    <comment type="line">// safe covariant cast</comment>
                                    <name>
                                        <name>ImmutableEnumMap</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>result</name> =
                                <init>
                                    <expr>(
                                        <name>
                                            <name>ImmutableEnumMap</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        )
                                        <name>map</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </decl_stmt>
                        <return>return
                            <expr>
                                <name>result</name>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
                <else>else
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>map</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>ImmutableMap</name>.
                                                <name>of</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name><name>Map</name>.
                                                    <name>
                                                        <name>Entry</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>K</name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>?</name>
                                                                <extends>extends
                                                                    <name>V</name>
                                                                </extends>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </name>
                                            </type>
                                            <name>entry</name> :
                                            <range>
                                                <expr>
                                                    <call>
                                                        <name><name>map</name>.
                                                            <name>entrySet</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </range>
                                        </decl>
                                    </init>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>checkNotNull</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>entry</name>.
                                                                        <name>getKey</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>checkNotNull</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>entry</name>.
                                                                        <name>getValue</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>ImmutableEnumMap</name>.
                                                <name>asImmutable</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>new
                                                        <call>
                                                            <name>
                                                                <name>EnumMap</name>
                                                                <argument_list>&lt;
                                                                    <argument>
                                                                        <name>K</name>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <name>V</name>
                                                                    </argument>
                                                                    &gt;
                                                                </argument_list>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>map</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                </else>
            </if>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Creates a &lt;i&gt;mutable&lt;/i&gt;, empty {@code HashMap} instance.
        *
        * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; if mutability is not required, use {@link
        * ImmutableMap#of()} instead.
        *
        * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; if {@code K} is an {@code enum} type, use {@link
        * #newEnumMap} instead.
        *
        * @return a new, empty {@code HashMap}
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>HashMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>newHashMap</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>HashMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Creates a {@code HashMap} instance, with a high enough "initial capacity"
        * that it &lt;i&gt;should&lt;/i&gt; hold {@code expectedSize} elements without growth.
        * This behavior cannot be broadly guaranteed, but it is observed to be true
        * for OpenJDK 1.7. It also can't be guaranteed that the method isn't
        * inadvertently &lt;i&gt;oversizing&lt;/i&gt; the returned map.
        *
        * @param expectedSize the number of entries you expect to add to the
        * returned map
        * @return a new, empty {@code HashMap} with enough capacity to hold {@code
        * expectedSize} entries without resizing
        * @throws IllegalArgumentException if {@code expectedSize} is negative
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>HashMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>newHashMapWithExpectedSize</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>expectedSize</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>HashMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>capacity</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>expectedSize</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a capacity that is sufficient to keep the map from being resized as
        * long as it grows no larger than expectedSize and the load factor is &gt;= its
        * default (0.75).
        */
    </comment>
    <function>
        <type>
            <specifier>static</specifier>
            <name>int</name>
        </type>
        <name>capacity</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>expectedSize</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>
                        <name>expectedSize</name>
                        &lt; 3
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <expr_stmt>
                            <expr>
                                <call>
                                    <name>checkNonnegative</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>expectedSize</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>"expectedSize"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        <return>return
                            <expr>
                                <name>expectedSize</name>
                                + 1
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <if>if
                <condition>(
                    <expr>
                        <name>expectedSize</name>
                        &lt;
                        <name><name>Ints</name>.
                            <name>MAX_POWER_OF_TWO</name>
                        </name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <comment type="line">// This is the calculation used in JDK8 to resize when a putAll</comment>
                        <comment type="line">// happens; it seems to be the most conservative calculation we</comment>
                        <comment type="line">// can make. 0.75 is the default load factor.</comment>
                        <return>return
                            <expr>
                                <call>(<name>int</name>)
                                    <argument_list>(
                                        <argument>
                                            <expr>(<name>float</name>) <name>expectedSize</name> / 0.75F + 1.0F
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <return>return
                <expr>
                    <name><name>Integer</name>.
                        <name>MAX_VALUE</name>
                    </name>
                </expr>
                ;
            </return>
            <comment type="line">// any large value</comment>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Creates a &lt;i&gt;mutable&lt;/i&gt; {@code HashMap} instance with the same mappings as
        * the specified map.
        *
        * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; if mutability is not required, use {@link
        * ImmutableMap#copyOf(Map)} instead.
        *
        * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; if {@code K} is an {@link Enum} type, use {@link
        * #newEnumMap} instead.
        *
        * @param map the mappings to be placed in the new map
        * @return a new {@code HashMap} initialized with the mappings from {@code
        * map}
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>HashMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>newHashMap</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>K</name>
                                    </extends>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>V</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>map</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>HashMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>map</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Creates a &lt;i&gt;mutable&lt;/i&gt;, empty, insertion-ordered {@code LinkedHashMap}
        * instance.
        *
        * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; if mutability is not required, use {@link
        * ImmutableMap#of()} instead.
        *
        * @return a new, empty {@code LinkedHashMap}
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>LinkedHashMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>newLinkedHashMap</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>LinkedHashMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Creates a {@code LinkedHashMap} instance, with a high enough
        * "initial capacity" that it &lt;i&gt;should&lt;/i&gt; hold {@code expectedSize}
        * elements without growth. This behavior cannot be broadly guaranteed, but
        * it is observed to be true for OpenJDK 1.7. It also can't be guaranteed
        * that the method isn't inadvertently &lt;i&gt;oversizing&lt;/i&gt; the returned map.
        *
        * @param expectedSize the number of entries you expect to add to the
        * returned map
        * @return a new, empty {@code LinkedHashMap} with enough capacity to hold
        * {@code expectedSize} entries without resizing
        * @throws IllegalArgumentException if {@code expectedSize} is negative
        * @since 19.0
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>LinkedHashMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>newLinkedHashMapWithExpectedSize</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>expectedSize</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>LinkedHashMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>capacity</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>expectedSize</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Creates a &lt;i&gt;mutable&lt;/i&gt;, insertion-ordered {@code LinkedHashMap} instance
        * with the same mappings as the specified map.
        *
        * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; if mutability is not required, use {@link
        * ImmutableMap#copyOf(Map)} instead.
        *
        * @param map the mappings to be placed in the new map
        * @return a new, {@code LinkedHashMap} initialized with the mappings from
        * {@code map}
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>LinkedHashMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>newLinkedHashMap</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>K</name>
                                    </extends>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>V</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>map</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>LinkedHashMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>map</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a general-purpose instance of {@code ConcurrentMap}, which supports
        * all optional operations of the ConcurrentMap interface. It does not permit
        * null keys or values. It is serializable.
        *
        * &lt;p&gt;This is currently accomplished by calling {@link MapMaker#makeMap()}.
        *
        * &lt;p&gt;It is preferable to use {@code MapMaker} directly (rather than through
        * this method), as it presents numerous useful configuration options,
        * such as the concurrency level, load factor, key/value reference types,
        * and value computation.
        *
        * @return a new, empty {@code ConcurrentMap}
        * @since 3.0
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>ConcurrentMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>newConcurrentMap</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>MapMaker</name>
                        <argument_list>()</argument_list>
                    </call>
                    .&lt;
                    <name>K</name>
                </expr>
                ,
                <expr><name>V</name>&gt;
                    <call>
                        <name>makeMap</name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Creates a &lt;i&gt;mutable&lt;/i&gt;, empty {@code TreeMap} instance using the natural
        * ordering of its elements.
        *
        * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; if mutability is not required, use {@link
        * ImmutableSortedMap#of()} instead.
        *
        * @return a new, empty {@code TreeMap}
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                    <extends>extends
                        <name>Comparable</name>
                    </extends>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>TreeMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>newTreeMap</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>TreeMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Creates a &lt;i&gt;mutable&lt;/i&gt; {@code TreeMap} instance with the same mappings as
        * the specified map and using the same ordering as the specified map.
        *
        * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; if mutability is not required, use {@link
        * ImmutableSortedMap#copyOfSorted(SortedMap)} instead.
        *
        * @param map the sorted map whose mappings are to be placed in the new map
        * and whose comparator is to be used to sort the new map
        * @return a new {@code TreeMap} initialized with the mappings from {@code
        * map} and using the comparator of {@code map}
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>TreeMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>newTreeMap</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>SortedMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>V</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>map</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>TreeMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>map</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Creates a &lt;i&gt;mutable&lt;/i&gt;, empty {@code TreeMap} instance using the given
        * comparator.
        *
        * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; if mutability is not required, use {@code
        * ImmutableSortedMap.orderedBy(comparator).build()} instead.
        *
        * @param comparator the comparator to sort the keys with
        * @return a new, empty {@code TreeMap}
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>C</name>
                </argument>
                ,
                <argument>
                    <name>K</name>
                    <extends>extends
                        <name>C</name>
                    </extends>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>TreeMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>newTreeMap</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>
                            <name>Comparator</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>C</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>comparator</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <comment type="line">// Ideally, the extra type parameter "C" shouldn't be necessary. It is a</comment>
            <comment type="line">// work-around of a compiler type inference quirk that prevents the</comment>
            <comment type="line">// following code from being compiled:</comment>
            <comment type="line">// Comparator&lt;Class&lt;?&gt;&gt; comparator = null;</comment>
            <comment type="line">// Map&lt;Class&lt;? extends Throwable&gt;, String&gt; map = newTreeMap(comparator);
            </comment>
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>TreeMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>comparator</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Creates an {@code EnumMap} instance.
        *
        * @param type the key type for this map
        * @return a new, empty {@code EnumMap}
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                    <extends>extends
                        <name>
                            <name>Enum</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>EnumMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>newEnumMap</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Class</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>type</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>EnumMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>type</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Creates an {@code EnumMap} with the same mappings as the specified map.
        *
        * @param map the map from which to initialize this {@code EnumMap}
        * @return a new {@code EnumMap} initialized with the mappings from {@code
        * map}
        * @throws IllegalArgumentException if {@code m} is not an {@code EnumMap}
        * instance and contains no mappings
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                    <extends>extends
                        <name>
                            <name>Enum</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>EnumMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>newEnumMap</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>V</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>map</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>EnumMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>map</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Creates an {@code IdentityHashMap} instance.
        *
        * @return a new, empty {@code IdentityHashMap}
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>IdentityHashMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>newIdentityHashMap</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>IdentityHashMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Computes the difference between two maps. This difference is an immutable
        * snapshot of the state of the maps at the time this method is called. It
        * will never change, even if the maps change at a later time.
        *
        * &lt;p&gt;Since this method uses {@code HashMap} instances internally, the keys of
        * the supplied maps must be well-behaved with respect to
        * {@link Object#equals} and {@link Object#hashCode}.
        *
        * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt;If you only need to know whether two maps have the same
        * mappings, call {@code left.equals(right)} instead of this method.
        *
        * @param left the map to treat as the "left" map for purposes of comparison
        * @param right the map to treat as the "right" map for purposes of comparison
        * @return the difference between the two maps
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>SuppressWarnings</name>
                <argument_list>("unchecked")</argument_list>
            </annotation>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>MapDifference</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>difference</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>K</name>
                                    </extends>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>V</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>left</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>K</name>
                                    </extends>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>V</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>right</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>
                        <name>left</name>
                        <name>instanceof</name>
                        <name>SortedMap</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <decl_stmt>
                            <decl>
                                <type>
                                    <name>
                                        <name>SortedMap</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>?</name>
                                                <extends>extends
                                                    <name>V</name>
                                                </extends>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>sortedLeft</name> =
                                <init>
                                    <expr>(
                                        <name>
                                            <name>SortedMap</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>V</name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        )
                                        <name>left</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </decl_stmt>
                        <decl_stmt>
                            <decl>
                                <type>
                                    <name>
                                        <name>SortedMapDifference</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>result</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name>difference</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>sortedLeft</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>right</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </decl_stmt>
                        <return>return
                            <expr>
                                <name>result</name>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <return>return
                <expr>
                    <call>
                        <name>difference</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>left</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>right</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>Equivalence</name>.
                                            <name>equals</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Computes the difference between two maps. This difference is an immutable
        * snapshot of the state of the maps at the time this method is called. It
        * will never change, even if the maps change at a later time.
        *
        * &lt;p&gt;Values are compared using a provided equivalence, in the case of
        * equality, the value on the 'left' is returned in the difference.
        *
        * &lt;p&gt;Since this method uses {@code HashMap} instances internally, the keys of
        * the supplied maps must be well-behaved with respect to
        * {@link Object#equals} and {@link Object#hashCode}.
        *
        * @param left the map to treat as the "left" map for purposes of comparison
        * @param right the map to treat as the "right" map for purposes of comparison
        * @param valueEquivalence the equivalence relationship to use to compare
        * values
        * @return the difference between the two maps
        * @since 10.0
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>Beta</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>MapDifference</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>difference</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>K</name>
                                    </extends>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>V</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>left</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>K</name>
                                    </extends>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>V</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>right</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Equivalence</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>V</name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>valueEquivalence</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>Preconditions</name>.
                            <name>checkNotNull</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>valueEquivalence</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>onlyOnLeft</name> =
                    <init>
                        <expr>
                            <call>
                                <name>newLinkedHashMap</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>onlyOnRight</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>
                                    <name>LinkedHashMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>right</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// will whittle it down</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>onBoth</name> =
                    <init>
                        <expr>
                            <call>
                                <name>newLinkedHashMap</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name><name>MapDifference</name>.
                                        <name>
                                            <name>ValueDifference</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>differences</name> =
                    <init>
                        <expr>
                            <call>
                                <name>newLinkedHashMap</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>doDifference</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>left</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>right</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>valueEquivalence</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>onlyOnLeft</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>onlyOnRight</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>onBoth</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>differences</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>MapDifferenceImpl</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>onlyOnLeft</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>onlyOnRight</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>onBoth</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>differences</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>private</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>void</name>
        </type>
        <name>doDifference</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>K</name>
                                    </extends>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>V</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>left</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>K</name>
                                    </extends>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>V</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>right</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Equivalence</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>V</name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>valueEquivalence</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>onlyOnLeft</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>onlyOnRight</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>onBoth</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name><name>MapDifference</name>.
                                        <name>
                                            <name>ValueDifference</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>differences</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <for>for (
                <init>
                    <decl>
                        <type>
                            <name>
                                <name>Entry</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>?</name>
                                        <extends>extends
                                            <name>K</name>
                                        </extends>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>?</name>
                                        <extends>extends
                                            <name>V</name>
                                        </extends>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>entry</name> :
                        <range>
                            <expr>
                                <call>
                                    <name><name>left</name>.
                                        <name>entrySet</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </range>
                    </decl>
                </init>
                )
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>leftKey</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>entry</name>.
                                            <name>getKey</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>leftValue</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>entry</name>.
                                            <name>getValue</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>right</name>.
                                        <name>containsKey</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>leftKey</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>V</name>
                                        </type>
                                        <name>rightValue</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>onlyOnRight</name>.
                                                        <name>remove</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>leftKey</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>valueEquivalence</name>.
                                                    <name>equivalent</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>leftValue</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>rightValue</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>onBoth</name>.
                                                            <name>put</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>leftKey</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>leftValue</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>differences</name>.
                                                            <name>put</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>leftKey</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>ValueDifferenceImpl</name>.
                                                                            <name>create</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>leftValue</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>rightValue</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>onlyOnLeft</name>.
                                                <name>put</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>leftKey</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>leftValue</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </for>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>private</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Map</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>unmodifiableMap</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>map</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>
                        <name>map</name>
                        <name>instanceof</name>
                        <name>SortedMap</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name><name>Collections</name>.
                                        <name>unmodifiableSortedMap</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>(
                                                <name>
                                                    <name>SortedMap</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>?</name>
                                                            <extends>extends
                                                                <name>V</name>
                                                            </extends>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                )
                                                <name>map</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
                <else>else
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name><name>Collections</name>.
                                        <name>unmodifiableMap</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>map</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </else>
            </if>
            }
        </block>
    </function>

    <class>
        <specifier>static</specifier>
        class
        <name>
            <name>MapDifferenceImpl</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <implements>implements
                <name>
                    <name>MapDifference</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>onlyOnLeft</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>onlyOnRight</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>onBoth</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>
                                        <name>ValueDifference</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>differences</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>MapDifferenceImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Map</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>onlyOnLeft</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Map</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>onlyOnRight</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Map</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>onBoth</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Map</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>
                                                <name>ValueDifference</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>differences</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>onlyOnLeft</name>
                            </name>
                            =
                            <call>
                                <name>unmodifiableMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>onlyOnLeft</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>onlyOnRight</name>
                            </name>
                            =
                            <call>
                                <name>unmodifiableMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>onlyOnRight</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>onBoth</name>
                            </name>
                            =
                            <call>
                                <name>unmodifiableMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>onBoth</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>differences</name>
                            </name>
                            =
                            <call>
                                <name>unmodifiableMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>differences</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>areEqual</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>onlyOnLeft</name>.
                                    <name>isEmpty</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            &amp;&amp;
                            <call>
                                <name><name>onlyOnRight</name>.
                                    <name>isEmpty</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            &amp;&amp;
                            <call>
                                <name><name>differences</name>.
                                    <name>isEmpty</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Map</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>entriesOnlyOnLeft</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>onlyOnLeft</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Map</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>entriesOnlyOnRight</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>onlyOnRight</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Map</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>entriesInCommon</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>onBoth</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Map</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>
                                    <name>ValueDifference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>entriesDiffering</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>differences</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>object</name>
                                ==
                                <name>this</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>object</name>
                                <name>instanceof</name>
                                <name>MapDifference</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>MapDifference</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>?</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>?</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>other</name> =
                                        <init>
                                            <expr>(
                                                <name>
                                                    <name>MapDifference</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                )
                                                <name>object</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name>entriesOnlyOnLeft</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>equals</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>other</name>.
                                                                <name>entriesOnlyOnLeft</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &amp;&amp;
                                        <call>
                                            <name>entriesOnlyOnRight</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>equals</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>other</name>.
                                                                <name>entriesOnlyOnRight</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &amp;&amp;
                                        <call>
                                            <name>entriesInCommon</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>equals</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>other</name>.
                                                                <name>entriesInCommon</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &amp;&amp;
                                        <call>
                                            <name>entriesDiffering</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>equals</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>other</name>.
                                                                <name>entriesDiffering</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Objects</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>entriesOnlyOnLeft</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>entriesOnlyOnRight</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>entriesInCommon</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>entriesDiffering</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>areEqual</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>"equal"</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuilder</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"not equal"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>onlyOnLeft</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>result</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>": only on left="</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>append</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>onlyOnLeft</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>onlyOnRight</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>result</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>": only on right="</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>append</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>onlyOnRight</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>differences</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>result</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>": value differences="</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>append</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>differences</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>result</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <specifier>static</specifier>
        class
        <name>
            <name>ValueDifferenceImpl</name>
            <argument_list>&lt;
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <implements>implements <name>MapDifference</name>.
                <name>
                    <name>ValueDifference</name>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>V</name>
                    </type>
                    <name>left</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>V</name>
                    </type>
                    <name>right</name>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ValueDifference</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>create</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>V</name>
                            </type>
                            <name>left</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>V</name>
                            </type>
                            <name>right</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>ValueDifferenceImpl</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>left</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>right</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <constructor>
                <specifier>private</specifier>
                <name>ValueDifferenceImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>V</name>
                            </type>
                            <name>left</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>V</name>
                            </type>
                            <name>right</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>left</name>
                            </name>
                            =
                            <name>left</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>right</name>
                            </name>
                            =
                            <name>right</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>V</name>
                </type>
                <name>leftValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>left</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>V</name>
                </type>
                <name>rightValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>right</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>object</name>
                                <name>instanceof</name>
                                <name><name>MapDifference</name>.
                                    <name>ValueDifference</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name><name>MapDifference</name>.
                                                <name>
                                                    <name>ValueDifference</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </name>
                                        </type>
                                        <name>that</name> =
                                        <init>
                                            <expr>(
                                                <name><name>MapDifference</name>.
                                                    <name>
                                                        <name>ValueDifference</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>?</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </name>
                                                )
                                                <name>object</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>Objects</name>.
                                                <name>equal</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>left</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>that</name>.
                                                                <name>leftValue</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &amp;&amp;
                                        <call>
                                            <name><name>Objects</name>.
                                                <name>equal</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>this</name>.
                                                            <name>right</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>that</name>.
                                                                <name>rightValue</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Objects</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>left</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>right</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>"(" + <name>left</name> + ", " + <name>right</name> + ")"
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <comment type="javadoc">/**
        * Computes the difference between two sorted maps, using the comparator of
        * the left map, or {@code Ordering.natural()} if the left map uses the
        * natural ordering of its elements. This difference is an immutable snapshot
        * of the state of the maps at the time this method is called. It will never
        * change, even if the maps change at a later time.
        *
        * &lt;p&gt;Since this method uses {@code TreeMap} instances internally, the keys of
        * the right map must all compare as distinct according to the comparator
        * of the left map.
        *
        * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt;If you only need to know whether two sorted maps have the
        * same mappings, call {@code left.equals(right)} instead of this method.
        *
        * @param left the map to treat as the "left" map for purposes of comparison
        * @param right the map to treat as the "right" map for purposes of comparison
        * @return the difference between the two maps
        * @since 11.0
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>SortedMapDifference</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>difference</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>SortedMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>V</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>left</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>K</name>
                                    </extends>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>V</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>right</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>left</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>right</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>Comparator</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>comparator</name> =
                    <init>
                        <expr>
                            <call>
                                <name>orNaturalOrder</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>left</name>.
                                                    <name>comparator</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>SortedMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>onlyOnLeft</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Maps</name>.
                                    <name>newTreeMap</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>comparator</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>SortedMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>onlyOnRight</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Maps</name>.
                                    <name>newTreeMap</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>comparator</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>onlyOnRight</name>.
                            <name>putAll</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>right</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <comment type="line">// will whittle it down</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>SortedMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>onBoth</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Maps</name>.
                                    <name>newTreeMap</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>comparator</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>SortedMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name><name>MapDifference</name>.
                                        <name>
                                            <name>ValueDifference</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>differences</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Maps</name>.
                                    <name>newTreeMap</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>comparator</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>doDifference</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>left</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>right</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>Equivalence</name>.
                                            <name>equals</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>onlyOnLeft</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>onlyOnRight</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>onBoth</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>differences</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>SortedMapDifferenceImpl</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>onlyOnLeft</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>onlyOnRight</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>onBoth</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>differences</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <class>
        <specifier>static</specifier>
        class
        <name>
            <name>SortedMapDifferenceImpl</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>MapDifferenceImpl</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>SortedMapDifference</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <constructor>
                <name>SortedMapDifferenceImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>SortedMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>onlyOnLeft</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>SortedMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>onlyOnRight</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>SortedMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>onBoth</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>SortedMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>
                                                <name>ValueDifference</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>differences</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>onlyOnLeft</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>onlyOnRight</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>onBoth</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>differences</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>
                                    <name>ValueDifference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>entriesDiffering</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>SortedMap</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>
                                            <name>ValueDifference</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            )
                            <call>
                                <name><name>super</name>.
                                    <name>entriesDiffering</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>entriesInCommon</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>SortedMap</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            )
                            <call>
                                <name><name>super</name>.
                                    <name>entriesInCommon</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>entriesOnlyOnLeft</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>SortedMap</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            )
                            <call>
                                <name><name>super</name>.
                                    <name>entriesOnlyOnLeft</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>entriesOnlyOnRight</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>SortedMap</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            )
                            <call>
                                <name><name>super</name>.
                                    <name>entriesOnlyOnRight</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <comment type="javadoc">/**
        * Returns the specified comparator if not null; otherwise returns {@code
        * Ordering.natural()}. This method is an abomination of generics; the only
        * purpose of this method is to contain the ugly type-casting in one place.
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>SuppressWarnings</name>
                <argument_list>("unchecked")</argument_list>
            </annotation>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>E</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Comparator</name>
                <argument_list>&lt;
                    <argument>
                        <name>?</name>
                        <super>super
                            <name>E</name>
                        </super>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>orNaturalOrder</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>
                            <name>Comparator</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>E</name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>comparator</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>
                        <name>comparator</name>
                        !=
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <comment type="line">// can't use ? : because of javac bug 5080917</comment>
                        <return>return
                            <expr>
                                <name>comparator</name>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <return>return
                <expr>(
                    <name>
                        <name>Comparator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    )
                    <call>
                        <name><name>Ordering</name>.
                            <name>natural</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a live {@link Map} view whose keys are the contents of {@code set}
        * and whose values are computed on demand using {@code function}. To get an
        * immutable &lt;i&gt;copy&lt;/i&gt; instead, use {@link #toMap(Iterable, Function)}.
        *
        * &lt;p&gt;Specifically, for each {@code k} in the backing set, the returned map
        * has an entry mapping {@code k} to {@code function.apply(k)}. The {@code
        * keySet}, {@code values}, and {@code entrySet} views of the returned map
        * iterate in the same order as the backing set.
        *
        * &lt;p&gt;Modifications to the backing set are read through to the returned map.
        * The returned map supports removal operations if the backing set does.
        * Removal operations write through to the backing set. The returned map
        * does not support put operations.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; If the function rejects {@code null}, caution is
        * required to make sure the set does not contain {@code null}, because the
        * view cannot stop {@code null} from being added to the set.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; This method assumes that for any instance {@code k} of
        * key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also
        * of type {@code K}. Using a key type for which this may not hold, such as
        * {@code ArrayList}, may risk a {@code ClassCastException} when calling
        * methods on the resulting map view.
        *
        * @since 14.0
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Map</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>asMap</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Set</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>set</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Function</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>function</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>
                        <name>set</name>
                        <name>instanceof</name>
                        <name>SortedSet</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name>asMap</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>(
                                                <name>
                                                    <name>SortedSet</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                )
                                                <name>set</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>function</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
                <else>else
                    <block>{
                        <return>return
                            <expr>new
                                <call>
                                    <name>
                                        <name>AsMapView</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>set</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>function</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </else>
            </if>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a view of the sorted set as a map, mapping keys from the set
        * according to the specified function.
        *
        * &lt;p&gt;Specifically, for each {@code k} in the backing set, the returned map
        * has an entry mapping {@code k} to {@code function.apply(k)}. The {@code
        * keySet}, {@code values}, and {@code entrySet} views of the returned map
        * iterate in the same order as the backing set.
        *
        * &lt;p&gt;Modifications to the backing set are read through to the returned map.
        * The returned map supports removal operations if the backing set does.
        * Removal operations write through to the backing set. The returned map does
        * not support put operations.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; If the function rejects {@code null}, caution is
        * required to make sure the set does not contain {@code null}, because the
        * view cannot stop {@code null} from being added to the set.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; This method assumes that for any instance {@code k} of
        * key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of
        * type {@code K}. Using a key type for which this may not hold, such as
        * {@code ArrayList}, may risk a {@code ClassCastException} when calling
        * methods on the resulting map view.
        *
        * @since 14.0
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>SortedMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>asMap</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>SortedSet</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>set</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Function</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>function</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>Platform</name>.
                            <name>mapsAsMapSortedSet</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>set</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>function</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>SortedMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>asMapSortedIgnoreNavigable</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>SortedSet</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>set</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Function</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>function</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>SortedAsMapView</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>set</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>function</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a view of the navigable set as a map, mapping keys from the set
        * according to the specified function.
        *
        * &lt;p&gt;Specifically, for each {@code k} in the backing set, the returned map
        * has an entry mapping {@code k} to {@code function.apply(k)}. The {@code
        * keySet}, {@code values}, and {@code entrySet} views of the returned map
        * iterate in the same order as the backing set.
        *
        * &lt;p&gt;Modifications to the backing set are read through to the returned map.
        * The returned map supports removal operations if the backing set does.
        * Removal operations write through to the backing set. The returned map
        * does not support put operations.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; If the function rejects {@code null}, caution is
        * required to make sure the set does not contain {@code null}, because the
        * view cannot stop {@code null} from being added to the set.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; This method assumes that for any instance {@code k} of
        * key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also
        * of type {@code K}. Using a key type for which this may not hold, such as
        * {@code ArrayList}, may risk a {@code ClassCastException} when calling
        * methods on the resulting map view.
        *
        * @since 14.0
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>GwtIncompatible</name>
                <argument_list>("NavigableMap")</argument_list>
            </annotation>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>NavigableMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>asMap</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>NavigableSet</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>set</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Function</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>function</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>NavigableAsMapView</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>set</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>function</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <class>
        <specifier>private</specifier>
        <specifier>static</specifier> class
        <name>
            <name>AsMapView</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>ViewCachingAbstractMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>Set</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>set</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Function</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>function</name>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>backingSet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>set</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <constructor>
                <name>AsMapView</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Set</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>set</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Function</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>K</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>function</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>set</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>set</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>function</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>function</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>createKeySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>removeOnlySet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>backingSet</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>Collection</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>createValues</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Collections2</name>.
                                    <name>transform</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>set</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>function</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>size</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>backingSet</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>size</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>containsKey</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>backingSet</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>contains</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>V</name>
                </type>
                <name>get</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>Collections2</name>.
                                        <name>safeContains</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name>backingSet</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>key</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <annotation>@
                                                <name>SuppressWarnings</name>
                                                <argument_list>("unchecked")</argument_list>
                                            </annotation>
                                            <comment type="line">// unsafe, but Javadoc warns about it</comment>
                                            <name>K</name>
                                        </type>
                                        <name>k</name> =
                                        <init>
                                            <expr>(<name>K</name>)
                                                <name>key</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>function</name>.
                                                <name>apply</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>k</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>V</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>backingSet</name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>remove</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>key</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <annotation>@
                                                <name>SuppressWarnings</name>
                                                <argument_list>("unchecked")</argument_list>
                                            </annotation>
                                            <comment type="line">// unsafe, but Javadoc warns about it</comment>
                                            <name>K</name>
                                        </type>
                                        <name>k</name> =
                                        <init>
                                            <expr>(<name>K</name>)
                                                <name>key</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>function</name>.
                                                <name>apply</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>k</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>backingSet</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>clear</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>protected</specifier>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>createEntrySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <class>
                        <annotation>@
                            <name>WeakOuter</name>
                        </annotation>
                        class <name>EntrySetImpl</name>
                        <super>
                            <extends>extends
                                <name>
                                    <name>EntrySet</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </extends>
                        </super>
                        <block>{
                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <name>
                                        <name>Map</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>map</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <name><name>AsMapView</name>.
                                                <name>this</name>
                                            </name>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>
                                        <name>Iterator</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>
                                                    <name>Entry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>iterator</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name>asMapEntryIterator</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>backingSet</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>function</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </class>
                    <return>return
                        <expr>new
                            <call>
                                <name>EntrySetImpl</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Iterator</name>
                <argument_list>&lt;
                    <argument>
                        <name>
                            <name>Entry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>asMapEntryIterator</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Set</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>set</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Function</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>function</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <class>
                        <super>
                            <name>
                                <name>TransformedIterator</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>
                                            <name>Entry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </super>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>set</name>.
                                            <name>iterator</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                        <block>{
                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>transform</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <specifier>final</specifier>
                                                <name>K</name>
                                            </type>
                                            <name>key</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name>immutableEntry</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>function</name>.
                                                                    <name>apply</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>key</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </class>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <class>
        <specifier>private</specifier>
        <specifier>static</specifier> class
        <name>
            <name>SortedAsMapView</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>AsMapView</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>SortedMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{

            <constructor>
                <name>SortedAsMapView</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>SortedSet</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>set</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Function</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>K</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>function</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>set</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>function</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>SortedSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>backingSet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>SortedSet</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            )
                            <call>
                                <name><name>super</name>.
                                    <name>backingSet</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Comparator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                                <super>super
                                    <name>K</name>
                                </super>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>comparator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>backingSet</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>comparator</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>keySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>removeOnlySortedSet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>backingSet</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>subMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toKey</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>asMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>backingSet</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>subSet</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>fromKey</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>toKey</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>function</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>headMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toKey</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>asMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>backingSet</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>headSet</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>toKey</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>function</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>tailMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromKey</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>asMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>backingSet</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>tailSet</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>fromKey</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>function</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>firstKey</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>backingSet</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>first</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>lastKey</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>backingSet</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>last</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <annotation>@
            <name>GwtIncompatible</name>
            <argument_list>("NavigableMap")</argument_list>
        </annotation>
        <specifier>private</specifier>
        <specifier>static</specifier>
        <specifier>final</specifier> class
        <name>
            <name>NavigableAsMapView</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>AbstractNavigableMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <comment type="block">/*
                * Using AbstractNavigableMap is simpler than extending SortedAsMapView and rewriting all the
                * NavigableMap methods.
                */
            </comment>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>NavigableSet</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>set</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>Function</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>function</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>NavigableAsMapView</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>NavigableSet</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>ks</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Function</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>K</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>vFunction</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>set</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ks</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>function</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>vFunction</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>subMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>fromInclusive</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>toInclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>asMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>set</name>.
                                                    <name>subSet</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>fromKey</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>fromInclusive</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>toKey</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>toInclusive</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>function</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>headMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>inclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>asMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>set</name>.
                                                    <name>headSet</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>toKey</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>inclusive</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>function</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>tailMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>inclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>asMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>set</name>.
                                                    <name>tailSet</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>fromKey</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>inclusive</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>function</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Comparator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                                <super>super
                                    <name>K</name>
                                </super>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>comparator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>set</name>.
                                    <name>comparator</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <annotation>@
                        <name>Nullable</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>V</name>
                </type>
                <name>get</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>Collections2</name>.
                                        <name>safeContains</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>set</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>key</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <annotation>@
                                                <name>SuppressWarnings</name>
                                                <argument_list>("unchecked")</argument_list>
                                            </annotation>
                                            <comment type="line">// unsafe, but Javadoc warns about it</comment>
                                            <name>K</name>
                                        </type>
                                        <name>k</name> =
                                        <init>
                                            <expr>(<name>K</name>)
                                                <name>key</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>function</name>.
                                                <name>apply</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>k</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>set</name>.
                                    <name>clear</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>Iterator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>entryIterator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>asMapEntryIterator</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>set</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>function</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>Iterator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>descendingEntryIterator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>descendingMap</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>entrySet</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>iterator</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>navigableKeySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>removeOnlyNavigableSet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>set</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>size</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>set</name>.
                                    <name>size</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>descendingMap</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>asMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>set</name>.
                                                    <name>descendingSet</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>function</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <function>
        <type>
            <specifier>private</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>E</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Set</name>
                <argument_list>&lt;
                    <argument>
                        <name>E</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>removeOnlySet</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Set</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>set</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <class>
                        <super>
                            <name>
                                <name>ForwardingSet</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>E</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </super>
                        <argument_list>()</argument_list>
                        <block>{
                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>protected</specifier>
                                    <name>
                                        <name>Set</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>E</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>delegate</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <name>set</name>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>boolean</name>
                                </type>
                                <name>add</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>E</name>
                                            </type>
                                            <name>element</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <throw>throw
                                        <expr>new
                                            <call>
                                                <name>UnsupportedOperationException</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </throw>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>boolean</name>
                                </type>
                                <name>addAll</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>Collection</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                            <extends>extends
                                                                <name>E</name>
                                                            </extends>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>es</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <throw>throw
                                        <expr>new
                                            <call>
                                                <name>UnsupportedOperationException</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </throw>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </class>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>private</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>E</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>SortedSet</name>
                <argument_list>&lt;
                    <argument>
                        <name>E</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>removeOnlySortedSet</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>SortedSet</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>set</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <class>
                        <super>
                            <name>
                                <name>ForwardingSortedSet</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>E</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </super>
                        <argument_list>()</argument_list>
                        <block>{
                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>protected</specifier>
                                    <name>
                                        <name>SortedSet</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>E</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>delegate</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <name>set</name>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>boolean</name>
                                </type>
                                <name>add</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>E</name>
                                            </type>
                                            <name>element</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <throw>throw
                                        <expr>new
                                            <call>
                                                <name>UnsupportedOperationException</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </throw>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>boolean</name>
                                </type>
                                <name>addAll</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>Collection</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                            <extends>extends
                                                                <name>E</name>
                                                            </extends>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>es</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <throw>throw
                                        <expr>new
                                            <call>
                                                <name>UnsupportedOperationException</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </throw>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>
                                        <name>SortedSet</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>E</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>headSet</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>E</name>
                                            </type>
                                            <name>toElement</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name>removeOnlySortedSet</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>super</name>.
                                                                    <name>headSet</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>toElement</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>
                                        <name>SortedSet</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>E</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>subSet</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>E</name>
                                            </type>
                                            <name>fromElement</name>
                                        </decl>
                                    </param>
                                    ,
                                    <param>
                                        <decl>
                                            <type>
                                                <name>E</name>
                                            </type>
                                            <name>toElement</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name>removeOnlySortedSet</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>super</name>.
                                                                    <name>subSet</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>fromElement</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>toElement</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>
                                        <name>SortedSet</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>E</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>tailSet</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>E</name>
                                            </type>
                                            <name>fromElement</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name>removeOnlySortedSet</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>super</name>.
                                                                    <name>tailSet</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>fromElement</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </class>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>GwtIncompatible</name>
                <argument_list>("NavigableSet")</argument_list>
            </annotation>
            <specifier>private</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>E</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>NavigableSet</name>
                <argument_list>&lt;
                    <argument>
                        <name>E</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>removeOnlyNavigableSet</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>NavigableSet</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>set</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <class>
                        <super>
                            <name>
                                <name>ForwardingNavigableSet</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>E</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </super>
                        <argument_list>()</argument_list>
                        <block>{
                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>protected</specifier>
                                    <name>
                                        <name>NavigableSet</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>E</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>delegate</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <name>set</name>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>boolean</name>
                                </type>
                                <name>add</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>E</name>
                                            </type>
                                            <name>element</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <throw>throw
                                        <expr>new
                                            <call>
                                                <name>UnsupportedOperationException</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </throw>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>boolean</name>
                                </type>
                                <name>addAll</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>Collection</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                            <extends>extends
                                                                <name>E</name>
                                                            </extends>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>es</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <throw>throw
                                        <expr>new
                                            <call>
                                                <name>UnsupportedOperationException</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </throw>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>
                                        <name>SortedSet</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>E</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>headSet</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>E</name>
                                            </type>
                                            <name>toElement</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name>removeOnlySortedSet</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>super</name>.
                                                                    <name>headSet</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>toElement</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>
                                        <name>SortedSet</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>E</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>subSet</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>E</name>
                                            </type>
                                            <name>fromElement</name>
                                        </decl>
                                    </param>
                                    ,
                                    <param>
                                        <decl>
                                            <type>
                                                <name>E</name>
                                            </type>
                                            <name>toElement</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name>removeOnlySortedSet</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>super</name>.
                                                                    <name>subSet</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>fromElement</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>toElement</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>
                                        <name>SortedSet</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>E</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>tailSet</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>E</name>
                                            </type>
                                            <name>fromElement</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name>removeOnlySortedSet</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>super</name>.
                                                                    <name>tailSet</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>fromElement</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>
                                        <name>NavigableSet</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>E</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>headSet</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>E</name>
                                            </type>
                                            <name>toElement</name>
                                        </decl>
                                    </param>
                                    ,
                                    <param>
                                        <decl>
                                            <type>
                                                <name>boolean</name>
                                            </type>
                                            <name>inclusive</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name>removeOnlyNavigableSet</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>super</name>.
                                                                    <name>headSet</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>toElement</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>inclusive</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>
                                        <name>NavigableSet</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>E</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>tailSet</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>E</name>
                                            </type>
                                            <name>fromElement</name>
                                        </decl>
                                    </param>
                                    ,
                                    <param>
                                        <decl>
                                            <type>
                                                <name>boolean</name>
                                            </type>
                                            <name>inclusive</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name>removeOnlyNavigableSet</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>super</name>.
                                                                    <name>tailSet</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>fromElement</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>inclusive</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>
                                        <name>NavigableSet</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>E</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>subSet</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>E</name>
                                            </type>
                                            <name>fromElement</name>
                                        </decl>
                                    </param>
                                    ,
                                    <param>
                                        <decl>
                                            <type>
                                                <name>boolean</name>
                                            </type>
                                            <name>fromInclusive</name>
                                        </decl>
                                    </param>
                                    ,
                                    <param>
                                        <decl>
                                            <type>
                                                <name>E</name>
                                            </type>
                                            <name>toElement</name>
                                        </decl>
                                    </param>
                                    ,
                                    <param>
                                        <decl>
                                            <type>
                                                <name>boolean</name>
                                            </type>
                                            <name>toInclusive</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name>removeOnlyNavigableSet</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>super</name>.
                                                                    <name>subSet</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>fromElement</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>fromInclusive</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>toElement</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>toInclusive</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>
                                        <name>NavigableSet</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>E</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>descendingSet</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name>removeOnlyNavigableSet</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>super</name>.
                                                                    <name>descendingSet</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </class>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns an immutable map whose keys are the distinct elements of {@code
        * keys} and whose value for each key was computed by {@code valueFunction}.
        * The map's iteration order is the order of the first appearance of each key
        * in {@code keys}.
        *
        * &lt;p&gt;When there are multiple instances of a key in {@code keys}, it is
        * unspecified whether {@code valueFunction} will be applied to more than one
        * instance of that key and, if it is, which result will be mapped to that
        * key in the returned map.
        *
        * &lt;p&gt;If {@code keys} is a {@link Set}, a live view can be obtained instead of
        * a copy using {@link Maps#asMap(Set, Function)}.
        *
        * @throws NullPointerException if any element of {@code keys} is
        * {@code null}, or if {@code valueFunction} produces {@code null}
        * for any key
        * @since 14.0
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>ImmutableMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>toMap</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Iterable</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>keys</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Function</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>valueFunction</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name>toMap</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>keys</name>.
                                            <name>iterator</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>valueFunction</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns an immutable map whose keys are the distinct elements of {@code
        * keys} and whose value for each key was computed by {@code valueFunction}.
        * The map's iteration order is the order of the first appearance of each key
        * in {@code keys}.
        *
        * &lt;p&gt;When there are multiple instances of a key in {@code keys}, it is
        * unspecified whether {@code valueFunction} will be applied to more than one
        * instance of that key and, if it is, which result will be mapped to that
        * key in the returned map.
        *
        * @throws NullPointerException if any element of {@code keys} is
        * {@code null}, or if {@code valueFunction} produces {@code null}
        * for any key
        * @since 14.0
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>ImmutableMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>toMap</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Iterator</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>keys</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Function</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>valueFunction</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>valueFunction</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <comment type="line">// Using LHM instead of a builder so as not to fail on duplicate keys</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>builder</name> =
                    <init>
                        <expr>
                            <call>
                                <name>newLinkedHashMap</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <while>while
                <condition>(
                    <expr>
                        <call>
                            <name><name>keys</name>.
                                <name>hasNext</name>
                            </name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>
                    )
                </condition>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>keys</name>.
                                            <name>next</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>valueFunction</name>.
                                                    <name>apply</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </while>
            <return>return
                <expr>
                    <call>
                        <name><name>ImmutableMap</name>.
                            <name>copyOf</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>builder</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a map with the given {@code values}, indexed by keys derived from
        * those values. In other words, each input value produces an entry in the map
        * whose key is the result of applying {@code keyFunction} to that value.
        * These entries appear in the same order as the input values. Example usage:
        * &lt;pre&gt; {@code
        *
        * Color red = new Color("red", 255, 0, 0);
        * ...
        * ImmutableSet&lt;Color&gt; allColors = ImmutableSet.of(red, green, blue);
        *
        * Map&lt;String, Color&gt; colorForName =
        * uniqueIndex(allColors, toStringFunction());
        * assertThat(colorForName).containsEntry("red", red);}&lt;/pre&gt;
        *
        * &lt;p&gt;If your index may associate multiple values with each key, use {@link
        * Multimaps#index(Iterable, Function) Multimaps.index}.
        *
        * @param values the values to use when constructing the {@code Map}
        * @param keyFunction the function used to produce the key for each value
        * @return a map mapping the result of evaluating the function {@code
        * keyFunction} on each value in the input collection to that value
        * @throws IllegalArgumentException if {@code keyFunction} produces the same
        * key for more than one value in the input collection
        * @throws NullPointerException if any elements of {@code values} is null, or
        * if {@code keyFunction} produces {@code null} for any value
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>ImmutableMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>uniqueIndex</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Iterable</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>values</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Function</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>V</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>K</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>keyFunction</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <comment type="line">// TODO(lowasser): consider presizing the builder if values is a Collection</comment>
            <return>return
                <expr>
                    <call>
                        <name>uniqueIndex</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>values</name>.
                                            <name>iterator</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>keyFunction</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a map with the given {@code values}, indexed by keys derived from
        * those values. In other words, each input value produces an entry in the map
        * whose key is the result of applying {@code keyFunction} to that value.
        * These entries appear in the same order as the input values. Example usage:
        * &lt;pre&gt; {@code
        *
        * Color red = new Color("red", 255, 0, 0);
        * ...
        * Iterator&lt;Color&gt; allColors = ImmutableSet.of(red, green, blue).iterator();
        *
        * Map&lt;String, Color&gt; colorForName =
        * uniqueIndex(allColors, toStringFunction());
        * assertThat(colorForName).containsEntry("red", red);}&lt;/pre&gt;
        *
        * &lt;p&gt;If your index may associate multiple values with each key, use {@link
        * Multimaps#index(Iterator, Function) Multimaps.index}.
        *
        * @param values the values to use when constructing the {@code Map}
        * @param keyFunction the function used to produce the key for each value
        * @return a map mapping the result of evaluating the function {@code
        * keyFunction} on each value in the input collection to that value
        * @throws IllegalArgumentException if {@code keyFunction} produces the same
        * key for more than one value in the input collection
        * @throws NullPointerException if any elements of {@code values} is null, or
        * if {@code keyFunction} produces {@code null} for any value
        * @since 10.0
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>ImmutableMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>uniqueIndex</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Iterator</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>values</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Function</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>V</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>K</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>keyFunction</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>keyFunction</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name><name>ImmutableMap</name>.
                            <name>
                                <name>Builder</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </name>
                    </type>
                    <name>builder</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>ImmutableMap</name>.
                                    <name>builder</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <while>while
                <condition>(
                    <expr>
                        <call>
                            <name><name>values</name>.
                                <name>hasNext</name>
                            </name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>
                    )
                </condition>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>value</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>values</name>.
                                            <name>next</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>keyFunction</name>.
                                                    <name>apply</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>value</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </while>
            <try>try
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>build</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
                <catch>catch (
                    <param>
                        <decl>
                            <type>
                                <name>IllegalArgumentException</name>
                            </type>
                            <name>duplicateKeys</name>
                        </decl>
                    </param>
                    )
                    <block>{
                        <throw>throw
                            <expr>new
                                <call>
                                    <name>IllegalArgumentException</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name><name>duplicateKeys</name>.
                                                        <name>getMessage</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                + ". To index multiple values under a key, use Multimaps.index."
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </throw>
                        }
                    </block>
                </catch>
            </try>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Creates an {@code ImmutableMap&lt;String, String&gt;} from a {@code Properties}
        * instance. Properties normally derive from {@code Map&lt;Object, Object&gt;}, but
        * they typically contain strings, which is awkward. This method lets you get
        * a plain-old-{@code Map} out of a {@code Properties}.
        *
        * @param properties a {@code Properties} object to be converted
        * @return an immutable map containing all the entries in {@code properties}
        * @throws ClassCastException if any key in {@code Properties} is not a {@code
        * String}
        * @throws NullPointerException if any key or value in {@code Properties} is
        * null
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>GwtIncompatible</name>
                <argument_list>("java.util.Properties")</argument_list>
            </annotation>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <name>
                <name>ImmutableMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>String</name>
                    </argument>
                    ,
                    <argument>
                        <name>String</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>fromProperties</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Properties</name>
                    </type>
                    <name>properties</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name><name>ImmutableMap</name>.
                            <name>
                                <name>Builder</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>String</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>String</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </name>
                    </type>
                    <name>builder</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>ImmutableMap</name>.
                                    <name>builder</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <for>for (
                <init>
                    <decl>
                        <type>
                            <name>
                                <name>Enumeration</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>?</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>e</name> =
                        <init>
                            <expr>
                                <call>
                                    <name><name>properties</name>.
                                        <name>propertyNames</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </init>
                    </decl>
                    ;
                </init>
                <condition>
                    <expr>
                        <call>
                            <name><name>e</name>.
                                <name>hasMoreElements</name>
                            </name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>
                    ;
                </condition>
                <incr/>)
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>key</name> =
                            <init>
                                <expr>(<name>String</name>)
                                    <call>
                                        <name><name>e</name>.
                                            <name>nextElement</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>properties</name>.
                                                    <name>getProperty</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </for>

            <return>return
                <expr>
                    <call>
                        <name><name>builder</name>.
                            <name>build</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns an immutable map entry with the specified key and value. The {@link
        * Entry#setValue} operation throws an {@link UnsupportedOperationException}.
        *
        * &lt;p&gt;The returned entry is serializable.
        *
        * @param key the key to be associated with the returned entry
        * @param value the value to be associated with the returned entry
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>GwtCompatible</name>
                <argument_list>(serializable = true)</argument_list>
            </annotation>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Entry</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>immutableEntry</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>K</name>
                    </type>
                    <name>key</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>V</name>
                    </type>
                    <name>value</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>ImmutableEntry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>key</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>value</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns an unmodifiable view of the specified set of entries. The {@link
        * Entry#setValue} operation throws an {@link UnsupportedOperationException},
        * as do any operations that would modify the returned set.
        *
        * @param entrySet the entries for which to return an unmodifiable view
        * @return an unmodifiable view of the entries
        */
    </comment>
    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Set</name>
                <argument_list>&lt;
                    <argument>
                        <name>
                            <name>Entry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>unmodifiableEntrySet</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Set</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entrySet</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>UnmodifiableEntrySet</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>Collections</name>.
                                            <name>unmodifiableSet</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>entrySet</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns an unmodifiable view of the specified map entry. The {@link
        * Entry#setValue} operation throws an {@link UnsupportedOperationException}.
        * This also has the side-effect of redefining {@code equals} to comply with
        * the Entry contract, to avoid a possible nefarious implementation of equals.
        *
        * @param entry the entry for which to return an unmodifiable view
        * @return an unmodifiable view of the entry
        */
    </comment>
    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Entry</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>unmodifiableEntry</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Entry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>K</name>
                                    </extends>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>V</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entry</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>entry</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>new
                    <class>
                        <super>
                            <name>
                                <name>AbstractMapEntry</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </super>
                        <argument_list>()</argument_list>
                        <block>{
                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>K</name>
                                </type>
                                <name>getKey</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name><name>entry</name>.
                                                    <name>getKey</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>V</name>
                                </type>
                                <name>getValue</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name><name>entry</name>.
                                                    <name>getValue</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </class>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>UnmodifiableIterator</name>
                <argument_list>&lt;
                    <argument>
                        <name>
                            <name>Entry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>unmodifiableEntryIterator</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Iterator</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entryIterator</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <class>
                        <super>
                            <name>
                                <name>UnmodifiableIterator</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>
                                            <name>Entry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </super>
                        <argument_list>()</argument_list>
                        <block>{
                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>boolean</name>
                                </type>
                                <name>hasNext</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name><name>entryIterator</name>.
                                                    <name>hasNext</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>next</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name>unmodifiableEntry</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>entryIterator</name>.
                                                                    <name>next</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </class>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/** @see Multimaps#unmodifiableEntries */</comment>
    <class>
        <specifier>static</specifier>
        class
        <name>
            <name>UnmodifiableEntries</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>ForwardingCollection</name>
                    <argument_list>&lt;
                        <argument>
                            <name>
                                <name>Entry</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>Collection</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entries</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>UnmodifiableEntries</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>Entry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entries</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>entries</name>
                            </name>
                            =
                            <name>entries</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>protected</specifier>
                    <name>
                        <name>Collection</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>delegate</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>entries</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Iterator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>iterator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>unmodifiableEntryIterator</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>entries</name>.
                                                    <name>iterator</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// See java.util.Collections.UnmodifiableEntrySet for details on attacks.</comment>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>Object</name>
                    <index>[]</index>
                </type>
                <name>toArray</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>standardToArray</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>T</name>
                    <index>[]</index>
                </type>
                <name>toArray</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>T</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>standardToArray</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <comment type="javadoc">/** @see Maps#unmodifiableEntrySet(Set) */</comment>
    <class>
        <specifier>static</specifier>
        class
        <name>
            <name>UnmodifiableEntrySet</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>UnmodifiableEntries</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>Set</name>
                    <argument_list>&lt;
                        <argument>
                            <name>
                                <name>Entry</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <constructor>
                <name>UnmodifiableEntrySet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Set</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>Entry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entries</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>entries</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="line">// See java.util.Collections.UnmodifiableEntrySet for details on attacks.</comment>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Sets</name>.
                                    <name>equalsImpl</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>object</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Sets</name>.
                                    <name>hashCodeImpl</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <comment type="javadoc">/**
        * Returns a {@link Converter} that converts values using {@link BiMap#get bimap.get()},
        * and whose inverse view converts values using
        * {@link BiMap#inverse bimap.inverse()}{@code .get()}.
        *
        * &lt;p&gt;To use a plain {@link Map} as a {@link Function}, see
        * {@link com.google.common.base.Functions#forMap(Map)} or
        * {@link com.google.common.base.Functions#forMap(Map, Object)}.
        *
        * @since 16.0
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>Beta</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>A</name>
                </argument>
                ,
                <argument>
                    <name>B</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Converter</name>
                <argument_list>&lt;
                    <argument>
                        <name>A</name>
                    </argument>
                    ,
                    <argument>
                        <name>B</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>asConverter</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>BiMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>A</name>
                                </argument>
                                ,
                                <argument>
                                    <name>B</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>bimap</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>BiMapConverter</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>A</name>
                                </argument>
                                ,
                                <argument>
                                    <name>B</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>bimap</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <class>
        <specifier>private</specifier>
        <specifier>static</specifier>
        <specifier>final</specifier> class
        <name>
            <name>BiMapConverter</name>
            <argument_list>&lt;
                <argument>
                    <name>A</name>
                </argument>
                ,
                <argument>
                    <name>B</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>Converter</name>
                    <argument_list>&lt;
                        <argument>
                            <name>A</name>
                        </argument>
                        ,
                        <argument>
                            <name>B</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>Serializable</name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>BiMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>A</name>
                                </argument>
                                ,
                                <argument>
                                    <name>B</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>bimap</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>BiMapConverter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>BiMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>A</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>B</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>bimap</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>bimap</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bimap</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>protected</specifier>
                    <name>B</name>
                </type>
                <name>doForward</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>A</name>
                            </type>
                            <name>a</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>convert</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bimap</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>a</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>protected</specifier>
                    <name>A</name>
                </type>
                <name>doBackward</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>B</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>convert</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>bimap</name>.
                                                    <name>inverse</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>b</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>X</name>
                        </argument>
                        ,
                        <argument>
                            <name>Y</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>Y</name>
                </type>
                <name>convert</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>BiMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>Y</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>bimap</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>X</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Y</name>
                            </type>
                            <name>output</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>bimap</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>output</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"No non-null mapping present for input: %s"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>output</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>object</name>
                                <name>instanceof</name>
                                <name>BiMapConverter</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>BiMapConverter</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>?</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>?</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>that</name> =
                                        <init>
                                            <expr>(
                                                <name>
                                                    <name>BiMapConverter</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                )
                                                <name>object</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>this</name>.<name>bimap</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>that</name>.
                                                            <name>bimap</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>bimap</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// There's really no good way to implement toString() without printing the entire
                BiMap, right?
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>"Maps.asConverter(" + <name>bimap</name> + ")"
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>0L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            }
        </block>
    </class>

    <comment type="javadoc">/**
        * Returns a synchronized (thread-safe) bimap backed by the specified bimap.
        * In order to guarantee serial access, it is critical that &lt;b&gt;all&lt;/b&gt; access
        * to the backing bimap is accomplished through the returned bimap.
        *
        * &lt;p&gt;It is imperative that the user manually synchronize on the returned map
        * when accessing any of its collection views: &lt;pre&gt; {@code
        *
        * BiMap&lt;Long, String&gt; map = Maps.synchronizedBiMap(
        * HashBiMap.&lt;Long, String&gt;create());
        * ...
        * Set&lt;Long&gt; set = map.keySet(); // Needn't be in synchronized block
        * ...
        * synchronized (map) { // Synchronizing on map, not set!
        * Iterator&lt;Long&gt; it = set.iterator(); // Must be in synchronized block
        * while (it.hasNext()) {
        * foo(it.next());
        * }
        * }}&lt;/pre&gt;
        *
        * &lt;p&gt;Failure to follow this advice may result in non-deterministic behavior.
        *
        * &lt;p&gt;The returned bimap will be serializable if the specified bimap is
        * serializable.
        *
        * @param bimap the bimap to be wrapped in a synchronized view
        * @return a sychronized view of the specified bimap
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>BiMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>synchronizedBiMap</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>BiMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>bimap</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>Synchronized</name>.
                            <name>biMap</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>bimap</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns an unmodifiable view of the specified bimap. This method allows
        * modules to provide users with "read-only" access to internal bimaps. Query
        * operations on the returned bimap "read through" to the specified bimap, and
        * attempts to modify the returned map, whether direct or via its collection
        * views, result in an {@code UnsupportedOperationException}.
        *
        * &lt;p&gt;The returned bimap will be serializable if the specified bimap is
        * serializable.
        *
        * @param bimap the bimap for which an unmodifiable view is to be returned
        * @return an unmodifiable view of the specified bimap
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>BiMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>unmodifiableBiMap</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>BiMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>K</name>
                                    </extends>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>V</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>bimap</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>UnmodifiableBiMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>bimap</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>null</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/** @see Maps#unmodifiableBiMap(BiMap) */</comment>
    <class>
        <specifier>private</specifier>
        <specifier>static</specifier> class
        <name>
            <name>UnmodifiableBiMap</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>ForwardingMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>BiMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                ,
                <name>Serializable</name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>unmodifiableMap</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>BiMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>K</name>
                                    </extends>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>V</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>delegate</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>BiMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                ,
                                <argument>
                                    <name>K</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>inverse</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>transient</name>
                        <name>
                            <name>Set</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>values</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>UnmodifiableBiMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>BiMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>K</name>
                                            </extends>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>delegate</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>
                                    <name>BiMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>inverse</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>unmodifiableMap</name>
                            =
                            <call>
                                <name><name>Collections</name>.
                                    <name>unmodifiableMap</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>delegate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>delegate</name>
                            </name>
                            =
                            <name>delegate</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>inverse</name>
                            </name>
                            =
                            <name>inverse</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>protected</specifier>
                    <name>
                        <name>Map</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>delegate</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>unmodifiableMap</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>V</name>
                </type>
                <name>forcePut</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>BiMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            ,
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>inverse</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>BiMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <name>inverse</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>(<name>result</name> == <name>null</name>)
                            ? <name>inverse</name> = new
                            <call>
                                <name>
                                    <name>UnmodifiableBiMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>delegate</name>.
                                                    <name>inverse</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            :
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>values</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Set</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <name>values</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>(<name>result</name> == <name>null</name>)
                            ? <name>values</name> =
                            <call>
                                <name><name>Collections</name>.
                                    <name>unmodifiableSet</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>delegate</name>.
                                                    <name>values</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            :
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            }
        </block>
    </class>

    <comment type="javadoc">/**
        * Returns a view of a map where each value is transformed by a function. All
        * other properties of the map, such as iteration order, are left intact. For
        * example, the code: &lt;pre&gt; {@code
        *
        * Map&lt;String, Integer&gt; map = ImmutableMap.of("a", 4, "b", 9);
        * Function&lt;Integer, Double&gt; sqrt =
        * new Function&lt;Integer, Double&gt;() {
        * public Double apply(Integer in) {
        * return Math.sqrt((int) in);
        * }
        * };
        * Map&lt;String, Double&gt; transformed = Maps.transformValues(map, sqrt);
        * System.out.println(transformed);}&lt;/pre&gt;
        *
        * ... prints {@code {a=2.0, b=3.0}}.
        *
        * &lt;p&gt;Changes in the underlying map are reflected in this view. Conversely,
        * this view supports removal operations, and these are reflected in the
        * underlying map.
        *
        * &lt;p&gt;It's acceptable for the underlying map to contain null keys, and even
        * null values provided that the function is capable of accepting null input.
        * The transformed map might contain null values, if the function sometimes
        * gives a null result.
        *
        * &lt;p&gt;The returned map is not thread-safe or serializable, even if the
        * underlying map is.
        *
        * &lt;p&gt;The function is applied lazily, invoked when needed. This is necessary
        * for the returned map to be a view, but it means that the function will be
        * applied many times for bulk operations like {@link Map#containsValue} and
        * {@code Map.toString()}. For this to perform well, {@code function} should
        * be fast. To avoid lazy evaluation when the returned map doesn't need to be
        * a view, copy the returned map into a new map of your choosing.
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V1</name>
                </argument>
                ,
                <argument>
                    <name>V2</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Map</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V2</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>transformValues</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V1</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>fromMap</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Function</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>V1</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>V2</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>function</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name>transformEntries</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>fromMap</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <call>
                                        <name>asEntryTransformer</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>function</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a view of a sorted map where each value is transformed by a
        * function. All other properties of the map, such as iteration order, are
        * left intact. For example, the code: &lt;pre&gt; {@code
        *
        * SortedMap&lt;String, Integer&gt; map = ImmutableSortedMap.of("a", 4, "b", 9);
        * Function&lt;Integer, Double&gt; sqrt =
        * new Function&lt;Integer, Double&gt;() {
        * public Double apply(Integer in) {
        * return Math.sqrt((int) in);
        * }
        * };
        * SortedMap&lt;String, Double&gt; transformed =
        * Maps.transformValues(map, sqrt);
        * System.out.println(transformed);}&lt;/pre&gt;
        *
        * ... prints {@code {a=2.0, b=3.0}}.
        *
        * &lt;p&gt;Changes in the underlying map are reflected in this view. Conversely,
        * this view supports removal operations, and these are reflected in the
        * underlying map.
        *
        * &lt;p&gt;It's acceptable for the underlying map to contain null keys, and even
        * null values provided that the function is capable of accepting null input.
        * The transformed map might contain null values, if the function sometimes
        * gives a null result.
        *
        * &lt;p&gt;The returned map is not thread-safe or serializable, even if the
        * underlying map is.
        *
        * &lt;p&gt;The function is applied lazily, invoked when needed. This is necessary
        * for the returned map to be a view, but it means that the function will be
        * applied many times for bulk operations like {@link Map#containsValue} and
        * {@code Map.toString()}. For this to perform well, {@code function} should
        * be fast. To avoid lazy evaluation when the returned map doesn't need to be
        * a view, copy the returned map into a new map of your choosing.
        *
        * @since 11.0
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V1</name>
                </argument>
                ,
                <argument>
                    <name>V2</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>SortedMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V2</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>transformValues</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>SortedMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V1</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>fromMap</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Function</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>V1</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>V2</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>function</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name>transformEntries</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>fromMap</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <call>
                                        <name>asEntryTransformer</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>function</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a view of a navigable map where each value is transformed by a
        * function. All other properties of the map, such as iteration order, are
        * left intact. For example, the code: &lt;pre&gt; {@code
        *
        * NavigableMap&lt;String, Integer&gt; map = Maps.newTreeMap();
        * map.put("a", 4);
        * map.put("b", 9);
        * Function&lt;Integer, Double&gt; sqrt =
        * new Function&lt;Integer, Double&gt;() {
        * public Double apply(Integer in) {
        * return Math.sqrt((int) in);
        * }
        * };
        * NavigableMap&lt;String, Double&gt; transformed =
        * Maps.transformNavigableValues(map, sqrt);
        * System.out.println(transformed);}&lt;/pre&gt;
        *
        * ... prints {@code {a=2.0, b=3.0}}.
        *
        * Changes in the underlying map are reflected in this view.
        * Conversely, this view supports removal operations, and these are reflected
        * in the underlying map.
        *
        * &lt;p&gt;It's acceptable for the underlying map to contain null keys, and even
        * null values provided that the function is capable of accepting null input.
        * The transformed map might contain null values, if the function sometimes
        * gives a null result.
        *
        * &lt;p&gt;The returned map is not thread-safe or serializable, even if the
        * underlying map is.
        *
        * &lt;p&gt;The function is applied lazily, invoked when needed. This is necessary
        * for the returned map to be a view, but it means that the function will be
        * applied many times for bulk operations like {@link Map#containsValue} and
        * {@code Map.toString()}. For this to perform well, {@code function} should
        * be fast. To avoid lazy evaluation when the returned map doesn't need to be
        * a view, copy the returned map into a new map of your choosing.
        *
        * @since 13.0
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>GwtIncompatible</name>
                <argument_list>("NavigableMap")</argument_list>
            </annotation>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V1</name>
                </argument>
                ,
                <argument>
                    <name>V2</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>NavigableMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V2</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>transformValues</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>NavigableMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V1</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>fromMap</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Function</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>V1</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>V2</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>function</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name>transformEntries</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>fromMap</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <call>
                                        <name>asEntryTransformer</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>function</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a view of a map whose values are derived from the original map's
        * entries. In contrast to {@link #transformValues}, this method's
        * entry-transformation logic may depend on the key as well as the value.
        *
        * &lt;p&gt;All other properties of the transformed map, such as iteration order,
        * are left intact. For example, the code: &lt;pre&gt; {@code
        *
        * Map&lt;String, Boolean&gt; options =
        * ImmutableMap.of("verbose", true, "sort", false);
        * EntryTransformer&lt;String, Boolean, String&gt; flagPrefixer =
        * new EntryTransformer&lt;String, Boolean, String&gt;() {
        * public String transformEntry(String key, Boolean value) {
        * return value ? key : "no" + key;
        * }
        * };
        * Map&lt;String, String&gt; transformed =
        * Maps.transformEntries(options, flagPrefixer);
        * System.out.println(transformed);}&lt;/pre&gt;
        *
        * ... prints {@code {verbose=verbose, sort=nosort}}.
        *
        * &lt;p&gt;Changes in the underlying map are reflected in this view. Conversely,
        * this view supports removal operations, and these are reflected in the
        * underlying map.
        *
        * &lt;p&gt;It's acceptable for the underlying map to contain null keys and null
        * values provided that the transformer is capable of accepting null inputs.
        * The transformed map might contain null values if the transformer sometimes
        * gives a null result.
        *
        * &lt;p&gt;The returned map is not thread-safe or serializable, even if the
        * underlying map is.
        *
        * &lt;p&gt;The transformer is applied lazily, invoked when needed. This is
        * necessary for the returned map to be a view, but it means that the
        * transformer will be applied many times for bulk operations like {@link
        * Map#containsValue} and {@link Object#toString}. For this to perform well,
        * {@code transformer} should be fast. To avoid lazy evaluation when the
        * returned map doesn't need to be a view, copy the returned map into a new
        * map of your choosing.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; This method assumes that for any instance {@code k} of
        * {@code EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies
        * that {@code k2} is also of type {@code K}. Using an {@code
        * EntryTransformer} key type for which this may not hold, such as {@code
        * ArrayList}, may risk a {@code ClassCastException} when calling methods on
        * the transformed map.
        *
        * @since 7.0
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V1</name>
                </argument>
                ,
                <argument>
                    <name>V2</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Map</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V2</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>transformEntries</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V1</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>fromMap</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>EntryTransformer</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>V1</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>V2</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>transformer</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>
                        <name>fromMap</name>
                        <name>instanceof</name>
                        <name>SortedMap</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name>transformEntries</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>(
                                                <name>
                                                    <name>SortedMap</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V1</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                )
                                                <name>fromMap</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>transformer</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>TransformedEntriesMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V1</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V2</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>fromMap</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>transformer</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a view of a sorted map whose values are derived from the original
        * sorted map's entries. In contrast to {@link #transformValues}, this
        * method's entry-transformation logic may depend on the key as well as the
        * value.
        *
        * &lt;p&gt;All other properties of the transformed map, such as iteration order,
        * are left intact. For example, the code: &lt;pre&gt; {@code
        *
        * Map&lt;String, Boolean&gt; options =
        * ImmutableSortedMap.of("verbose", true, "sort", false);
        * EntryTransformer&lt;String, Boolean, String&gt; flagPrefixer =
        * new EntryTransformer&lt;String, Boolean, String&gt;() {
        * public String transformEntry(String key, Boolean value) {
        * return value ? key : "yes" + key;
        * }
        * };
        * SortedMap&lt;String, String&gt; transformed =
        * Maps.transformEntries(options, flagPrefixer);
        * System.out.println(transformed);}&lt;/pre&gt;
        *
        * ... prints {@code {sort=yessort, verbose=verbose}}.
        *
        * &lt;p&gt;Changes in the underlying map are reflected in this view. Conversely,
        * this view supports removal operations, and these are reflected in the
        * underlying map.
        *
        * &lt;p&gt;It's acceptable for the underlying map to contain null keys and null
        * values provided that the transformer is capable of accepting null inputs.
        * The transformed map might contain null values if the transformer sometimes
        * gives a null result.
        *
        * &lt;p&gt;The returned map is not thread-safe or serializable, even if the
        * underlying map is.
        *
        * &lt;p&gt;The transformer is applied lazily, invoked when needed. This is
        * necessary for the returned map to be a view, but it means that the
        * transformer will be applied many times for bulk operations like {@link
        * Map#containsValue} and {@link Object#toString}. For this to perform well,
        * {@code transformer} should be fast. To avoid lazy evaluation when the
        * returned map doesn't need to be a view, copy the returned map into a new
        * map of your choosing.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; This method assumes that for any instance {@code k} of
        * {@code EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies
        * that {@code k2} is also of type {@code K}. Using an {@code
        * EntryTransformer} key type for which this may not hold, such as {@code
        * ArrayList}, may risk a {@code ClassCastException} when calling methods on
        * the transformed map.
        *
        * @since 11.0
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V1</name>
                </argument>
                ,
                <argument>
                    <name>V2</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>SortedMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V2</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>transformEntries</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>SortedMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V1</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>fromMap</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>EntryTransformer</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>V1</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>V2</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>transformer</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>Platform</name>.
                            <name>mapsTransformEntriesSortedMap</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>fromMap</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>transformer</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a view of a navigable map whose values are derived from the
        * original navigable map's entries. In contrast to {@link
        * #transformValues}, this method's entry-transformation logic may
        * depend on the key as well as the value.
        *
        * &lt;p&gt;All other properties of the transformed map, such as iteration order,
        * are left intact. For example, the code: &lt;pre&gt; {@code
        *
        * NavigableMap&lt;String, Boolean&gt; options = Maps.newTreeMap();
        * options.put("verbose", false);
        * options.put("sort", true);
        * EntryTransformer&lt;String, Boolean, String&gt; flagPrefixer =
        * new EntryTransformer&lt;String, Boolean, String&gt;() {
        * public String transformEntry(String key, Boolean value) {
        * return value ? key : ("yes" + key);
        * }
        * };
        * NavigableMap&lt;String, String&gt; transformed =
        * LabsMaps.transformNavigableEntries(options, flagPrefixer);
        * System.out.println(transformed);}&lt;/pre&gt;
        *
        * ... prints {@code {sort=yessort, verbose=verbose}}.
        *
        * &lt;p&gt;Changes in the underlying map are reflected in this view.
        * Conversely, this view supports removal operations, and these are reflected
        * in the underlying map.
        *
        * &lt;p&gt;It's acceptable for the underlying map to contain null keys and null
        * values provided that the transformer is capable of accepting null inputs.
        * The transformed map might contain null values if the transformer sometimes
        * gives a null result.
        *
        * &lt;p&gt;The returned map is not thread-safe or serializable, even if the
        * underlying map is.
        *
        * &lt;p&gt;The transformer is applied lazily, invoked when needed. This is
        * necessary for the returned map to be a view, but it means that the
        * transformer will be applied many times for bulk operations like {@link
        * Map#containsValue} and {@link Object#toString}. For this to perform well,
        * {@code transformer} should be fast. To avoid lazy evaluation when the
        * returned map doesn't need to be a view, copy the returned map into a new
        * map of your choosing.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; This method assumes that for any instance {@code k} of
        * {@code EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies
        * that {@code k2} is also of type {@code K}. Using an {@code
        * EntryTransformer} key type for which this may not hold, such as {@code
        * ArrayList}, may risk a {@code ClassCastException} when calling methods on
        * the transformed map.
        *
        * @since 13.0
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>GwtIncompatible</name>
                <argument_list>("NavigableMap")</argument_list>
            </annotation>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V1</name>
                </argument>
                ,
                <argument>
                    <name>V2</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>NavigableMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V2</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>transformEntries</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>NavigableMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V1</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>fromMap</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>EntryTransformer</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>V1</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>V2</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>transformer</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>TransformedEntriesNavigableMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V1</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V2</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>fromMap</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>transformer</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V1</name>
                </argument>
                ,
                <argument>
                    <name>V2</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>SortedMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V2</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>transformEntriesIgnoreNavigable</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>SortedMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V1</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>fromMap</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>EntryTransformer</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>V1</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>V2</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>transformer</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>TransformedEntriesSortedMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V1</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V2</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>fromMap</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>transformer</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * A transformation of the value of a key-value pair, using both key and value
        * as inputs. To apply the transformation to a map, use
        * {@link Maps#transformEntries(Map, EntryTransformer)}.
        *
        * @param &lt;K&gt; the key type of the input and output entries
        * @param &lt;V1&gt; the value type of the input entry
        * @param &lt;V2&gt; the value type of the output entry
        * @since 7.0
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface
        <name>
            <name>EntryTransformer</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V1</name>
                </argument>
                ,
                <argument>
                    <name>V2</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <block>{
            <comment type="javadoc">/**
                * Determines an output value based on a key-value pair. This method is
                * &lt;i&gt;generally expected&lt;/i&gt;, but not absolutely required, to have the
                * following properties:
                *
                * &lt;ul&gt;
                * &lt;li&gt;Its execution does not cause any observable side effects.
                * &lt;li&gt;The computation is &lt;i&gt;consistent with equals&lt;/i&gt;; that is,
                * {@link Objects#equal Objects.equal}{@code (k1, k2) &amp;&amp;}
                * {@link Objects#equal}{@code (v1, v2)} implies that {@code
                * Objects.equal(transformer.transform(k1, v1),
                * transformer.transform(k2, v2))}.
                * &lt;/ul&gt;
                *
                * @throws NullPointerException if the key or value is null and this
                * transformer does not accept null arguments
                */
            </comment>
            <function_decl>
                <type>
                    <name>V2</name>
                </type>
                <name>transformEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>V1</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            }
        </block>
    </class>

    <comment type="javadoc">/**
        * Views a function as an entry transformer that ignores the entry key.
        */
    </comment>
    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V1</name>
                </argument>
                ,
                <argument>
                    <name>V2</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>EntryTransformer</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V1</name>
                    </argument>
                    ,
                    <argument>
                        <name>V2</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>asEntryTransformer</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Function</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>V1</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>V2</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>function</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>function</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>new
                    <class>
                        <super>
                            <name>
                                <name>EntryTransformer</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V1</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V2</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </super>
                        <argument_list>()</argument_list>
                        <block>{
                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>V2</name>
                                </type>
                                <name>transformEntry</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>K</name>
                                            </type>
                                            <name>key</name>
                                        </decl>
                                    </param>
                                    ,
                                    <param>
                                        <decl>
                                            <type>
                                                <name>V1</name>
                                            </type>
                                            <name>value</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name><name>function</name>.
                                                    <name>apply</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>value</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </class>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V1</name>
                </argument>
                ,
                <argument>
                    <name>V2</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Function</name>
                <argument_list>&lt;
                    <argument>
                        <name>V1</name>
                    </argument>
                    ,
                    <argument>
                        <name>V2</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>asValueToValueFunction</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>EntryTransformer</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>V1</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V2</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>transformer</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>K</name>
                    </type>
                    <name>key</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>transformer</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>new
                    <class>
                        <super>
                            <name>
                                <name>Function</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>V1</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V2</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </super>
                        <argument_list>()</argument_list>
                        <block>{
                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>V2</name>
                                </type>
                                <name>apply</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <annotation>@
                                                    <name>Nullable</name>
                                                </annotation>
                                                <name>V1</name>
                                            </type>
                                            <name>v1</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name><name>transformer</name>.
                                                    <name>transformEntry</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>v1</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </class>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Views an entry transformer as a function from {@code Entry} to values.
        */
    </comment>
    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V1</name>
                </argument>
                ,
                <argument>
                    <name>V2</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Function</name>
                <argument_list>&lt;
                    <argument>
                        <name>
                            <name>Entry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V1</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </argument>
                    ,
                    <argument>
                        <name>V2</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>asEntryToValueFunction</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>EntryTransformer</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>V1</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>V2</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>transformer</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>transformer</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>new
                    <class>
                        <super>
                            <name>
                                <name>Function</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>
                                            <name>Entry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V1</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V2</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </super>
                        <argument_list>()</argument_list>
                        <block>{
                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>V2</name>
                                </type>
                                <name>apply</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>Entry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V1</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>entry</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name><name>transformer</name>.
                                                    <name>transformEntry</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>entry</name>.
                                                                    <name>getKey</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>entry</name>.
                                                                    <name>getValue</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </class>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a view of an entry transformed by the specified transformer.
        */
    </comment>
    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>V2</name>
                </argument>
                ,
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V1</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Entry</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V2</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>transformEntry</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>EntryTransformer</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>V1</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>V2</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>transformer</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Entry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V1</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entry</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>transformer</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>entry</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>new
                    <class>
                        <super>
                            <name>
                                <name>AbstractMapEntry</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V2</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </super>
                        <argument_list>()</argument_list>
                        <block>{
                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>K</name>
                                </type>
                                <name>getKey</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name><name>entry</name>.
                                                    <name>getKey</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>V2</name>
                                </type>
                                <name>getValue</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name><name>transformer</name>.
                                                    <name>transformEntry</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>entry</name>.
                                                                    <name>getKey</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>entry</name>.
                                                                    <name>getValue</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </class>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Views an entry transformer as a function from entries to entries.
        */
    </comment>
    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V1</name>
                </argument>
                ,
                <argument>
                    <name>V2</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Function</name>
                <argument_list>&lt;
                    <argument>
                        <name>
                            <name>Entry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V1</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </argument>
                    ,
                    <argument>
                        <name>
                            <name>Entry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V2</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>asEntryToEntryFunction</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>EntryTransformer</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>V1</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>V2</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>transformer</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>transformer</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>new
                    <class>
                        <super>
                            <name>
                                <name>Function</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>
                                            <name>Entry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V1</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>
                                            <name>Entry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V2</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </super>
                        <argument_list>()</argument_list>
                        <block>{
                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V2</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>apply</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <specifier>final</specifier>
                                                <name>
                                                    <name>Entry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V1</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>entry</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name>transformEntry</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>transformer</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>entry</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </class>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <class>
        <specifier>static</specifier>
        class
        <name>
            <name>TransformedEntriesMap</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V1</name>
                </argument>
                ,
                <argument>
                    <name>V2</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>IteratorBasedAbstractMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V2</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V1</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>fromMap</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>EntryTransformer</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>V1</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>V2</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>transformer</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>TransformedEntriesMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Map</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V1</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>fromMap</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>EntryTransformer</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>K</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>V1</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V2</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>transformer</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>fromMap</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fromMap</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>transformer</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>transformer</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>size</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>fromMap</name>.
                                    <name>size</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>containsKey</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>fromMap</name>.
                                    <name>containsKey</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// safe as long as the user followed the &lt;b&gt;Warning&lt;/b&gt; in the javadoc
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("unchecked")</argument_list>
                    </annotation>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>V2</name>
                </type>
                <name>get</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>V1</name>
                            </type>
                            <name>value</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>fromMap</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>key</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>(<name>value</name> != <name>null</name> ||
                            <call>
                                <name><name>fromMap</name>.
                                    <name>containsKey</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            )
                            ?
                            <call>
                                <name><name>transformer</name>.
                                    <name>transformEntry</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>K</name>)
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            :
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// safe as long as the user followed the &lt;b&gt;Warning&lt;/b&gt; in the javadoc
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("unchecked")</argument_list>
                    </annotation>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>V2</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>fromMap</name>.
                                    <name>containsKey</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ?
                            <call>
                                <name><name>transformer</name>.
                                    <name>transformEntry</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>K</name>)
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>fromMap</name>.
                                                    <name>remove</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            :
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>fromMap</name>.
                                    <name>clear</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>keySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>fromMap</name>.
                                    <name>keySet</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>Iterator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V2</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>entryIterator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Iterators</name>.
                                    <name>transform</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>fromMap</name>.
                                                    <name>entrySet</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>iterator</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Maps</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            &lt;
                                            <name>K</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>V1</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr><name>V2</name>&gt;
                                            <call>
                                                <name>asEntryToEntryFunction</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>transformer</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Collection</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V2</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>values</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>Values</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V2</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <specifier>static</specifier>
        class
        <name>
            <name>TransformedEntriesSortedMap</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V1</name>
                </argument>
                ,
                <argument>
                    <name>V2</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>TransformedEntriesMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V1</name>
                        </argument>
                        ,
                        <argument>
                            <name>V2</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>SortedMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V2</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{

            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>
                        <name>SortedMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V1</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>fromMap</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>SortedMap</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V1</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            )
                            <name>fromMap</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <constructor>
                <name>TransformedEntriesSortedMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>SortedMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V1</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>fromMap</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>EntryTransformer</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>K</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>V1</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V2</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>transformer</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fromMap</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>transformer</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Comparator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                                <super>super
                                    <name>K</name>
                                </super>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>comparator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>fromMap</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>comparator</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>firstKey</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>fromMap</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>firstKey</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V2</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>headMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toKey</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>transformEntries</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>fromMap</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>headMap</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>toKey</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>transformer</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>lastKey</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>fromMap</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>lastKey</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V2</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>subMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toKey</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>transformEntries</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>fromMap</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>subMap</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>fromKey</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>toKey</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>transformer</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V2</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>tailMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromKey</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>transformEntries</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>fromMap</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>tailMap</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>fromKey</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>transformer</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <annotation>@
            <name>GwtIncompatible</name>
            <argument_list>("NavigableMap")</argument_list>
        </annotation>
        <specifier>private</specifier>
        <specifier>static</specifier> class
        <name>
            <name>TransformedEntriesNavigableMap</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V1</name>
                </argument>
                ,
                <argument>
                    <name>V2</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>TransformedEntriesSortedMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V1</name>
                        </argument>
                        ,
                        <argument>
                            <name>V2</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>NavigableMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V2</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{

            <constructor>
                <name>TransformedEntriesNavigableMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>NavigableMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V1</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>fromMap</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>EntryTransformer</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>K</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>V1</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V2</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>transformer</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fromMap</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>transformer</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V2</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>ceilingEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>transformEntry</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>fromMap</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>ceilingEntry</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>ceilingKey</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>fromMap</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>ceilingKey</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>descendingKeySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>fromMap</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>descendingKeySet</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V2</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>descendingMap</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>transformEntries</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>fromMap</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>descendingMap</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>transformer</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V2</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>firstEntry</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>transformEntry</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>fromMap</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>firstEntry</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V2</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>floorEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>transformEntry</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>fromMap</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>floorEntry</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>floorKey</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>fromMap</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>floorKey</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V2</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>headMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toKey</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>headMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>toKey</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V2</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>headMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>inclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>transformEntries</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>fromMap</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>headMap</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>toKey</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>inclusive</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>transformer</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V2</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>higherEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>transformEntry</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>fromMap</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>higherEntry</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>higherKey</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>fromMap</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>higherKey</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V2</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>lastEntry</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>transformEntry</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>fromMap</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>lastEntry</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V2</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>lowerEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>transformEntry</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>fromMap</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>lowerEntry</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>lowerKey</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>fromMap</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>lowerKey</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>navigableKeySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>fromMap</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>navigableKeySet</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V2</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>pollFirstEntry</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>transformEntry</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>fromMap</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>pollFirstEntry</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V2</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>pollLastEntry</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>transformEntry</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>fromMap</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>pollLastEntry</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V2</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>subMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>fromInclusive</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>toInclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>transformEntries</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>fromMap</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>subMap</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>fromKey</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>fromInclusive</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>toKey</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>toInclusive</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>transformer</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V2</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>subMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toKey</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>subMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fromKey</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>toKey</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V2</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>tailMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromKey</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>tailMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fromKey</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V2</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>tailMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>inclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>transformEntries</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>fromMap</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>tailMap</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>fromKey</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>inclusive</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>transformer</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Nullable</name>
                    </annotation>
                    <specifier>private</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V2</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>transformEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V1</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entry</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>entry</name> == <name>null</name>) ? <name>null</name> :
                            <call>
                                <name><name>Maps</name>.
                                    <name>transformEntry</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>transformer</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>entry</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>protected</specifier>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V1</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>fromMap</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>NavigableMap</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V1</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            )
                            <call>
                                <name><name>super</name>.
                                    <name>fromMap</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Predicate</name>
                <argument_list>&lt;
                    <argument>
                        <name>
                            <name>Entry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>keyPredicateOnEntries</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>keyPredicate</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name>compose</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>keyPredicate</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name><name>Maps</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    &lt;<name>K</name>&gt;
                                    <call>
                                        <name>keyFunction</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Predicate</name>
                <argument_list>&lt;
                    <argument>
                        <name>
                            <name>Entry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>valuePredicateOnEntries</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>V</name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>valuePredicate</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name>compose</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>valuePredicate</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name><name>Maps</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    &lt;<name>V</name>&gt;
                                    <call>
                                        <name>valueFunction</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a map containing the mappings in {@code unfiltered} whose keys
        * satisfy a predicate. The returned map is a live view of {@code unfiltered};
        * changes to one affect the other.
        *
        * &lt;p&gt;The resulting map's {@code keySet()}, {@code entrySet()}, and {@code
        * values()} views have iterators that don't support {@code remove()}, but all
        * other methods are supported by the map and its views. When given a key that
        * doesn't satisfy the predicate, the map's {@code put()} and {@code putAll()}
        * methods throw an {@link IllegalArgumentException}.
        *
        * &lt;p&gt;When methods such as {@code removeAll()} and {@code clear()} are called
        * on the filtered map or its views, only mappings whose keys satisfy the
        * filter will be removed from the underlying map.
        *
        * &lt;p&gt;The returned map isn't threadsafe or serializable, even if {@code
        * unfiltered} is.
        *
        * &lt;p&gt;Many of the filtered map's methods, such as {@code size()},
        * iterate across every key/value mapping in the underlying map and determine
        * which satisfy the filter. When a live view is &lt;i&gt;not&lt;/i&gt; needed, it may be
        * faster to copy the filtered map and use the copy.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; {@code keyPredicate} must be &lt;i&gt;consistent with
        * equals&lt;/i&gt;, as documented at {@link Predicate#apply}. Do not provide a
        * predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is
        * inconsistent with equals.
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>CheckReturnValue</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Map</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>filterKeys</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>unfiltered</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>keyPredicate</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>
                        <name>unfiltered</name>
                        <name>instanceof</name>
                        <name>SortedMap</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name>filterKeys</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>(
                                                <name>
                                                    <name>SortedMap</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                )
                                                <name>unfiltered</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>keyPredicate</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
                <else>else
                    <if>if
                        <condition>(
                            <expr>
                                <name>unfiltered</name>
                                <name>instanceof</name>
                                <name>BiMap</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>filterKeys</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>(
                                                        <name>
                                                            <name>BiMap</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>K</name>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <name>V</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                        )
                                                        <name>unfiltered</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>keyPredicate</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                </else>
            </if>
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>keyPredicate</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>?</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entryPredicate</name> =
                    <init>
                        <expr>
                            <call>
                                <name>keyPredicateOnEntries</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>keyPredicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <return>return
                <expr>(<name>unfiltered</name>
                    <name>instanceof</name>
                    <name>AbstractFilteredMap</name>)
                    ?
                    <call>
                        <name>filterFiltered</name>
                        <argument_list>(
                            <argument>
                                <expr>(
                                    <name>
                                        <name>AbstractFilteredMap</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    )
                                    <name>unfiltered</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>entryPredicate</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    : new
                    <call>
                        <name>
                            <name>FilteredKeyMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>unfiltered</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>keyPredicate</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>entryPredicate</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a sorted map containing the mappings in {@code unfiltered} whose
        * keys satisfy a predicate. The returned map is a live view of {@code
        * unfiltered}; changes to one affect the other.
        *
        * &lt;p&gt;The resulting map's {@code keySet()}, {@code entrySet()}, and {@code
        * values()} views have iterators that don't support {@code remove()}, but all
        * other methods are supported by the map and its views. When given a key that
        * doesn't satisfy the predicate, the map's {@code put()} and {@code putAll()}
        * methods throw an {@link IllegalArgumentException}.
        *
        * &lt;p&gt;When methods such as {@code removeAll()} and {@code clear()} are called
        * on the filtered map or its views, only mappings whose keys satisfy the
        * filter will be removed from the underlying map.
        *
        * &lt;p&gt;The returned map isn't threadsafe or serializable, even if {@code
        * unfiltered} is.
        *
        * &lt;p&gt;Many of the filtered map's methods, such as {@code size()},
        * iterate across every key/value mapping in the underlying map and determine
        * which satisfy the filter. When a live view is &lt;i&gt;not&lt;/i&gt; needed, it may be
        * faster to copy the filtered map and use the copy.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; {@code keyPredicate} must be &lt;i&gt;consistent with
        * equals&lt;/i&gt;, as documented at {@link Predicate#apply}. Do not provide a
        * predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is
        * inconsistent with equals.
        *
        * @since 11.0
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>CheckReturnValue</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>SortedMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>filterKeys</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>SortedMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>unfiltered</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>keyPredicate</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <comment type="line">// TODO(lowasser): Return a subclass of Maps.FilteredKeyMap for slightly better
            </comment>
            <comment type="line">// performance.</comment>
            <return>return
                <expr>
                    <call>
                        <name>filterEntries</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>unfiltered</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name><name>Maps</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    &lt;<name>K</name>&gt;
                                    <call>
                                        <name>keyPredicateOnEntries</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>keyPredicate</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a navigable map containing the mappings in {@code unfiltered} whose
        * keys satisfy a predicate. The returned map is a live view of {@code
        * unfiltered}; changes to one affect the other.
        *
        * &lt;p&gt;The resulting map's {@code keySet()}, {@code entrySet()}, and {@code
        * values()} views have iterators that don't support {@code remove()}, but all
        * other methods are supported by the map and its views. When given a key that
        * doesn't satisfy the predicate, the map's {@code put()} and {@code putAll()}
        * methods throw an {@link IllegalArgumentException}.
        *
        * &lt;p&gt;When methods such as {@code removeAll()} and {@code clear()} are called
        * on the filtered map or its views, only mappings whose keys satisfy the
        * filter will be removed from the underlying map.
        *
        * &lt;p&gt;The returned map isn't threadsafe or serializable, even if {@code
        * unfiltered} is.
        *
        * &lt;p&gt;Many of the filtered map's methods, such as {@code size()},
        * iterate across every key/value mapping in the underlying map and determine
        * which satisfy the filter. When a live view is &lt;i&gt;not&lt;/i&gt; needed, it may be
        * faster to copy the filtered map and use the copy.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; {@code keyPredicate} must be &lt;i&gt;consistent with
        * equals&lt;/i&gt;, as documented at {@link Predicate#apply}. Do not provide a
        * predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is
        * inconsistent with equals.
        *
        * @since 14.0
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>GwtIncompatible</name>
                <argument_list>("NavigableMap")</argument_list>
            </annotation>
            <annotation>@
                <name>CheckReturnValue</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>NavigableMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>filterKeys</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>NavigableMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>unfiltered</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>keyPredicate</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <comment type="line">// TODO(lowasser): Return a subclass of Maps.FilteredKeyMap for slightly better
            </comment>
            <comment type="line">// performance.</comment>
            <return>return
                <expr>
                    <call>
                        <name>filterEntries</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>unfiltered</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name><name>Maps</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    &lt;<name>K</name>&gt;
                                    <call>
                                        <name>keyPredicateOnEntries</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>keyPredicate</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a bimap containing the mappings in {@code unfiltered} whose keys satisfy a predicate.
        * The returned bimap is a live view of {@code unfiltered}; changes to one affect the other.
        *
        * &lt;p&gt;The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
        * iterators that don't support {@code remove()}, but all other methods are supported by the
        * bimap and its views. When given a key that doesn't satisfy the predicate, the bimap's {@code
        * put()}, {@code forcePut()} and {@code putAll()} methods throw an {@link
        * IllegalArgumentException}.
        *
        * &lt;p&gt;When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
        * bimap or its views, only mappings that satisfy the filter will be removed from the underlying
        * bimap.
        *
        * &lt;p&gt;The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is.
        *
        * &lt;p&gt;Many of the filtered bimap's methods, such as {@code size()}, iterate across every key in
        * the underlying bimap and determine which satisfy the filter. When a live view is &lt;i&gt;not&lt;/i&gt;
        * needed, it may be faster to copy the filtered bimap and use the copy.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; {@code entryPredicate} must be &lt;i&gt;consistent with equals &lt;/i&gt;,
        as
        * documented at {@link Predicate#apply}.
        *
        * @since 14.0
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>CheckReturnValue</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>BiMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>filterKeys</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>BiMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>unfiltered</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>keyPredicate</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>keyPredicate</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>
                    <call>
                        <name>filterEntries</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>unfiltered</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name><name>Maps</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    &lt;<name>K</name>&gt;
                                    <call>
                                        <name>keyPredicateOnEntries</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>keyPredicate</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a map containing the mappings in {@code unfiltered} whose values
        * satisfy a predicate. The returned map is a live view of {@code unfiltered};
        * changes to one affect the other.
        *
        * &lt;p&gt;The resulting map's {@code keySet()}, {@code entrySet()}, and {@code
        * values()} views have iterators that don't support {@code remove()}, but all
        * other methods are supported by the map and its views. When given a value
        * that doesn't satisfy the predicate, the map's {@code put()}, {@code
        * putAll()}, and {@link Entry#setValue} methods throw an {@link
        * IllegalArgumentException}.
        *
        * &lt;p&gt;When methods such as {@code removeAll()} and {@code clear()} are called
        * on the filtered map or its views, only mappings whose values satisfy the
        * filter will be removed from the underlying map.
        *
        * &lt;p&gt;The returned map isn't threadsafe or serializable, even if {@code
        * unfiltered} is.
        *
        * &lt;p&gt;Many of the filtered map's methods, such as {@code size()},
        * iterate across every key/value mapping in the underlying map and determine
        * which satisfy the filter. When a live view is &lt;i&gt;not&lt;/i&gt; needed, it may be
        * faster to copy the filtered map and use the copy.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; {@code valuePredicate} must be &lt;i&gt;consistent with
        * equals&lt;/i&gt;, as documented at {@link Predicate#apply}. Do not provide a
        * predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is
        * inconsistent with equals.
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>CheckReturnValue</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Map</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>filterValues</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>unfiltered</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>V</name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>valuePredicate</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>
                        <name>unfiltered</name>
                        <name>instanceof</name>
                        <name>SortedMap</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name>filterValues</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>(
                                                <name>
                                                    <name>SortedMap</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                )
                                                <name>unfiltered</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>valuePredicate</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
                <else>else
                    <if>if
                        <condition>(
                            <expr>
                                <name>unfiltered</name>
                                <name>instanceof</name>
                                <name>BiMap</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>filterValues</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>(
                                                        <name>
                                                            <name>BiMap</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>K</name>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <name>V</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                        )
                                                        <name>unfiltered</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>valuePredicate</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                </else>
            </if>
            <return>return
                <expr>
                    <call>
                        <name>filterEntries</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>unfiltered</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name><name>Maps</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    &lt;<name>V</name>&gt;
                                    <call>
                                        <name>valuePredicateOnEntries</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>valuePredicate</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a sorted map containing the mappings in {@code unfiltered} whose
        * values satisfy a predicate. The returned map is a live view of {@code
        * unfiltered}; changes to one affect the other.
        *
        * &lt;p&gt;The resulting map's {@code keySet()}, {@code entrySet()}, and {@code
        * values()} views have iterators that don't support {@code remove()}, but all
        * other methods are supported by the map and its views. When given a value
        * that doesn't satisfy the predicate, the map's {@code put()}, {@code
        * putAll()}, and {@link Entry#setValue} methods throw an {@link
        * IllegalArgumentException}.
        *
        * &lt;p&gt;When methods such as {@code removeAll()} and {@code clear()} are called
        * on the filtered map or its views, only mappings whose values satisfy the
        * filter will be removed from the underlying map.
        *
        * &lt;p&gt;The returned map isn't threadsafe or serializable, even if {@code
        * unfiltered} is.
        *
        * &lt;p&gt;Many of the filtered map's methods, such as {@code size()},
        * iterate across every key/value mapping in the underlying map and determine
        * which satisfy the filter. When a live view is &lt;i&gt;not&lt;/i&gt; needed, it may be
        * faster to copy the filtered map and use the copy.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; {@code valuePredicate} must be &lt;i&gt;consistent with
        * equals&lt;/i&gt;, as documented at {@link Predicate#apply}. Do not provide a
        * predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is
        * inconsistent with equals.
        *
        * @since 11.0
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>CheckReturnValue</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>SortedMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>filterValues</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>SortedMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>unfiltered</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>V</name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>valuePredicate</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name>filterEntries</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>unfiltered</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name><name>Maps</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    &lt;<name>V</name>&gt;
                                    <call>
                                        <name>valuePredicateOnEntries</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>valuePredicate</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a navigable map containing the mappings in {@code unfiltered} whose
        * values satisfy a predicate. The returned map is a live view of {@code
        * unfiltered}; changes to one affect the other.
        *
        * &lt;p&gt;The resulting map's {@code keySet()}, {@code entrySet()}, and {@code
        * values()} views have iterators that don't support {@code remove()}, but all
        * other methods are supported by the map and its views. When given a value
        * that doesn't satisfy the predicate, the map's {@code put()}, {@code
        * putAll()}, and {@link Entry#setValue} methods throw an {@link
        * IllegalArgumentException}.
        *
        * &lt;p&gt;When methods such as {@code removeAll()} and {@code clear()} are called
        * on the filtered map or its views, only mappings whose values satisfy the
        * filter will be removed from the underlying map.
        *
        * &lt;p&gt;The returned map isn't threadsafe or serializable, even if {@code
        * unfiltered} is.
        *
        * &lt;p&gt;Many of the filtered map's methods, such as {@code size()},
        * iterate across every key/value mapping in the underlying map and determine
        * which satisfy the filter. When a live view is &lt;i&gt;not&lt;/i&gt; needed, it may be
        * faster to copy the filtered map and use the copy.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; {@code valuePredicate} must be &lt;i&gt;consistent with
        * equals&lt;/i&gt;, as documented at {@link Predicate#apply}. Do not provide a
        * predicate such as {@code Predicates.instanceOf(ArrayList.class)}, which is
        * inconsistent with equals.
        *
        * @since 14.0
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>GwtIncompatible</name>
                <argument_list>("NavigableMap")</argument_list>
            </annotation>
            <annotation>@
                <name>CheckReturnValue</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>NavigableMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>filterValues</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>NavigableMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>unfiltered</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>V</name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>valuePredicate</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name>filterEntries</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>unfiltered</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name><name>Maps</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    &lt;<name>V</name>&gt;
                                    <call>
                                        <name>valuePredicateOnEntries</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>valuePredicate</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a bimap containing the mappings in {@code unfiltered} whose values satisfy a
        * predicate. The returned bimap is a live view of {@code unfiltered}; changes to one affect the
        * other.
        *
        * &lt;p&gt;The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
        * iterators that don't support {@code remove()}, but all other methods are supported by the
        * bimap and its views. When given a value that doesn't satisfy the predicate, the bimap's
        * {@code put()}, {@code forcePut()} and {@code putAll()} methods throw an {@link
        * IllegalArgumentException}. Similarly, the map's entries have a {@link Entry#setValue} method
        * that throws an {@link IllegalArgumentException} when the provided value doesn't satisfy the
        * predicate.
        *
        * &lt;p&gt;When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
        * bimap or its views, only mappings that satisfy the filter will be removed from the underlying
        * bimap.
        *
        * &lt;p&gt;The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is.
        *
        * &lt;p&gt;Many of the filtered bimap's methods, such as {@code size()}, iterate across every value in
        * the underlying bimap and determine which satisfy the filter. When a live view is &lt;i&gt;not&lt;/i&gt;
        * needed, it may be faster to copy the filtered bimap and use the copy.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; {@code entryPredicate} must be &lt;i&gt;consistent with equals &lt;/i&gt;,
        as
        * documented at {@link Predicate#apply}.
        *
        * @since 14.0
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>CheckReturnValue</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>BiMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>filterValues</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>BiMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>unfiltered</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>V</name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>valuePredicate</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name>filterEntries</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>unfiltered</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name><name>Maps</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    &lt;<name>V</name>&gt;
                                    <call>
                                        <name>valuePredicateOnEntries</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>valuePredicate</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a map containing the mappings in {@code unfiltered} that satisfy a
        * predicate. The returned map is a live view of {@code unfiltered}; changes
        * to one affect the other.
        *
        * &lt;p&gt;The resulting map's {@code keySet()}, {@code entrySet()}, and {@code
        * values()} views have iterators that don't support {@code remove()}, but all
        * other methods are supported by the map and its views. When given a
        * key/value pair that doesn't satisfy the predicate, the map's {@code put()}
        * and {@code putAll()} methods throw an {@link IllegalArgumentException}.
        * Similarly, the map's entries have a {@link Entry#setValue} method that
        * throws an {@link IllegalArgumentException} when the existing key and the
        * provided value don't satisfy the predicate.
        *
        * &lt;p&gt;When methods such as {@code removeAll()} and {@code clear()} are called
        * on the filtered map or its views, only mappings that satisfy the filter
        * will be removed from the underlying map.
        *
        * &lt;p&gt;The returned map isn't threadsafe or serializable, even if {@code
        * unfiltered} is.
        *
        * &lt;p&gt;Many of the filtered map's methods, such as {@code size()},
        * iterate across every key/value mapping in the underlying map and determine
        * which satisfy the filter. When a live view is &lt;i&gt;not&lt;/i&gt; needed, it may be
        * faster to copy the filtered map and use the copy.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; {@code entryPredicate} must be &lt;i&gt;consistent with
        * equals&lt;/i&gt;, as documented at {@link Predicate#apply}.
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>CheckReturnValue</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Map</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>filterEntries</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>unfiltered</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>
                                            <name>Entry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entryPredicate</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>
                        <name>unfiltered</name>
                        <name>instanceof</name>
                        <name>SortedMap</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name>filterEntries</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>(
                                                <name>
                                                    <name>SortedMap</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                )
                                                <name>unfiltered</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>entryPredicate</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
                <else>else
                    <if>if
                        <condition>(
                            <expr>
                                <name>unfiltered</name>
                                <name>instanceof</name>
                                <name>BiMap</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>filterEntries</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>(
                                                        <name>
                                                            <name>BiMap</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>K</name>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <name>V</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                        )
                                                        <name>unfiltered</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>entryPredicate</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                </else>
            </if>
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>entryPredicate</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>(<name>unfiltered</name>
                    <name>instanceof</name>
                    <name>AbstractFilteredMap</name>)
                    ?
                    <call>
                        <name>filterFiltered</name>
                        <argument_list>(
                            <argument>
                                <expr>(
                                    <name>
                                        <name>AbstractFilteredMap</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    )
                                    <name>unfiltered</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>entryPredicate</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    : new
                    <call>
                        <name>
                            <name>FilteredEntryMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>unfiltered</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>entryPredicate</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a sorted map containing the mappings in {@code unfiltered} that
        * satisfy a predicate. The returned map is a live view of {@code unfiltered};
        * changes to one affect the other.
        *
        * &lt;p&gt;The resulting map's {@code keySet()}, {@code entrySet()}, and {@code
        * values()} views have iterators that don't support {@code remove()}, but all
        * other methods are supported by the map and its views. When given a
        * key/value pair that doesn't satisfy the predicate, the map's {@code put()}
        * and {@code putAll()} methods throw an {@link IllegalArgumentException}.
        * Similarly, the map's entries have a {@link Entry#setValue} method that
        * throws an {@link IllegalArgumentException} when the existing key and the
        * provided value don't satisfy the predicate.
        *
        * &lt;p&gt;When methods such as {@code removeAll()} and {@code clear()} are called
        * on the filtered map or its views, only mappings that satisfy the filter
        * will be removed from the underlying map.
        *
        * &lt;p&gt;The returned map isn't threadsafe or serializable, even if {@code
        * unfiltered} is.
        *
        * &lt;p&gt;Many of the filtered map's methods, such as {@code size()},
        * iterate across every key/value mapping in the underlying map and determine
        * which satisfy the filter. When a live view is &lt;i&gt;not&lt;/i&gt; needed, it may be
        * faster to copy the filtered map and use the copy.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; {@code entryPredicate} must be &lt;i&gt;consistent with
        * equals&lt;/i&gt;, as documented at {@link Predicate#apply}.
        *
        * @since 11.0
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>CheckReturnValue</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>SortedMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>filterEntries</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>SortedMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>unfiltered</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>
                                            <name>Entry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entryPredicate</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>Platform</name>.
                            <name>mapsFilterSortedMap</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>unfiltered</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>entryPredicate</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>SortedMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>filterSortedIgnoreNavigable</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>SortedMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>unfiltered</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>
                                            <name>Entry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entryPredicate</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>entryPredicate</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>(<name>unfiltered</name>
                    <name>instanceof</name>
                    <name>FilteredEntrySortedMap</name>)
                    ?
                    <call>
                        <name>filterFiltered</name>
                        <argument_list>(
                            <argument>
                                <expr>(
                                    <name>
                                        <name>FilteredEntrySortedMap</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    )
                                    <name>unfiltered</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>entryPredicate</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    : new
                    <call>
                        <name>
                            <name>FilteredEntrySortedMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>unfiltered</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>entryPredicate</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a sorted map containing the mappings in {@code unfiltered} that
        * satisfy a predicate. The returned map is a live view of {@code unfiltered};
        * changes to one affect the other.
        *
        * &lt;p&gt;The resulting map's {@code keySet()}, {@code entrySet()}, and {@code
        * values()} views have iterators that don't support {@code remove()}, but all
        * other methods are supported by the map and its views. When given a
        * key/value pair that doesn't satisfy the predicate, the map's {@code put()}
        * and {@code putAll()} methods throw an {@link IllegalArgumentException}.
        * Similarly, the map's entries have a {@link Entry#setValue} method that
        * throws an {@link IllegalArgumentException} when the existing key and the
        * provided value don't satisfy the predicate.
        *
        * &lt;p&gt;When methods such as {@code removeAll()} and {@code clear()} are called
        * on the filtered map or its views, only mappings that satisfy the filter
        * will be removed from the underlying map.
        *
        * &lt;p&gt;The returned map isn't threadsafe or serializable, even if {@code
        * unfiltered} is.
        *
        * &lt;p&gt;Many of the filtered map's methods, such as {@code size()},
        * iterate across every key/value mapping in the underlying map and determine
        * which satisfy the filter. When a live view is &lt;i&gt;not&lt;/i&gt; needed, it may be
        * faster to copy the filtered map and use the copy.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; {@code entryPredicate} must be &lt;i&gt;consistent with
        * equals&lt;/i&gt;, as documented at {@link Predicate#apply}.
        *
        * @since 14.0
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>GwtIncompatible</name>
                <argument_list>("NavigableMap")</argument_list>
            </annotation>
            <annotation>@
                <name>CheckReturnValue</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>NavigableMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>filterEntries</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>NavigableMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>unfiltered</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>
                                            <name>Entry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entryPredicate</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>entryPredicate</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>(<name>unfiltered</name>
                    <name>instanceof</name>
                    <name>FilteredEntryNavigableMap</name>)
                    ?
                    <call>
                        <name>filterFiltered</name>
                        <argument_list>(
                            <argument>
                                <expr>(
                                    <name>
                                        <name>FilteredEntryNavigableMap</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    )
                                    <name>unfiltered</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>entryPredicate</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    : new
                    <call>
                        <name>
                            <name>FilteredEntryNavigableMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>unfiltered</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>entryPredicate</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns a bimap containing the mappings in {@code unfiltered} that satisfy a predicate. The
        * returned bimap is a live view of {@code unfiltered}; changes to one affect the other.
        *
        * &lt;p&gt;The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
        * iterators that don't support {@code remove()}, but all other methods are supported by the bimap
        * and its views. When given a key/value pair that doesn't satisfy the predicate, the bimap's
        * {@code put()}, {@code forcePut()} and {@code putAll()} methods throw an
        * {@link IllegalArgumentException}. Similarly, the map's entries have an {@link Entry#setValue}
        * method that throws an {@link IllegalArgumentException} when the existing key and the provided
        * value don't satisfy the predicate.
        *
        * &lt;p&gt;When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
        * bimap or its views, only mappings that satisfy the filter will be removed from the underlying
        * bimap.
        *
        * &lt;p&gt;The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is.
        *
        * &lt;p&gt;Many of the filtered bimap's methods, such as {@code size()}, iterate across every
        * key/value mapping in the underlying bimap and determine which satisfy the filter. When a live
        * view is &lt;i&gt;not&lt;/i&gt; needed, it may be faster to copy the filtered bimap and use the copy.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; {@code entryPredicate} must be &lt;i&gt;consistent with equals &lt;/i&gt;,
        as
        * documented at {@link Predicate#apply}.
        *
        * @since 14.0
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>CheckReturnValue</name>
            </annotation>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>BiMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>filterEntries</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>BiMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>unfiltered</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>
                                            <name>Entry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entryPredicate</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>unfiltered</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>entryPredicate</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>(<name>unfiltered</name>
                    <name>instanceof</name>
                    <name>FilteredEntryBiMap</name>)
                    ?
                    <call>
                        <name>filterFiltered</name>
                        <argument_list>(
                            <argument>
                                <expr>(
                                    <name>
                                        <name>FilteredEntryBiMap</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    )
                                    <name>unfiltered</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>entryPredicate</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    : new
                    <call>
                        <name>
                            <name>FilteredEntryBiMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>unfiltered</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>entryPredicate</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when
        * filtering a filtered map.
        */
    </comment>
    <function>
        <type>
            <specifier>private</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Map</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>filterFiltered</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>AbstractFilteredMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>map</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>
                                            <name>Entry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entryPredicate</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>FilteredEntryMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name><name>map</name>.
                                        <name>unfiltered</name>
                                    </name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name><name>Predicates</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    &lt;
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    &gt;
                                    <call>
                                        <name>and</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>map</name>.
                                                        <name>predicate</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>entryPredicate</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <class>
        <specifier>private</specifier>
        <specifier>abstract</specifier>
        <specifier>static</specifier> class
        <name>
            <name>AbstractFilteredMap</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>ViewCachingAbstractMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>unfiltered</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>
                                            <name>Entry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>predicate</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>AbstractFilteredMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Map</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>unfiltered</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Predicate</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>
                                                    <name>Entry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>predicate</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>unfiltered</name>
                            </name>
                            =
                            <name>unfiltered</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>predicate</name>
                            </name>
                            =
                            <name>predicate</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <name>boolean</name>
                </type>
                <name>apply</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>V</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// This method is called only when the key is in the map, implying that
                    </comment>
                    <comment type="line">// key is a K.</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>SuppressWarnings</name>
                                    <argument_list>("unchecked")</argument_list>
                                </annotation>
                                <name>K</name>
                            </type>
                            <name>k</name> =
                            <init>
                                <expr>(<name>K</name>)
                                    <name>key</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>predicate</name>.
                                    <name>apply</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Maps</name>.
                                                    <name>immutableEntry</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>k</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>value</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>V</name>
                </type>
                <name>put</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>apply</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>value</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>unfiltered</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>putAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Map</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>K</name>
                                            </extends>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>map</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                                <extends>extends
                                                    <name>K</name>
                                                </extends>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>?</name>
                                                <extends>extends
                                                    <name>V</name>
                                                </extends>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>entry</name> :
                                <range>
                                    <expr>
                                        <call>
                                            <name><name>map</name>.
                                                <name>entrySet</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkArgument</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>apply</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>entry</name>.
                                                                            <name>getKey</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>entry</name>.
                                                                            <name>getValue</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>unfiltered</name>.
                                    <name>putAll</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>map</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>containsKey</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>unfiltered</name>.
                                    <name>containsKey</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &amp;&amp;
                            <call>
                                <name>apply</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>unfiltered</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>V</name>
                </type>
                <name>get</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>value</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>unfiltered</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>key</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>((<name>value</name> != <name>null</name>) &amp;&amp;
                            <call>
                                <name>apply</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ) ? <name>value</name> :
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>entrySet</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>isEmpty</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>V</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>containsKey</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ?
                            <call>
                                <name><name>unfiltered</name>.
                                    <name>remove</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            :
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>Collection</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>createValues</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>FilteredMapValues</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>unfiltered</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>predicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <specifier>private</specifier>
        <specifier>static</specifier>
        <specifier>final</specifier> class
        <name>
            <name>FilteredMapValues</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends <name>Maps</name>.
                <name>
                    <name>Values</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>unfiltered</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>
                                            <name>Entry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>predicate</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>FilteredMapValues</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Map</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>filteredMap</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Map</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>unfiltered</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Predicate</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>
                                                    <name>Entry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>predicate</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>filteredMap</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>unfiltered</name>
                            </name>
                            =
                            <name>unfiltered</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>predicate</name>
                            </name>
                            =
                            <name>predicate</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>o</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Iterables</name>.
                                    <name>removeFirstMatching</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>unfiltered</name>.
                                                    <name>entrySet</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Predicates</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            &lt;
                                            <name>
                                                <name>Entry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                            &gt;
                                            <call>
                                                <name>and</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>predicate</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>Maps</name>.
                                                                <name>
                                                                    <name/>
                                                                </name>
                                                            </name>
                                                            &lt;<name>V</name>&gt;
                                                            <call>
                                                                <name>valuePredicateOnEntries</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name>equalTo</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>o</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            !=
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>boolean</name>
                </type>
                <name>removeIf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Predicate</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>V</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>valuePredicate</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Iterables</name>.
                                    <name>removeIf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>unfiltered</name>.
                                                    <name>entrySet</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Predicates</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            &lt;
                                            <name>
                                                <name>Entry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                            &gt;
                                            <call>
                                                <name>and</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>predicate</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>Maps</name>.
                                                                <name>
                                                                    <name/>
                                                                </name>
                                                            </name>
                                                            &lt;<name>V</name>&gt;
                                                            <call>
                                                                <name>valuePredicateOnEntries</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>valuePredicate</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>removeAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>collection</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>removeIf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>in</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>collection</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>retainAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>collection</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>removeIf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>not</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>in</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>collection</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>Object</name>
                    <index>[]</index>
                </type>
                <name>toArray</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// creating an ArrayList so filtering happens once</comment>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Lists</name>.
                                    <name>newArrayList</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>iterator</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>toArray</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>T</name>
                    <index>[]</index>
                </type>
                <name>toArray</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>T</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Lists</name>.
                                    <name>newArrayList</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>iterator</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>toArray</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <specifier>private</specifier>
        <specifier>static</specifier> class
        <name>
            <name>FilteredKeyMap</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>AbstractFilteredMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>keyPredicate</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>FilteredKeyMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Map</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>unfiltered</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Predicate</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>K</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>keyPredicate</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Predicate</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>
                                                    <name>Entry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entryPredicate</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>unfiltered</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>entryPredicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>keyPredicate</name>
                            </name>
                            =
                            <name>keyPredicate</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>protected</specifier>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>createEntrySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Sets</name>.
                                    <name>filter</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>unfiltered</name>.
                                                    <name>entrySet</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>predicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>createKeySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Sets</name>.
                                    <name>filter</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>unfiltered</name>.
                                                    <name>keySet</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>keyPredicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// The cast is called only when the key is in the unfiltered map, implying</comment>
            <comment type="line">// that key is a K.</comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("unchecked")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>containsKey</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>unfiltered</name>.
                                    <name>containsKey</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &amp;&amp;
                            <call>
                                <name><name>keyPredicate</name>.
                                    <name>apply</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>K</name>)
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <specifier>static</specifier>
        class
        <name>
            <name>FilteredEntryMap</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>AbstractFilteredMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <comment type="javadoc">/**
                * Entries in this set satisfy the predicate, but they don't validate the
                * input to {@code Entry.setValue()}.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>Set</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>filteredEntrySet</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>FilteredEntryMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Map</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>unfiltered</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Predicate</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>
                                                    <name>Entry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entryPredicate</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>unfiltered</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>entryPredicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>filteredEntrySet</name>
                            =
                            <call>
                                <name><name>Sets</name>.
                                    <name>filter</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>unfiltered</name>.
                                                    <name>entrySet</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>predicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>protected</specifier>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>createEntrySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>EntrySet</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <class>
                <annotation>@
                    <name>WeakOuter</name>
                </annotation>
                <specifier>private</specifier>
                class <name>EntrySet</name>
                <super>
                    <extends>extends
                        <name>
                            <name>ForwardingSet</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </super>
                <block>{
                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>protected</specifier>
                            <name>
                                <name>Set</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>
                                            <name>Entry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>delegate</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>filteredEntrySet</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>
                                <name>Iterator</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>
                                            <name>Entry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>iterator</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>new
                                    <class>
                                        <super>
                                            <name>
                                                <name>TransformedIterator</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>
                                                            <name>Entry</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>K</name>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <name>V</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>
                                                            <name>Entry</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>K</name>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <name>V</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </super>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>filteredEntrySet</name>.
                                                            <name>iterator</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                        <block>{
                                            <function>
                                                <type>
                                                    <annotation>@
                                                        <name>Override</name>
                                                    </annotation>
                                                    <name>
                                                        <name>Entry</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>K</name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>V</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </type>
                                                <name>transform</name>
                                                <parameter_list>(
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <specifier>final</specifier>
                                                                <name>
                                                                    <name>Entry</name>
                                                                    <argument_list>&lt;
                                                                        <argument>
                                                                            <name>K</name>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <name>V</name>
                                                                        </argument>
                                                                        &gt;
                                                                    </argument_list>
                                                                </name>
                                                            </type>
                                                            <name>entry</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                </parameter_list>
                                                <block>{
                                                    <return>return
                                                        <expr>new
                                                            <class>
                                                                <super>
                                                                    <name>
                                                                        <name>ForwardingMapEntry</name>
                                                                        <argument_list>&lt;
                                                                            <argument>
                                                                                <name>K</name>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <name>V</name>
                                                                            </argument>
                                                                            &gt;
                                                                        </argument_list>
                                                                    </name>
                                                                </super>
                                                                <argument_list>()</argument_list>
                                                                <block>{
                                                                    <function>
                                                                        <type>
                                                                            <annotation>@
                                                                                <name>Override</name>
                                                                            </annotation>
                                                                            <specifier>protected</specifier>
                                                                            <name>
                                                                                <name>Entry</name>
                                                                                <argument_list>&lt;
                                                                                    <argument>
                                                                                        <name>K</name>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <name>V</name>
                                                                                    </argument>
                                                                                    &gt;
                                                                                </argument_list>
                                                                            </name>
                                                                        </type>
                                                                        <name>delegate</name>
                                                                        <parameter_list>()</parameter_list>
                                                                        <block>{
                                                                            <return>return
                                                                                <expr>
                                                                                    <name>entry</name>
                                                                                </expr>
                                                                                ;
                                                                            </return>
                                                                            }
                                                                        </block>
                                                                    </function>

                                                                    <function>
                                                                        <type>
                                                                            <annotation>@
                                                                                <name>Override</name>
                                                                            </annotation>
                                                                            <specifier>public</specifier>
                                                                            <name>V</name>
                                                                        </type>
                                                                        <name>setValue</name>
                                                                        <parameter_list>(
                                                                            <param>
                                                                                <decl>
                                                                                    <type>
                                                                                        <name>V</name>
                                                                                    </type>
                                                                                    <name>newValue</name>
                                                                                </decl>
                                                                            </param>
                                                                            )
                                                                        </parameter_list>
                                                                        <block>{
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name>checkArgument</name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <call>
                                                                                                        <name>apply
                                                                                                        </name>
                                                                                                        <argument_list>(
                                                                                                            <argument>
                                                                                                                <expr>
                                                                                                                    <call>
                                                                                                                        <name>
                                                                                                                            getKey
                                                                                                                        </name>
                                                                                                                        <argument_list>
                                                                                                                            ()
                                                                                                                        </argument_list>
                                                                                                                    </call>
                                                                                                                </expr>
                                                                                                            </argument>
                                                                                                            ,
                                                                                                            <argument>
                                                                                                                <expr>
                                                                                                                    <name>
                                                                                                                        newValue
                                                                                                                    </name>
                                                                                                                </expr>
                                                                                                            </argument>
                                                                                                            )
                                                                                                        </argument_list>
                                                                                                    </call>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            <return>return
                                                                                <expr>
                                                                                    <call>
                                                                                        <name><name>super</name>.
                                                                                            <name>setValue</name>
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>newValue
                                                                                                    </name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                                ;
                                                                            </return>
                                                                            }
                                                                        </block>
                                                                    </function>
                                                                    }
                                                                </block>
                                                            </class>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </function>
                                            }
                                        </block>
                                    </class>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>createKeySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>KeySet</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <class>
                <annotation>@
                    <name>WeakOuter</name>
                </annotation>
                class <name>KeySet</name>
                <super>
                    <extends>extends <name>Maps</name>.
                        <name>
                            <name>KeySet</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </super>
                <block>{
                    <constructor>
                        <name>KeySet</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>FilteredEntryMap</name>.
                                                        <name>this</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>remove</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>o</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name>containsKey</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>o</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>unfiltered</name>.
                                                        <name>remove</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>o</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return <expr>true</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return <expr>false</expr>;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>boolean</name>
                        </type>
                        <name>removeIf</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Predicate</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <super>super
                                                        <name>K</name>
                                                    </super>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>keyPredicate</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>Iterables</name>.
                                            <name>removeIf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>unfiltered</name>.
                                                            <name>entrySet</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>Predicates</name>.
                                                        <name>
                                                            <name/>
                                                        </name>
                                                    </name>
                                                    &lt;
                                                    <name>
                                                        <name>Entry</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>K</name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>V</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                    &gt;
                                                    <call>
                                                        <name>and</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>predicate</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name><name>Maps</name>.
                                                                        <name>
                                                                            <name/>
                                                                        </name>
                                                                    </name>
                                                                    &lt;<name>K</name>&gt;
                                                                    <call>
                                                                        <name>keyPredicateOnEntries</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>keyPredicate</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>removeAll</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Collection</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>c</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name>removeIf</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>in</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>c</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>retainAll</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Collection</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>c</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name>removeIf</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>not</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name>in</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>c</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>Object</name>
                            <index>[]</index>
                        </type>
                        <name>toArray</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <comment type="line">// creating an ArrayList so filtering happens once</comment>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>Lists</name>.
                                            <name>newArrayList</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>iterator</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>toArray</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <argument_list>&lt;
                                <argument>
                                    <name>T</name>
                                </argument>
                                &gt;
                            </argument_list>
                            <name>T</name>
                            <index>[]</index>
                        </type>
                        <name>toArray</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>T</name>
                                            <index>[]</index>
                                        </name>
                                    </type>
                                    <name>array</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>Lists</name>.
                                            <name>newArrayList</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>iterator</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>toArray</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>array</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>
            }
        </block>
    </class>

    <comment type="javadoc">/**
        * Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when
        * filtering a filtered sorted map.
        */
    </comment>
    <function>
        <type>
            <specifier>private</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>SortedMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>filterFiltered</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>FilteredEntrySortedMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>map</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>
                                            <name>Entry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entryPredicate</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>predicate</name>
                    =
                    <init>
                        <expr>
                            <call>
                                <name><name>Predicates</name>.
                                    <name>and</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>map</name>.
                                                <name>predicate</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>entryPredicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>FilteredEntrySortedMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>map</name>.
                                            <name>sortedMap</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>predicate</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <class>
        <specifier>private</specifier>
        <specifier>static</specifier> class
        <name>
            <name>FilteredEntrySortedMap</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>FilteredEntryMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>SortedMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{

            <constructor>
                <name>FilteredEntrySortedMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>SortedMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>unfiltered</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Predicate</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>
                                                    <name>Entry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entryPredicate</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>unfiltered</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>entryPredicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <name>
                        <name>SortedMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>sortedMap</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>SortedMap</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            )
                            <name>unfiltered</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>keySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>SortedSet</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            )
                            <call>
                                <name><name>super</name>.
                                    <name>keySet</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>SortedSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>createKeySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>SortedKeySet</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <class>
                <annotation>@
                    <name>WeakOuter</name>
                </annotation>
                class <name>SortedKeySet</name>
                <super>
                    <extends>extends
                        <name>KeySet</name>
                    </extends>
                    <implements>implements
                        <name>
                            <name>SortedSet</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </implements>
                </super>
                <block>{
                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>
                                <name>Comparator</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>?</name>
                                        <super>super
                                            <name>K</name>
                                        </super>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>comparator</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name>sortedMap</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>comparator</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>
                                <name>SortedSet</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>subSet</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>K</name>
                                    </type>
                                    <name>fromElement</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>K</name>
                                    </type>
                                    <name>toElement</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>(
                                    <name>
                                        <name>SortedSet</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    )
                                    <call>
                                        <name>subMap</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fromElement</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>toElement</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>keySet</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>
                                <name>SortedSet</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>headSet</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>K</name>
                                    </type>
                                    <name>toElement</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>(
                                    <name>
                                        <name>SortedSet</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    )
                                    <call>
                                        <name>headMap</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>toElement</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>keySet</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>
                                <name>SortedSet</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>tailSet</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>K</name>
                                    </type>
                                    <name>fromElement</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>(
                                    <name>
                                        <name>SortedSet</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    )
                                    <call>
                                        <name>tailMap</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fromElement</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>keySet</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>K</name>
                        </type>
                        <name>first</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name>firstKey</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>K</name>
                        </type>
                        <name>last</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name>lastKey</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Comparator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                                <super>super
                                    <name>K</name>
                                </super>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>comparator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>sortedMap</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>comparator</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>firstKey</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// correctly throws NoSuchElementException when filtered map is empty.
                    </comment>
                    <return>return
                        <expr>
                            <call>
                                <name>keySet</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>iterator</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>next</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>lastKey</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>SortedMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>headMap</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>sortedMap</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(<expr>true</expr>)
                        </condition>
                        <block>{
                            <comment type="line">// correctly throws NoSuchElementException when filtered map is
                                empty.
                            </comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>K</name>
                                    </type>
                                    <name>key</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>headMap</name>.
                                                    <name>lastKey</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name>apply</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>key</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>unfiltered</name>.
                                                                <name>get</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>key</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>key</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>headMap</name>
                                    =
                                    <call>
                                        <name>sortedMap</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>headMap</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>key</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>headMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toKey</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>FilteredEntrySortedMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>sortedMap</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>headMap</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>toKey</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>predicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>subMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toKey</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>FilteredEntrySortedMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>sortedMap</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>subMap</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>fromKey</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>toKey</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>predicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>tailMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromKey</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>FilteredEntrySortedMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>sortedMap</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>tailMap</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>fromKey</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>predicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <comment type="javadoc">/**
        * Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when
        * filtering a filtered navigable map.
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>GwtIncompatible</name>
                <argument_list>("NavigableMap")</argument_list>
            </annotation>
            <specifier>private</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>NavigableMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>filterFiltered</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>FilteredEntryNavigableMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>map</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>
                                            <name>Entry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entryPredicate</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>predicate</name>
                    =
                    <init>
                        <expr>
                            <call>
                                <name><name>Predicates</name>.
                                    <name>and</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>map</name>.
                                                <name>entryPredicate</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>entryPredicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>FilteredEntryNavigableMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name><name>map</name>.
                                        <name>unfiltered</name>
                                    </name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>predicate</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <class>
        <annotation>@
            <name>GwtIncompatible</name>
            <argument_list>("NavigableMap")</argument_list>
        </annotation>
        <specifier>private</specifier>
        <specifier>static</specifier> class
        <name>
            <name>FilteredEntryNavigableMap</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>AbstractNavigableMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <comment type="block">/*
                * It's less code to extend AbstractNavigableMap and forward the filtering logic to
                * FilteredEntryMap than to extend FilteredEntrySortedMap and reimplement all the NavigableMap
                * methods.
                */
            </comment>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>NavigableMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>unfiltered</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>
                                            <name>Entry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entryPredicate</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>filteredDelegate</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>FilteredEntryNavigableMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>NavigableMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>unfiltered</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Predicate</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>
                                                    <name>Entry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>entryPredicate</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>unfiltered</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>unfiltered</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>entryPredicate</name>
                            </name>
                            =
                            <name>entryPredicate</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>filteredDelegate</name>
                            </name>
                            = new
                            <call>
                                <name>
                                    <name>FilteredEntryMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>unfiltered</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>entryPredicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Comparator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                                <super>super
                                    <name>K</name>
                                </super>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>comparator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>unfiltered</name>.
                                    <name>comparator</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>navigableKeySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <class>
                                <super>
                                    <name><name>Maps</name>.
                                        <name>
                                            <name>NavigableKeySet</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </name>
                                </super>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>boolean</name>
                                        </type>
                                        <name>removeAll</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>
                                                            <name>Collection</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>?</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                    </type>
                                                    <name>c</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>Iterators</name>.
                                                            <name>removeIf</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>unfiltered</name>.
                                                                            <name>entrySet</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                    .
                                                                    <call>
                                                                        <name>iterator</name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name><name>Predicates</name>.
                                                                        <name>
                                                                            <name/>
                                                                        </name>
                                                                    </name>
                                                                    &lt;
                                                                    <name>
                                                                        <name>Entry</name>
                                                                        <argument_list>&lt;
                                                                            <argument>
                                                                                <name>K</name>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <name>V</name>
                                                                            </argument>
                                                                            &gt;
                                                                        </argument_list>
                                                                    </name>
                                                                    &gt;
                                                                    <call>
                                                                        <name>and</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>entryPredicate</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>Maps</name>.
                                                                                        <name>
                                                                                            <name/>
                                                                                        </name>
                                                                                    </name>
                                                                                    &lt;<name>K</name>&gt;
                                                                                    <call>
                                                                                        <name>keyPredicateOnEntries
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <call>
                                                                                                        <name>in</name>
                                                                                                        <argument_list>(
                                                                                                            <argument>
                                                                                                                <expr>
                                                                                                                    <name>
                                                                                                                        c
                                                                                                                    </name>
                                                                                                                </expr>
                                                                                                            </argument>
                                                                                                            )
                                                                                                        </argument_list>
                                                                                                    </call>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>

                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>boolean</name>
                                        </type>
                                        <name>retainAll</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>
                                                            <name>Collection</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>?</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                    </type>
                                                    <name>c</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>Iterators</name>.
                                                            <name>removeIf</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>unfiltered</name>.
                                                                            <name>entrySet</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                    .
                                                                    <call>
                                                                        <name>iterator</name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name><name>Predicates</name>.
                                                                        <name>
                                                                            <name/>
                                                                        </name>
                                                                    </name>
                                                                    &lt;
                                                                    <name>
                                                                        <name>Entry</name>
                                                                        <argument_list>&lt;
                                                                            <argument>
                                                                                <name>K</name>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <name>V</name>
                                                                            </argument>
                                                                            &gt;
                                                                        </argument_list>
                                                                    </name>
                                                                    &gt;
                                                                    <call>
                                                                        <name>and</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>entryPredicate</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name><name>Maps</name>.
                                                                                        <name>
                                                                                            <name/>
                                                                                        </name>
                                                                                    </name>
                                                                                    &lt;<name>K</name>&gt;
                                                                                    <call>
                                                                                        <name>keyPredicateOnEntries
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <call>
                                                                                                        <name>not</name>
                                                                                                        <argument_list>(
                                                                                                            <argument>
                                                                                                                <expr>
                                                                                                                    <call>
                                                                                                                        <name>
                                                                                                                            in
                                                                                                                        </name>
                                                                                                                        <argument_list>
                                                                                                                            (
                                                                                                                            <argument>
                                                                                                                                <expr>
                                                                                                                                    <name>
                                                                                                                                        c
                                                                                                                                    </name>
                                                                                                                                </expr>
                                                                                                                            </argument>
                                                                                                                            )
                                                                                                                        </argument_list>
                                                                                                                    </call>
                                                                                                                </expr>
                                                                                                            </argument>
                                                                                                            )
                                                                                                        </argument_list>
                                                                                                    </call>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Collection</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>values</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>FilteredMapValues</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>unfiltered</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>entryPredicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>Iterator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>entryIterator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Iterators</name>.
                                    <name>filter</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>unfiltered</name>.
                                                    <name>entrySet</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>iterator</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>entryPredicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>Iterator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>descendingEntryIterator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Iterators</name>.
                                    <name>filter</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>unfiltered</name>.
                                                    <name>descendingMap</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>entrySet</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>iterator</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>entryPredicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>size</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>filteredDelegate</name>.
                                    <name>size</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>!
                            <call>
                                <name><name>Iterables</name>.
                                    <name>any</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>unfiltered</name>.
                                                    <name>entrySet</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>entryPredicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <annotation>@
                        <name>Nullable</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>V</name>
                </type>
                <name>get</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>filteredDelegate</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>containsKey</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>filteredDelegate</name>.
                                    <name>containsKey</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>V</name>
                </type>
                <name>put</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>filteredDelegate</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>V</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>filteredDelegate</name>.
                                    <name>remove</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>putAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Map</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>K</name>
                                            </extends>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>m</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>filteredDelegate</name>.
                                    <name>putAll</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>m</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>filteredDelegate</name>.
                                    <name>clear</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>entrySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>filteredDelegate</name>.
                                    <name>entrySet</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>pollFirstEntry</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Iterables</name>.
                                    <name>removeFirstMatching</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>unfiltered</name>.
                                                    <name>entrySet</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>entryPredicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>pollLastEntry</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Iterables</name>.
                                    <name>removeFirstMatching</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>unfiltered</name>.
                                                    <name>descendingMap</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>entrySet</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>entryPredicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>descendingMap</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>filterEntries</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>unfiltered</name>.
                                                    <name>descendingMap</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>entryPredicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>subMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>fromInclusive</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>toInclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>filterEntries</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>unfiltered</name>.
                                                    <name>subMap</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>fromKey</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>fromInclusive</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>toKey</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>toInclusive</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>entryPredicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>headMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>inclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>filterEntries</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>unfiltered</name>.
                                                    <name>headMap</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>toKey</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>inclusive</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>entryPredicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>tailMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>inclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>filterEntries</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>unfiltered</name>.
                                                    <name>tailMap</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>fromKey</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>inclusive</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>entryPredicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <comment type="javadoc">/**
        * Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when
        * filtering a filtered map.
        */
    </comment>
    <function>
        <type>
            <specifier>private</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>BiMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>filterFiltered</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>FilteredEntryBiMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>map</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>
                                            <name>Entry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>K</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entryPredicate</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>Predicate</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>predicate</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Predicates</name>.
                                    <name>and</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>map</name>.
                                                <name>predicate</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>entryPredicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>FilteredEntryBiMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>map</name>.
                                            <name>unfiltered</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>predicate</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <class>
        <specifier>static</specifier>
        <specifier>final</specifier> class
        <name>
            <name>FilteredEntryBiMap</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>FilteredEntryMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>BiMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>BiMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                ,
                                <argument>
                                    <name>K</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>inverse</name>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Predicate</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>inversePredicate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>
                                    <name>Predicate</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>
                                                    <name>Entry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>forwardPredicate</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <class>
                                <super>
                                    <name>
                                        <name>Predicate</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>
                                                    <name>Entry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </super>
                                <argument_list>()</argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>boolean</name>
                                        </type>
                                        <name>apply</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>
                                                            <name>Entry</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>V</name>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <name>K</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                    </type>
                                                    <name>input</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>forwardPredicate</name>.
                                                            <name>apply</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>Maps</name>.
                                                                            <name>immutableEntry</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name><name>input</name>.
                                                                                            <name>getValue</name>
                                                                                        </name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name><name>input</name>.
                                                                                            <name>getKey</name>
                                                                                        </name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <constructor>
                <name>FilteredEntryBiMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>BiMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>delegate</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Predicate</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>
                                                    <name>Entry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>predicate</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>delegate</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>predicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>inverse</name>
                            </name>
                            = new
                            <call>
                                <name>
                                    <name>FilteredEntryBiMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>delegate</name>.
                                                    <name>inverse</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>inversePredicate</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>predicate</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <constructor>
                <specifier>private</specifier>
                <name>FilteredEntryBiMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>BiMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>delegate</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Predicate</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>
                                                    <name>Entry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>predicate</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>BiMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>inverse</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>delegate</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>predicate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>inverse</name>
                            </name>
                            =
                            <name>inverse</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <name>
                        <name>BiMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>unfiltered</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>BiMap</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            )
                            <name>unfiltered</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>V</name>
                </type>
                <name>forcePut</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>V</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>apply</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>value</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>unfiltered</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>forcePut</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>BiMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            ,
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>inverse</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>inverse</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>values</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>inverse</name>.
                                    <name>keySet</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <comment type="javadoc">/**
        * Returns an unmodifiable view of the specified navigable map. Query operations on the returned
        * map read through to the specified map, and attempts to modify the returned map, whether direct
        * or via its views, result in an {@code UnsupportedOperationException}.
        *
        * &lt;p&gt;The returned navigable map will be serializable if the specified navigable map is
        * serializable.
        *
        * @param map the navigable map for which an unmodifiable view is to be returned
        * @return an unmodifiable view of the specified navigable map
        * @since 12.0
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>GwtIncompatible</name>
                <argument_list>("NavigableMap")</argument_list>
            </annotation>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>NavigableMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>unmodifiableNavigableMap</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>NavigableMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>map</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>map</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <if>if
                <condition>(
                    <expr>
                        <name>map</name>
                        <name>instanceof</name>
                        <name>UnmodifiableNavigableMap</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <name>map</name>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
                <else>else
                    <block>{
                        <return>return
                            <expr>new
                                <call>
                                    <name>
                                        <name>UnmodifiableNavigableMap</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>map</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </else>
            </if>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Nullable</name>
            </annotation>
            <specifier>private</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>Entry</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>unmodifiableOrNull</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>
                            <name>Entry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entry</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>(<name>entry</name> == <name>null</name>) ? <name>null</name> :
                    <call>
                        <name><name>Maps</name>.
                            <name>unmodifiableEntry</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>entry</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <class>
        <annotation>@
            <name>GwtIncompatible</name>
            <argument_list>("NavigableMap")</argument_list>
        </annotation>
        <specifier>static</specifier>
        class
        <name>
            <name>UnmodifiableNavigableMap</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>ForwardingSortedMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>NavigableMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                ,
                <name>Serializable</name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>NavigableMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>delegate</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>UnmodifiableNavigableMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>NavigableMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>delegate</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>delegate</name>
                            </name>
                            =
                            <name>delegate</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <constructor>
                <name>UnmodifiableNavigableMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>NavigableMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>delegate</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>UnmodifiableNavigableMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>descendingMap</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>delegate</name>
                            </name>
                            =
                            <name>delegate</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>descendingMap</name>
                            </name>
                            =
                            <name>descendingMap</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>protected</specifier>
                    <name>
                        <name>SortedMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>delegate</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Collections</name>.
                                    <name>unmodifiableSortedMap</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>delegate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>lowerEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>unmodifiableOrNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>delegate</name>.
                                                    <name>lowerEntry</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>lowerKey</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>delegate</name>.
                                    <name>lowerKey</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>floorEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>unmodifiableOrNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>delegate</name>.
                                                    <name>floorEntry</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>floorKey</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>delegate</name>.
                                    <name>floorKey</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>ceilingEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>unmodifiableOrNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>delegate</name>.
                                                    <name>ceilingEntry</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>ceilingKey</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>delegate</name>.
                                    <name>ceilingKey</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>higherEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>unmodifiableOrNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>delegate</name>.
                                                    <name>higherEntry</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>higherKey</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>delegate</name>.
                                    <name>higherKey</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>firstEntry</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>unmodifiableOrNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>delegate</name>.
                                                    <name>firstEntry</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>lastEntry</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>unmodifiableOrNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>delegate</name>.
                                                    <name>lastEntry</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>pollFirstEntry</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>pollLastEntry</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <throw>throw
                        <expr>new
                            <call>
                                <name>UnsupportedOperationException</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>transient</name>
                        <name>
                            <name>UnmodifiableNavigableMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>descendingMap</name>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>descendingMap</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>UnmodifiableNavigableMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <name>descendingMap</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>(<name>result</name> == <name>null</name>)
                            ? <name>descendingMap</name> = new
                            <call>
                                <name>
                                    <name>UnmodifiableNavigableMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>delegate</name>.
                                                    <name>descendingMap</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            :
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>keySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>navigableKeySet</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>navigableKeySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Sets</name>.
                                    <name>unmodifiableNavigableSet</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>delegate</name>.
                                                    <name>navigableKeySet</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>descendingKeySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Sets</name>.
                                    <name>unmodifiableNavigableSet</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>delegate</name>.
                                                    <name>descendingKeySet</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>subMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toKey</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>subMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fromKey</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>toKey</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>headMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toKey</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>headMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>toKey</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>tailMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromKey</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>tailMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fromKey</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>subMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>fromInclusive</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>toInclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Maps</name>.
                                    <name>unmodifiableNavigableMap</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>delegate</name>.
                                                    <name>subMap</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>fromKey</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>fromInclusive</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>toKey</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>toInclusive</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>headMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>inclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Maps</name>.
                                    <name>unmodifiableNavigableMap</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>delegate</name>.
                                                    <name>headMap</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>toKey</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>inclusive</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>tailMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>inclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Maps</name>.
                                    <name>unmodifiableNavigableMap</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>delegate</name>.
                                                    <name>tailMap</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>fromKey</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>inclusive</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <comment type="javadoc">/**
        * Returns a synchronized (thread-safe) navigable map backed by the specified
        * navigable map. In order to guarantee serial access, it is critical that
        * &lt;b&gt;all&lt;/b&gt; access to the backing navigable map is accomplished
        * through the returned navigable map (or its views).
        *
        * &lt;p&gt;It is imperative that the user manually synchronize on the returned
        * navigable map when iterating over any of its collection views, or the
        * collections views of any of its {@code descendingMap}, {@code subMap},
        * {@code headMap} or {@code tailMap} views. &lt;pre&gt; {@code
        *
        * NavigableMap&lt;K, V&gt; map = synchronizedNavigableMap(new TreeMap&lt;K, V&gt;());
        *
        * // Needn't be in synchronized block
        * NavigableSet&lt;K&gt; set = map.navigableKeySet();
        *
        * synchronized (map) { // Synchronizing on map, not set!
        * Iterator&lt;K&gt; it = set.iterator(); // Must be in synchronized block
        * while (it.hasNext()) {
        * foo(it.next());
        * }
        * }}&lt;/pre&gt;
        *
        * &lt;p&gt;or: &lt;pre&gt; {@code
        *
        * NavigableMap&lt;K, V&gt; map = synchronizedNavigableMap(new TreeMap&lt;K, V&gt;());
        * NavigableMap&lt;K, V&gt; map2 = map.subMap(foo, false, bar, true);
        *
        * // Needn't be in synchronized block
        * NavigableSet&lt;K&gt; set2 = map2.descendingKeySet();
        *
        * synchronized (map) { // Synchronizing on map, not map2 or set2!
        * Iterator&lt;K&gt; it = set2.iterator(); // Must be in synchronized block
        * while (it.hasNext()) {
        * foo(it.next());
        * }
        * }}&lt;/pre&gt;
        *
        * &lt;p&gt;Failure to follow this advice may result in non-deterministic behavior.
        *
        * &lt;p&gt;The returned navigable map will be serializable if the specified
        * navigable map is serializable.
        *
        * @param navigableMap the navigable map to be "wrapped" in a synchronized
        * navigable map.
        * @return a synchronized view of the specified navigable map.
        * @since 13.0
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>GwtIncompatible</name>
                <argument_list>("NavigableMap")</argument_list>
            </annotation>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>NavigableMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>K</name>
                    </argument>
                    ,
                    <argument>
                        <name>V</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>synchronizedNavigableMap</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>NavigableMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>navigableMap</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>Synchronized</name>.
                            <name>navigableMap</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>navigableMap</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * {@code AbstractMap} extension that makes it easy to cache customized keySet, values,
        * and entrySet views.
        */
    </comment>
    <class>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>abstract</specifier>
        <specifier>static</specifier> class
        <name>
            <name>ViewCachingAbstractMap</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>AbstractMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <comment type="javadoc">/**
                * Creates the entry set to be returned by {@link #entrySet()}. This method
                * is invoked at most once on a given map, at the time when {@code entrySet}
                * is first called.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>abstract</specifier>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>createEntrySet</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>transient</name>
                        <name>
                            <name>Set</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entrySet</name>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>entrySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Set</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>Entry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <name>entrySet</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>(<name>result</name> == <name>null</name>) ? <name>entrySet</name> =
                            <call>
                                <name>createEntrySet</name>
                                <argument_list>()</argument_list>
                            </call>
                            :
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>transient</name>
                        <name>
                            <name>Set</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>keySet</name>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>keySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Set</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <name>keySet</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>(<name>result</name> == <name>null</name>) ? <name>keySet</name> =
                            <call>
                                <name>createKeySet</name>
                                <argument_list>()</argument_list>
                            </call>
                            :
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>createKeySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>KeySet</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>transient</name>
                        <name>
                            <name>Collection</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>values</name>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Collection</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>values</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <name>values</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>(<name>result</name> == <name>null</name>) ? <name>values</name> =
                            <call>
                                <name>createValues</name>
                                <argument_list>()</argument_list>
                            </call>
                            :
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>
                        <name>Collection</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>createValues</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>Values</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <specifier>abstract</specifier>
        <specifier>static</specifier> class
        <name>
            <name>IteratorBasedAbstractMap</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>AbstractMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>int</name>
                </type>
                <name>size</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <function_decl>
                <type>
                    <specifier>abstract</specifier>
                    <name>
                        <name>Iterator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>entryIterator</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>entrySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <class>
                                <super>
                                    <name>
                                        <name>EntrySet</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </super>
                                <argument_list>()</argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <name>
                                                <name>Map</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>map</name>
                                        <parameter_list>()</parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name><name>IteratorBasedAbstractMap</name>.
                                                        <name>this</name>
                                                    </name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>

                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>
                                                <name>Iterator</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>
                                                            <name>Entry</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>K</name>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <name>V</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>iterator</name>
                                        <parameter_list>()</parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name>entryIterator</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>Iterators</name>.
                                    <name>clear</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>entryIterator</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <comment type="javadoc">/**
        * Delegates to {@link Map#get}. Returns {@code null} on {@code
        * ClassCastException} and {@code NullPointerException}.
        */
    </comment>
    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>V</name>
        </type>
        <name>safeGet</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>map</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>Object</name>
                    </type>
                    <name>key</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>map</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <try>try
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>map</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
                <catch>catch (
                    <param>
                        <decl>
                            <type>
                                <name>ClassCastException</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                    <block>{
                        <return>return
                            <expr>
                                <name>null</name>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </catch>
                <catch>catch (
                    <param>
                        <decl>
                            <type>
                                <name>NullPointerException</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                    <block>{
                        <return>return
                            <expr>
                                <name>null</name>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </catch>
            </try>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Delegates to {@link Map#containsKey}. Returns {@code false} on {@code
        * ClassCastException} and {@code NullPointerException}.
        */
    </comment>
    <function>
        <type>
            <specifier>static</specifier>
            <name>boolean</name>
        </type>
        <name>safeContainsKey</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>map</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>Object</name>
                    </type>
                    <name>key</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>map</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <try>try
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>map</name>.
                                    <name>containsKey</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
                <catch>catch (
                    <param>
                        <decl>
                            <type>
                                <name>ClassCastException</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                    <block>{
                        <return>return <expr>false</expr>;
                        </return>
                        }
                    </block>
                </catch>
                <catch>catch (
                    <param>
                        <decl>
                            <type>
                                <name>NullPointerException</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                    <block>{
                        <return>return <expr>false</expr>;
                        </return>
                        }
                    </block>
                </catch>
            </try>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Delegates to {@link Map#remove}. Returns {@code null} on {@code
        * ClassCastException} and {@code NullPointerException}.
        */
    </comment>
    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>V</name>
        </type>
        <name>safeRemove</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>map</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>Object</name>
                    </type>
                    <name>key</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>map</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <try>try
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>map</name>.
                                    <name>remove</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
                <catch>catch (
                    <param>
                        <decl>
                            <type>
                                <name>ClassCastException</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                    <block>{
                        <return>return
                            <expr>
                                <name>null</name>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </catch>
                <catch>catch (
                    <param>
                        <decl>
                            <type>
                                <name>NullPointerException</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                    <block>{
                        <return>return
                            <expr>
                                <name>null</name>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </catch>
            </try>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * An admittedly inefficient implementation of {@link Map#containsKey}.
        */
    </comment>
    <function>
        <type>
            <specifier>static</specifier>
            <name>boolean</name>
        </type>
        <name>containsKeyImpl</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>map</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>Object</name>
                    </type>
                    <name>key</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>Iterators</name>.
                            <name>contains</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>keyIterator</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>map</name>.
                                                            <name>entrySet</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    .
                                                    <call>
                                                        <name>iterator</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>key</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * An implementation of {@link Map#containsValue}.
        */
    </comment>
    <function>
        <type>
            <specifier>static</specifier>
            <name>boolean</name>
        </type>
        <name>containsValueImpl</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>map</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>Object</name>
                    </type>
                    <name>value</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>Iterators</name>.
                            <name>contains</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>valueIterator</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>map</name>.
                                                            <name>entrySet</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    .
                                                    <call>
                                                        <name>iterator</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>value</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Implements {@code Collection.contains} safely for forwarding collections of
        * map entries. If {@code o} is an instance of {@code Map.Entry}, it is
        * wrapped using {@link #unmodifiableEntry} to protect against a possible
        * nefarious equals method.
        *
        * &lt;p&gt;Note that {@code c} is the backing (delegate) collection, rather than
        * the forwarding collection.
        *
        * @param c the delegate (unwrapped) collection of map entries
        * @param o the object that might be contained in {@code c}
        * @return {@code true} if {@code c} contains {@code o}
        */
    </comment>
    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>boolean</name>
        </type>
        <name>containsEntryImpl</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Collection</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>c</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>Object</name>
                    </type>
                    <name>o</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>!(<name>o</name>
                        <name>instanceof</name>
                        <name>Entry</name>)
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return <expr>false</expr>;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <return>return
                <expr>
                    <call>
                        <name><name>c</name>.
                            <name>contains</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>unmodifiableEntry</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>(
                                                    <name>
                                                        <name>Entry</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>?</name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>?</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                    )
                                                    <name>o</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Implements {@code Collection.remove} safely for forwarding collections of
        * map entries. If {@code o} is an instance of {@code Map.Entry}, it is
        * wrapped using {@link #unmodifiableEntry} to protect against a possible
        * nefarious equals method.
        *
        * &lt;p&gt;Note that {@code c} is backing (delegate) collection, rather than the
        * forwarding collection.
        *
        * @param c the delegate (unwrapped) collection of map entries
        * @param o the object to remove from {@code c}
        * @return {@code true} if {@code c} was changed
        */
    </comment>
    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>boolean</name>
        </type>
        <name>removeEntryImpl</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Collection</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>c</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>Object</name>
                    </type>
                    <name>o</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>!(<name>o</name>
                        <name>instanceof</name>
                        <name>Entry</name>)
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return <expr>false</expr>;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <return>return
                <expr>
                    <call>
                        <name><name>c</name>.
                            <name>remove</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>unmodifiableEntry</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>(
                                                    <name>
                                                        <name>Entry</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>?</name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>?</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                    )
                                                    <name>o</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * An implementation of {@link Map#equals}.
        */
    </comment>
    <function>
        <type>
            <specifier>static</specifier>
            <name>boolean</name>
        </type>
        <name>equalsImpl</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>map</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>Object</name>
                    </type>
                    <name>object</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>
                        <name>map</name>
                        ==
                        <name>object</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return <expr>true</expr>;
                        </return>
                        }
                    </block>
                </then>
                <else>else
                    <if>if
                        <condition>(
                            <expr>
                                <name>object</name>
                                <name>instanceof</name>
                                <name>Map</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>Map</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>?</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>?</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>o</name> =
                                        <init>
                                            <expr>(
                                                <name>
                                                    <name>Map</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                )
                                                <name>object</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>map</name>.
                                                <name>entrySet</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>equals</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>o</name>.
                                                                <name>entrySet</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                </else>
            </if>
            <return>return <expr>false</expr>;
            </return>
            }
        </block>
    </function>

    <decl_stmt>
        <decl>
            <type>
                <specifier>static</specifier>
                <specifier>final</specifier>
                <name>MapJoiner</name>
            </type>
            <name>STANDARD_JOINER</name> =
            <init>
                <expr>
                    <call>
                        <name><name>Collections2</name>.<name>STANDARD_JOINER</name>.
                            <name>withKeyValueSeparator</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>"="</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>

    <comment type="javadoc">/**
        * An implementation of {@link Map#toString}.
        */
    </comment>
    <function>
        <type>
            <specifier>static</specifier>
            <name>String</name>
        </type>
        <name>toStringImpl</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>map</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>StringBuilder</name>
                    </type>
                    <name>sb</name>
                    =
                    <init>
                        <expr>
                            <call>
                                <name><name>Collections2</name>.
                                    <name>newStringBuilderForCollection</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>map</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>append</name>
                                <argument_list>(
                                    <argument>
                                        <expr>'{'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>STANDARD_JOINER</name>.
                            <name>appendTo</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>sb</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>map</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>
                    <call>
                        <name><name>sb</name>.
                            <name>append</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>'}'</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    .
                    <call>
                        <name>toString</name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * An implementation of {@link Map#putAll}.
        */
    </comment>
    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>void</name>
        </type>
        <name>putAllImpl</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>self</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>K</name>
                                    </extends>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>V</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>map</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <for>for (
                <init>
                    <decl>
                        <type>
                            <name><name>Map</name>.
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>K</name>
                                            </extends>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </name>
                        </type>
                        <name>entry</name> :
                        <range>
                            <expr>
                                <call>
                                    <name><name>map</name>.
                                        <name>entrySet</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </range>
                    </decl>
                </init>
                )
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>self</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>entry</name>.
                                                    <name>getKey</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>entry</name>.
                                                    <name>getValue</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </for>
            }
        </block>
    </function>

    <class>
        <specifier>static</specifier>
        class
        <name>
            <name>KeySet</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends <name>Sets</name>.
                <name>
                    <name>ImprovedAbstractSet</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>Weak</name>
                        </annotation>
                        <specifier>final</specifier>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>map</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>KeySet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Map</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>map</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>map</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>map</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <name>
                        <name>Map</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>map</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>map</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Iterator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>iterator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>keyIterator</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>map</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>entrySet</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>iterator</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>size</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>map</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>size</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>map</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>isEmpty</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>o</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>map</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>containsKey</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>o</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>o</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>contains</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>o</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>map</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>remove</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>o</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>map</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>clear</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <function>
        <type>
            <annotation>@
                <name>Nullable</name>
            </annotation>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                &gt;
            </argument_list>
            <name>K</name>
        </type>
        <name>keyOrNull</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>
                            <name>Entry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>?</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entry</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>(<name>entry</name> == <name>null</name>) ? <name>null</name> :
                    <call>
                        <name><name>entry</name>.
                            <name>getKey</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Nullable</name>
            </annotation>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
            <name>V</name>
        </type>
        <name>valueOrNull</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>
                            <name>Entry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entry</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>(<name>entry</name> == <name>null</name>) ? <name>null</name> :
                    <call>
                        <name><name>entry</name>.
                            <name>getValue</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <class>
        <specifier>static</specifier>
        class
        <name>
            <name>SortedKeySet</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>KeySet</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>SortedSet</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <constructor>
                <name>SortedKeySet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>SortedMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>map</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>map</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>SortedMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>map</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>SortedMap</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            )
                            <call>
                                <name><name>super</name>.
                                    <name>map</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Comparator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                                <super>super
                                    <name>K</name>
                                </super>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>comparator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>map</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>comparator</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>subSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromElement</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toElement</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>SortedKeySet</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>map</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>subMap</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>fromElement</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>toElement</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>headSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toElement</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>SortedKeySet</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>map</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>headMap</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>toElement</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>tailSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromElement</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>SortedKeySet</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>map</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>tailMap</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>fromElement</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>first</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>map</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>firstKey</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>last</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>map</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>lastKey</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <annotation>@
            <name>GwtIncompatible</name>
            <argument_list>("NavigableMap")</argument_list>
        </annotation>
        <specifier>static</specifier>
        class
        <name>
            <name>NavigableKeySet</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>SortedKeySet</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>NavigableSet</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <constructor>
                <name>NavigableKeySet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>NavigableMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>map</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>map</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>map</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>NavigableMap</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            )
                            <name>map</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>lower</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>map</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>lowerKey</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>e</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>floor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>map</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>floorKey</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>e</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>ceiling</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>map</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>ceilingKey</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>e</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>higher</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>map</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>higherKey</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>e</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>pollFirst</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>keyOrNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>map</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>pollFirstEntry</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>pollLast</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>keyOrNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>map</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>pollLastEntry</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>descendingSet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>map</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>descendingKeySet</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Iterator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>descendingIterator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>descendingSet</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>iterator</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>subSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromElement</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>fromInclusive</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toElement</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>toInclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>map</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>subMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fromElement</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fromInclusive</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>toElement</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>toInclusive</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>navigableKeySet</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>headSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toElement</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>inclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>map</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>headMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>toElement</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>inclusive</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>navigableKeySet</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>tailSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromElement</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>inclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>map</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>tailMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fromElement</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>inclusive</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>navigableKeySet</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>subSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromElement</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toElement</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>subSet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fromElement</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>toElement</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>headSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toElement</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>headSet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>toElement</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>tailSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromElement</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>tailSet</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fromElement</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <specifier>static</specifier>
        class
        <name>
            <name>Values</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>AbstractCollection</name>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>Weak</name>
                        </annotation>
                        <specifier>final</specifier>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>map</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>Values</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Map</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>map</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>map</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>map</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <specifier>final</specifier>
                    <name>
                        <name>Map</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>map</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>map</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Iterator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>iterator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>valueIterator</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>map</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>entrySet</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>iterator</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>o</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <try>try
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>super</name>.
                                            <name>remove</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>o</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>UnsupportedOperationException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>Entry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>entry</name> :
                                            <range>
                                                <expr>
                                                    <call>
                                                        <name>map</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    .
                                                    <call>
                                                        <name>entrySet</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </range>
                                        </decl>
                                    </init>
                                    )
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>Objects</name>.
                                                            <name>equal</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>o</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>entry</name>.
                                                                            <name>getValue</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name>map</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                            .
                                                            <call>
                                                                <name>remove</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>entry</name>.
                                                                                    <name>getKey</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <return>return <expr>true</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>removeAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <try>try
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>super</name>.
                                            <name>removeAll</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>checkNotNull</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>c</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>UnsupportedOperationException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>Set</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>toRemove</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>Sets</name>.
                                                        <name>newHashSet</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>Entry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>entry</name> :
                                            <range>
                                                <expr>
                                                    <call>
                                                        <name>map</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    .
                                                    <call>
                                                        <name>entrySet</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </range>
                                        </decl>
                                    </init>
                                    )
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>c</name>.
                                                            <name>contains</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>entry</name>.
                                                                            <name>getValue</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>toRemove</name>.
                                                                    <name>add</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>entry</name>.
                                                                                    <name>getKey</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                <return>return
                                    <expr>
                                        <call>
                                            <name>map</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>keySet</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>removeAll</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>toRemove</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>retainAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <try>try
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>super</name>.
                                            <name>retainAll</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>checkNotNull</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>c</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>UnsupportedOperationException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>Set</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>toRetain</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>Sets</name>.
                                                        <name>newHashSet</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>Entry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>entry</name> :
                                            <range>
                                                <expr>
                                                    <call>
                                                        <name>map</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    .
                                                    <call>
                                                        <name>entrySet</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </range>
                                        </decl>
                                    </init>
                                    )
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>c</name>.
                                                            <name>contains</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>entry</name>.
                                                                            <name>getValue</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>toRetain</name>.
                                                                    <name>add</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>entry</name>.
                                                                                    <name>getKey</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                <return>return
                                    <expr>
                                        <call>
                                            <name>map</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>keySet</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>retainAll</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>toRetain</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>size</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>map</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>size</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>map</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>isEmpty</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>o</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>map</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>containsValue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>o</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>map</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>clear</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <specifier>abstract</specifier>
        <specifier>static</specifier> class
        <name>
            <name>EntrySet</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends <name>Sets</name>.
                <name>
                    <name>ImprovedAbstractSet</name>
                    <argument_list>&lt;
                        <argument>
                            <name>
                                <name>Entry</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>K</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <function_decl>
                <type>
                    <specifier>abstract</specifier>
                    <name>
                        <name>Map</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>map</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>size</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>map</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>size</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>map</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>clear</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>o</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>o</name>
                                <name>instanceof</name>
                                <name>Entry</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>Entry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>?</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>?</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>entry</name> =
                                        <init>
                                            <expr>(
                                                <name>
                                                    <name>Entry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                )
                                                <name>o</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>Object</name>
                                        </type>
                                        <name>key</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>entry</name>.
                                                        <name>getKey</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>V</name>
                                        </type>
                                        <name>value</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>Maps</name>.
                                                        <name>safeGet</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name>map</name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>key</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>Objects</name>.
                                                <name>equal</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>value</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>entry</name>.
                                                                <name>getValue</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &amp;&amp; (<name>value</name> != <name>null</name> ||
                                        <call>
                                            <name>map</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>containsKey</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>key</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        )
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>map</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>isEmpty</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>o</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>contains</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>o</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>Entry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>?</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>?</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>entry</name> =
                                        <init>
                                            <expr>(
                                                <name>
                                                    <name>Entry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                )
                                                <name>o</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name>map</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>keySet</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>remove</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>entry</name>.
                                                                <name>getKey</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>removeAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <try>try
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>super</name>.
                                            <name>removeAll</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>checkNotNull</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>c</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>UnsupportedOperationException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// if the iterators don't support remove</comment>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>Sets</name>.
                                                <name>removeAllImpl</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>this</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>c</name>.
                                                                <name>iterator</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>retainAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <try>try
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>super</name>.
                                            <name>retainAll</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>checkNotNull</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>c</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>UnsupportedOperationException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// if the iterators don't support remove</comment>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>Set</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>Object</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>keys</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>Sets</name>.
                                                        <name>newHashSetWithExpectedSize</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>c</name>.
                                                                        <name>size</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>Object</name>
                                            </type>
                                            <name>o</name> :
                                            <range>
                                                <expr>
                                                    <name>c</name>
                                                </expr>
                                            </range>
                                        </decl>
                                    </init>
                                    )
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name>contains</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>o</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <decl_stmt>
                                                        <decl>
                                                            <type>
                                                                <name>
                                                                    <name>Entry</name>
                                                                    <argument_list>&lt;
                                                                        <argument>
                                                                            <name>?</name>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <name>?</name>
                                                                        </argument>
                                                                        &gt;
                                                                    </argument_list>
                                                                </name>
                                                            </type>
                                                            <name>entry</name> =
                                                            <init>
                                                                <expr>(
                                                                    <name>
                                                                        <name>Entry</name>
                                                                        <argument_list>&lt;
                                                                            <argument>
                                                                                <name>?</name>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <name>?</name>
                                                                            </argument>
                                                                            &gt;
                                                                        </argument_list>
                                                                    </name>
                                                                    )
                                                                    <name>o</name>
                                                                </expr>
                                                            </init>
                                                        </decl>
                                                        ;
                                                    </decl_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>keys</name>.
                                                                    <name>add</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>entry</name>.
                                                                                    <name>getKey</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </for>
                                <return>return
                                    <expr>
                                        <call>
                                            <name>map</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>keySet</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>retainAll</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>keys</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <annotation>@
            <name>GwtIncompatible</name>
            <argument_list>("NavigableMap")</argument_list>
        </annotation>
        <specifier>abstract</specifier>
        <specifier>static</specifier> class
        <name>
            <name>DescendingMap</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>ForwardingMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>
                    <name>NavigableMap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{

            <function_decl>
                <type>
                    <specifier>abstract</specifier>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>forward</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>protected</specifier>
                    <specifier>final</specifier>
                    <name>
                        <name>Map</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>delegate</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>forward</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>transient</name>
                        <name>
                            <name>Comparator</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>comparator</name>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("unchecked")</argument_list>
                    </annotation>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Comparator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                                <super>super
                                    <name>K</name>
                                </super>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>comparator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Comparator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>K</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <name>comparator</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>result</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>Comparator</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>?</name>
                                                        <super>super
                                                            <name>K</name>
                                                        </super>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>forwardCmp</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>forward</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>comparator</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>forwardCmp</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>forwardCmp</name>
                                                    = (<name>Comparator</name>)
                                                    <call>
                                                        <name><name>Ordering</name>.
                                                            <name>natural</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name>result</name>
                                        = <name>comparator</name> =
                                        <call>
                                            <name>reverse</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>forwardCmp</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// If we inline this, we get a javac error.</comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Ordering</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>reverse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Comparator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>forward</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Ordering</name>.
                                    <name>from</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>forward</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>reverse</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>firstKey</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>forward</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>lastKey</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>lastKey</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>forward</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>firstKey</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>lowerEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>forward</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>higherEntry</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>lowerKey</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>forward</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>higherKey</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>floorEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>forward</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>ceilingEntry</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>floorKey</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>forward</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>ceilingKey</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>ceilingEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>forward</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>floorEntry</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>ceilingKey</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>forward</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>floorKey</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>higherEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>forward</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>lowerEntry</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>K</name>
                </type>
                <name>higherKey</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>forward</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>lowerKey</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>firstEntry</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>forward</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>lastEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>lastEntry</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>forward</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>firstEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>pollFirstEntry</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>forward</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>pollLastEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>pollLastEntry</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>forward</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>pollFirstEntry</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>descendingMap</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>forward</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>transient</name>
                        <name>
                            <name>Set</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>entrySet</name>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>entrySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Set</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>Entry</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>K</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>V</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <name>entrySet</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>(<name>result</name> == <name>null</name>) ? <name>entrySet</name> =
                            <call>
                                <name>createEntrySet</name>
                                <argument_list>()</argument_list>
                            </call>
                            :
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function_decl>
                <type>
                    <specifier>abstract</specifier>
                    <name>
                        <name>Iterator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>entryIterator</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <function>
                <type>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>createEntrySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <class>
                        <annotation>@
                            <name>WeakOuter</name>
                        </annotation>
                        class <name>EntrySetImpl</name>
                        <super>
                            <extends>extends
                                <name>
                                    <name>EntrySet</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </extends>
                        </super>
                        <block>{
                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <name>
                                        <name>Map</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>map</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <name><name>DescendingMap</name>.
                                                <name>this</name>
                                            </name>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>
                                        <name>Iterator</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>
                                                    <name>Entry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>K</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>iterator</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name>entryIterator</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </class>
                    <return>return
                        <expr>new
                            <call>
                                <name>EntrySetImpl</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>keySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>navigableKeySet</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>transient</name>
                        <name>
                            <name>NavigableSet</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>K</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>navigableKeySet</name>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>navigableKeySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>NavigableSet</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <name>navigableKeySet</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>(<name>result</name> == <name>null</name>) ? <name>navigableKeySet</name> = new
                            <call>
                                <name>
                                    <name>NavigableKeySet</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            :
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>descendingKeySet</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>forward</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>navigableKeySet</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>subMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>fromInclusive</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>toInclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>forward</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>subMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>toKey</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>toInclusive</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fromKey</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>fromInclusive</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>descendingMap</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>headMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>inclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>forward</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>tailMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>toKey</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>inclusive</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>descendingMap</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>NavigableMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>tailMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>inclusive</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>forward</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>headMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fromKey</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>inclusive</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>descendingMap</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>subMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toKey</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>subMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fromKey</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>toKey</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>headMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>toKey</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>headMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>toKey</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>SortedMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>tailMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>fromKey</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>tailMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>fromKey</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Collection</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>values</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>Values</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>standardToString</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <comment type="javadoc">/**
        * Returns a map from the ith element of list to i.
        */
    </comment>
    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>E</name>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>ImmutableMap</name>
                <argument_list>&lt;
                    <argument>
                        <name>E</name>
                    </argument>
                    ,
                    <argument>
                        <name>Integer</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>indexMap</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Collection</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>list</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name><name>ImmutableMap</name>.
                            <name>
                                <name>Builder</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>E</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>Integer</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </name>
                    </type>
                    <name>builder</name> =
                    <init>
                        <expr>new
                            <call>
                                <name><name>ImmutableMap</name>.
                                    <name>
                                        <name>Builder</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>E</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>Integer</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>list</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>i</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <for>for (
                <init>
                    <decl>
                        <type>
                            <name>E</name>
                        </type>
                        <name>e</name> :
                        <range>
                            <expr>
                                <name>list</name>
                            </expr>
                        </range>
                    </decl>
                </init>
                )
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>e</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr><name>i</name>++
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </for>
            <return>return
                <expr>
                    <call>
                        <name><name>builder</name>.
                            <name>build</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    }
</unit>
