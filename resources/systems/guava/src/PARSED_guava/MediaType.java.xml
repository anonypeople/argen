<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\net\MediaType.java">
    <comment type="block">/*
        * Copyright (C) 2011 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>net</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>CharMatcher</name>.
            <name>ASCII</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>CharMatcher</name>.
            <name>JAVA_ISO_CONTROL</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Charsets</name>.
            <name>UTF_8</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkArgument</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkState</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Ascii</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>CharMatcher</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Function</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Joiner</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Joiner</name>.
            <name>MapJoiner</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>MoreObjects</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Objects</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Optional</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.
            <name>ImmutableListMultimap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.
            <name>ImmutableMultiset</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.
            <name>ImmutableSet</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.
            <name>Iterables</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.
            <name>Maps</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.
            <name>Multimap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.
            <name>Multimaps</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>nio</name>.<name>charset</name>.
            <name>Charset</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>nio</name>.<name>charset</name>.
            <name>IllegalCharsetNameException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>nio</name>.<name>charset</name>.
            <name>UnsupportedCharsetException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collection</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>Map</name>.
            <name>Entry</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>javax</name>.<name>annotation</name>.<name>concurrent</name>.
            <name>Immutable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Represents an &lt;a href="http://en.wikipedia.org/wiki/Internet_media_type"&gt;Internet Media Type&lt;/a&gt;
        * (also known as a MIME Type or Content Type). This class also supports the concept of media ranges
        * &lt;a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1"&gt;defined by HTTP/1.1&lt;/a&gt;.
        * As such, the {@code *} character is treated as a wildcard and is used to represent any acceptable
        * type or subtype value. A media type may not have wildcard type with a declared subtype. The
        * {@code *} character has no special meaning as part of a parameter. All values for type, subtype,
        * parameter attributes or parameter values must be valid according to RFCs
        * &lt;a href="http://www.ietf.org/rfc/rfc2045.txt"&gt;2045&lt;/a&gt; and
        * &lt;a href="http://www.ietf.org/rfc/rfc2046.txt"&gt;2046&lt;/a&gt;.
        *
        * &lt;p&gt;All portions of the media type that are case-insensitive (type, subtype, parameter attributes)
        * are normalized to lowercase. The value of the {@code charset} parameter is normalized to
        * lowercase, but all others are left as-is.
        *
        * &lt;p&gt;Note that this specifically does &lt;strong&gt;not&lt;/strong&gt; represent the value of the MIME
        * {@code Content-Type} header and as such has no support for header-specific considerations such as
        * line folding and comments.
        *
        * &lt;p&gt;For media types that take a charset the predefined constants default to UTF-8 and have a
        * "_UTF_8" suffix. To get a version without a character set, use {@link #withoutParameters}.
        *
        * @since 12.0
        *
        * @author Gregory Kick
        */
    </comment>
    <class>
        <annotation>@
            <name>Beta</name>
        </annotation>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <annotation>@
            <name>Immutable</name>
        </annotation>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>MediaType</name>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>CHARSET_ATTRIBUTE</name> =
                    <init>
                        <expr>"charset"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>ImmutableListMultimap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>String</name>
                                </argument>
                                ,
                                <argument>
                                    <name>String</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>UTF_8_CONSTANT_PARAMETERS</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>ImmutableListMultimap</name>.
                                    <name>of</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>CHARSET_ATTRIBUTE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Ascii</name>.
                                                    <name>toLowerCase</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>UTF_8</name>.
                                                                    <name>name</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Matcher for type, subtype and attributes. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>CharMatcher</name>
                    </type>
                    <name>TOKEN_MATCHER</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>ASCII</name>.
                                    <name>and</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>JAVA_ISO_CONTROL</name>.
                                                    <name>negate</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>and</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>CharMatcher</name>.
                                                    <name>isNot</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>' '</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>and</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>CharMatcher</name>.
                                                    <name>noneOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"()&lt;&gt;@,;:\\\"/[]?="</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>CharMatcher</name>
                    </type>
                    <name>QUOTED_TEXT_MATCHER</name> =
                    <init>
                        <expr>
                            <call>
                                <name>
                                    <name>ASCII</name>
                                    .
                                    <name>and</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>CharMatcher</name>.
                                                    <name>noneOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"\"\\\r"</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="block">/*
                * This matches the same characters as linear-white-space from RFC 822, but we make no effort to
                * enforce any particular rules with regards to line folding as stated in the class docs.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>CharMatcher</name>
                    </type>
                    <name>LINEAR_WHITE_SPACE</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>CharMatcher</name>.
                                    <name>anyOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>" \t\r\n"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// TODO(gak): make these public?</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>APPLICATION_TYPE</name> =
                    <init>
                        <expr>"application"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>AUDIO_TYPE</name> =
                    <init>
                        <expr>"audio"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>IMAGE_TYPE</name> =
                    <init>
                        <expr>"image"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>TEXT_TYPE</name> =
                    <init>
                        <expr>"text"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>VIDEO_TYPE</name> =
                    <init>
                        <expr>"video"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>WILDCARD</name> =
                    <init>
                        <expr>"*"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>Map</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>MediaType</name>
                                </argument>
                                ,
                                <argument>
                                    <name>MediaType</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>KNOWN_TYPES</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Maps</name>.
                                    <name>newHashMap</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>MediaType</name>
                </type>
                <name>createConstant</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>subtype</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>addKnownType</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>MediaType</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>type</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>subtype</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>ImmutableListMultimap</name>.
                                                                <name>
                                                                    <name/>
                                                                </name>
                                                            </name>
                                                            &lt;
                                                            <name>String</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr><name>String</name>&gt;
                                                            <call>
                                                                <name>of</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>MediaType</name>
                </type>
                <name>createConstantUtf8</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>subtype</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>addKnownType</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>MediaType</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>type</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>subtype</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>UTF_8_CONSTANT_PARAMETERS</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>MediaType</name>
                </type>
                <name>addKnownType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>MediaType</name>
                            </type>
                            <name>mediaType</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>KNOWN_TYPES</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>mediaType</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>mediaType</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>mediaType</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="block">/*
                * The following constants are grouped by their type and ordered alphabetically by the constant
                * name within that type. The constant name should be a sensible identifier that is closest to the
                * "common name" of the media. This is often, but not necessarily the same as the subtype.
                *
                * Be sure to declare all constants with the type and subtype in all lowercase. For types that
                * take a charset (e.g. all text/* types), default to UTF-8 and suffix the constant name with
                * "_UTF_8".
                */
            </comment>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>ANY_TYPE</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>WILDCARD</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>WILDCARD</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>ANY_TEXT_TYPE</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>TEXT_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>WILDCARD</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>ANY_IMAGE_TYPE</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>IMAGE_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>WILDCARD</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>ANY_AUDIO_TYPE</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>AUDIO_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>WILDCARD</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>ANY_VIDEO_TYPE</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>VIDEO_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>WILDCARD</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>ANY_APPLICATION_TYPE</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>WILDCARD</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="block">/* text types */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>CACHE_MANIFEST_UTF_8</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstantUtf8</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>TEXT_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"cache-manifest"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>CSS_UTF_8</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstantUtf8</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>TEXT_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"css"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>CSV_UTF_8</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstantUtf8</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>TEXT_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"csv"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>HTML_UTF_8</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstantUtf8</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>TEXT_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"html"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>I_CALENDAR_UTF_8</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstantUtf8</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>TEXT_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"calendar"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>PLAIN_TEXT_UTF_8</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstantUtf8</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>TEXT_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"plain"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * &lt;a href="http://www.rfc-editor.org/rfc/rfc4329.txt"&gt;RFC 4329&lt;/a&gt; declares
                * {@link #JAVASCRIPT_UTF_8 application/javascript} to be the correct media type for JavaScript,
                * but this may be necessary in certain situations for compatibility.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>TEXT_JAVASCRIPT_UTF_8</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstantUtf8</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>TEXT_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"javascript"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * &lt;a href="http://www.iana.org/assignments/media-types/text/tab-separated-values"&gt;
                * Tab separated values&lt;/a&gt;.
                *
                * @since 15.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>TSV_UTF_8</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstantUtf8</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>TEXT_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"tab-separated-values"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>VCARD_UTF_8</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstantUtf8</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>TEXT_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"vcard"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>WML_UTF_8</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstantUtf8</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>TEXT_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"vnd.wap.wml"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * As described in &lt;a href="http://www.ietf.org/rfc/rfc3023.txt"&gt;RFC 3023&lt;/a&gt;, this constant
                * ({@code text/xml}) is used for XML documents that are "readable by casual users."
                * {@link #APPLICATION_XML_UTF_8} is provided for documents that are intended for applications.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>XML_UTF_8</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstantUtf8</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>TEXT_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"xml"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="block">/* image types */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>BMP</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>IMAGE_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"bmp"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * The media type for the &lt;a href="http://en.wikipedia.org/wiki/Camera_Image_File_Format"&gt;Canon
                * Image File Format&lt;/a&gt; ({@code crw} files), a widely-used "raw image" format for cameras. It is
                * found in {@code /etc/mime.types}, e.g. in &lt;href=
                * "http://anonscm.debian.org/gitweb/?p=collab-maint/mime-support.git;a=blob;f=mime.types;hb=HEAD"
                * &gt;Debian 3.48-1&lt;/a&gt;.
                *
                * @since 15.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>CRW</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>IMAGE_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"x-canon-crw"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>GIF</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>IMAGE_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"gif"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>ICO</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>IMAGE_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"vnd.microsoft.icon"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>JPEG</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>IMAGE_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"jpeg"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>PNG</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>IMAGE_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"png"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * The media type for the Photoshop File Format ({@code psd} files) as defined by &lt;a href=
                * "http://www.iana.org/assignments/media-types/image/vnd.adobe.photoshop"&gt;IANA&lt;/a&gt;, and found
                in
                * {@code /etc/mime.types}, e.g. &lt;a href=
                * "http://svn.apache.org/repos/asf/httpd/httpd/branches/1.3.x/conf/mime.types"&gt;&lt;/a&gt; of the
                Apache
                * &lt;a href="http://httpd.apache.org/"&gt;HTTPD project&lt;/a&gt;; for the specification, see
                * &lt;href="http://www.adobe.com/devnet-apps/photoshop/fileformatashtml/PhotoshopFileFormats.htm"&gt;
                * Adobe Photoshop Document Format&lt;/a&gt; and &lt;a href=
                * "http://en.wikipedia.org/wiki/Adobe_Photoshop#File_format"&gt;Wikipedia&lt;/a&gt;; this is the regular
                * output/input of Photoshop (which can also export to various image formats; note that files with
                * extension "PSB" are in a distinct but related format).
                * &lt;p&gt;This is a more recent replacement for the older, experimental type
                * {@code x-photoshop}: &lt;a href="http://tools.ietf.org/html/rfc2046#section-6"&gt;RFC-2046.6&lt;/a&gt;.
                *
                * @since 15.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>PSD</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>IMAGE_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"vnd.adobe.photoshop"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>SVG_UTF_8</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstantUtf8</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>IMAGE_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"svg+xml"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>TIFF</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>IMAGE_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"tiff"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>WEBP</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>IMAGE_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"webp"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="block">/* audio types */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>MP4_AUDIO</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>AUDIO_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"mp4"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>MPEG_AUDIO</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>AUDIO_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"mpeg"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>OGG_AUDIO</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>AUDIO_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"ogg"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>WEBM_AUDIO</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>AUDIO_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"webm"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="block">/* video types */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>MP4_VIDEO</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>VIDEO_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"mp4"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>MPEG_VIDEO</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>VIDEO_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"mpeg"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>OGG_VIDEO</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>VIDEO_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"ogg"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>QUICKTIME</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>VIDEO_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"quicktime"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>WEBM_VIDEO</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>VIDEO_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"webm"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>WMV</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>VIDEO_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"x-ms-wmv"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="block">/* application types */</comment>
            <comment type="javadoc">/**
                * As described in &lt;a href="http://www.ietf.org/rfc/rfc3023.txt"&gt;RFC 3023&lt;/a&gt;, this constant
                * ({@code application/xml}) is used for XML documents that are "unreadable by casual users."
                * {@link #XML_UTF_8} is provided for documents that may be read by users.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>APPLICATION_XML_UTF_8</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstantUtf8</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"xml"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>ATOM_UTF_8</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstantUtf8</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"atom+xml"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>BZIP2</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"x-bzip2"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Media type for &lt;a href="https://www.dartlang.org/articles/embedding-in-html/"&gt;dart files&lt;/a&gt;.
                *
                * @since 19.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>DART_UTF_8</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstantUtf8</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"dart"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Media type for &lt;a href="https://goo.gl/dNnKKj"&gt;Apple Passbook&lt;/a&gt;.
                *
                * @since 19.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>APPLE_PASSBOOK</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"vnd.apple.pkpass"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Media type for &lt;a href="http://en.wikipedia.org/wiki/Embedded_OpenType"&gt;Embedded OpenType&lt;/a&gt;
                * fonts. This is
                * &lt;a href="http://www.iana.org/assignments/media-types/application/vnd.ms-fontobject"&gt;registered
                * &lt;/a&gt; with the IANA.
                *
                * @since 17.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>EOT</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"vnd.ms-fontobject"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * As described in the &lt;a href="http://idpf.org/epub"&gt;International Digital Publishing Forum&lt;/a&gt;
                * EPUB is the distribution and interchange format standard for digital publications and
                * documents. This media type is defined in the
                * &lt;a href="http://www.idpf.org/epub/30/spec/epub30-ocf.html"&gt;EPUB Open Container Format&lt;/a&gt;
                * specification.
                *
                * @since 15.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>EPUB</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"epub+zip"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>FORM_DATA</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"x-www-form-urlencoded"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * As described in &lt;a href="https://www.rsa.com/rsalabs/node.asp?id=2138"&gt;PKCS #12: Personal
                * Information Exchange Syntax Standard&lt;/a&gt;, PKCS #12 defines an archive file format for storing
                * many cryptography objects as a single file.
                *
                * @since 15.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>KEY_ARCHIVE</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"pkcs12"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * This is a non-standard media type, but is commonly used in serving hosted binary files as it is
                * &lt;a href="http://code.google.com/p/browsersec/wiki/Part2#Survey_of_content_sniffing_behaviors"&gt;
                * known not to trigger content sniffing in current browsers&lt;/a&gt;. It &lt;i&gt;should not&lt;/i&gt;
                be used in
                * other situations as it is not specified by any RFC and does not appear in the &lt;a href=
                * "http://www.iana.org/assignments/media-types"&gt;/IANA MIME Media Types&lt;/a&gt; list. Consider
                * {@link #OCTET_STREAM} for binary data that is not being served to a browser.
                *
                *
                * @since 14.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>APPLICATION_BINARY</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"binary"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>GZIP</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"x-gzip"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * &lt;a href="http://www.rfc-editor.org/rfc/rfc4329.txt"&gt;RFC 4329&lt;/a&gt; declares this to be the
                * correct media type for JavaScript, but {@link #TEXT_JAVASCRIPT_UTF_8 text/javascript} may be
                * necessary in certain situations for compatibility.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>JAVASCRIPT_UTF_8</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstantUtf8</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"javascript"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>JSON_UTF_8</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstantUtf8</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"json"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>KML</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"vnd.google-earth.kml+xml"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>KMZ</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"vnd.google-earth.kmz"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>MBOX</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"mbox"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Media type for
                * &lt;a href="http://goo.gl/1pGBFm"&gt;Apple over-the-air mobile configuration profiles&lt;/a&gt;.
                *
                * @since 18.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>APPLE_MOBILE_CONFIG</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"x-apple-aspen-config"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>MICROSOFT_EXCEL</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"vnd.ms-excel"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>MICROSOFT_POWERPOINT</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"vnd.ms-powerpoint"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>MICROSOFT_WORD</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"msword"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>OCTET_STREAM</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"octet-stream"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>OGG_CONTAINER</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"ogg"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>OOXML_DOCUMENT</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"vnd.openxmlformats-officedocument.wordprocessingml.document"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>OOXML_PRESENTATION</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"vnd.openxmlformats-officedocument.presentationml.presentation"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>OOXML_SHEET</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"vnd.openxmlformats-officedocument.spreadsheetml.sheet"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>OPENDOCUMENT_GRAPHICS</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"vnd.oasis.opendocument.graphics"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>OPENDOCUMENT_PRESENTATION</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"vnd.oasis.opendocument.presentation"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>OPENDOCUMENT_SPREADSHEET</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"vnd.oasis.opendocument.spreadsheet"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>OPENDOCUMENT_TEXT</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"vnd.oasis.opendocument.text"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>PDF</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"pdf"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>POSTSCRIPT</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"postscript"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * &lt;a href="http://tools.ietf.org/html/draft-rfernando-protocol-buffers-00"&gt;Protocol buffers&lt;/a&gt;
                *
                * @since 15.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>PROTOBUF</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"protobuf"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>RDF_XML_UTF_8</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstantUtf8</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"rdf+xml"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>RTF_UTF_8</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstantUtf8</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"rtf"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Media type for SFNT fonts (which includes
                * &lt;a href="http://en.wikipedia.org/wiki/TrueType/"&gt;TrueType&lt;/a&gt; and
                * &lt;a href="http://en.wikipedia.org/wiki/OpenType/"&gt;OpenType&lt;/a&gt; fonts). This is
                * &lt;a href="http://www.iana.org/assignments/media-types/application/font-sfnt"&gt;registered&lt;/a&gt;
                * with the IANA.
                *
                * @since 17.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>SFNT</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"font-sfnt"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>SHOCKWAVE_FLASH</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"x-shockwave-flash"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>SKETCHUP</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"vnd.sketchup.skp"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>TAR</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"x-tar"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Media type for the
                * &lt;a href="http://en.wikipedia.org/wiki/Web_Open_Font_Format"&gt;Web Open Font Format&lt;/a&gt;
                (WOFF)
                * &lt;a href="http://www.w3.org/TR/WOFF/"&gt;defined&lt;/a&gt; by the W3C. This is
                * &lt;a href="http://www.iana.org/assignments/media-types/application/font-woff"&gt;registered&lt;/a&gt;
                * with the IANA.
                *
                * @since 17.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>WOFF</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"font-woff"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>XHTML_UTF_8</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstantUtf8</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"xhtml+xml"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="javadoc">/**
                * Media type for Extensible Resource Descriptors. This is not yet registered with the IANA, but
                * it is specified by OASIS in the
                * &lt;a href="http://docs.oasis-open.org/xri/xrd/v1.0/cd02/xrd-1.0-cd02.html"&gt; XRD definition&lt;/a&gt;
                * and implemented in projects such as
                * &lt;a href="http://code.google.com/p/webfinger/"&gt;WebFinger&lt;/a&gt;.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>XRD_UTF_8</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstantUtf8</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"xrd+xml"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MediaType</name>
                    </type>
                    <name>ZIP</name> =
                    <init>
                        <expr>
                            <call>
                                <name>createConstant</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"zip"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>type</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>subtype</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>ImmutableListMultimap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>String</name>
                                </argument>
                                ,
                                <argument>
                                    <name>String</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>parameters</name>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>toString</name>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>hashCode</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <specifier>private</specifier>
                <name>MediaType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>subtype</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>ImmutableListMultimap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>parameters</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>type</name>
                            </name>
                            =
                            <name>type</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>subtype</name>
                            </name>
                            =
                            <name>subtype</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>parameters</name>
                            </name>
                            =
                            <name>parameters</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/** Returns the top-level media type. For example, {@code "text"} in {@code
                "text/plain"}. */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>type</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>type</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Returns the media subtype. For example, {@code "plain"} in {@code "text/plain"}.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>subtype</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>subtype</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Returns a multimap containing the parameters of this media type. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>ImmutableListMultimap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>String</name>
                            </argument>
                            ,
                            <argument>
                                <name>String</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>parameters</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>parameters</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>
                        <name>Map</name>
                        <argument_list>&lt;
                            <argument>
                                <name>String</name>
                            </argument>
                            ,
                            <argument>
                                <name>
                                    <name>ImmutableMultiset</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>parametersAsMap</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Maps</name>.
                                    <name>transformValues</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>parameters</name>.
                                                    <name>asMap</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <class>
                                                <super>
                                                    <name>
                                                        <name>Function</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>
                                                                    <name>Collection</name>
                                                                    <argument_list>&lt;
                                                                        <argument>
                                                                            <name>String</name>
                                                                        </argument>
                                                                        &gt;
                                                                    </argument_list>
                                                                </name>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <name>
                                                                    <name>ImmutableMultiset</name>
                                                                    <argument_list>&lt;
                                                                        <argument>
                                                                            <name>String</name>
                                                                        </argument>
                                                                        &gt;
                                                                    </argument_list>
                                                                </name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </super>
                                                <argument_list>()</argument_list>
                                                <block>{
                                                    <function>
                                                        <type>
                                                            <annotation>@
                                                                <name>Override</name>
                                                            </annotation>
                                                            <specifier>public</specifier>
                                                            <name>
                                                                <name>ImmutableMultiset</name>
                                                                <argument_list>&lt;
                                                                    <argument>
                                                                        <name>String</name>
                                                                    </argument>
                                                                    &gt;
                                                                </argument_list>
                                                            </name>
                                                        </type>
                                                        <name>apply</name>
                                                        <parameter_list>(
                                                            <param>
                                                                <decl>
                                                                    <type>
                                                                        <name>
                                                                            <name>Collection</name>
                                                                            <argument_list>&lt;
                                                                                <argument>
                                                                                    <name>String</name>
                                                                                </argument>
                                                                                &gt;
                                                                            </argument_list>
                                                                        </name>
                                                                    </type>
                                                                    <name>input</name>
                                                                </decl>
                                                            </param>
                                                            )
                                                        </parameter_list>
                                                        <block>{
                                                            <return>return
                                                                <expr>
                                                                    <call>
                                                                        <name><name>ImmutableMultiset</name>.
                                                                            <name>copyOf</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>input</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </return>
                                                            }
                                                        </block>
                                                    </function>
                                                    }
                                                </block>
                                            </class>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an optional charset for the value of the charset parameter if it is specified.
                *
                * @throws IllegalStateException if multiple charset values have been set for this media type
                * @throws IllegalCharsetNameException if a charset value is present, but illegal
                * @throws UnsupportedCharsetException if a charset value is present, but no support is available
                * in this instance of the Java virtual machine
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>
                        <name>Optional</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Charset</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>charset</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>ImmutableSet</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>charsetValues</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ImmutableSet</name>.
                                            <name>copyOf</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>parameters</name>.
                                                            <name>get</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>CHARSET_ATTRIBUTE</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <switch>switch
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>charsetValues</name>.
                                        <name>size</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case <expr>0</expr>:
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>Optional</name>.
                                                <name>absent</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case <expr>1</expr>:
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>Optional</name>.
                                                <name>of</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>Charset</name>.
                                                                <name>forName</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>Iterables</name>.
                                                                                <name>getOnlyElement</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>charsetValues</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <default>default:
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalStateException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Multiple charset values defined: " +
                                                        <name>charsetValues</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a new instance with the same type and subtype as this instance, but without any
                * parameters.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>MediaType</name>
                </type>
                <name>withoutParameters</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>parameters</name>.
                                    <name>isEmpty</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ? <name>this</name> :
                            <call>
                                <name>create</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>type</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>subtype</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;em&gt;Replaces&lt;/em&gt; all parameters with the given parameters.
                *
                * @throws IllegalArgumentException if any parameter or value is invalid
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>MediaType</name>
                </type>
                <name>withParameters</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Multimap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>parameters</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>create</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>type</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>subtype</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>parameters</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * &lt;em&gt;Replaces&lt;/em&gt; all parameters with the given attribute with a single parameter with the
                * given value. If multiple parameters with the same attributes are necessary use
                * {@link #withParameters}. Prefer {@link #withCharset} for setting the {@code charset} parameter
                * when using a {@link Charset} object.
                *
                * @throws IllegalArgumentException if either {@code attribute} or {@code value} is invalid
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>MediaType</name>
                </type>
                <name>withParameter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attribute</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>attribute</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>normalizedAttribute</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>normalizeToken</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>attribute</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>ImmutableListMultimap</name>.
                                    <name>
                                        <name>Builder</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>String</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>String</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </name>
                            </type>
                            <name>builder</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ImmutableListMultimap</name>.
                                            <name>builder</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>String</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>String</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>entry</name> :
                                <range>
                                    <expr>
                                        <call>
                                            <name><name>parameters</name>.
                                                <name>entries</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>key</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>entry</name>.
                                                    <name>getKey</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name><name>normalizedAttribute</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>key</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>builder</name>.
                                                        <name>put</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>key</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>entry</name>.
                                                                        <name>getValue</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>put</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>normalizedAttribute</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>normalizeParameterValue</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>normalizedAttribute</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>value</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>MediaType</name>
                            </type>
                            <name>mediaType</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>MediaType</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>type</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>subtype</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>builder</name>.
                                                            <name>build</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Return one of the constants if the media type is a known type.</comment>
                    <return>return
                        <expr>
                            <call>
                                <name><name>MoreObjects</name>.
                                    <name>firstNonNull</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>KNOWN_TYPES</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>mediaType</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>mediaType</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a new instance with the same type and subtype as this instance, with the
                * {@code charset} parameter set to the {@link Charset#name name} of the given charset. Only one
                * {@code charset} parameter will be present on the new instance regardless of the number set on
                * this one.
                *
                * &lt;p&gt;If a charset must be specified that is not supported on this JVM (and thus is not
                * representable as a {@link Charset} instance, use {@link #withParameter}.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>MediaType</name>
                </type>
                <name>withCharset</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Charset</name>
                            </type>
                            <name>charset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>charset</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>withParameter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>CHARSET_ATTRIBUTE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>charset</name>.
                                                    <name>name</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Returns true if either the type or subtype is the wildcard. */</comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>hasWildcard</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>WILDCARD</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>type</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ||
                            <call>
                                <name><name>WILDCARD</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>subtype</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns {@code true} if this instance falls within the range (as defined by
                * &lt;a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html"&gt;the HTTP Accept header&lt;/a&gt;)
                * given by the argument according to three criteria:
                *
                * &lt;ol&gt;
                * &lt;li&gt;The type of the argument is the wildcard or equal to the type of this instance.
                * &lt;li&gt;The subtype of the argument is the wildcard or equal to the subtype of this instance.
                * &lt;li&gt;All of the parameters present in the argument are present in this instance.
                * &lt;/ol&gt;
                *
                * &lt;p&gt;For example: &lt;pre&gt; {@code
                * PLAIN_TEXT_UTF_8.is(PLAIN_TEXT_UTF_8) // true
                * PLAIN_TEXT_UTF_8.is(HTML_UTF_8) // false
                * PLAIN_TEXT_UTF_8.is(ANY_TYPE) // true
                * PLAIN_TEXT_UTF_8.is(ANY_TEXT_TYPE) // true
                * PLAIN_TEXT_UTF_8.is(ANY_IMAGE_TYPE) // false
                * PLAIN_TEXT_UTF_8.is(ANY_TEXT_TYPE.withCharset(UTF_8)) // true
                * PLAIN_TEXT_UTF_8.withoutParameters().is(ANY_TEXT_TYPE.withCharset(UTF_8)) // false
                * PLAIN_TEXT_UTF_8.is(ANY_TEXT_TYPE.withCharset(UTF_16)) // false}&lt;/pre&gt;
                *
                * &lt;p&gt;Note that while it is possible to have the same parameter declared multiple times within a
                * media type this method does not consider the number of occurrences of a parameter. For
                * example, {@code "text/plain; charset=UTF-8"} satisfies
                * {@code "text/plain; charset=UTF-8; charset=UTF-8"}.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>is</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>MediaType</name>
                            </type>
                            <name>mediaTypeRange</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <call>
                                <name><name>mediaTypeRange</name>.<name>type</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>WILDCARD</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ||
                            <call>
                                <name><name>mediaTypeRange</name>.<name>type</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>type</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            )
                            &amp;&amp; (
                            <call>
                                <name><name>mediaTypeRange</name>.<name>subtype</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>WILDCARD</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ||
                            <call>
                                <name><name>mediaTypeRange</name>.<name>subtype</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>subtype</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            )
                            &amp;&amp;
                            <call>
                                <name><name>this</name>.<name>parameters</name>.
                                    <name>entries</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>containsAll</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>mediaTypeRange</name>.<name>parameters</name>.
                                                    <name>entries</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates a new media type with the given type and subtype.
                *
                * @throws IllegalArgumentException if type or subtype is invalid or if a wildcard is used for the
                * type, but not the subtype.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>MediaType</name>
                </type>
                <name>create</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>subtype</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>create</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>type</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>subtype</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>ImmutableListMultimap</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            &lt;
                                            <name>String</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr><name>String</name>&gt;
                                            <call>
                                                <name>of</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates a media type with the "application" type and the given subtype.
                *
                * @throws IllegalArgumentException if subtype is invalid
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>MediaType</name>
                </type>
                <name>createApplicationType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>subtype</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>create</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>APPLICATION_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>subtype</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates a media type with the "audio" type and the given subtype.
                *
                * @throws IllegalArgumentException if subtype is invalid
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>MediaType</name>
                </type>
                <name>createAudioType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>subtype</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>create</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>AUDIO_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>subtype</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates a media type with the "image" type and the given subtype.
                *
                * @throws IllegalArgumentException if subtype is invalid
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>MediaType</name>
                </type>
                <name>createImageType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>subtype</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>create</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>IMAGE_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>subtype</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates a media type with the "text" type and the given subtype.
                *
                * @throws IllegalArgumentException if subtype is invalid
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>MediaType</name>
                </type>
                <name>createTextType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>subtype</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>create</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>TEXT_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>subtype</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates a media type with the "video" type and the given subtype.
                *
                * @throws IllegalArgumentException if subtype is invalid
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>MediaType</name>
                </type>
                <name>createVideoType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>subtype</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>create</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>VIDEO_TYPE</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>subtype</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>MediaType</name>
                </type>
                <name>create</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>subtype</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Multimap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>parameters</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>type</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>subtype</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>parameters</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>normalizedType</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>normalizeToken</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>type</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>normalizedSubtype</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>normalizeToken</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>subtype</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>!
                                            <call>
                                                <name><name>WILDCARD</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>normalizedType</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            ||
                                            <call>
                                                <name><name>WILDCARD</name>.
                                                    <name>equals</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>normalizedSubtype</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"A wildcard type cannot be used with a non-wildcard subtype"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name><name>ImmutableListMultimap</name>.
                                    <name>
                                        <name>Builder</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>String</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>String</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </name>
                            </type>
                            <name>builder</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ImmutableListMultimap</name>.
                                            <name>builder</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>String</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>String</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>entry</name> :
                                <range>
                                    <expr>
                                        <call>
                                            <name><name>parameters</name>.
                                                <name>entries</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>attribute</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>normalizeToken</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>entry</name>.
                                                                    <name>getKey</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>builder</name>.
                                            <name>put</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>attribute</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>normalizeParameterValue</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>attribute</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>entry</name>.
                                                                            <name>getValue</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>MediaType</name>
                            </type>
                            <name>mediaType</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>MediaType</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>normalizedType</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>normalizedSubtype</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>builder</name>.
                                                            <name>build</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// Return one of the constants if the media type is a known type.</comment>
                    <return>return
                        <expr>
                            <call>
                                <name><name>MoreObjects</name>.
                                    <name>firstNonNull</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>KNOWN_TYPES</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>mediaType</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>mediaType</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>normalizeToken</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>token</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>TOKEN_MATCHER</name>.
                                                    <name>matchesAllOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>token</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Ascii</name>.
                                    <name>toLowerCase</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>token</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>normalizeParameterValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>attribute</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>CHARSET_ATTRIBUTE</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>attribute</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ?
                            <call>
                                <name><name>Ascii</name>.
                                    <name>toLowerCase</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            :
                            <name>value</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Parses a media type from its string representation.
                *
                * @throws IllegalArgumentException if the input is not parsable
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>MediaType</name>
                </type>
                <name>parse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>input</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Tokenizer</name>
                            </type>
                            <name>tokenizer</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>Tokenizer</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>type</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>tokenizer</name>.
                                                    <name>consumeToken</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>TOKEN_MATCHER</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>tokenizer</name>.
                                            <name>consumeCharacter</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>'/'</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>subtype</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>tokenizer</name>.
                                                    <name>consumeToken</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>TOKEN_MATCHER</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name><name>ImmutableListMultimap</name>.
                                            <name>
                                                <name>Builder</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>String</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>String</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </name>
                                    </type>
                                    <name>parameters</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>ImmutableListMultimap</name>.
                                                    <name>builder</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <while>while
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>tokenizer</name>.
                                                <name>hasMore</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>tokenizer</name>.
                                                    <name>consumeCharacter</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>';'</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>tokenizer</name>.
                                                    <name>consumeTokenIfPresent</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>LINEAR_WHITE_SPACE</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>String</name>
                                            </type>
                                            <name>attribute</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>tokenizer</name>.
                                                            <name>consumeToken</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>TOKEN_MATCHER</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>tokenizer</name>.
                                                    <name>consumeCharacter</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>'='</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <specifier>final</specifier>
                                                <name>String</name>
                                            </type>
                                            <name>value</name>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>'"' ==
                                                <call>
                                                    <name><name>tokenizer</name>.
                                                        <name>previewChar</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>tokenizer</name>.
                                                                <name>consumeCharacter</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>'"'</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>StringBuilder</name>
                                                        </type>
                                                        <name>valueBuilder</name> =
                                                        <init>
                                                            <expr>new
                                                                <call>
                                                                    <name>StringBuilder</name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <while>while
                                                    <condition>(
                                                        <expr>'"' !=
                                                            <call>
                                                                <name><name>tokenizer</name>.
                                                                    <name>previewChar</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <block>{
                                                        <if>if
                                                            <condition>(
                                                                <expr>'\\' ==
                                                                    <call>
                                                                        <name><name>tokenizer</name>.
                                                                            <name>previewChar</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>tokenizer</name>.
                                                                                    <name>consumeCharacter</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>'\\'</expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>valueBuilder</name>.
                                                                                    <name>append</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <call>
                                                                                                <name><name>
                                                                                                    tokenizer</name>.
                                                                                                    <name>
                                                                                                        consumeCharacter
                                                                                                    </name>
                                                                                                </name>
                                                                                                <argument_list>(
                                                                                                    <argument>
                                                                                                        <expr>
                                                                                                            <name>
                                                                                                                ASCII
                                                                                                            </name>
                                                                                                        </expr>
                                                                                                    </argument>
                                                                                                    )
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </then>
                                                            <else>else
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>valueBuilder</name>.
                                                                                    <name>append</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <call>
                                                                                                <name><name>
                                                                                                    tokenizer</name>.
                                                                                                    <name>consumeToken
                                                                                                    </name>
                                                                                                </name>
                                                                                                <argument_list>(
                                                                                                    <argument>
                                                                                                        <expr>
                                                                                                            <name>
                                                                                                                QUOTED_TEXT_MATCHER
                                                                                                            </name>
                                                                                                        </expr>
                                                                                                    </argument>
                                                                                                    )
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </else>
                                                        </if>
                                                        }
                                                    </block>
                                                </while>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>value</name>
                                                        =
                                                        <call>
                                                            <name><name>valueBuilder</name>.
                                                                <name>toString</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>tokenizer</name>.
                                                                <name>consumeCharacter</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>'"'</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>value</name>
                                                        =
                                                        <call>
                                                            <name><name>tokenizer</name>.
                                                                <name>consumeToken</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>TOKEN_MATCHER</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>parameters</name>.
                                                    <name>put</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>attribute</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>value</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </while>
                            <return>return
                                <expr>
                                    <call>
                                        <name>create</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>type</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>subtype</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>parameters</name>.
                                                            <name>build</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IllegalStateException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Could not parse '" + <name>input</name> + "'"
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <class>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>Tokenizer</name>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>String</name>
                            </type>
                            <name>input</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>position</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>Tokenizer</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>input</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>input</name>
                                    </name>
                                    =
                                    <name>input</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <name>String</name>
                        </type>
                        <name>consumeTokenIfPresent</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>CharMatcher</name>
                                    </type>
                                    <name>matcher</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkState</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>hasMore</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>startPosition</name> =
                                    <init>
                                        <expr>
                                            <name>position</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>position</name>
                                    =
                                    <call>
                                        <name><name>matcher</name>.
                                            <name>negate</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>indexIn</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>input</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>startPosition</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <call>
                                        <name>hasMore</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    ?
                                    <call>
                                        <name><name>input</name>.
                                            <name>substring</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>startPosition</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>position</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    :
                                    <call>
                                        <name><name>input</name>.
                                            <name>substring</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>startPosition</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <name>String</name>
                        </type>
                        <name>consumeToken</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>CharMatcher</name>
                                    </type>
                                    <name>matcher</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>startPosition</name> =
                                    <init>
                                        <expr>
                                            <name>position</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>token</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>consumeTokenIfPresent</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>matcher</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkState</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>position</name>
                                                    !=
                                                    <name>startPosition</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>token</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <name>char</name>
                        </type>
                        <name>consumeCharacter</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>CharMatcher</name>
                                    </type>
                                    <name>matcher</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkState</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>hasMore</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>c</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>previewChar</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkState</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>matcher</name>.
                                                            <name>matches</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>c</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>position</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>c</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <name>char</name>
                        </type>
                        <name>consumeCharacter</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>c</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkState</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>hasMore</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkState</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>previewChar</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    ==
                                                    <name>c</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr><name>position</name>++
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>c</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <name>char</name>
                        </type>
                        <name>previewChar</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkState</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>hasMore</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>input</name>.
                                            <name>charAt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>position</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <name>boolean</name>
                        </type>
                        <name>hasMore</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>(<name>position</name> &gt;= 0) &amp;&amp; (<name>position</name> &lt;
                                    <call>
                                        <name><name>input</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    )
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>obj</name>
                                ==
                                <name>this</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>obj</name>
                                        <name>instanceof</name>
                                        <name>MediaType</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>MediaType</name>
                                                </type>
                                                <name>that</name> =
                                                <init>
                                                    <expr>(<name>MediaType</name>)
                                                        <name>obj</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>this</name>.<name>type</name>.
                                                        <name>equals</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>that</name>.
                                                                    <name>type</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                &amp;&amp;
                                                <call>
                                                    <name><name>this</name>.<name>subtype</name>.
                                                        <name>equals</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>that</name>.
                                                                    <name>subtype</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                                <comment type="line">// compare parameters regardless of order</comment>
                                                &amp;&amp;
                                                <call>
                                                    <name><name>this</name>.
                                                        <name>parametersAsMap</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                                .
                                                <call>
                                                    <name>equals</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>that</name>.
                                                                        <name>parametersAsMap</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// racy single-check idiom</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>h</name> =
                            <init>
                                <expr>
                                    <name>hashCode</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>h</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>h</name>
                                        =
                                        <call>
                                            <name><name>Objects</name>.
                                                <name>hashCode</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>type</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>subtype</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name>parametersAsMap</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>hashCode</name>
                                        =
                                        <name>h</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>h</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>MapJoiner</name>
                    </type>
                    <name>PARAMETER_JOINER</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Joiner</name>.
                                    <name>on</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"; "</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>withKeyValueSeparator</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"="</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Returns the string representation of this media type in the format described in &lt;a
                * href="http://www.ietf.org/rfc/rfc2045.txt"&gt;RFC 2045&lt;/a&gt;.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="line">// racy single-check idiom, safe because String is immutable</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <name>toString</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>result</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>result</name>
                                        =
                                        <call>
                                            <name>computeToString</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>toString</name>
                                        =
                                        <name>result</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>String</name>
                </type>
                <name>computeToString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuilder</name>
                            </type>
                            <name>builder</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuilder</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>type</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>'/'</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>subtype</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>parameters</name>.
                                        <name>isEmpty</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>builder</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"; "</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>Multimap</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>String</name>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <name>String</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>quotedParameters</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>Multimaps</name>.
                                                        <name>transformValues</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>parameters</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>new
                                                                <class>
                                                                    <super>
                                                                        <name>
                                                                            <name>Function</name>
                                                                            <argument_list>&lt;
                                                                                <argument>
                                                                                    <name>String</name>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <name>String</name>
                                                                                </argument>
                                                                                &gt;
                                                                            </argument_list>
                                                                        </name>
                                                                    </super>
                                                                    <argument_list>()</argument_list>
                                                                    <block>{
                                                                        <function>
                                                                            <type>
                                                                                <annotation>@
                                                                                    <name>Override</name>
                                                                                </annotation>
                                                                                <specifier>public</specifier>
                                                                                <name>String</name>
                                                                            </type>
                                                                            <name>apply</name>
                                                                            <parameter_list>(
                                                                                <param>
                                                                                    <decl>
                                                                                        <type>
                                                                                            <name>String</name>
                                                                                        </type>
                                                                                        <name>value</name>
                                                                                    </decl>
                                                                                </param>
                                                                                )
                                                                            </parameter_list>
                                                                            <block>{
                                                                                <return>return
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name><name>
                                                                                                TOKEN_MATCHER</name>.
                                                                                                <name>matchesAllOf
                                                                                                </name>
                                                                                            </name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>value
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                        ? <name>value</name> :
                                                                                        <call>
                                                                                            <name>escapeAndQuote</name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>
                                                                                                        <name>value
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                    ;
                                                                                </return>
                                                                                }
                                                                            </block>
                                                                        </function>
                                                                        }
                                                                    </block>
                                                                </class>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>PARAMETER_JOINER</name>.
                                                <name>appendTo</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>builder</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>quotedParameters</name>.
                                                                <name>entries</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>escapeAndQuote</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuilder</name>
                            </type>
                            <name>escaped</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>value</name>.
                                                            <name>length</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    + 16
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>'"'</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <call>
                                    <name><name>value</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>char</name>
                                    </type>
                                    <name>ch</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>value</name>.
                                                    <name>charAt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>ch</name>
                                        == '\r' || <name>ch</name> == '\\' || <name>ch</name> == '"'
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>escaped</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>'\\'</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>escaped</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>ch</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name><name>escaped</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>'"'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>toString</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
