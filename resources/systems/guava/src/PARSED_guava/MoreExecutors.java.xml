<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\util\concurrent\MoreExecutors.java">
    <comment type="block">/*
        * Copyright (C) 2007 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.
            <name>concurrent</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkArgument</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtIncompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>VisibleForTesting</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Supplier</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Throwables</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.
            <name>Lists</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.
            <name>Queues</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.<name>concurrent</name>.<name>
            ForwardingListenableFuture</name>.
            <name>SimpleForwardingListenableFuture</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>InvocationTargetException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collection</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collections</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>BlockingQueue</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>Callable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>Delayed</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ExecutionException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>Executor</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ExecutorService</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>Executors</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>Future</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>RejectedExecutionException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ScheduledExecutorService</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ScheduledFuture</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ScheduledThreadPoolExecutor</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ThreadFactory</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ThreadPoolExecutor</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>ThreadPoolExecutor</name>.
            <name>CallerRunsPolicy</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>TimeUnit</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>TimeoutException</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.<name>concurrent</name>.
            <name>GuardedBy</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Factory and utility methods for {@link java.util.concurrent.Executor}, {@link
        * ExecutorService}, and {@link ThreadFactory}.
        *
        * @author Eric Fellheimer
        * @author Kyle Littlefield
        * @author Justin Mahoney
        * @since 3.0
        */
    </comment>
    <class>
        <annotation>@
            <name>GwtCompatible</name>
            <argument_list>(emulated = true)</argument_list>
        </annotation>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>MoreExecutors</name>
        <block>{
            <constructor>
                <specifier>private</specifier>
                <name>MoreExecutors</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="javadoc">/**
                * Converts the given ThreadPoolExecutor into an ExecutorService that exits
                * when the application is complete. It does so by using daemon threads and
                * adding a shutdown hook to wait for their completion.
                *
                * &lt;p&gt;This is mainly for fixed thread pools.
                * See {@link Executors#newFixedThreadPool(int)}.
                *
                * @param executor the executor to modify to make sure it exits when the
                * application is finished
                * @param terminationTimeout how long to wait for the executor to
                * finish before terminating the JVM
                * @param timeUnit unit of time for the time parameter
                * @return an unmodifiable version of the input which will not hang the JVM
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>ExecutorService</name>
                </type>
                <name>getExitingExecutorService</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ThreadPoolExecutor</name>
                            </type>
                            <name>executor</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>terminationTimeout</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>TimeUnit</name>
                            </type>
                            <name>timeUnit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>Application</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>getExitingExecutorService</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>executor</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>terminationTimeout</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>timeUnit</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Converts the given ScheduledThreadPoolExecutor into a
                * ScheduledExecutorService that exits when the application is complete. It
                * does so by using daemon threads and adding a shutdown hook to wait for
                * their completion.
                *
                * &lt;p&gt;This is mainly for fixed thread pools.
                * See {@link Executors#newScheduledThreadPool(int)}.
                *
                * @param executor the executor to modify to make sure it exits when the
                * application is finished
                * @param terminationTimeout how long to wait for the executor to
                * finish before terminating the JVM
                * @param timeUnit unit of time for the time parameter
                * @return an unmodifiable version of the input which will not hang the JVM
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>ScheduledExecutorService</name>
                </type>
                <name>getExitingScheduledExecutorService</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ScheduledThreadPoolExecutor</name>
                            </type>
                            <name>executor</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>terminationTimeout</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>TimeUnit</name>
                            </type>
                            <name>timeUnit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>Application</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>getExitingScheduledExecutorService</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>executor</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>terminationTimeout</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>timeUnit</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Add a shutdown hook to wait for thread completion in the given
                * {@link ExecutorService service}. This is useful if the given service uses
                * daemon threads, and we want to keep the JVM from exiting immediately on
                * shutdown, instead giving these daemon threads a chance to terminate
                * normally.
                * @param service ExecutorService which uses daemon threads
                * @param terminationTimeout how long to wait for the executor to finish
                * before terminating the JVM
                * @param timeUnit unit of time for the time parameter
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>addDelayedShutdownHook</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ExecutorService</name>
                            </type>
                            <name>service</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>terminationTimeout</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>TimeUnit</name>
                            </type>
                            <name>timeUnit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>new
                            <call>
                                <name>Application</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>addDelayedShutdownHook</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>service</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>terminationTimeout</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>timeUnit</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Converts the given ThreadPoolExecutor into an ExecutorService that exits
                * when the application is complete. It does so by using daemon threads and
                * adding a shutdown hook to wait for their completion.
                *
                * &lt;p&gt;This method waits 120 seconds before continuing with JVM termination,
                * even if the executor has not finished its work.
                *
                * &lt;p&gt;This is mainly for fixed thread pools.
                * See {@link Executors#newFixedThreadPool(int)}.
                *
                * @param executor the executor to modify to make sure it exits when the
                * application is finished
                * @return an unmodifiable version of the input which will not hang the JVM
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("concurrency")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>ExecutorService</name>
                </type>
                <name>getExitingExecutorService</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ThreadPoolExecutor</name>
                            </type>
                            <name>executor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>Application</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>getExitingExecutorService</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>executor</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Converts the given ThreadPoolExecutor into a ScheduledExecutorService that
                * exits when the application is complete. It does so by using daemon threads
                * and adding a shutdown hook to wait for their completion.
                *
                * &lt;p&gt;This method waits 120 seconds before continuing with JVM termination,
                * even if the executor has not finished its work.
                *
                * &lt;p&gt;This is mainly for fixed thread pools.
                * See {@link Executors#newScheduledThreadPool(int)}.
                *
                * @param executor the executor to modify to make sure it exits when the
                * application is finished
                * @return an unmodifiable version of the input which will not hang the JVM
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>ScheduledExecutorService</name>
                </type>
                <name>getExitingScheduledExecutorService</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ScheduledThreadPoolExecutor</name>
                            </type>
                            <name>executor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>Application</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>getExitingScheduledExecutorService</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>executor</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Represents the current application to register shutdown hooks. */</comment>
            <class>
                <annotation>@
                    <name>GwtIncompatible</name>
                    <argument_list>("TODO")</argument_list>
                </annotation>
                <annotation>@
                    <name>VisibleForTesting</name>
                </annotation>
                <specifier>static</specifier>
                class <name>Application</name>
                <block>{

                    <function>
                        <type>
                            <specifier>final</specifier>
                            <name>ExecutorService</name>
                        </type>
                        <name>getExitingExecutorService</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>ThreadPoolExecutor</name>
                                    </type>
                                    <name>executor</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>terminationTimeout</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>TimeUnit</name>
                                    </type>
                                    <name>timeUnit</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>useDaemonThreadFactory</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>executor</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>ExecutorService</name>
                                    </type>
                                    <name>service</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>Executors</name>.
                                                    <name>unconfigurableExecutorService</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>executor</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>addDelayedShutdownHook</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>service</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>terminationTimeout</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>timeUnit</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>service</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>final</specifier>
                            <name>ScheduledExecutorService</name>
                        </type>
                        <name>getExitingScheduledExecutorService</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>ScheduledThreadPoolExecutor</name>
                                    </type>
                                    <name>executor</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>terminationTimeout</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>TimeUnit</name>
                                    </type>
                                    <name>timeUnit</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>useDaemonThreadFactory</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>executor</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>ScheduledExecutorService</name>
                                    </type>
                                    <name>service</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>Executors</name>.
                                                    <name>unconfigurableScheduledExecutorService</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>executor</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>addDelayedShutdownHook</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>service</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>terminationTimeout</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>timeUnit</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>service</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>final</specifier>
                            <name>void</name>
                        </type>
                        <name>addDelayedShutdownHook</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <specifier>final</specifier>
                                        <name>ExecutorService</name>
                                    </type>
                                    <name>service</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <specifier>final</specifier>
                                        <name>long</name>
                                    </type>
                                    <name>terminationTimeout</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <specifier>final</specifier>
                                        <name>TimeUnit</name>
                                    </type>
                                    <name>timeUnit</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>service</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>timeUnit</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>addShutdownHook</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>MoreExecutors</name>.
                                                            <name>newThread</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"DelayedShutdownHook-for-" +
                                                                    <name>service</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>new
                                                                    <class>
                                                                        <super>
                                                                            <name>Runnable</name>
                                                                        </super>
                                                                        <argument_list>()</argument_list>
                                                                        <block>{
                                                                            <function>
                                                                                <type>
                                                                                    <annotation>@
                                                                                        <name>Override</name>
                                                                                    </annotation>
                                                                                    <specifier>public</specifier>
                                                                                    <name>void</name>
                                                                                </type>
                                                                                <name>run</name>
                                                                                <parameter_list>()</parameter_list>
                                                                                <block>{
                                                                                    <try>try
                                                                                        <block>{
                                                                                            <comment type="line">// We'd
                                                                                                like to log progress and
                                                                                                failures that may arise
                                                                                                in the
                                                                                            </comment>
                                                                                            <comment type="line">//
                                                                                                following code, but
                                                                                                unfortunately the
                                                                                                behavior of logging
                                                                                            </comment>
                                                                                            <comment type="line">// is
                                                                                                undefined in shutdown
                                                                                                hooks.
                                                                                            </comment>
                                                                                            <comment type="line">// This
                                                                                                is because the logging
                                                                                                code installs a shutdown
                                                                                                hook of its
                                                                                            </comment>
                                                                                            <comment type="line">// own.
                                                                                                See Cleaner class inside
                                                                                                {@link LogManager}.
                                                                                            </comment>
                                                                                            <expr_stmt>
                                                                                                <expr>
                                                                                                    <call>
                                                                                                        <name><name>
                                                                                                            service</name>
                                                                                                            .
                                                                                                            <name>
                                                                                                                shutdown
                                                                                                            </name>
                                                                                                        </name>
                                                                                                        <argument_list>
                                                                                                            ()
                                                                                                        </argument_list>
                                                                                                    </call>
                                                                                                </expr>
                                                                                                ;
                                                                                            </expr_stmt>
                                                                                            <expr_stmt>
                                                                                                <expr>
                                                                                                    <call>
                                                                                                        <name><name>
                                                                                                            service</name>
                                                                                                            .
                                                                                                            <name>
                                                                                                                awaitTermination
                                                                                                            </name>
                                                                                                        </name>
                                                                                                        <argument_list>(
                                                                                                            <argument>
                                                                                                                <expr>
                                                                                                                    <name>
                                                                                                                        terminationTimeout
                                                                                                                    </name>
                                                                                                                </expr>
                                                                                                            </argument>
                                                                                                            ,
                                                                                                            <argument>
                                                                                                                <expr>
                                                                                                                    <name>
                                                                                                                        timeUnit
                                                                                                                    </name>
                                                                                                                </expr>
                                                                                                            </argument>
                                                                                                            )
                                                                                                        </argument_list>
                                                                                                    </call>
                                                                                                </expr>
                                                                                                ;
                                                                                            </expr_stmt>
                                                                                            }
                                                                                        </block>
                                                                                        <catch>catch (
                                                                                            <param>
                                                                                                <decl>
                                                                                                    <type>
                                                                                                        <name>
                                                                                                            InterruptedException
                                                                                                        </name>
                                                                                                    </type>
                                                                                                    <name>ignored</name>
                                                                                                </decl>
                                                                                            </param>
                                                                                            )
                                                                                            <block>{
                                                                                                <comment type="line">//
                                                                                                    We're shutting down
                                                                                                    anyway, so just
                                                                                                    ignore.
                                                                                                </comment>
                                                                                                }
                                                                                            </block>
                                                                                        </catch>
                                                                                    </try>
                                                                                    }
                                                                                </block>
                                                                            </function>
                                                                            }
                                                                        </block>
                                                                    </class>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>final</specifier>
                            <name>ExecutorService</name>
                        </type>
                        <name>getExitingExecutorService</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>ThreadPoolExecutor</name>
                                    </type>
                                    <name>executor</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name>getExitingExecutorService</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>executor</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>120</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>TimeUnit</name>.
                                                        <name>SECONDS</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>final</specifier>
                            <name>ScheduledExecutorService</name>
                        </type>
                        <name>getExitingScheduledExecutorService</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>ScheduledThreadPoolExecutor</name>
                                    </type>
                                    <name>executor</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name>getExitingScheduledExecutorService</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>executor</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>120</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>TimeUnit</name>.
                                                        <name>SECONDS</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>VisibleForTesting</name>
                            </annotation>
                            <name>void</name>
                        </type>
                        <name>addShutdownHook</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Thread</name>
                                    </type>
                                    <name>hook</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>Runtime</name>.
                                            <name>getRuntime</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>addShutdownHook</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>hook</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>useDaemonThreadFactory</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ThreadPoolExecutor</name>
                            </type>
                            <name>executor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>executor</name>.
                                    <name>setThreadFactory</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>ThreadFactoryBuilder</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>setDaemon</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>true</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>setThreadFactory</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>executor</name>.
                                                                    <name>getThreadFactory</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>build</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates an executor service that runs each task in the thread
                * that invokes {@code execute/submit}, as in {@link CallerRunsPolicy}. This
                * applies both to individually submitted tasks and to collections of tasks
                * submitted via {@code invokeAll} or {@code invokeAny}. In the latter case,
                * tasks will run serially on the calling thread. Tasks are run to
                * completion before a {@code Future} is returned to the caller (unless the
                * executor has been shutdown).
                *
                * &lt;p&gt;Although all tasks are immediately executed in the thread that
                * submitted the task, this {@code ExecutorService} imposes a small
                * locking overhead on each task submission in order to implement shutdown
                * and termination behavior.
                *
                * &lt;p&gt;The implementation deviates from the {@code ExecutorService}
                * specification with regards to the {@code shutdownNow} method. First,
                * "best-effort" with regards to canceling running tasks is implemented
                * as "no-effort". No interrupts or other attempts are made to stop
                * threads executing tasks. Second, the returned list will always be empty,
                * as any submitted task is considered to have started execution.
                * This applies also to tasks given to {@code invokeAll} or {@code invokeAny}
                * which are pending serial execution, even the subset of the tasks that
                * have not yet started execution. It is unclear from the
                * {@code ExecutorService} specification if these should be included, and
                * it's much easier to implement the interpretation that they not be.
                * Finally, a call to {@code shutdown} or {@code shutdownNow} may result
                * in concurrent calls to {@code invokeAll/invokeAny} throwing
                * RejectedExecutionException, although a subset of the tasks may already
                * have been executed.
                *
                * @since 10.0 (&lt;a href="https://github.com/google/guava/wiki/Compatibility"
                * &gt;mostly source-compatible&lt;/a&gt; since 3.0)
                * @deprecated Use {@link #directExecutor()} if you only require an {@link Executor} and
                * {@link #newDirectExecutorService()} if you need a {@link ListeningExecutorService}. This
                * method will be removed in August 2016.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>ListeningExecutorService</name>
                </type>
                <name>sameThreadExecutor</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>DirectExecutorService</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// See sameThreadExecutor javadoc for behavioral notes.</comment>
            <class>
                <annotation>@
                    <name>GwtIncompatible</name>
                    <argument_list>("TODO")</argument_list>
                </annotation>
                <specifier>private</specifier>
                <specifier>static</specifier> class
                <name>DirectExecutorService</name>
                <super>
                    <extends>extends
                        <name>AbstractListeningExecutorService</name>
                    </extends>
                </super>
                <block>{
                    <comment type="javadoc">/**
                        * Lock used whenever accessing the state variables
                        * (runningTasks, shutdown) of the executor
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>Object</name>
                            </type>
                            <name>lock</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>Object</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="block">/*
                        * Conceptually, these two variables describe the executor being in
                        * one of three states:
                        * - Active: shutdown == false
                        * - Shutdown: runningTasks &gt; 0 and shutdown == true
                        * - Terminated: runningTasks == 0 and shutdown == true
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>GuardedBy</name>
                                    <argument_list>("lock")</argument_list>
                                </annotation>
                                <specifier>private</specifier>
                                <name>int</name>
                            </type>
                            <name>runningTasks</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>GuardedBy</name>
                                    <argument_list>("lock")</argument_list>
                                </annotation>
                                <specifier>private</specifier>
                                <name>boolean</name>
                            </type>
                            <name>shutdown</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>execute</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Runnable</name>
                                    </type>
                                    <name>command</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>startTask</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <try>try
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>command</name>.
                                                    <name>run</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                                <finally>finally
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>endTask</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </finally>
                            </try>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>isShutdown</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <synchronized>synchronized (
                                <expr>
                                    <name>lock</name>
                                </expr>
                                )
                                <block>{
                                    <return>return
                                        <expr>
                                            <name>shutdown</name>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </synchronized>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>shutdown</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <synchronized>synchronized (
                                <expr>
                                    <name>lock</name>
                                </expr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>shutdown</name>
                                            = true
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>runningTasks</name>
                                                == 0
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>lock</name>.
                                                                <name>notifyAll</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </synchronized>
                            }
                        </block>
                    </function>

                    <comment type="line">// See sameThreadExecutor javadoc for unusual behavior of this method.
                    </comment>
                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>
                                <name>List</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>Runnable</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>shutdownNow</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>shutdown</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>Collections</name>.
                                            <name>emptyList</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>isTerminated</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <synchronized>synchronized (
                                <expr>
                                    <name>lock</name>
                                </expr>
                                )
                                <block>{
                                    <return>return
                                        <expr>
                                            <name>shutdown</name>
                                            &amp;&amp; <name>runningTasks</name> == 0
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </synchronized>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>awaitTermination</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>timeout</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>TimeUnit</name>
                                    </type>
                                    <name>unit</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>InterruptedException</name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>nanos</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>unit</name>.
                                                    <name>toNanos</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>timeout</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <synchronized>synchronized (
                                <expr>
                                    <name>lock</name>
                                </expr>
                                )
                                <block>{
                                    <for>for (
                                        <init>;</init>
                                        <condition>;</condition>
                                        <incr/>)
                                        <block>{
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>shutdown</name>
                                                        &amp;&amp; <name>runningTasks</name> == 0
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return <expr>true</expr>;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>nanos</name>
                                                                &lt;= 0
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <return>return <expr>false</expr>;
                                                                </return>
                                                                }
                                                            </block>
                                                        </then>
                                                        <else>else
                                                            <block>{
                                                                <decl_stmt>
                                                                    <decl>
                                                                        <type>
                                                                            <name>long</name>
                                                                        </type>
                                                                        <name>now</name> =
                                                                        <init>
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>System</name>.
                                                                                        <name>nanoTime</name>
                                                                                    </name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </init>
                                                                    </decl>
                                                                    ;
                                                                </decl_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>TimeUnit</name>.<name>
                                                                                NANOSECONDS</name>.
                                                                                <name>timedWait</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>lock</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>nanos</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>nanos</name>
                                                                        -=
                                                                        <call>
                                                                            <name><name>System</name>.
                                                                                <name>nanoTime</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                        -
                                                                        <name>now</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <comment type="line">// subtract the actual time we
                                                                    waited
                                                                </comment>
                                                                }
                                                            </block>
                                                        </else>
                                                    </if>
                                                </else>
                                            </if>
                                            }
                                        </block>
                                    </for>
                                    }
                                </block>
                            </synchronized>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Checks if the executor has been shut down and increments the running
                        * task count.
                        *
                        * @throws RejectedExecutionException if the executor has been previously
                        * shutdown
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>void</name>
                        </type>
                        <name>startTask</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <synchronized>synchronized (
                                <expr>
                                    <name>lock</name>
                                </expr>
                                )
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>shutdown</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <throw>throw
                                                    <expr>new
                                                        <call>
                                                            <name>RejectedExecutionException</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>"Executor already shutdown"</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </throw>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <expr_stmt>
                                        <expr><name>runningTasks</name>++
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </synchronized>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Decrements the running task count.
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>void</name>
                        </type>
                        <name>endTask</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <synchronized>synchronized (
                                <expr>
                                    <name>lock</name>
                                </expr>
                                )
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>numRunning</name> =
                                            <init>
                                                <expr>--
                                                    <name>runningTasks</name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>numRunning</name>
                                                == 0
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>lock</name>.
                                                                <name>notifyAll</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </synchronized>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * Creates an executor service that runs each task in the thread
                * that invokes {@code execute/submit}, as in {@link CallerRunsPolicy} This
                * applies both to individually submitted tasks and to collections of tasks
                * submitted via {@code invokeAll} or {@code invokeAny}. In the latter case,
                * tasks will run serially on the calling thread. Tasks are run to
                * completion before a {@code Future} is returned to the caller (unless the
                * executor has been shutdown).
                *
                * &lt;p&gt;Although all tasks are immediately executed in the thread that
                * submitted the task, this {@code ExecutorService} imposes a small
                * locking overhead on each task submission in order to implement shutdown
                * and termination behavior.
                *
                * &lt;p&gt;The implementation deviates from the {@code ExecutorService}
                * specification with regards to the {@code shutdownNow} method. First,
                * "best-effort" with regards to canceling running tasks is implemented
                * as "no-effort". No interrupts or other attempts are made to stop
                * threads executing tasks. Second, the returned list will always be empty,
                * as any submitted task is considered to have started execution.
                * This applies also to tasks given to {@code invokeAll} or {@code invokeAny}
                * which are pending serial execution, even the subset of the tasks that
                * have not yet started execution. It is unclear from the
                * {@code ExecutorService} specification if these should be included, and
                * it's much easier to implement the interpretation that they not be.
                * Finally, a call to {@code shutdown} or {@code shutdownNow} may result
                * in concurrent calls to {@code invokeAll/invokeAny} throwing
                * RejectedExecutionException, although a subset of the tasks may already
                * have been executed.
                *
                * @since 18.0 (present as MoreExecutors.sameThreadExecutor() since 10.0)
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>ListeningExecutorService</name>
                </type>
                <name>newDirectExecutorService</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>DirectExecutorService</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an {@link Executor} that runs each task in the thread that invokes
                * {@link Executor#execute execute}, as in {@link CallerRunsPolicy}.
                *
                * &lt;p&gt;This instance is equivalent to: &lt;pre&gt; {@code
                * final class DirectExecutor implements Executor {
                * public void execute(Runnable r) {
                * r.run();
                * }
                * }}&lt;/pre&gt;
                *
                * &lt;p&gt;This should be preferred to {@link #newDirectExecutorService()} because the implementing the
                * {@link ExecutorService} subinterface necessitates significant performance overhead.
                *
                * @since 18.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Executor</name>
                </type>
                <name>directExecutor</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>DirectExecutor</name>.
                                <name>INSTANCE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** See {@link #directExecutor} for behavioral notes. */</comment>
            <enum>
                <specifier>private</specifier>
                enum <name>DirectExecutor</name>
                <super>
                    <implements>implements
                        <name>Executor</name>
                    </implements>
                </super>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>INSTANCE</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>execute</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Runnable</name>
                                    </type>
                                    <name>command</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>command</name>.
                                            <name>run</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    }
                </block>
            </enum>

            <comment type="javadoc">/**
                * Creates an {@link ExecutorService} whose {@code submit} and {@code
                * invokeAll} methods submit {@link ListenableFutureTask} instances to the
                * given delegate executor. Those methods, as well as {@code execute} and
                * {@code invokeAny}, are implemented in terms of calls to {@code
                * delegate.execute}. All other methods are forwarded unchanged to the
                * delegate. This implies that the returned {@code ListeningExecutorService}
                * never calls the delegate's {@code submit}, {@code invokeAll}, and {@code
                * invokeAny} methods, so any special handling of tasks must be implemented in
                * the delegate's {@code execute} method or by wrapping the returned {@code
                * ListeningExecutorService}.
                *
                * &lt;p&gt;If the delegate executor was already an instance of {@code
                * ListeningExecutorService}, it is returned untouched, and the rest of this
                * documentation does not apply.
                *
                * @since 10.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>ListeningExecutorService</name>
                </type>
                <name>listeningDecorator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ExecutorService</name>
                            </type>
                            <name>delegate</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>delegate</name>
                            <name>instanceof</name>
                            <name>ListeningExecutorService</name>)
                            ? (<name>ListeningExecutorService</name>)
                            <name>delegate</name>
                            : (<name>delegate</name>
                            <name>instanceof</name>
                            <name>ScheduledExecutorService</name>)
                            ? new
                            <call>
                                <name>ScheduledListeningDecorator</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>ScheduledExecutorService</name>)
                                            <name>delegate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            : new
                            <call>
                                <name>ListeningDecorator</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>delegate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates a {@link ScheduledExecutorService} whose {@code submit} and {@code
                * invokeAll} methods submit {@link ListenableFutureTask} instances to the
                * given delegate executor. Those methods, as well as {@code execute} and
                * {@code invokeAny}, are implemented in terms of calls to {@code
                * delegate.execute}. All other methods are forwarded unchanged to the
                * delegate. This implies that the returned {@code
                * ListeningScheduledExecutorService} never calls the delegate's {@code
                * submit}, {@code invokeAll}, and {@code invokeAny} methods, so any special
                * handling of tasks must be implemented in the delegate's {@code execute}
                * method or by wrapping the returned {@code
                * ListeningScheduledExecutorService}.
                *
                * &lt;p&gt;If the delegate executor was already an instance of {@code
                * ListeningScheduledExecutorService}, it is returned untouched, and the rest
                * of this documentation does not apply.
                *
                * @since 10.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>ListeningScheduledExecutorService</name>
                </type>
                <name>listeningDecorator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ScheduledExecutorService</name>
                            </type>
                            <name>delegate</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>delegate</name>
                            <name>instanceof</name>
                            <name>ListeningScheduledExecutorService</name>)
                            ? (<name>ListeningScheduledExecutorService</name>)
                            <name>delegate</name>
                            : new
                            <call>
                                <name>ScheduledListeningDecorator</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>delegate</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <class>
                <annotation>@
                    <name>GwtIncompatible</name>
                    <argument_list>("TODO")</argument_list>
                </annotation>
                <specifier>private</specifier>
                <specifier>static</specifier> class
                <name>ListeningDecorator</name>
                <super>
                    <extends>extends
                        <name>AbstractListeningExecutorService</name>
                    </extends>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>ExecutorService</name>
                            </type>
                            <name>delegate</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>ListeningDecorator</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>ExecutorService</name>
                                    </type>
                                    <name>delegate</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>delegate</name>
                                    </name>
                                    =
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>delegate</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>awaitTermination</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>timeout</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>TimeUnit</name>
                                    </type>
                                    <name>unit</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>InterruptedException</name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>delegate</name>.
                                            <name>awaitTermination</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>timeout</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>unit</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>isShutdown</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>delegate</name>.
                                            <name>isShutdown</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>isTerminated</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>delegate</name>.
                                            <name>isTerminated</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>shutdown</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>delegate</name>.
                                            <name>shutdown</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>
                                <name>List</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>Runnable</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>shutdownNow</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>delegate</name>.
                                            <name>shutdownNow</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>void</name>
                        </type>
                        <name>execute</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Runnable</name>
                                    </type>
                                    <name>command</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>delegate</name>.
                                            <name>execute</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>command</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <class>
                <annotation>@
                    <name>GwtIncompatible</name>
                    <argument_list>("TODO")</argument_list>
                </annotation>
                <specifier>private</specifier>
                <specifier>static</specifier> class
                <name>ScheduledListeningDecorator</name>
                <super>
                    <extends>extends
                        <name>ListeningDecorator</name>
                    </extends>
                    <implements>implements
                        <name>ListeningScheduledExecutorService</name>
                    </implements>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>SuppressWarnings</name>
                                    <argument_list>("hiding")</argument_list>
                                </annotation>
                                <specifier>final</specifier>
                                <name>ScheduledExecutorService</name>
                            </type>
                            <name>delegate</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>ScheduledListeningDecorator</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>ScheduledExecutorService</name>
                                    </type>
                                    <name>delegate</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>delegate</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>delegate</name>
                                    </name>
                                    =
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>delegate</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>
                                <name>ListenableScheduledFuture</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>?</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>schedule</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Runnable</name>
                                    </type>
                                    <name>command</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>delay</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>TimeUnit</name>
                                    </type>
                                    <name>unit</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>TrustedListenableFutureTask</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>Void</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>task</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>TrustedListenableFutureTask</name>.
                                                    <name>create</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>command</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ScheduledFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>scheduled</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>delegate</name>.
                                                    <name>schedule</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>task</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>delay</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>unit</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <return>return
                                <expr>new
                                    <call>
                                        <name>
                                            <name>ListenableScheduledTask</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>Void</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>task</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>scheduled</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                            <name>
                                <name>ListenableScheduledFuture</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>V</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>schedule</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Callable</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>callable</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>delay</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>TimeUnit</name>
                                    </type>
                                    <name>unit</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>TrustedListenableFutureTask</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>task</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>TrustedListenableFutureTask</name>.
                                                    <name>create</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>callable</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ScheduledFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>scheduled</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>delegate</name>.
                                                    <name>schedule</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>task</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>delay</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>unit</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <return>return
                                <expr>new
                                    <call>
                                        <name>
                                            <name>ListenableScheduledTask</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>V</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>task</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>scheduled</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>
                                <name>ListenableScheduledFuture</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>?</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>scheduleAtFixedRate</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Runnable</name>
                                    </type>
                                    <name>command</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>initialDelay</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>period</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>TimeUnit</name>
                                    </type>
                                    <name>unit</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>NeverSuccessfulListenableFutureTask</name>
                                    </type>
                                    <name>task</name> =
                                    <init>
                                        <expr>new
                                            <call>
                                                <name>NeverSuccessfulListenableFutureTask</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>command</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ScheduledFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>scheduled</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>delegate</name>.
                                                    <name>scheduleAtFixedRate</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>task</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>initialDelay</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>period</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>unit</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <return>return
                                <expr>new
                                    <call>
                                        <name>
                                            <name>ListenableScheduledTask</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>Void</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>task</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>scheduled</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>
                                <name>ListenableScheduledFuture</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>?</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>scheduleWithFixedDelay</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Runnable</name>
                                    </type>
                                    <name>command</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>initialDelay</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>delay</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>TimeUnit</name>
                                    </type>
                                    <name>unit</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>NeverSuccessfulListenableFutureTask</name>
                                    </type>
                                    <name>task</name> =
                                    <init>
                                        <expr>new
                                            <call>
                                                <name>NeverSuccessfulListenableFutureTask</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>command</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>ScheduledFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>scheduled</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>delegate</name>.
                                                    <name>scheduleWithFixedDelay</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>task</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>initialDelay</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>delay</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>unit</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <return>return
                                <expr>new
                                    <call>
                                        <name>
                                            <name>ListenableScheduledTask</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>Void</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>task</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>scheduled</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <class>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier> class
                        <name>
                            <name>ListenableScheduledTask</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <super>
                            <extends>extends
                                <name>
                                    <name>SimpleForwardingListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </extends>
                            <implements>implements
                                <name>
                                    <name>ListenableScheduledFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </implements>
                        </super>
                        <block>{

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <specifier>private</specifier>
                                        <specifier>final</specifier>
                                        <name>
                                            <name>ScheduledFuture</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>scheduledDelegate</name>
                                </decl>
                                ;
                            </decl_stmt>

                            <constructor>
                                <specifier>public</specifier>
                                <name>ListenableScheduledTask</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>ListenableFuture</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>V</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>listenableDelegate</name>
                                        </decl>
                                    </param>
                                    ,
                                    <param>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>ScheduledFuture</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>scheduledDelegate</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>super</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>listenableDelegate</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>scheduledDelegate</name>
                                            </name>
                                            =
                                            <name>scheduledDelegate</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </constructor>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>boolean</name>
                                </type>
                                <name>cancel</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>boolean</name>
                                            </type>
                                            <name>mayInterruptIfRunning</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>boolean</name>
                                            </type>
                                            <name>cancelled</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>super</name>.
                                                            <name>cancel</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>mayInterruptIfRunning</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>cancelled</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <comment type="line">// Unless it is cancelled, the delegate may
                                                    continue being scheduled
                                                </comment>
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name><name>scheduledDelegate</name>.
                                                                <name>cancel</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>mayInterruptIfRunning</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>

                                                <comment type="line">// TODO(user): Cancel "this" if "scheduledDelegate"
                                                    is cancelled.
                                                </comment>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <return>return
                                        <expr>
                                            <name>cancelled</name>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>long</name>
                                </type>
                                <name>getDelay</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>TimeUnit</name>
                                            </type>
                                            <name>unit</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name><name>scheduledDelegate</name>.
                                                    <name>getDelay</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>unit</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>int</name>
                                </type>
                                <name>compareTo</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>Delayed</name>
                                            </type>
                                            <name>other</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name><name>scheduledDelegate</name>.
                                                    <name>compareTo</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>other</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </class>

                    <class>
                        <annotation>@
                            <name>GwtIncompatible</name>
                            <argument_list>("TODO")</argument_list>
                        </annotation>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier> class
                        <name>NeverSuccessfulListenableFutureTask</name>
                        <super>
                            <extends>extends
                                <name>
                                    <name>AbstractFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Void</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </extends>
                            <implements>implements
                                <name>Runnable</name>
                            </implements>
                        </super>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <specifier>private</specifier>
                                        <specifier>final</specifier>
                                        <name>Runnable</name>
                                    </type>
                                    <name>delegate</name>
                                </decl>
                                ;
                            </decl_stmt>

                            <constructor>
                                <specifier>public</specifier>
                                <name>NeverSuccessfulListenableFutureTask</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>Runnable</name>
                                            </type>
                                            <name>delegate</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>delegate</name>
                                            </name>
                                            =
                                            <call>
                                                <name>checkNotNull</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>delegate</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </constructor>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>void</name>
                                </type>
                                <name>run</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <try>try
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>delegate</name>.
                                                            <name>run</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                        <catch>catch (
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>Throwable</name>
                                                    </type>
                                                    <name>t</name>
                                                </decl>
                                            </param>
                                            )
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>setException</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>t</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <throw>throw
                                                    <expr>
                                                        <call>
                                                            <name><name>Throwables</name>.
                                                                <name>propagate</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>t</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </throw>
                                                }
                                            </block>
                                        </catch>
                                    </try>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </class>
                    }
                </block>
            </class>

            <comment type="block">/*
                * This following method is a modified version of one found in
                *
                http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/test/tck/AbstractExecutorServiceTest.java?revision=1.30
                * which contained the following notice:
                *
                * Written by Doug Lea with assistance from members of JCP JSR-166
                * Expert Group and released to the public domain, as explained at
                * http://creativecommons.org/publicdomain/zero/1.0/
                * Other contributors include Andrew Wright, Jeffrey Hayes,
                * Pat Fisher, Mike Judd.
                */
            </comment>

            <comment type="javadoc">/**
                * An implementation of {@link ExecutorService#invokeAny} for {@link ListeningExecutorService}
                * implementations.
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>T</name>
                </type>
                <name>invokeAnyImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ListeningExecutorService</name>
                            </type>
                            <name>executorService</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>
                                                    <name>Callable</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>T</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>tasks</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>timed</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>nanos</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>InterruptedException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>ExecutionException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>TimeoutException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>executorService</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ntasks</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>tasks</name>.
                                            <name>size</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ntasks</name>
                                            &gt; 0
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>Future</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>T</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>futures</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Lists</name>.
                                            <name>newArrayListWithCapacity</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>ntasks</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>BlockingQueue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>Future</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>T</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>futureQueue</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Queues</name>.
                                            <name>newLinkedBlockingQueue</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// For efficiency, especially in executors with limited</comment>
                    <comment type="line">// parallelism, check to see if previously submitted tasks are</comment>
                    <comment type="line">// done before submitting more of them. This interleaving</comment>
                    <comment type="line">// plus the exception mechanics account for messiness of main</comment>
                    <comment type="line">// loop.</comment>

                    <try>try
                        <block>{
                            <comment type="line">// Record exceptions so that if we fail to obtain any</comment>
                            <comment type="line">// result, we can throw the last exception we got.</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>ExecutionException</name>
                                    </type>
                                    <name>ee</name> =
                                    <init>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>lastTime</name> =
                                    <init>
                                        <expr>
                                            <name>timed</name>
                                            ?
                                            <call>
                                                <name><name>System</name>.
                                                    <name>nanoTime</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            : 0
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Iterator</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                    <extends>extends
                                                        <name>
                                                            <name>Callable</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>T</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                    </extends>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>it</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>tasks</name>.
                                                    <name>iterator</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>futures</name>.
                                            <name>add</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>submitAndAddQueueListener</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>executorService</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>it</name>.
                                                                            <name>next</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>futureQueue</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>--
                                    <name>ntasks</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>active</name> =
                                    <init>
                                        <expr>1</expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <for>for (
                                <init>;</init>
                                <condition>;</condition>
                                <incr/>)
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>Future</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>T</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>f</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>futureQueue</name>.
                                                            <name>poll</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>f</name>
                                                ==
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>ntasks</name>
                                                            &gt; 0
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>--
                                                                    <name>ntasks</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>futures</name>.
                                                                            <name>add</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <call>
                                                                                        <name>
                                                                                            submitAndAddQueueListener
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>
                                                                                                        executorService
                                                                                                    </name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            ,
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <call>
                                                                                                        <name><name>
                                                                                                            it</name>.
                                                                                                            <name>next
                                                                                                            </name>
                                                                                                        </name>
                                                                                                        <argument_list>
                                                                                                            ()
                                                                                                        </argument_list>
                                                                                                    </call>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            ,
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>futureQueue
                                                                                                    </name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            <expr_stmt>
                                                                <expr>++
                                                                    <name>active</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>active</name>
                                                                    == 0
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <break>break;</break>
                                                                    }
                                                                </block>
                                                            </then>
                                                            <else>else
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <name>timed</name>
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <block>{
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>f</name>
                                                                                    =
                                                                                    <call>
                                                                                        <name><name>futureQueue</name>.
                                                                                            <name>poll</name>
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>nanos</name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            ,
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name><name>
                                                                                                        TimeUnit</name>.
                                                                                                        <name>
                                                                                                            NANOSECONDS
                                                                                                        </name>
                                                                                                    </name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            <if>if
                                                                                <condition>(
                                                                                    <expr>
                                                                                        <name>f</name>
                                                                                        ==
                                                                                        <name>null</name>
                                                                                    </expr>
                                                                                    )
                                                                                </condition>
                                                                                <then>
                                                                                    <block>{
                                                                                        <throw>throw
                                                                                            <expr>new
                                                                                                <call>
                                                                                                    <name>
                                                                                                        TimeoutException
                                                                                                    </name>
                                                                                                    <argument_list>()
                                                                                                    </argument_list>
                                                                                                </call>
                                                                                            </expr>
                                                                                            ;
                                                                                        </throw>
                                                                                        }
                                                                                    </block>
                                                                                </then>
                                                                            </if>
                                                                            <decl_stmt>
                                                                                <decl>
                                                                                    <type>
                                                                                        <name>long</name>
                                                                                    </type>
                                                                                    <name>now</name> =
                                                                                    <init>
                                                                                        <expr>
                                                                                            <call>
                                                                                                <name><name>
                                                                                                    System</name>.
                                                                                                    <name>nanoTime
                                                                                                    </name>
                                                                                                </name>
                                                                                                <argument_list>()
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                    </init>
                                                                                </decl>
                                                                                ;
                                                                            </decl_stmt>
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>nanos</name>
                                                                                    -= <name>now</name> -
                                                                                    <name>lastTime</name>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>lastTime</name>
                                                                                    =
                                                                                    <name>now</name>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            }
                                                                        </block>
                                                                    </then>
                                                                    <else>else
                                                                        <block>{
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>f</name>
                                                                                    =
                                                                                    <call>
                                                                                        <name><name>futureQueue</name>.
                                                                                            <name>take</name>
                                                                                        </name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            }
                                                                        </block>
                                                                    </else>
                                                                </if>
                                                            </else>
                                                        </if>
                                                    </else>
                                                </if>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>f</name>
                                                !=
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>--
                                                        <name>active</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <try>try
                                                    <block>{
                                                        <return>return
                                                            <expr>
                                                                <call>
                                                                    <name><name>f</name>.
                                                                        <name>get</name>
                                                                    </name>
                                                                    <argument_list>()</argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                    <catch>catch (
                                                        <param>
                                                            <decl>
                                                                <type>
                                                                    <name>ExecutionException</name>
                                                                </type>
                                                                <name>eex</name>
                                                            </decl>
                                                        </param>
                                                        )
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>ee</name>
                                                                    =
                                                                    <name>eex</name>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </catch>
                                                    <catch>catch (
                                                        <param>
                                                            <decl>
                                                                <type>
                                                                    <name>RuntimeException</name>
                                                                </type>
                                                                <name>rex</name>
                                                            </decl>
                                                        </param>
                                                        )
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>ee</name>
                                                                    = new
                                                                    <call>
                                                                        <name>ExecutionException</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>rex</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </catch>
                                                </try>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>

                            <if>if
                                <condition>(
                                    <expr>
                                        <name>ee</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>ee</name>
                                                = new
                                                <call>
                                                    <name>ExecutionException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>null</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <throw>throw
                                <expr>
                                    <name>ee</name>
                                </expr>
                                ;
                            </throw>
                            }
                        </block>
                        <finally>finally
                            <block>{
                                <for>for (
                                    <init>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>Future</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>T</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>f</name> :
                                            <range>
                                                <expr>
                                                    <name>futures</name>
                                                </expr>
                                            </range>
                                        </decl>
                                    </init>
                                    )
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>f</name>.
                                                        <name>cancel</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>true</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </for>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Submits the task and adds a listener that adds the future to {@code queue} when it completes.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ListenableFuture</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>submitAndAddQueueListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ListeningExecutorService</name>
                            </type>
                            <name>executorService</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Callable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>task</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>
                                    <name>BlockingQueue</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>Future</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>T</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>queue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>
                                    <name>ListenableFuture</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>future</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>executorService</name>.
                                            <name>submit</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>task</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>future</name>.
                                    <name>addListener</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <class>
                                                <super>
                                                    <name>Runnable</name>
                                                </super>
                                                <argument_list>()</argument_list>
                                                <block>{
                                                    <function>
                                                        <type>
                                                            <annotation>@
                                                                <name>Override</name>
                                                            </annotation>
                                                            <specifier>public</specifier>
                                                            <name>void</name>
                                                        </type>
                                                        <name>run</name>
                                                        <parameter_list>()</parameter_list>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>queue</name>.
                                                                            <name>add</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>future</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </function>
                                                    }
                                                </block>
                                            </class>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>directExecutor</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>future</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a default thread factory used to create new threads.
                *
                * &lt;p&gt;On AppEngine, returns {@code ThreadManager.currentRequestThreadFactory()}.
                * Otherwise, returns {@link Executors#defaultThreadFactory()}.
                *
                * @since 14.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("concurrency")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>ThreadFactory</name>
                </type>
                <name>platformThreadFactory</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name>isAppEngine</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>Executors</name>.
                                                <name>defaultThreadFactory</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <try>try
                        <block>{
                            <return>return
                                <expr>(<name>ThreadFactory</name>)
                                    <call>
                                        <name><name>Class</name>.
                                            <name>forName</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"com.google.appengine.api.ThreadManager"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>getMethod</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"currentRequestThreadFactory"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>invoke</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>null</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IllegalAccessException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>RuntimeException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Couldn't invoke ThreadManager.currentRequestThreadFactory"
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>ClassNotFoundException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>RuntimeException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Couldn't invoke ThreadManager.currentRequestThreadFactory"
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>NoSuchMethodException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>RuntimeException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Couldn't invoke ThreadManager.currentRequestThreadFactory"
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>InvocationTargetException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>
                                        <call>
                                            <name><name>Throwables</name>.
                                                <name>propagate</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>e</name>.
                                                                <name>getCause</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("TODO")</argument_list>
                    </annotation>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>isAppEngine</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>System</name>.
                                        <name>getProperty</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"com.google.appengine.runtime.environment"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <try>try
                        <block>{
                            <comment type="line">// If the current environment is null, we're not inside AppEngine.
                            </comment>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>Class</name>.
                                            <name>forName</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"com.google.apphosting.api.ApiProxy"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>getMethod</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"getCurrentEnvironment"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>invoke</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>null</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    !=
                                    <name>null</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>ClassNotFoundException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// If ApiProxy doesn't exist, we're not on AppEngine at all.
                                </comment>
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </catch>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>InvocationTargetException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// If ApiProxy throws an exception, we're not in a proper AppEngine
                                    environment.
                                </comment>
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </catch>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IllegalAccessException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// If the method isn't accessible, we're not on a supported version
                                    of AppEngine;
                                </comment>
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </catch>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>NoSuchMethodException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// If the method doesn't exist, we're not on a supported version of
                                    AppEngine;
                                </comment>
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates a thread using {@link #platformThreadFactory}, and sets its name to {@code name}
                * unless changing the name is forbidden by the security manager.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("concurrency")</argument_list>
                    </annotation>
                    <specifier>static</specifier>
                    <name>Thread</name>
                </type>
                <name>newThread</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Runnable</name>
                            </type>
                            <name>runnable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>runnable</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Thread</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>platformThreadFactory</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>newThread</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>runnable</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>result</name>.
                                            <name>setName</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>name</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>SecurityException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// OK if we can't set the name in this environment.</comment>
                                }
                            </block>
                        </catch>
                    </try>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// TODO(lukes): provide overloads for ListeningExecutorService?
                ListeningScheduledExecutorService?
            </comment>
            <comment type="line">// TODO(lukes): provide overloads that take constant strings? Function&lt;Runnable,
                String&gt;s to
            </comment>
            <comment type="line">// calculate names?</comment>

            <comment type="javadoc">/**
                * Creates an {@link Executor} that renames the {@link Thread threads} that its tasks run in.
                *
                * &lt;p&gt;The names are retrieved from the {@code nameSupplier} on the thread that is being renamed
                * right before each task is run. The renaming is best effort, if a {@link SecurityManager}
                * prevents the renaming then it will be skipped but the tasks will still execute.
                *
                *
                * @param executor The executor to decorate
                * @param nameSupplier The source of names for each task
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("concurrency")</argument_list>
                    </annotation>
                    <specifier>static</specifier>
                    <name>Executor</name>
                </type>
                <name>renamingDecorator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Executor</name>
                            </type>
                            <name>executor</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>
                                    <name>Supplier</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>nameSupplier</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>executor</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>nameSupplier</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isAppEngine</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// AppEngine doesn't support thread renaming, so don't even try
                                </comment>
                                <return>return
                                    <expr>
                                        <name>executor</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <class>
                                <super>
                                    <name>Executor</name>
                                </super>
                                <argument_list>()</argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>void</name>
                                        </type>
                                        <name>execute</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>Runnable</name>
                                                    </type>
                                                    <name>command</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>executor</name>.
                                                            <name>execute</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>Callables</name>.
                                                                            <name>threadRenaming</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>command</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>nameSupplier</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates an {@link ExecutorService} that renames the {@link Thread threads} that its tasks run
                * in.
                *
                * &lt;p&gt;The names are retrieved from the {@code nameSupplier} on the thread that is being renamed
                * right before each task is run. The renaming is best effort, if a {@link SecurityManager}
                * prevents the renaming then it will be skipped but the tasks will still execute.
                *
                *
                * @param service The executor to decorate
                * @param nameSupplier The source of names for each task
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("concurrency")</argument_list>
                    </annotation>
                    <specifier>static</specifier>
                    <name>ExecutorService</name>
                </type>
                <name>renamingDecorator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>ExecutorService</name>
                            </type>
                            <name>service</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>
                                    <name>Supplier</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>nameSupplier</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>service</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>nameSupplier</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isAppEngine</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// AppEngine doesn't support thread renaming, so don't even try.
                                </comment>
                                <return>return
                                    <expr>
                                        <name>service</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <class>
                                <super>
                                    <name>WrappingExecutorService</name>
                                </super>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>service</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>protected</specifier>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>T</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                            <name>
                                                <name>Callable</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>T</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>wrapTask</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>
                                                            <name>Callable</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>T</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                    </type>
                                                    <name>callable</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>Callables</name>.
                                                            <name>threadRenaming</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>callable</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>nameSupplier</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>protected</specifier>
                                            <name>Runnable</name>
                                        </type>
                                        <name>wrapTask</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>Runnable</name>
                                                    </type>
                                                    <name>command</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>Callables</name>.
                                                            <name>threadRenaming</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>command</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>nameSupplier</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates a {@link ScheduledExecutorService} that renames the {@link Thread threads} that its
                * tasks run in.
                *
                * &lt;p&gt;The names are retrieved from the {@code nameSupplier} on the thread that is being renamed
                * right before each task is run. The renaming is best effort, if a {@link SecurityManager}
                * prevents the renaming then it will be skipped but the tasks will still execute.
                *
                *
                * @param service The executor to decorate
                * @param nameSupplier The source of names for each task
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("concurrency")</argument_list>
                    </annotation>
                    <specifier>static</specifier>
                    <name>ScheduledExecutorService</name>
                </type>
                <name>renamingDecorator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>ScheduledExecutorService</name>
                            </type>
                            <name>service</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>
                                    <name>Supplier</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>nameSupplier</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>service</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>nameSupplier</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isAppEngine</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// AppEngine doesn't support thread renaming, so don't even try.
                                </comment>
                                <return>return
                                    <expr>
                                        <name>service</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>new
                            <class>
                                <super>
                                    <name>WrappingScheduledExecutorService</name>
                                </super>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>service</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>protected</specifier>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>T</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                            <name>
                                                <name>Callable</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>T</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>wrapTask</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>
                                                            <name>Callable</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>T</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                    </type>
                                                    <name>callable</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>Callables</name>.
                                                            <name>threadRenaming</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>callable</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>nameSupplier</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>protected</specifier>
                                            <name>Runnable</name>
                                        </type>
                                        <name>wrapTask</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>Runnable</name>
                                                    </type>
                                                    <name>command</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>Callables</name>.
                                                            <name>threadRenaming</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>command</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>nameSupplier</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Shuts down the given executor gradually, first disabling new submissions and later cancelling
                * existing tasks.
                *
                * &lt;p&gt;The method takes the following steps:
                * &lt;ol&gt;
                * &lt;li&gt;calls {@link ExecutorService#shutdown()}, disabling acceptance of new submitted tasks.
                * &lt;li&gt;waits for half of the specified timeout.
                * &lt;li&gt;if the timeout expires, it calls {@link ExecutorService#shutdownNow()}, cancelling
                * pending tasks and interrupting running tasks.
                * &lt;li&gt;waits for the other half of the specified timeout.
                * &lt;/ol&gt;
                *
                * &lt;p&gt;If, at any step of the process, the calling thread is interrupted, the method calls {@link
                * ExecutorService#shutdownNow()} and returns.
                *
                * @param service the {@code ExecutorService} to shut down
                * @param timeout the maximum time to wait for the {@code ExecutorService} to terminate
                * @param unit the time unit of the timeout argument
                * @return {@code true} if the {@code ExecutorService} was terminated successfully, {@code false}
                * the call timed out or was interrupted
                * @since 17.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("concurrency")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>shutdownAndAwaitTermination</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ExecutorService</name>
                            </type>
                            <name>service</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>timeout</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>TimeUnit</name>
                            </type>
                            <name>unit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>unit</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// Disable new tasks from being submitted</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>service</name>.
                                    <name>shutdown</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>halfTimeoutNanos</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>TimeUnit</name>.<name>NANOSECONDS</name>.
                                                    <name>convert</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>timeout</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>unit</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            / 2
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <comment type="line">// Wait for half the duration of the timeout for existing tasks to
                                terminate
                            </comment>
                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name><name>service</name>.
                                                <name>awaitTermination</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>halfTimeoutNanos</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>TimeUnit</name>.
                                                            <name>NANOSECONDS</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// Cancel currently executing tasks</comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>service</name>.
                                                        <name>shutdownNow</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <comment type="line">// Wait the other half of the timeout for tasks to respond
                                            to being cancelled
                                        </comment>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>service</name>.
                                                        <name>awaitTermination</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>halfTimeoutNanos</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>TimeUnit</name>.
                                                                    <name>NANOSECONDS</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>InterruptedException</name>
                                    </type>
                                    <name>ie</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="line">// Preserve interrupt status</comment>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>Thread</name>.
                                                <name>currentThread</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>interrupt</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// (Re-)Cancel if current thread also interrupted</comment>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>service</name>.
                                                <name>shutdownNow</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                    </try>
                    <return>return
                        <expr>
                            <call>
                                <name><name>service</name>.
                                    <name>isTerminated</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
