<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\Multimap.java">
    <comment type="block">/*
        * Copyright (C) 2007 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collection</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Set</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A collection that maps keys to values, similar to {@link Map}, but in which
        * each key may be associated with &lt;i&gt;multiple&lt;/i&gt; values. You can visualize the
        * contents of a multimap either as a map from keys to &lt;i&gt;nonempty&lt;/i&gt;
        * collections of values:
        *
        * &lt;ul&gt;
        * &lt;li&gt;a â 1, 2
        * &lt;li&gt;b â 3
        * &lt;/ul&gt;
        *
        * ... or as a single "flattened" collection of key-value pairs:
        *
        * &lt;ul&gt;
        * &lt;li&gt;a â 1
        * &lt;li&gt;a â 2
        * &lt;li&gt;b â 3
        * &lt;/ul&gt;
        *
        * &lt;p&gt;&lt;b&gt;Important:&lt;/b&gt; although the first interpretation resembles how most
        * multimaps are &lt;i&gt;implemented&lt;/i&gt;, the design of the {@code Multimap} API is
        * based on the &lt;i&gt;second&lt;/i&gt; form. So, using the multimap shown above as an
        * example, the {@link #size} is {@code 3}, not {@code 2}, and the {@link
        * #values} collection is {@code [1, 2, 3]}, not {@code [[1, 2], [3]]}. For
        * those times when the first style is more useful, use the multimap's {@link
        * #asMap} view (or create a {@code Map&lt;K, Collection&lt;V&gt;&gt;} in the first place).
        *
        * &lt;h3&gt;Example&lt;/h3&gt;
        *
        * &lt;p&gt;The following code: &lt;pre&gt; {@code
        *
        * ListMultimap&lt;String, String&gt; multimap = ArrayListMultimap.create();
        * for (President pres : US_PRESIDENTS_IN_ORDER) {
        * multimap.put(pres.firstName(), pres.lastName());
        * }
        * for (String firstName : multimap.keySet()) {
        * List&lt;String&gt; lastNames = multimap.get(firstName);
        * out.println(firstName + ": " + lastNames);
        * }}&lt;/pre&gt;
        *
        * ... produces output such as: &lt;pre&gt; {@code
        *
        * Zachary: [Taylor]
        * John: [Adams, Adams, Tyler, Kennedy] // Remember, Quincy!
        * George: [Washington, Bush, Bush]
        * Grover: [Cleveland, Cleveland] // Two, non-consecutive terms, rep'ing NJ!
        * ...}&lt;/pre&gt;
        *
        * &lt;h3&gt;Views&lt;/h3&gt;
        *
        * &lt;p&gt;Much of the power of the multimap API comes from the &lt;i&gt;view
        * collections&lt;/i&gt; it provides. These always reflect the latest state of the
        * multimap itself. When they support modification, the changes are
        * &lt;i&gt;write-through&lt;/i&gt; (they automatically update the backing multimap). These
        * view collections are:
        *
        * &lt;ul&gt;
        * &lt;li&gt;{@link #asMap}, mentioned above&lt;/li&gt;
        * &lt;li&gt;{@link #keys}, {@link #keySet}, {@link #values}, {@link #entries}, which
        * are similar to the corresponding view collections of {@link Map}
        * &lt;li&gt;and, notably, even the collection returned by {@link #get get(key)} is an
        * active view of the values corresponding to {@code key}
        * &lt;/ul&gt;
        *
        * &lt;p&gt;The collections returned by the {@link #replaceValues replaceValues} and
        * {@link #removeAll removeAll} methods, which contain values that have just
        * been removed from the multimap, are naturally &lt;i&gt;not&lt;/i&gt; views.
        *
        * &lt;h3&gt;Subinterfaces&lt;/h3&gt;
        *
        * &lt;p&gt;Instead of using the {@code Multimap} interface directly, prefer the
        * subinterfaces {@link ListMultimap} and {@link SetMultimap}. These take their
        * names from the fact that the collections they return from {@code get} behave
        * like (and, of course, implement) {@link List} and {@link Set}, respectively.
        *
        * &lt;p&gt;For example, the "presidents" code snippet above used a {@code
        * ListMultimap}; if it had used a {@code SetMultimap} instead, two presidents
        * would have vanished, and last names might or might not appear in
        * chronological order.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; instances of type {@code Multimap} may not implement
        * {@link Object#equals} in the way you expect. Multimaps containing the same
        * key-value pairs, even in the same order, may or may not be equal and may or
        * may not have the same {@code hashCode}. The recommended subinterfaces
        * provide much stronger guarantees.
        *
        * &lt;h3&gt;Comparison to a map of collections&lt;/h3&gt;
        *
        * &lt;p&gt;Multimaps are commonly used in places where a {@code Map&lt;K,
        * Collection&lt;V&gt;&gt;} would otherwise have appeared. The differences include:
        *
        * &lt;ul&gt;
        * &lt;li&gt;There is no need to populate an empty collection before adding an entry
        * with {@link #put put}.
        * &lt;li&gt;{@code get} never returns {@code null}, only an empty collection.
        * &lt;li&gt;A key is contained in the multimap if and only if it maps to at least
        * one value. Any operation that causes a key to have zero associated
        * values has the effect of &lt;i&gt;removing&lt;/i&gt; that key from the multimap.
        * &lt;li&gt;The total entry count is available as {@link #size}.
        * &lt;li&gt;Many complex operations become easier; for example, {@code
        * Collections.min(multimap.values())} finds the smallest value across all
        * keys.
        * &lt;/ul&gt;
        *
        * &lt;h3&gt;Implementations&lt;/h3&gt;
        *
        * &lt;p&gt;As always, prefer the immutable implementations, {@link
        * ImmutableListMultimap} and {@link ImmutableSetMultimap}. General-purpose
        * mutable implementations are listed above under "All Known Implementing
        * Classes". You can also create a &lt;i&gt;custom&lt;/i&gt; multimap, backed by any {@code
        * Map} and {@link Collection} types, using the {@link Multimaps#newMultimap
        * Multimaps.newMultimap} family of methods. Finally, another popular way to
        * obtain a multimap is using {@link Multimaps#index Multimaps.index}. See
        * the {@link Multimaps} class for these and other static utilities related
        * to multimaps.
        *
        * &lt;h3&gt;Other Notes&lt;/h3&gt;
        *
        * &lt;p&gt;As with {@code Map}, the behavior of a {@code Multimap} is not specified
        * if key objects already present in the multimap change in a manner that
        * affects {@code equals} comparisons. Use caution if mutable objects are used
        * as keys in a {@code Multimap}.
        *
        * &lt;p&gt;All methods that modify the multimap are optional. The view collections
        * returned by the multimap may or may not be modifiable. Any modification
        * method that is not supported will throw {@link
        * UnsupportedOperationException}.
        *
        * &lt;p&gt;See the Guava User Guide article on &lt;a href=
        * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap"&gt;
        * {@code Multimap}&lt;/a&gt;.
        *
        * @author Jared Levy
        * @since 2.0
        */
    </comment>
    <class type="interface">
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        interface
        <name>
            <name>Multimap</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <block>{
            <comment type="line">// Query Operations</comment>

            <comment type="javadoc">/**
                * Returns the number of key-value pairs in this multimap.
                *
                * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; this method does not return the number of &lt;i&gt;distinct
                * keys&lt;/i&gt; in the multimap, which is given by {@code keySet().size()} or
                * {@code asMap().size()}. See the opening section of the {@link Multimap}
                * class documentation for clarification.
                */
            </comment>
            <function_decl>
                <type>
                    <name>int</name>
                </type>
                <name>size</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns {@code true} if this multimap contains no key-value pairs.
                * Equivalent to {@code size() == 0}, but can in some cases be more efficient.
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns {@code true} if this multimap contains at least one key-value pair
                * with the key {@code key}.
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>containsKey</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns {@code true} if this multimap contains at least one key-value pair
                * with the value {@code value}.
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>containsValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns {@code true} if this multimap contains at least one key-value pair
                * with the key {@code key} and the value {@code value}.
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>containsEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="line">// Modification Operations</comment>

            <comment type="javadoc">/**
                * Stores a key-value pair in this multimap.
                *
                * &lt;p&gt;Some multimap implementations allow duplicate key-value pairs, in which
                * case {@code put} always adds a new key-value pair and increases the
                * multimap size by 1. Other implementations prohibit duplicates, and storing
                * a key-value pair that's already in the multimap has no effect.
                *
                * @return {@code true} if the method increased the size of the multimap, or
                * {@code false} if the multimap already contained the key-value pair and
                * doesn't allow duplicates
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>put</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>V</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Removes a single key-value pair with the key {@code key} and the value
                * {@code value} from this multimap, if such exists. If multiple key-value
                * pairs in the multimap fit this description, which one is removed is
                * unspecified.
                *
                * @return {@code true} if the multimap changed
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="line">// Bulk Operations</comment>

            <comment type="javadoc">/**
                * Stores a key-value pair in this multimap for each of {@code values}, all
                * using the same key, {@code key}. Equivalent to (but expected to be more
                * efficient than): &lt;pre&gt; {@code
                *
                * for (V value : values) {
                * put(key, value);
                * }}&lt;/pre&gt;
                *
                * &lt;p&gt;In particular, this is a no-op if {@code values} is empty.
                *
                * @return {@code true} if the multimap changed
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>putAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>values</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Stores all key-value pairs of {@code multimap} in this multimap, in the
                * order returned by {@code multimap.entries()}.
                *
                * @return {@code true} if the multimap changed
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>putAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Multimap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>K</name>
                                            </extends>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>multimap</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Stores a collection of values with the same key, replacing any existing
                * values for that key.
                *
                * &lt;p&gt;If {@code values} is empty, this is equivalent to
                * {@link #removeAll(Object) removeAll(key)}.
                *
                * @return the collection of replaced values, or an empty collection if no
                * values were previously associated with the key. The collection
                * &lt;i&gt;may&lt;/i&gt; be modifiable, but updating it will have no effect on the
                * multimap.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Collection</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>replaceValues</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>values</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Removes all values associated with the key {@code key}.
                *
                * &lt;p&gt;Once this method returns, {@code key} will not be mapped to any values,
                * so it will not appear in {@link #keySet()}, {@link #asMap()}, or any other
                * views.
                *
                * @return the values that were removed (possibly empty). The returned
                * collection &lt;i&gt;may&lt;/i&gt; be modifiable, but updating it will have no
                * effect on the multimap.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Collection</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>removeAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Removes all key-value pairs from the multimap, leaving it {@linkplain
                * #isEmpty empty}.
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="line">// Views</comment>

            <comment type="javadoc">/**
                * Returns a view collection of the values associated with {@code key} in this
                * multimap, if any. Note that when {@code containsKey(key)} is false, this
                * returns an empty collection, not {@code null}.
                *
                * &lt;p&gt;Changes to the returned collection will update the underlying multimap,
                * and vice versa.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Collection</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>get</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a view collection of all &lt;i&gt;distinct&lt;/i&gt; keys contained in this
                * multimap. Note that the key set contains a key if and only if this multimap
                * maps that key to at least one value.
                *
                * &lt;p&gt;Changes to the returned set will update the underlying multimap, and
                * vice versa. However, &lt;i&gt;adding&lt;/i&gt; to the returned set is not possible.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>keySet</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a view collection containing the key from each key-value pair in
                * this multimap, &lt;i&gt;without&lt;/i&gt; collapsing duplicates. This collection has
                * the same size as this multimap, and {@code keys().count(k) ==
                * get(k).size()} for all {@code k}.
                *
                * &lt;p&gt;Changes to the returned multiset will update the underlying multimap,
                * and vice versa. However, &lt;i&gt;adding&lt;/i&gt; to the returned collection is not
                * possible.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Multiset</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>keys</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a view collection containing the &lt;i&gt;value&lt;/i&gt; from each key-value
                * pair contained in this multimap, without collapsing duplicates (so {@code
                * values().size() == size()}).
                *
                * &lt;p&gt;Changes to the returned collection will update the underlying multimap,
                * and vice versa. However, &lt;i&gt;adding&lt;/i&gt; to the returned collection is not
                * possible.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Collection</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>values</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a view collection of all key-value pairs contained in this
                * multimap, as {@link Map.Entry} instances.
                *
                * &lt;p&gt;Changes to the returned collection or the entries it contains will
                * update the underlying multimap, and vice versa. However, &lt;i&gt;adding&lt;/i&gt; to
                * the returned collection is not possible.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Collection</name>
                        <argument_list>&lt;
                            <argument>
                                <name><name>Map</name>.
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>V</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>entries</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a view of this multimap as a {@code Map} from each distinct key
                * to the nonempty collection of that key's associated values. Note that
                * {@code this.asMap().get(k)} is equivalent to {@code this.get(k)} only when
                * {@code k} is a key contained in the multimap; otherwise it returns {@code
                * null} as opposed to an empty collection.
                *
                * &lt;p&gt;Changes to the returned map or the collections that serve as its values
                * will update the underlying multimap, and vice versa. The map does not
                * support {@code put} or {@code putAll}, nor do its entries support {@link
                * Map.Entry#setValue setValue}.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Map</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>asMap</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="line">// Comparison and hashing</comment>

            <comment type="javadoc">/**
                * Compares the specified object with this multimap for equality. Two
                * multimaps are equal when their map views, as returned by {@link #asMap},
                * are also equal.
                *
                * &lt;p&gt;In general, two multimaps with identical key-value mappings may or may
                * not be equal, depending on the implementation. For example, two
                * {@link SetMultimap} instances with the same key-value mappings are equal,
                * but equality of two {@link ListMultimap} instances depends on the ordering
                * of the values for each key.
                *
                * &lt;p&gt;A non-empty {@link SetMultimap} cannot be equal to a non-empty
                * {@link ListMultimap}, since their {@link #asMap} views contain unequal
                * collections as values. However, any two empty multimaps are equal, because
                * they both have empty {@link #asMap} views.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the hash code for this multimap.
                *
                * &lt;p&gt;The hash code of a multimap is defined as the hash code of the map view,
                * as returned by {@link Multimap#asMap}.
                *
                * &lt;p&gt;In general, two multimaps with identical key-value mappings may or may
                * not have the same hash codes, depending on the implementation. For
                * example, two {@link SetMultimap} instances with the same key-value
                * mappings will have the same {@code hashCode}, but the {@code hashCode}
                * of {@link ListMultimap} instances depends on the ordering of the values
                * for each key.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            }
        </block>
    </class>
</unit>
