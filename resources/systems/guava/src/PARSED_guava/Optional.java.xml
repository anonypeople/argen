<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\base\Optional.java">
    <comment type="block">/*
        * Copyright (C) 2011 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>base</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Set</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>CheckReturnValue</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * An immutable object that may contain a non-null reference to another object. Each
        * instance of this type either contains a non-null reference, or contains nothing (in
        * which case we say that the reference is "absent"); it is never said to "contain {@code
        * null}".
        *
        * &lt;p&gt;A non-null {@code Optional&lt;T&gt;} reference can be used as a replacement for a nullable
        * {@code T} reference. It allows you to represent "a {@code T} that must be present" and
        * a "a {@code T} that might be absent" as two distinct types in your program, which can
        * aid clarity.
        *
        * &lt;p&gt;Some uses of this class include
        *
        * &lt;ul&gt;
        * &lt;li&gt;As a method return type, as an alternative to returning {@code null} to indicate
        * that no value was available
        * &lt;li&gt;To distinguish between "unknown" (for example, not present in a map) and "known to
        * have no value" (present in the map, with value {@code Optional.absent()})
        * &lt;li&gt;To wrap nullable references for storage in a collection that does not support
        * {@code null} (though there are
        * &lt;a href="https://github.com/google/guava/wiki/LivingWithNullHostileCollections"&gt;
        * several other approaches to this&lt;/a&gt; that should be considered first)
        * &lt;/ul&gt;
        *
        * &lt;p&gt;A common alternative to using this class is to find or create a suitable
        * &lt;a href="http://en.wikipedia.org/wiki/Null_Object_pattern"&gt;null object&lt;/a&gt; for the
        * type in question.
        *
        * &lt;p&gt;This class is not intended as a direct analogue of any existing "option" or "maybe"
        * construct from other programming environments, though it may bear some similarities.
        *
        * &lt;p&gt;&lt;b&gt;Comparison to {@code java.util.Optional} (JDK 8 and higher):&lt;/b&gt; A new {@code
        Optional}
        * class was added for Java 8. The two classes are extremely similar, but incompatible (they cannot
        * share a common supertype). &lt;i&gt;All&lt;/i&gt; known differences are listed either here or with the
        * relevant methods below.
        *
        * &lt;ul&gt;
        * &lt;li&gt;This class is serializable; {@code java.util.Optional} is not.
        * &lt;li&gt;{@code java.util.Optional} has the additional methods {@code ifPresent}, {@code filter},
        * {@code flatMap}, and {@code orElseThrow}.
        * &lt;li&gt;{@code java.util} offers the primitive-specialized versions {@code OptionalInt}, {@code
        * OptionalLong} and {@code OptionalDouble}, the use of which is recommended; Guava does not
        * have these.
        * &lt;/ul&gt;
        *
        * &lt;p&gt;&lt;b&gt;There are no plans to deprecate this class in the foreseeable future.&lt;/b&gt; However, we
        do
        * gently recommend that you prefer the new, standard Java class whenever possible.
        *
        * &lt;p&gt;See the Guava User Guide article on &lt;a
        * href="https://github.com/google/guava/wiki/UsingAndAvoidingNullExplained#optional"&gt;
        * using {@code Optional}&lt;/a&gt;.
        *
        * @param &lt;T&gt; the type of instance that can be contained. {@code Optional} is naturally
        * covariant on this type, so it is safe to cast an {@code Optional&lt;T&gt;} to {@code
        * Optional&lt;S&gt;} for any supertype {@code S} of {@code T}.
        * @author Kurt Alfred Kluever
        * @author Kevin Bourrillion
        * @since 10.0
        */
    </comment>
    <class>
        <annotation>@
            <name>CheckReturnValue</name>
        </annotation>
        <annotation>@
            <name>GwtCompatible</name>
            <argument_list>(serializable = true)</argument_list>
        </annotation>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class
        <name>
            <name>Optional</name>
            <argument_list>&lt;
                <argument>
                    <name>T</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <implements>implements
                <name>Serializable</name>
            </implements>
        </super>
        <block>{
            <comment type="javadoc">/**
                * Returns an {@code Optional} instance with no contained reference.
                *
                * &lt;p&gt;&lt;b&gt;Comparison to {@code java.util.Optional}:&lt;/b&gt; this method is equivalent to
                Java 8's
                * {@code Optional.empty}.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Optional</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>absent</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Absent</name>.
                                    <name>withType</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an {@code Optional} instance containing the given non-null reference. To have {@code
                * null} treated as {@link #absent}, use {@link #fromNullable} instead.
                *
                * &lt;p&gt;&lt;b&gt;Comparison to {@code java.util.Optional}:&lt;/b&gt; no differences.
                *
                * @throws NullPointerException if {@code reference} is null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Optional</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>of</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>reference</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>Present</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>checkNotNull</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>reference</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * If {@code nullableReference} is non-null, returns an {@code Optional} instance containing that
                * reference; otherwise returns {@link Optional#absent}.
                *
                * &lt;p&gt;&lt;b&gt;Comparison to {@code java.util.Optional}:&lt;/b&gt; this method is equivalent to
                Java 8's
                * {@code Optional.ofNullable}.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Optional</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>fromNullable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>T</name>
                            </type>
                            <name>nullableReference</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>nullableReference</name> == <name>null</name>)
                            ?
                            <name><name>Optional</name>.
                                <name>
                                    <name/>
                                </name>
                            </name>
                            &lt;<name>T</name>&gt;
                            <call>
                                <name>absent</name>
                                <argument_list>()</argument_list>
                            </call>
                            : new
                            <call>
                                <name>
                                    <name>Present</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>nullableReference</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <constructor>
                <name>Optional</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="javadoc">/**
                * Returns {@code true} if this holder contains a (non-null) instance.
                *
                * &lt;p&gt;&lt;b&gt;Comparison to {@code java.util.Optional}:&lt;/b&gt; no differences.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>boolean</name>
                </type>
                <name>isPresent</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the contained instance, which must be present. If the instance might be
                * absent, use {@link #or(Object)} or {@link #orNull} instead.
                *
                * &lt;p&gt;&lt;b&gt;Comparison to {@code java.util.Optional}:&lt;/b&gt; when the value is absent, this
                method
                * throws {@link IllegalStateException}, whereas the Java 8 counterpart throws {@link
                * NoSuchElementException}.
                *
                * @throws IllegalStateException if the instance is absent ({@link #isPresent} returns
                * {@code false}); depending on this &lt;i&gt;specific&lt;/i&gt; exception type (over the more general
                * {@link RuntimeException}) is discouraged
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>T</name>
                </type>
                <name>get</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the contained instance if it is present; {@code defaultValue} otherwise. If
                * no default value should be required because the instance is known to be present, use
                * {@link #get()} instead. For a default value of {@code null}, use {@link #orNull}.
                *
                * &lt;p&gt;Note about generics: The signature {@code public T or(T defaultValue)} is overly
                * restrictive. However, the ideal signature, {@code public &lt;S super T&gt; S or(S)}, is not legal
                * Java. As a result, some sensible operations involving subtypes are compile errors:
                * &lt;pre&gt; {@code
                *
                * Optional&lt;Integer&gt; optionalInt = getSomeOptionalInt();
                * Number value = optionalInt.or(0.5); // error
                *
                * FluentIterable&lt;? extends Number&gt; numbers = getSomeNumbers();
                * Optional&lt;? extends Number&gt; first = numbers.first();
                * Number value = first.or(0.5); // error}&lt;/pre&gt;
                *
                * &lt;p&gt;As a workaround, it is always safe to cast an {@code Optional&lt;? extends T&gt;} to {@code
                * Optional&lt;T&gt;}. Casting either of the above example {@code Optional} instances to {@code
                * Optional&lt;Number&gt;} (where {@code Number} is the desired output type) solves the problem:
                * &lt;pre&gt; {@code
                *
                * Optional&lt;Number&gt; optionalInt = (Optional) getSomeOptionalInt();
                * Number value = optionalInt.or(0.5); // fine
                *
                * FluentIterable&lt;? extends Number&gt; numbers = getSomeNumbers();
                * Optional&lt;Number&gt; first = (Optional) numbers.first();
                * Number value = first.or(0.5); // fine}&lt;/pre&gt;
                *
                * &lt;p&gt;&lt;b&gt;Comparison to {@code java.util.Optional}:&lt;/b&gt; this method is similar to Java
                8's
                * {@code Optional.orElse}, but will not accept {@code null} as a {@code defaultValue} ({@link
                * #orNull} must be used instead). As a result, the value returned by this method is guaranteed
                * non-null, which is not the case for the {@code java.util} equivalent.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>T</name>
                </type>
                <name>or</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>defaultValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns this {@code Optional} if it has a value present; {@code secondChoice}
                * otherwise.
                *
                * &lt;p&gt;&lt;b&gt;Comparison to {@code java.util.Optional}:&lt;/b&gt; this method has no equivalent in
                Java 8's
                * {@code Optional} class; write {@code thisOptional.isPresent() ? thisOptional : secondChoice}
                * instead.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>
                        <name>Optional</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>or</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Optional</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>T</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>secondChoice</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the contained instance if it is present; {@code supplier.get()} otherwise.
                *
                * &lt;p&gt;&lt;b&gt;Comparison to {@code java.util.Optional}:&lt;/b&gt; this method is similar to Java
                8's
                * {@code Optional.orElseGet}, except when {@code supplier} returns {@code null}. In this case
                * this method throws an exception, whereas the Java 8 method returns the {@code null} to the
                * caller.
                *
                * @throws NullPointerException if this optional's value is absent and the supplier returns
                * {@code null}
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>T</name>
                </type>
                <name>or</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Supplier</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>T</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>supplier</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the contained instance if it is present; {@code null} otherwise. If the
                * instance is known to be present, use {@link #get()} instead.
                *
                * &lt;p&gt;&lt;b&gt;Comparison to {@code java.util.Optional}:&lt;/b&gt; this method is equivalent to
                Java 8's
                * {@code Optional.orElse(null)}.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Nullable</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>T</name>
                </type>
                <name>orNull</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns an immutable singleton {@link Set} whose only element is the contained instance
                * if it is present; an empty immutable {@link Set} otherwise.
                *
                * &lt;p&gt;&lt;b&gt;Comparison to {@code java.util.Optional}:&lt;/b&gt; this method has no equivalent in
                Java 8's
                * {@code Optional} class. However, this common usage: &lt;pre&gt; {@code
                *
                * for (Foo foo : possibleFoo.asSet()) {
                * doSomethingWith(foo);
                * }}&lt;/pre&gt;
                *
                * ... can be replaced with: &lt;pre&gt; {@code
                *
                * possibleFoo.ifPresent(foo -&gt; doSomethingWith(foo));}&lt;/pre&gt;
                *
                * @since 11.0
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>asSet</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * If the instance is present, it is transformed with the given {@link Function}; otherwise,
                * {@link Optional#absent} is returned.
                *
                * &lt;p&gt;&lt;b&gt;Comparison to {@code java.util.Optional}:&lt;/b&gt; this method is similar to Java
                8's
                * {@code Optional.map}, except when {@code function} returns {@code null}. In this case this
                * method throws an exception, whereas the Java 8 method returns {@code Optional.absent()}.
                *
                * @throws NullPointerException if the function returns {@code null}
                * @since 12.0
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Optional</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>transform</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Function</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>T</name>
                                            </super>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>function</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns {@code true} if {@code object} is an {@code Optional} instance, and either
                * the contained references are {@linkplain Object#equals equal} to each other or both
                * are absent. Note that {@code Optional} instances of differing parameterized types can
                * be equal.
                *
                * &lt;p&gt;&lt;b&gt;Comparison to {@code java.util.Optional}:&lt;/b&gt; no differences.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a hash code for this instance.
                *
                * &lt;p&gt;&lt;b&gt;Comparison to {@code java.util.Optional}:&lt;/b&gt; this class leaves the specific
                choice of
                * hash code unspecified, unlike the Java 8 equivalent.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a string representation for this instance.
                *
                * &lt;p&gt;&lt;b&gt;Comparison to {@code java.util.Optional}:&lt;/b&gt; this class leaves the specific
                string
                * representation unspecified, unlike the Java 8 equivalent.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the value of each present instance from the supplied {@code optionals}, in order,
                * skipping over occurrences of {@link Optional#absent}. Iterators are unmodifiable and are
                * evaluated lazily.
                *
                * &lt;p&gt;&lt;b&gt;Comparison to {@code java.util.Optional}:&lt;/b&gt; this method has no equivalent in
                Java 8's
                * {@code Optional} class; use
                * {@code optionals.stream().filter(Optional::isPresent).map(Optional::get)} instead.
                *
                * @since 11.0 (generics widened in 13.0)
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Iterable</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>presentInstances</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>
                                                    <name>Optional</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                            <extends>extends
                                                                <name>T</name>
                                                            </extends>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>optionals</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>optionals</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>new
                            <class>
                                <super>
                                    <name>
                                        <name>Iterable</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>T</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </super>
                                <argument_list>()</argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>
                                                <name>Iterator</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>T</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>iterator</name>
                                        <parameter_list>()</parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>new
                                                    <class>
                                                        <super>
                                                            <name>
                                                                <name>AbstractIterator</name>
                                                                <argument_list>&lt;
                                                                    <argument>
                                                                        <name>T</name>
                                                                    </argument>
                                                                    &gt;
                                                                </argument_list>
                                                            </name>
                                                        </super>
                                                        <argument_list>()</argument_list>
                                                        <block>{
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <specifier>private</specifier>
                                                                        <specifier>final</specifier>
                                                                        <name>
                                                                            <name>Iterator</name>
                                                                            <argument_list>&lt;
                                                                                <argument>
                                                                                    <name>?</name>
                                                                                    <extends>extends
                                                                                        <name>
                                                                                            <name>Optional</name>
                                                                                            <argument_list>&lt;
                                                                                                <argument>
                                                                                                    <name>?</name>
                                                                                                    <extends>extends
                                                                                                        <name>T</name>
                                                                                                    </extends>
                                                                                                </argument>
                                                                                                &gt;
                                                                                            </argument_list>
                                                                                        </name>
                                                                                    </extends>
                                                                                </argument>
                                                                                &gt;
                                                                            </argument_list>
                                                                        </name>
                                                                    </type>
                                                                    <name>iterator</name> =
                                                                    <init>
                                                                        <expr>
                                                                            <call>
                                                                                <name>checkNotNull</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <call>
                                                                                                <name><name>
                                                                                                    optionals</name>.
                                                                                                    <name>iterator
                                                                                                    </name>
                                                                                                </name>
                                                                                                <argument_list>()
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>

                                                            <function>
                                                                <type>
                                                                    <annotation>@
                                                                        <name>Override</name>
                                                                    </annotation>
                                                                    <specifier>protected</specifier>
                                                                    <name>T</name>
                                                                </type>
                                                                <name>computeNext</name>
                                                                <parameter_list>()</parameter_list>
                                                                <block>{
                                                                    <while>while
                                                                        <condition>(
                                                                            <expr>
                                                                                <call>
                                                                                    <name><name>iterator</name>.
                                                                                        <name>hasNext</name>
                                                                                    </name>
                                                                                    <argument_list>()</argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <block>{
                                                                            <decl_stmt>
                                                                                <decl>
                                                                                    <type>
                                                                                        <name>
                                                                                            <name>Optional</name>
                                                                                            <argument_list>&lt;
                                                                                                <argument>
                                                                                                    <name>?</name>
                                                                                                    <extends>extends
                                                                                                        <name>T</name>
                                                                                                    </extends>
                                                                                                </argument>
                                                                                                &gt;
                                                                                            </argument_list>
                                                                                        </name>
                                                                                    </type>
                                                                                    <name>optional</name> =
                                                                                    <init>
                                                                                        <expr>
                                                                                            <call>
                                                                                                <name><name>
                                                                                                    iterator</name>.
                                                                                                    <name>next</name>
                                                                                                </name>
                                                                                                <argument_list>()
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                    </init>
                                                                                </decl>
                                                                                ;
                                                                            </decl_stmt>
                                                                            <if>if
                                                                                <condition>(
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name><name>optional</name>.
                                                                                                <name>isPresent</name>
                                                                                            </name>
                                                                                            <argument_list>()
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                    )
                                                                                </condition>
                                                                                <then>
                                                                                    <block>{
                                                                                        <return>return
                                                                                            <expr>
                                                                                                <call>
                                                                                                    <name><name>
                                                                                                        optional</name>.
                                                                                                        <name>get</name>
                                                                                                    </name>
                                                                                                    <argument_list>()
                                                                                                    </argument_list>
                                                                                                </call>
                                                                                            </expr>
                                                                                            ;
                                                                                        </return>
                                                                                        }
                                                                                    </block>
                                                                                </then>
                                                                            </if>
                                                                            }
                                                                        </block>
                                                                    </while>
                                                                    <return>return
                                                                        <expr>
                                                                            <call>
                                                                                <name>endOfData</name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </return>
                                                                    }
                                                                </block>
                                                            </function>
                                                            }
                                                        </block>
                                                    </class>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            }
        </block>
    </class>
</unit>
