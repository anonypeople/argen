<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\Ordering.java">
    <comment type="block">/*
        * Copyright (C) 2007 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>
            CollectPreconditions</name>.
            <name>checkNonnegative</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>VisibleForTesting</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Function</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>ArrayList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Arrays</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collection</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collections</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Comparator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>HashSet</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>NoSuchElementException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>SortedMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>SortedSet</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>TreeSet</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.
            <name>AtomicInteger</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A comparator, with additional methods to support common operations. This is an "enriched"
        * version of {@code Comparator}, in the same sense that {@link FluentIterable} is an enriched
        * {@link Iterable}.
        *
        * &lt;h3&gt;Three types of methods&lt;/h3&gt;
        *
        * Like other fluent types, there are three types of methods present: methods for &lt;i&gt;acquiring&lt;/i&gt;,
        * &lt;i&gt;chaining&lt;/i&gt;, and &lt;i&gt;using&lt;/i&gt;.
        *
        * &lt;h4&gt;Acquiring&lt;/h4&gt;
        *
        * &lt;p&gt;The common ways to get an instance of {@code Ordering} are:
        *
        * &lt;ul&gt;
        * &lt;li&gt;Subclass it and implement {@link #compare} instead of implementing {@link Comparator}
        * directly
        * &lt;li&gt;Pass a &lt;i&gt;pre-existing&lt;/i&gt; {@link Comparator} instance to {@link #from(Comparator)}
        * &lt;li&gt;Use the natural ordering, {@link Ordering#natural}
        * &lt;/ul&gt;
        *
        * &lt;h4&gt;Chaining&lt;/h4&gt;
        *
        * &lt;p&gt;Then you can use the &lt;i&gt;chaining&lt;/i&gt; methods to get an altered version of that {@code
        * Ordering}, including:
        *
        * &lt;ul&gt;
        * &lt;li&gt;{@link #reverse}
        * &lt;li&gt;{@link #compound(Comparator)}
        * &lt;li&gt;{@link #onResultOf(Function)}
        * &lt;li&gt;{@link #nullsFirst} / {@link #nullsLast}
        * &lt;/ul&gt;
        *
        * &lt;h4&gt;Using&lt;/h4&gt;
        *
        * &lt;p&gt;Finally, use the resulting {@code Ordering} anywhere a {@link Comparator} is required, or use
        * any of its special operations, such as:&lt;/p&gt;
        *
        * &lt;ul&gt;
        * &lt;li&gt;{@link #immutableSortedCopy}
        * &lt;li&gt;{@link #isOrdered} / {@link #isStrictlyOrdered}
        * &lt;li&gt;{@link #min} / {@link #max}
        * &lt;/ul&gt;
        *
        * &lt;h3&gt;Understanding complex orderings&lt;/h3&gt;
        *
        * &lt;p&gt;Complex chained orderings like the following example can be challenging to understand.
        * &lt;pre&gt; {@code
        *
        * Ordering&lt;Foo&gt; ordering =
        * Ordering.natural()
        * .nullsFirst()
        * .onResultOf(getBarFunction)
        * .nullsLast();}&lt;/pre&gt;
        *
        * Note that each chaining method returns a new ordering instance which is backed by the previous
        * instance, but has the chance to act on values &lt;i&gt;before&lt;/i&gt; handing off to that backing
        * instance. As a result, it usually helps to read chained ordering expressions &lt;i&gt;backwards&lt;/i&gt;.
        * For example, when {@code compare} is called on the above ordering:
        *
        * &lt;ol&gt;
        * &lt;li&gt;First, if only one {@code Foo} is null, that null value is treated as &lt;i&gt;greater&lt;/i&gt;
        * &lt;li&gt;Next, non-null {@code Foo} values are passed to {@code getBarFunction} (we will be
        * comparing {@code Bar} values from now on)
        * &lt;li&gt;Next, if only one {@code Bar} is null, that null value is treated as &lt;i&gt;lesser&lt;/i&gt;
        * &lt;li&gt;Finally, natural ordering is used (i.e. the result of {@code Bar.compareTo(Bar)} is
        * returned)
        * &lt;/ol&gt;
        *
        * &lt;p&gt;Alas, {@link #reverse} is a little different. As you read backwards through a chain and
        * encounter a call to {@code reverse}, continue working backwards until a result is determined,
        * and then reverse that result.
        *
        * &lt;h3&gt;Additional notes&lt;/h3&gt;
        *
        * &lt;p&gt;Except as noted, the orderings returned by the factory methods of this
        * class are serializable if and only if the provided instances that back them
        * are. For example, if {@code ordering} and {@code function} can themselves be
        * serialized, then {@code ordering.onResultOf(function)} can as well.
        *
        * &lt;p&gt;See the Guava User Guide article on &lt;a href=
        * "https://github.com/google/guava/wiki/OrderingExplained"&gt;
        * {@code Ordering}&lt;/a&gt;.
        *
        * @author Jesse Wilson
        * @author Kevin Bourrillion
        * @since 2.0
        */
    </comment>
    <class>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class
        <name>
            <name>Ordering</name>
            <argument_list>&lt;
                <argument>
                    <name>T</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <implements>implements
                <name>
                    <name>Comparator</name>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <comment type="line">// Natural order</comment>

            <comment type="javadoc">/**
                * Returns a serializable ordering that uses the natural order of the values.
                * The ordering throws a {@link NullPointerException} when passed a null
                * parameter.
                *
                * &lt;p&gt;The type specification is {@code &lt;C extends Comparable&gt;}, instead of
                * the technically correct {@code &lt;C extends Comparable&lt;? super C&gt;&gt;}, to
                * support legacy types from before Java 5.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtCompatible</name>
                        <argument_list>(serializable = true)</argument_list>
                    </annotation>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("unchecked")</argument_list>
                    </annotation>
                    <comment type="line">// TODO(kevinb): right way to explain this??</comment>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>C</name>
                            <extends>extends
                                <name>Comparable</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Ordering</name>
                        <argument_list>&lt;
                            <argument>
                                <name>C</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>natural</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <name>
                                <name>Ordering</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>C</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            )
                            <name><name>NaturalOrdering</name>.
                                <name>INSTANCE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Static factories</comment>

            <comment type="javadoc">/**
                * Returns an ordering based on an &lt;i&gt;existing&lt;/i&gt; comparator instance. Note
                * that it is unnecessary to create a &lt;i&gt;new&lt;/i&gt; anonymous inner class
                * implementing {@code Comparator} just to pass it in here. Instead, simply
                * subclass {@code Ordering} and implement its {@code compare} method
                * directly.
                *
                * @param comparator the comparator that defines the order
                * @return comparator itself if it is already an {@code Ordering}; otherwise
                * an ordering that wraps that comparator
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtCompatible</name>
                        <argument_list>(serializable = true)</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Ordering</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>from</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Comparator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>comparator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>comparator</name>
                            <name>instanceof</name>
                            <name>Ordering</name>)
                            ? (
                            <name>
                                <name>Ordering</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>T</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            )
                            <name>comparator</name>
                            : new
                            <call>
                                <name>
                                    <name>ComparatorOrdering</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>comparator</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Simply returns its argument.
                *
                * @deprecated no need to use this
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtCompatible</name>
                        <argument_list>(serializable = true)</argument_list>
                    </annotation>
                    <annotation>@
                        <name>Deprecated</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Ordering</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>from</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Ordering</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>ordering</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ordering</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an ordering that compares objects according to the order in
                * which they appear in the given list. Only objects present in the list
                * (according to {@link Object#equals}) may be compared. This comparator
                * imposes a "partial ordering" over the type {@code T}. Subsequent changes
                * to the {@code valuesInOrder} list will have no effect on the returned
                * comparator. Null values in the list are not supported.
                *
                * &lt;p&gt;The returned comparator throws an {@link ClassCastException} when it
                * receives an input parameter that isn't among the provided values.
                *
                * &lt;p&gt;The generated comparator is serializable if all the provided values are
                * serializable.
                *
                * @param valuesInOrder the values that the returned comparator will be able
                * to compare, in the order the comparator should induce
                * @return the comparator described above
                * @throws NullPointerException if any of the provided values is null
                * @throws IllegalArgumentException if {@code valuesInOrder} contains any
                * duplicate values (according to {@link Object#equals})
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtCompatible</name>
                        <argument_list>(serializable = true)</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Ordering</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>explicit</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>valuesInOrder</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>ExplicitOrdering</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>valuesInOrder</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an ordering that compares objects according to the order in
                * which they are given to this method. Only objects present in the argument
                * list (according to {@link Object#equals}) may be compared. This comparator
                * imposes a "partial ordering" over the type {@code T}. Null values in the
                * argument list are not supported.
                *
                * &lt;p&gt;The returned comparator throws a {@link ClassCastException} when it
                * receives an input parameter that isn't among the provided values.
                *
                * &lt;p&gt;The generated comparator is serializable if all the provided values are
                * serializable.
                *
                * @param leastValue the value which the returned comparator should consider
                * the "least" of all values
                * @param remainingValuesInOrder the rest of the values that the returned
                * comparator will be able to compare, in the order the comparator should
                * follow
                * @return the comparator described above
                * @throws NullPointerException if any of the provided values is null
                * @throws IllegalArgumentException if any duplicate values (according to
                * {@link Object#equals(Object)}) are present among the method arguments
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtCompatible</name>
                        <argument_list>(serializable = true)</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Ordering</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>explicit</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>leastValue</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type><name>T</name>...
                            </type>
                            <name>remainingValuesInOrder</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>explicit</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Lists</name>.
                                                    <name>asList</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>leastValue</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>remainingValuesInOrder</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Ordering&lt;Object&gt; singletons</comment>

            <comment type="javadoc">/**
                * Returns an ordering which treats all values as equal, indicating "no
                * ordering." Passing this ordering to any &lt;i&gt;stable&lt;/i&gt; sort algorithm
                * results in no change to the order of elements. Note especially that {@link
                * #sortedCopy} and {@link #immutableSortedCopy} are stable, and in the
                * returned instance these are implemented by simply copying the source list.
                *
                * &lt;p&gt;Example: &lt;pre&gt; {@code
                *
                * Ordering.allEqual().nullsLast().sortedCopy(
                * asList(t, null, e, s, null, t, null))}&lt;/pre&gt;
                *
                * &lt;p&gt;Assuming {@code t}, {@code e} and {@code s} are non-null, this returns
                * {@code [t, e, s, t, null, null, null]} regardlesss of the true comparison
                * order of those three values (which might not even implement {@link
                * Comparable} at all).
                *
                * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; by definition, this comparator is not &lt;i&gt;consistent with
                * equals&lt;/i&gt; (as defined {@linkplain Comparator here}). Avoid its use in
                * APIs, such as {@link TreeSet#TreeSet(Comparator)}, where such consistency
                * is expected.
                *
                * &lt;p&gt;The returned comparator is serializable.
                *
                * @since 13.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtCompatible</name>
                        <argument_list>(serializable = true)</argument_list>
                    </annotation>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("unchecked")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>
                        <name>Ordering</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Object</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>allEqual</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>AllEqualOrdering</name>.
                                <name>INSTANCE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an ordering that compares objects by the natural ordering of their
                * string representations as returned by {@code toString()}. It does not
                * support null values.
                *
                * &lt;p&gt;The comparator is serializable.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtCompatible</name>
                        <argument_list>(serializable = true)</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>
                        <name>Ordering</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Object</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>usingToString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>UsingToStringOrdering</name>.
                                <name>INSTANCE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an arbitrary ordering over all objects, for which {@code compare(a,
                * b) == 0} implies {@code a == b} (identity equality). There is no meaning
                * whatsoever to the order imposed, but it is constant for the life of the VM.
                *
                * &lt;p&gt;Because the ordering is identity-based, it is not "consistent with
                * {@link Object#equals(Object)}" as defined by {@link Comparator}. Use
                * caution when building a {@link SortedSet} or {@link SortedMap} from it, as
                * the resulting collection will not behave exactly according to spec.
                *
                * &lt;p&gt;This ordering is not serializable, as its implementation relies on
                * {@link System#identityHashCode(Object)}, so its behavior cannot be
                * preserved across serialization.
                *
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>
                        <name>Ordering</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Object</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>arbitrary</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>ArbitraryOrderingHolder</name>.
                                <name>ARBITRARY_ORDERING</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <class>
                <specifier>private</specifier>
                <specifier>static</specifier> class <name>ArbitraryOrderingHolder</name>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>
                                    <name>Ordering</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Object</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>ARBITRARY_ORDERING</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ArbitraryOrdering</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    }
                </block>
            </class>

            <class>
                <annotation>@
                    <name>VisibleForTesting</name>
                </annotation>
                <specifier>static</specifier> class <name>ArbitraryOrdering</name>
                <super>
                    <extends>extends
                        <name>
                            <name>Ordering</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Object</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>SuppressWarnings</name>
                                    <argument_list>("deprecation")</argument_list>
                                </annotation>
                                <comment type="line">// TODO(kevinb): ?</comment>
                                <specifier>private</specifier>
                                <name>
                                    <name>Map</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Object</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>Integer</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>uids</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Platform</name>.
                                            <name>tryWeakKeys</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>MapMaker</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>makeComputingMap</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <class>
                                                        <super>
                                                            <name>
                                                                <name>Function</name>
                                                                <argument_list>&lt;
                                                                    <argument>
                                                                        <name>Object</name>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <name>Integer</name>
                                                                    </argument>
                                                                    &gt;
                                                                </argument_list>
                                                            </name>
                                                        </super>
                                                        <argument_list>()</argument_list>
                                                        <block>{
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <specifier>final</specifier>
                                                                        <name>AtomicInteger</name>
                                                                    </type>
                                                                    <name>counter</name> =
                                                                    <init>
                                                                        <expr>new
                                                                            <call>
                                                                                <name>AtomicInteger</name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>0</expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>
                                                            <function>
                                                                <type>
                                                                    <annotation>@
                                                                        <name>Override</name>
                                                                    </annotation>
                                                                    <specifier>public</specifier>
                                                                    <name>Integer</name>
                                                                </type>
                                                                <name>apply</name>
                                                                <parameter_list>(
                                                                    <param>
                                                                        <decl>
                                                                            <type>
                                                                                <name>Object</name>
                                                                            </type>
                                                                            <name>from</name>
                                                                        </decl>
                                                                    </param>
                                                                    )
                                                                </parameter_list>
                                                                <block>{
                                                                    <return>return
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>counter</name>.
                                                                                    <name>getAndIncrement</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </return>
                                                                    }
                                                                </block>
                                                            </function>
                                                            }
                                                        </block>
                                                    </class>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>compare</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>left</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>right</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>left</name>
                                        ==
                                        <name>right</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>0</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>left</name>
                                                ==
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return <expr>-1</expr>;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>right</name>
                                                        ==
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return <expr>1</expr>;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                        </else>
                                    </if>
                                </else>
                            </if>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>leftCode</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>identityHashCode</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>left</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>rightCode</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>identityHashCode</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>right</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>leftCode</name>
                                        !=
                                        <name>rightCode</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>leftCode</name>
                                                &lt; <name>rightCode</name> ? -1 : 1
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>

                            <comment type="line">// identityHashCode collision (rare, but not as rare as you'd think)
                            </comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>result</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>uids</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>left</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>compareTo</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>uids</name>.
                                                                    <name>get</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>right</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>result</name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>AssertionError</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        <comment type="line">// extremely, extremely unlikely.</comment>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return
                                <expr>
                                    <name>result</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>String</name>
                        </type>
                        <name>toString</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return <expr>"Ordering.arbitrary()"</expr>;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="block">/*
                        * We need to be able to mock identityHashCode() calls for tests, because it
                        * can take 1-10 seconds to find colliding objects. Mocking frameworks that
                        * can do magic to mock static method calls still can't do so for a system
                        * class, so we need the indirection. In production, Hotspot should still
                        * recognize that the call is 1-morphic and should still be willing to
                        * inline it if necessary.
                        */
                    </comment>
                    <function>
                        <type>
                            <name>int</name>
                        </type>
                        <name>identityHashCode</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>object</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>System</name>.
                                            <name>identityHashCode</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>object</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="line">// Constructor</comment>

            <comment type="javadoc">/**
                * Constructs a new instance of this class (only invokable by the subclass
                * constructor, typically implicit).
                */
            </comment>
            <constructor>
                <specifier>protected</specifier>
                <name>Ordering</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="line">// Instance-based factories (and any static equivalents)</comment>

            <comment type="javadoc">/**
                * Returns the reverse of this ordering; the {@code Ordering} equivalent to
                * {@link Collections#reverseOrder(Comparator)}.
                */
            </comment>
            <comment type="line">// type parameter &lt;S&gt; lets us avoid the extra &lt;String&gt; in statements
                like:
            </comment>
            <comment type="line">// Ordering&lt;String&gt; o = Ordering.&lt;String&gt;natural().reverse();</comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtCompatible</name>
                        <argument_list>(serializable = true)</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>S</name>
                            <extends>extends
                                <name>T</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Ordering</name>
                        <argument_list>&lt;
                            <argument>
                                <name>S</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>reverse</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>ReverseOrdering</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>S</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an ordering that treats {@code null} as less than all other values
                * and uses {@code this} to compare non-null values.
                */
            </comment>
            <comment type="line">// type parameter &lt;S&gt; lets us avoid the extra &lt;String&gt; in statements
                like:
            </comment>
            <comment type="line">// Ordering&lt;String&gt; o = Ordering.&lt;String&gt;natural().nullsFirst();</comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtCompatible</name>
                        <argument_list>(serializable = true)</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>S</name>
                            <extends>extends
                                <name>T</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Ordering</name>
                        <argument_list>&lt;
                            <argument>
                                <name>S</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>nullsFirst</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>NullsFirstOrdering</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>S</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an ordering that treats {@code null} as greater than all other
                * values and uses this ordering to compare non-null values.
                */
            </comment>
            <comment type="line">// type parameter &lt;S&gt; lets us avoid the extra &lt;String&gt; in statements
                like:
            </comment>
            <comment type="line">// Ordering&lt;String&gt; o = Ordering.&lt;String&gt;natural().nullsLast();</comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtCompatible</name>
                        <argument_list>(serializable = true)</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>S</name>
                            <extends>extends
                                <name>T</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Ordering</name>
                        <argument_list>&lt;
                            <argument>
                                <name>S</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>nullsLast</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>NullsLastOrdering</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>S</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a new ordering on {@code F} which orders elements by first applying
                * a function to them, then comparing those results using {@code this}. For
                * example, to compare objects by their string forms, in a case-insensitive
                * manner, use: &lt;pre&gt; {@code
                *
                * Ordering.from(String.CASE_INSENSITIVE_ORDER)
                * .onResultOf(Functions.toStringFunction())}&lt;/pre&gt;
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtCompatible</name>
                        <argument_list>(serializable = true)</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>F</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Ordering</name>
                        <argument_list>&lt;
                            <argument>
                                <name>F</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>onResultOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Function</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>F</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>T</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>function</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>ByFunctionOrdering</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>F</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>function</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <argument_list>&lt;
                        <argument>
                            <name>T2</name>
                            <extends>extends
                                <name>T</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Ordering</name>
                        <argument_list>&lt;
                            <argument>
                                <name><name>Map</name>.
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>T2</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>?</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>onKeys</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>onResultOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Maps</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            &lt;<name>T2</name>&gt;
                                            <call>
                                                <name>keyFunction</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an ordering which first uses the ordering {@code this}, but which
                * in the event of a "tie", then delegates to {@code secondaryComparator}.
                * For example, to sort a bug list first by status and second by priority, you
                * might use {@code byStatus.compound(byPriority)}. For a compound ordering
                * with three or more components, simply chain multiple calls to this method.
                *
                * &lt;p&gt;An ordering produced by this method, or a chain of calls to this method,
                * is equivalent to one created using {@link Ordering#compound(Iterable)} on
                * the same component comparators.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtCompatible</name>
                        <argument_list>(serializable = true)</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>U</name>
                            <extends>extends
                                <name>T</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Ordering</name>
                        <argument_list>&lt;
                            <argument>
                                <name>U</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>compound</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Comparator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>U</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>secondaryComparator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>CompoundOrdering</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>U</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>checkNotNull</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>secondaryComparator</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an ordering which tries each given comparator in order until a
                * non-zero result is found, returning that result, and returning zero only if
                * all comparators return zero. The returned ordering is based on the state of
                * the {@code comparators} iterable at the time it was provided to this
                * method.
                *
                * &lt;p&gt;The returned ordering is equivalent to that produced using {@code
                * Ordering.from(comp1).compound(comp2).compound(comp3) . . .}.
                *
                * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; Supplying an argument with undefined iteration order,
                * such as a {@link HashSet}, will produce non-deterministic results.
                *
                * @param comparators the comparators to try in order
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtCompatible</name>
                        <argument_list>(serializable = true)</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Ordering</name>
                        <argument_list>&lt;
                            <argument>
                                <name>T</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>compound</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>
                                                    <name>Comparator</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                            <super>super
                                                                <name>T</name>
                                                            </super>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>comparators</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>CompoundOrdering</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>comparators</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a new ordering which sorts iterables by comparing corresponding
                * elements pairwise until a nonzero result is found; imposes "dictionary
                * order". If the end of one iterable is reached, but not the other, the
                * shorter iterable is considered to be less than the longer one. For example,
                * a lexicographical natural ordering over integers considers {@code
                * [] &lt; [1] &lt; [1, 1] &lt; [1, 2] &lt; [2]}.
                *
                * &lt;p&gt;Note that {@code ordering.lexicographical().reverse()} is not
                * equivalent to {@code ordering.reverse().lexicographical()} (consider how
                * each would order {@code [1]} and {@code [1, 1]}).
                *
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtCompatible</name>
                        <argument_list>(serializable = true)</argument_list>
                    </annotation>
                    <comment type="line">// type parameter &lt;S&gt; lets us avoid the extra &lt;String&gt; in
                        statements like:
                    </comment>
                    <comment type="line">// Ordering&lt;Iterable&lt;String&gt;&gt; o =</comment>
                    <comment type="line">// Ordering.&lt;String&gt;natural().lexicographical();</comment>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>S</name>
                            <extends>extends
                                <name>T</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>Ordering</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>S</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>lexicographical</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <comment type="block">/*
                        * Note that technically the returned ordering should be capable of
                        * handling not just {@code Iterable&lt;S&gt;} instances, but also any {@code
                        * Iterable&lt;? extends S&gt;}. However, the need for this comes up so rarely
                        * that it doesn't justify making everyone else deal with the very ugly
                        * wildcard.
                        */
                    </comment>
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>LexicographicalOrdering</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>S</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="line">// Regular instance methods</comment>

            <comment type="line">// Override to add @Nullable</comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>int</name>
                </type>
                <name>compare</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>T</name>
                            </type>
                            <name>left</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>T</name>
                            </type>
                            <name>right</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the least of the specified values according to this ordering. If
                * there are multiple least values, the first of those is returned. The
                * iterator will be left exhausted: its {@code hasNext()} method will return
                * {@code false}.
                *
                * @param iterator the iterator whose minimum element is to be determined
                * @throws NoSuchElementException if {@code iterator} is empty
                * @throws ClassCastException if the parameters are not &lt;i&gt;mutually
                * comparable&lt;/i&gt; under this ordering.
                *
                * @since 11.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                            <extends>extends
                                <name>T</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>E</name>
                </type>
                <name>min</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>iterator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// let this throw NoSuchElementException as necessary</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>minSoFar</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>iterator</name>.
                                            <name>next</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <while>while
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>iterator</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>minSoFar</name>
                                    =
                                    <call>
                                        <name>min</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>minSoFar</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>iterator</name>.
                                                            <name>next</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <return>return
                        <expr>
                            <name>minSoFar</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the least of the specified values according to this ordering. If
                * there are multiple least values, the first of those is returned.
                *
                * @param iterable the iterable whose minimum element is to be determined
                * @throws NoSuchElementException if {@code iterable} is empty
                * @throws ClassCastException if the parameters are not &lt;i&gt;mutually
                * comparable&lt;/i&gt; under this ordering.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                            <extends>extends
                                <name>T</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>E</name>
                </type>
                <name>min</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>iterable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>min</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>iterable</name>.
                                                    <name>iterator</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the lesser of the two values according to this ordering. If the
                * values compare as 0, the first is returned.
                *
                * &lt;p&gt;&lt;b&gt;Implementation note:&lt;/b&gt; this method is invoked by the default
                * implementations of the other {@code min} overloads, so overriding it will
                * affect their behavior.
                *
                * @param a value to compare, returned if less than or equal to b.
                * @param b value to compare.
                * @throws ClassCastException if the parameters are not &lt;i&gt;mutually
                * comparable&lt;/i&gt; under this ordering.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                            <extends>extends
                                <name>T</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>E</name>
                </type>
                <name>min</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>E</name>
                            </type>
                            <name>a</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>E</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <call>
                                <name>compare</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>a</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>b</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &lt;= 0) ? <name>a</name> :
                            <name>b</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the least of the specified values according to this ordering. If
                * there are multiple least values, the first of those is returned.
                *
                * @param a value to compare, returned if less than or equal to the rest.
                * @param b value to compare
                * @param c value to compare
                * @param rest values to compare
                * @throws ClassCastException if the parameters are not &lt;i&gt;mutually
                * comparable&lt;/i&gt; under this ordering.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                            <extends>extends
                                <name>T</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>E</name>
                </type>
                <name>min</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>E</name>
                            </type>
                            <name>a</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>E</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>E</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type><name>E</name>...
                            </type>
                            <name>rest</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>minSoFar</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>min</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>min</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>a</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>b</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>c</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>E</name>
                                </type>
                                <name>r</name> :
                                <range>
                                    <expr>
                                        <name>rest</name>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>minSoFar</name>
                                    =
                                    <call>
                                        <name>min</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>minSoFar</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>r</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <return>return
                        <expr>
                            <name>minSoFar</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the greatest of the specified values according to this ordering. If
                * there are multiple greatest values, the first of those is returned. The
                * iterator will be left exhausted: its {@code hasNext()} method will return
                * {@code false}.
                *
                * @param iterator the iterator whose maximum element is to be determined
                * @throws NoSuchElementException if {@code iterator} is empty
                * @throws ClassCastException if the parameters are not &lt;i&gt;mutually
                * comparable&lt;/i&gt; under this ordering.
                *
                * @since 11.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                            <extends>extends
                                <name>T</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>E</name>
                </type>
                <name>max</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>iterator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// let this throw NoSuchElementException as necessary</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>maxSoFar</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>iterator</name>.
                                            <name>next</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <while>while
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>iterator</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>maxSoFar</name>
                                    =
                                    <call>
                                        <name>max</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>maxSoFar</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>iterator</name>.
                                                            <name>next</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <return>return
                        <expr>
                            <name>maxSoFar</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the greatest of the specified values according to this ordering. If
                * there are multiple greatest values, the first of those is returned.
                *
                * @param iterable the iterable whose maximum element is to be determined
                * @throws NoSuchElementException if {@code iterable} is empty
                * @throws ClassCastException if the parameters are not &lt;i&gt;mutually
                * comparable&lt;/i&gt; under this ordering.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                            <extends>extends
                                <name>T</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>E</name>
                </type>
                <name>max</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>iterable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>max</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>iterable</name>.
                                                    <name>iterator</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the greater of the two values according to this ordering. If the
                * values compare as 0, the first is returned.
                *
                * &lt;p&gt;&lt;b&gt;Implementation note:&lt;/b&gt; this method is invoked by the default
                * implementations of the other {@code max} overloads, so overriding it will
                * affect their behavior.
                *
                * @param a value to compare, returned if greater than or equal to b.
                * @param b value to compare.
                * @throws ClassCastException if the parameters are not &lt;i&gt;mutually
                * comparable&lt;/i&gt; under this ordering.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                            <extends>extends
                                <name>T</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>E</name>
                </type>
                <name>max</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>E</name>
                            </type>
                            <name>a</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>E</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(
                            <call>
                                <name>compare</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>a</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>b</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &gt;= 0) ? <name>a</name> :
                            <name>b</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the greatest of the specified values according to this ordering. If
                * there are multiple greatest values, the first of those is returned.
                *
                * @param a value to compare, returned if greater than or equal to the rest.
                * @param b value to compare
                * @param c value to compare
                * @param rest values to compare
                * @throws ClassCastException if the parameters are not &lt;i&gt;mutually
                * comparable&lt;/i&gt; under this ordering.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                            <extends>extends
                                <name>T</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>E</name>
                </type>
                <name>max</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>E</name>
                            </type>
                            <name>a</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>E</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>E</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type><name>E</name>...
                            </type>
                            <name>rest</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>maxSoFar</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>max</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>max</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>a</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>b</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>c</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>E</name>
                                </type>
                                <name>r</name> :
                                <range>
                                    <expr>
                                        <name>rest</name>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>maxSoFar</name>
                                    =
                                    <call>
                                        <name>max</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>maxSoFar</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>r</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <return>return
                        <expr>
                            <name>maxSoFar</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the {@code k} least elements of the given iterable according to
                * this ordering, in order from least to greatest. If there are fewer than
                * {@code k} elements present, all will be included.
                *
                * &lt;p&gt;The implementation does not necessarily use a &lt;i&gt;stable&lt;/i&gt; sorting
                * algorithm; when multiple elements are equivalent, it is undefined which
                * will come first.
                *
                * @return an immutable {@code RandomAccess} list of the {@code k} least
                * elements in ascending order
                * @throws IllegalArgumentException if {@code k} is negative
                * @since 8.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                            <extends>extends
                                <name>T</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>leastOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>iterable</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>k</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>iterable</name>
                                <name>instanceof</name>
                                <name>Collection</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>Collection</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>E</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>collection</name> =
                                        <init>
                                            <expr>(
                                                <name>
                                                    <name>Collection</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>E</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                )
                                                <name>iterable</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>collection</name>.
                                                    <name>size</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &lt;= 2L *
                                            <name>k</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// In this case, just dumping the collection to an
                                                array and sorting is
                                            </comment>
                                            <comment type="line">// faster than using the implementation for Iterator,
                                                which is
                                            </comment>
                                            <comment type="line">// specialized for k much smaller than n.</comment>

                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <annotation>@
                                                            <name>SuppressWarnings</name>
                                                            <argument_list>("unchecked")</argument_list>
                                                        </annotation>
                                                        <comment type="line">// c only contains E's and doesn't escape
                                                        </comment>
                                                        <name>E</name>
                                                        <index>[]</index>
                                                    </type>
                                                    <name>array</name> =
                                                    <init>
                                                        <expr>(
                                                            <name>
                                                                <name>E</name>
                                                                <index>[]</index>
                                                            </name>
                                                            )
                                                            <call>
                                                                <name><name>collection</name>.
                                                                    <name>toArray</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>Arrays</name>.
                                                            <name>sort</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>array</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>this</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name><name>array</name>.
                                                            <name>length</name>
                                                        </name>
                                                        &gt;
                                                        <name>k</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>array</name>
                                                                =
                                                                <call>
                                                                    <name><name>ObjectArrays</name>.
                                                                        <name>arraysCopyOf</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>array</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>k</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>Collections</name>.
                                                            <name>unmodifiableList</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>Arrays</name>.
                                                                            <name>asList</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>array</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name>leastOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>iterable</name>.
                                                    <name>iterator</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>k</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the {@code k} least elements from the given iterator according to
                * this ordering, in order from least to greatest. If there are fewer than
                * {@code k} elements present, all will be included.
                *
                * &lt;p&gt;The implementation does not necessarily use a &lt;i&gt;stable&lt;/i&gt; sorting
                * algorithm; when multiple elements are equivalent, it is undefined which
                * will come first.
                *
                * @return an immutable {@code RandomAccess} list of the {@code k} least
                * elements in ascending order
                * @throws IllegalArgumentException if {@code k} is negative
                * @since 14.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                            <extends>extends
                                <name>T</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>leastOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>elements</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>k</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>elements</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNonnegative</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>k</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"k"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name>k</name>
                                == 0 || !
                                <call>
                                    <name><name>elements</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>ImmutableList</name>.
                                                <name>of</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>k</name>
                                        &gt;=
                                        <name><name>Integer</name>.
                                            <name>MAX_VALUE</name>
                                        </name>
                                        / 2
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// k is really large; just do a straightforward
                                            sorted-copy-and-sublist
                                        </comment>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>
                                                        <name>ArrayList</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>E</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </type>
                                                <name>list</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>Lists</name>.
                                                                <name>newArrayList</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>elements</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>Collections</name>.
                                                        <name>sort</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>list</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>this</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>list</name>.
                                                            <name>size</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    &gt;
                                                    <name>k</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>list</name>.
                                                                    <name>subList</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>k</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>list</name>.
                                                                                    <name>size</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            .
                                                            <call>
                                                                <name>clear</name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>list</name>.
                                                        <name>trimToSize</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>Collections</name>.
                                                        <name>unmodifiableList</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>list</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>

                    <comment type="block">/*
                        * Our goal is an O(n) algorithm using only one pass and O(k) additional
                        * memory.
                        *
                        * We use the following algorithm: maintain a buffer of size 2*k. Every time
                        * the buffer gets full, find the median and partition around it, keeping
                        * only the lowest k elements. This requires n/k find-median-and-partition
                        * steps, each of which take O(k) time with a traditional quickselect.
                        *
                        * After sorting the output, the whole algorithm is O(n + k log k). It
                        * degrades gracefully for worst-case input (descending order), performs
                        * competitively or wins outright for randomly ordered input, and doesn't
                        * require the whole collection to fit into memory.
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>bufferCap</name> =
                            <init>
                                <expr>
                                    <name>k</name>
                                    * 2
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>SuppressWarnings</name>
                                    <argument_list>("unchecked")</argument_list>
                                </annotation>
                                <comment type="line">// we'll only put E's in</comment>
                                <name>E</name>
                                <index>[]</index>
                            </type>
                            <name>buffer</name> =
                            <init>
                                <expr>(
                                    <name>
                                        <name>E</name>
                                        <index>[]</index>
                                    </name>
                                    ) new
                                    <name>
                                        <name>Object</name>
                                        <index>[
                                            <expr>
                                                <name>bufferCap</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>threshold</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>elements</name>.
                                            <name>next</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>buffer</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                            =
                            <name>threshold</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>bufferSize</name> =
                            <init>
                                <expr>1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// threshold is the kth smallest element seen so far. Once bufferSize &gt;=
                        k,
                    </comment>
                    <comment type="line">// anything larger than threshold can be ignored immediately.</comment>

                    <while>while
                        <condition>(
                            <expr>
                                <name>bufferSize</name>
                                &lt; <name>k</name> &amp;&amp;
                                <call>
                                    <name><name>elements</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>E</name>
                                    </type>
                                    <name>e</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>elements</name>.
                                                    <name>next</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>buffer</name>
                                        <index>[
                                            <expr><name>bufferSize</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>e</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>threshold</name>
                                    =
                                    <call>
                                        <name>max</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>threshold</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>e</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <while>while
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>elements</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>E</name>
                                    </type>
                                    <name>e</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>elements</name>.
                                                    <name>next</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name>compare</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>threshold</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &gt;= 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <continue>continue;</continue>
                                        }
                                    </block>
                                </then>
                            </if>

                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>buffer</name>
                                        <index>[
                                            <expr><name>bufferSize</name>++
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>e</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>bufferSize</name>
                                        ==
                                        <name>bufferCap</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// We apply the quickselect algorithm to partition about
                                            the median,
                                        </comment>
                                        <comment type="line">// and then ignore the last k elements.</comment>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>left</name> =
                                                <init>
                                                    <expr>0</expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>right</name> =
                                                <init>
                                                    <expr>
                                                        <name>bufferCap</name>
                                                        - 1
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>

                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>minThresholdPosition</name> =
                                                <init>
                                                    <expr>0</expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <comment type="line">// The leftmost position at which the greatest of the k
                                            lower elements
                                        </comment>
                                        <comment type="line">// -- the new value of threshold -- might be found.
                                        </comment>

                                        <while>while
                                            <condition>(
                                                <expr>
                                                    <name>left</name>
                                                    &lt;
                                                    <name>right</name>
                                                </expr>
                                                )
                                            </condition>
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>pivotIndex</name> =
                                                        <init>
                                                            <expr>(<name>left</name> + <name>right</name> + 1) &gt;&gt;&gt;
                                                                1
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>int</name>
                                                        </type>
                                                        <name>pivotNewIndex</name> =
                                                        <init>
                                                            <expr>
                                                                <call>
                                                                    <name>partition</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>buffer</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>left</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>right</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>pivotIndex</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>pivotNewIndex</name>
                                                            &gt;
                                                            <name>k</name>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>right</name>
                                                                    = <name>pivotNewIndex</name> - 1
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                    <else>else
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>pivotNewIndex</name>
                                                                    &lt;
                                                                    <name>k</name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>left</name>
                                                                            =
                                                                            <call>
                                                                                <name><name>Math</name>.
                                                                                    <name>max</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>pivotNewIndex</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>left</name>
                                                                                            + 1
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    <expr_stmt>
                                                                        <expr>
                                                                            <name>minThresholdPosition</name>
                                                                            =
                                                                            <name>pivotNewIndex</name>
                                                                        </expr>
                                                                        ;
                                                                    </expr_stmt>
                                                                    }
                                                                </block>
                                                            </then>
                                                            <else>else
                                                                <block>{
                                                                    <break>break;</break>
                                                                    }
                                                                </block>
                                                            </else>
                                                        </if>
                                                    </else>
                                                </if>
                                                }
                                            </block>
                                        </while>
                                        <expr_stmt>
                                            <expr>
                                                <name>bufferSize</name>
                                                =
                                                <name>k</name>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <expr_stmt>
                                            <expr>
                                                <name>threshold</name>
                                                =
                                                <name>
                                                    <name>buffer</name>
                                                    <index>[
                                                        <expr>
                                                            <name>minThresholdPosition</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <for>for (
                                            <init>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>i</name> =
                                                    <init>
                                                        <expr>
                                                            <name>minThresholdPosition</name>
                                                            + 1
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </init>
                                            <condition>
                                                <expr>
                                                    <name>i</name>
                                                    &lt;
                                                    <name>bufferSize</name>
                                                </expr>
                                                ;
                                            </condition>
                                            <incr>
                                                <expr><name>i</name>++
                                                </expr>
                                            </incr>
                                            )
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>threshold</name>
                                                        =
                                                        <call>
                                                            <name>max</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>threshold</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>
                                                                            <name>buffer</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </for>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </while>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>Arrays</name>.
                                    <name>sort</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>buffer</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>bufferSize</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name>bufferSize</name>
                            =
                            <call>
                                <name><name>Math</name>.
                                    <name>min</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bufferSize</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>k</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Collections</name>.
                                    <name>unmodifiableList</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Arrays</name>.
                                                    <name>asList</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>ObjectArrays</name>.
                                                                    <name>arraysCopyOf</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>buffer</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>bufferSize</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    <comment type="line">// We can't use ImmutableList; we have to be null-friendly!</comment>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                            <extends>extends
                                <name>T</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>int</name>
                </type>
                <name>partition</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>E</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>values</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>left</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>right</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>pivotIndex</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>pivotValue</name> =
                            <init>
                                <expr>
                                    <name>
                                        <name>values</name>
                                        <index>[
                                            <expr>
                                                <name>pivotIndex</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <expr_stmt>
                        <expr>
                            <name>
                                <name>values</name>
                                <index>[
                                    <expr>
                                        <name>pivotIndex</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <name>
                                <name>values</name>
                                <index>[
                                    <expr>
                                        <name>right</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>values</name>
                                <index>[
                                    <expr>
                                        <name>right</name>
                                    </expr>
                                    ]
                                </index>
                            </name>
                            =
                            <name>pivotValue</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>storeIndex</name> =
                            <init>
                                <expr>
                                    <name>left</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name>left</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>right</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name>compare</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>
                                                            <name>values</name>
                                                            <index>[
                                                                <expr>
                                                                    <name>i</name>
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>pivotValue</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &lt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>ObjectArrays</name>.
                                                        <name>swap</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>values</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>storeIndex</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>i</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr><name>storeIndex</name>++
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>ObjectArrays</name>.
                                    <name>swap</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>values</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>right</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>storeIndex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>storeIndex</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the {@code k} greatest elements of the given iterable according to
                * this ordering, in order from greatest to least. If there are fewer than
                * {@code k} elements present, all will be included.
                *
                * &lt;p&gt;The implementation does not necessarily use a &lt;i&gt;stable&lt;/i&gt; sorting
                * algorithm; when multiple elements are equivalent, it is undefined which
                * will come first.
                *
                * @return an immutable {@code RandomAccess} list of the {@code k} greatest
                * elements in &lt;i&gt;descending order&lt;/i&gt;
                * @throws IllegalArgumentException if {@code k} is negative
                * @since 8.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                            <extends>extends
                                <name>T</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>greatestOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>iterable</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>k</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// TODO(kevinb): see if delegation is hurting performance noticeably</comment>
                    <comment type="line">// TODO(kevinb): if we change this implementation, add full unit tests.
                    </comment>
                    <return>return
                        <expr>
                            <call>
                                <name>reverse</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>leastOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>iterable</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>k</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the {@code k} greatest elements from the given iterator according to
                * this ordering, in order from greatest to least. If there are fewer than
                * {@code k} elements present, all will be included.
                *
                * &lt;p&gt;The implementation does not necessarily use a &lt;i&gt;stable&lt;/i&gt; sorting
                * algorithm; when multiple elements are equivalent, it is undefined which
                * will come first.
                *
                * @return an immutable {@code RandomAccess} list of the {@code k} greatest
                * elements in &lt;i&gt;descending order&lt;/i&gt;
                * @throws IllegalArgumentException if {@code k} is negative
                * @since 14.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                            <extends>extends
                                <name>T</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>greatestOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>iterator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>k</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>reverse</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>leastOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>iterator</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>k</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a &lt;b&gt;mutable&lt;/b&gt; list containing {@code elements} sorted by this
                * ordering; use this only when the resulting list may need further
                * modification, or may contain {@code null}. The input is not modified. The
                * returned list is serializable and has random access.
                *
                * &lt;p&gt;Unlike {@link Sets#newTreeSet(Iterable)}, this method does not discard
                * elements that are duplicates according to the comparator. The sort
                * performed is &lt;i&gt;stable&lt;/i&gt;, meaning that such elements will appear in the
                * returned list in the same order they appeared in {@code elements}.
                *
                * &lt;p&gt;&lt;b&gt;Performance note:&lt;/b&gt; According to our
                * benchmarking
                * on Open JDK 7, {@link #immutableSortedCopy} generally performs better (in
                * both time and space) than this method, and this method in turn generally
                * performs better than copying the list and calling {@link
                * Collections#sort(List)}.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                            <extends>extends
                                <name>T</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>sortedCopy</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>elements</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>SuppressWarnings</name>
                                    <argument_list>("unchecked")</argument_list>
                                </annotation>
                                <comment type="line">// does not escape, and contains only E's</comment>
                                <name>E</name>
                                <index>[]</index>
                            </type>
                            <name>array</name> =
                            <init>
                                <expr>(
                                    <name>
                                        <name>E</name>
                                        <index>[]</index>
                                    </name>
                                    )
                                    <call>
                                        <name><name>Iterables</name>.
                                            <name>toArray</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>elements</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>Arrays</name>.
                                    <name>sort</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Lists</name>.
                                    <name>newArrayList</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Arrays</name>.
                                                    <name>asList</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>array</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an &lt;b&gt;immutable&lt;/b&gt; list containing {@code elements} sorted by this
                * ordering. The input is not modified.
                *
                * &lt;p&gt;Unlike {@link Sets#newTreeSet(Iterable)}, this method does not discard
                * elements that are duplicates according to the comparator. The sort
                * performed is &lt;i&gt;stable&lt;/i&gt;, meaning that such elements will appear in the
                * returned list in the same order they appeared in {@code elements}.
                *
                * &lt;p&gt;&lt;b&gt;Performance note:&lt;/b&gt; According to our
                * benchmarking
                * on Open JDK 7, this method is the most efficient way to make a sorted copy
                * of a collection.
                *
                * @throws NullPointerException if any of {@code elements} (or {@code
                * elements} itself) is null
                * @since 3.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                            <extends>extends
                                <name>T</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>ImmutableList</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>immutableSortedCopy</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>elements</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>SuppressWarnings</name>
                                    <argument_list>("unchecked")</argument_list>
                                </annotation>
                                <comment type="line">// we'll only ever have E's in here</comment>
                                <name>E</name>
                                <index>[]</index>
                            </type>
                            <name>array</name> =
                            <init>
                                <expr>(
                                    <name>
                                        <name>E</name>
                                        <index>[]</index>
                                    </name>
                                    )
                                    <call>
                                        <name><name>Iterables</name>.
                                            <name>toArray</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>elements</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>E</name>
                                </type>
                                <name>e</name> :
                                <range>
                                    <expr>
                                        <name>array</name>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>e</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>Arrays</name>.
                                    <name>sort</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>ImmutableList</name>.
                                    <name>asImmutableList</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>array</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns {@code true} if each element in {@code iterable} after the first is
                * greater than or equal to the element that preceded it, according to this
                * ordering. Note that this is always true when the iterable has fewer than
                * two elements.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isOrdered</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>T</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>iterable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>T</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>it</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>iterable</name>.
                                            <name>iterator</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>it</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>T</name>
                                        </type>
                                        <name>prev</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>it</name>.
                                                        <name>next</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <while>while
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>it</name>.
                                                    <name>hasNext</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>T</name>
                                                </type>
                                                <name>next</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>it</name>.
                                                                <name>next</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name>compare</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>prev</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>next</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    &gt; 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return <expr>false</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <name>prev</name>
                                                =
                                                <name>next</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns {@code true} if each element in {@code iterable} after the first is
                * &lt;i&gt;strictly&lt;/i&gt; greater than the element that preceded it, according to
                * this ordering. Note that this is always true when the iterable has fewer
                * than two elements.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isStrictlyOrdered</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>T</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>iterable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>T</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>it</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>iterable</name>.
                                            <name>iterator</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>it</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>T</name>
                                        </type>
                                        <name>prev</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>it</name>.
                                                        <name>next</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <while>while
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>it</name>.
                                                    <name>hasNext</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>T</name>
                                                </type>
                                                <name>next</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name><name>it</name>.
                                                                <name>next</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name>compare</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>prev</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>next</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    &gt;= 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <return>return <expr>false</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <name>prev</name>
                                                =
                                                <name>next</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * {@link Collections#binarySearch(List, Object, Comparator) Searches}
                * {@code sortedList} for {@code key} using the binary search algorithm. The
                * list must be sorted using this ordering.
                *
                * @param sortedList the list to be searched
                * @param key the key to be searched for
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>binarySearch</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>T</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>sortedList</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>T</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Collections</name>.
                                    <name>binarySearch</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>sortedList</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>key</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Exception thrown by a {@link Ordering#explicit(List)} or {@link
                * Ordering#explicit(Object, Object[])} comparator when comparing a value
                * outside the set of values it can compare. Extending {@link
                * ClassCastException} may seem odd, but it is required.
                */
            </comment>
            <comment type="line">// TODO(kevinb): make this public, document it right</comment>
            <class>
                <annotation>@
                    <name>VisibleForTesting</name>
                </annotation>
                <specifier>static</specifier>
                class <name>IncomparableValueException</name>
                <super>
                    <extends>extends
                        <name>ClassCastException</name>
                    </extends>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>IncomparableValueException</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Object</name>
                                    </type>
                                    <name>value</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"Cannot compare value: " +
                                                    <name>value</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>value</name>
                                    </name>
                                    =
                                    <name>value</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    }
                </block>
            </class>

            <comment type="line">// Never make these public</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>LEFT_IS_GREATER</name> =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>RIGHT_IS_GREATER</name> =
                    <init>
                        <expr>-1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            }
        </block>
    </class>
</unit>
