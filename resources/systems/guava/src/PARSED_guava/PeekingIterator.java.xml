<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\PeekingIterator.java">
    <comment type="block">/*
        * Copyright (C) 2008 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>NoSuchElementException</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * An iterator that supports a one-element lookahead while iterating.
        *
        * &lt;p&gt;See the Guava User Guide article on &lt;a href=
        * "https://github.com/google/guava/wiki/CollectionHelpersExplained#peekingiterator"&gt;
        * {@code PeekingIterator}&lt;/a&gt;.
        *
        * @author Mick Killianey
        * @since 2.0
        */
    </comment>
    <class type="interface">
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        interface
        <name>
            <name>PeekingIterator</name>
            <argument_list>&lt;
                <argument>
                    <name>E</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>Iterator</name>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <comment type="javadoc">/**
                * Returns the next element in the iteration, without advancing the iteration.
                *
                * &lt;p&gt;Calls to {@code peek()} should not change the state of the iteration,
                * except that it &lt;i&gt;may&lt;/i&gt; prevent removal of the most recent element via
                * {@link #remove()}.
                *
                * @throws NoSuchElementException if the iteration has no more elements
                * according to {@link #hasNext()}
                */
            </comment>
            <function_decl>
                <type>
                    <name>E</name>
                </type>
                <name>peek</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * {@inheritDoc}
                *
                * &lt;p&gt;The objects returned by consecutive calls to {@link #peek()} then {@link
                * #next()} are guaranteed to be equal to each other.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>E</name>
                </type>
                <name>next</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * {@inheritDoc}
                *
                * &lt;p&gt;Implementations may or may not support removal when a call to {@link
                * #peek()} has occurred since the most recent call to {@link #next()}.
                *
                * @throws IllegalStateException if there has been a call to {@link #peek()}
                * since the most recent call to {@link #next()} and this implementation
                * does not support this sequence of calls (optional)
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>void</name>
                </type>
                <name>remove</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            }
        </block>
    </class>
</unit>
