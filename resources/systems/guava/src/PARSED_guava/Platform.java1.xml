<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\escape\Platform.java">
    <comment type="block">/*
        * Copyright (C) 2009 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>escape</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Methods factored out so that they can be emulated differently in GWT.
        *
        * @author Jesse Wilson
        */
    </comment>
    <class>
        <annotation>@
            <name>GwtCompatible</name>
            <argument_list>(emulated = true)</argument_list>
        </annotation>
        <specifier>final</specifier>
        class <name>Platform</name>
        <block>{
            <constructor>
                <specifier>private</specifier>
                <name>Platform</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="javadoc">/** Returns a thread-local 1024-char array. */</comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>char</name>
                    <index>[]</index>
                </type>
                <name>charBufferFromThreadLocal</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>DEST_TL</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * A thread-local destination buffer to keep us from creating new buffers.
                * The starting size is 1024 characters. If we grow past this we don't
                * put it back in the threadlocal, we just keep going and grow as needed.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>ThreadLocal</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>char</name>
                                    <index>[]</index>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>DEST_TL</name> =
                    <init>
                        <expr>new
                            <class>
                                <super>
                                    <name>
                                        <name>ThreadLocal</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>
                                                    <name>char</name>
                                                    <index>[]</index>
                                                </name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </super>
                                <argument_list>()</argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>protected</specifier>
                                            <name>char</name>
                                            <index>[]</index>
                                        </type>
                                        <name>initialValue</name>
                                        <parameter_list>()</parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>new
                                                    <name>
                                                        <name>char</name>
                                                        <index>[<expr>1024</expr>]
                                                        </index>
                                                    </name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            }
        </block>
    </class>
</unit>
