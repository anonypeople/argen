<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\base\Preconditions.java">
    <comment type="block">/*
        * Copyright (C) 2007 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
        * in compliance with the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software distributed under the License
        * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
        * or implied. See the License for the specific language governing permissions and limitations under
        * the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>base</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Static convenience methods that help a method or constructor check whether it was invoked
        * correctly (whether its &lt;i&gt;preconditions&lt;/i&gt; have been met). These methods generally accept a
        * {@code boolean} expression which is expected to be {@code true} (or in the case of {@code
        * checkNotNull}, an object reference which is expected to be non-null). When {@code false} (or
        * {@code null}) is passed instead, the {@code Preconditions} method throws an unchecked exception,
        * which helps the calling method communicate to &lt;i&gt;its&lt;/i&gt; caller that &lt;i&gt;that&lt;/i&gt;
        caller has made
        * a mistake. Example: &lt;pre&gt; {@code
        *
        * /**
        * * Returns the positive square root of the given value.
        * *
        * * @throws IllegalArgumentException if the value is negative
        * *}{@code /
        * public static double sqrt(double value) {
        * Preconditions.checkArgument(value &gt;= 0.0, "negative value: %s", value);
        * // calculate the square root
        * }
        *
        * void exampleBadCaller() {
        * double d = sqrt(-1.0);
        * }}&lt;/pre&gt;
        *
        * In this example, {@code checkArgument} throws an {@code IllegalArgumentException} to indicate
        * that {@code exampleBadCaller} made an error in &lt;i&gt;its&lt;/i&gt; call to {@code sqrt}.
        *
        * &lt;h3&gt;Warning about performance&lt;/h3&gt;
        *
        * &lt;p&gt;The goal of this class is to improve readability of code, but in some circumstances this may
        * come at a significant performance cost. Remember that parameter values for message construction
        * must all be computed eagerly, and autoboxing and varargs array creation may happen as well, even
        * when the precondition check then succeeds (as it should almost always do in production). In some
        * circumstances these wasted CPU cycles and allocations can add up to a real problem.
        * Performance-sensitive precondition checks can always be converted to the customary form:
        * &lt;pre&gt; {@code
        *
        * if (value &lt; 0.0) {
        * throw new IllegalArgumentException("negative value: " + value);
        * }}&lt;/pre&gt;
        *
        * &lt;h3&gt;Other types of preconditions&lt;/h3&gt;
        *
        * &lt;p&gt;Not every type of precondition failure is supported by these methods. Continue to throw
        * standard JDK exceptions such as {@link java.util.NoSuchElementException} or {@link
        * UnsupportedOperationException} in the situations they are intended for.
        *
        * &lt;h3&gt;Non-preconditions&lt;/h3&gt;
        *
        * &lt;p&gt;It is of course possible to use the methods of this class to check for invalid conditions
        * which are &lt;i&gt;not the caller's fault&lt;/i&gt;. Doing so is &lt;b&gt;not recommended&lt;/b&gt; because it
        is
        * misleading to future readers of the code and of stack traces. See
        * &lt;a href="https://github.com/google/guava/wiki/ConditionalFailuresExplained"&gt;Conditional
        * failures explained&lt;/a&gt; in the Guava User Guide for more advice.
        *
        * &lt;h3&gt;{@code java.util.Objects.requireNonNull()}&lt;/h3&gt;
        *
        * &lt;p&gt;Projects which use {@code com.google.common} should generally avoid the use of {@link
        * java.util.Objects#requireNonNull(Object)}. Instead, use whichever of {@link
        * #checkNotNull(Object)} or {@link Verify#verifyNotNull(Object)} is appropriate to the situation.
        * (The same goes for the message-accepting overloads.)
        *
        * &lt;h3&gt;Only {@code %s} is supported&lt;/h3&gt;
        *
        * &lt;p&gt;In {@code Preconditions} error message template strings, only the {@code "%s"} specifier is
        * supported, not the full range of {@link java.util.Formatter} specifiers.
        *
        * &lt;h3&gt;More information&lt;/h3&gt;
        *
        * &lt;p&gt;See the Guava User Guide on
        * &lt;a href="https://github.com/google/guava/wiki/PreconditionsExplained"&gt;using {@code
        * Preconditions}&lt;/a&gt;.
        *
        * @author Kevin Bourrillion
        * @since 2.0
        */
    </comment>
    <class>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>Preconditions</name>
        <block>{
            <constructor>
                <specifier>private</specifier>
                <name>Preconditions</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="javadoc">/**
                * Ensures the truth of an expression involving one or more parameters to the calling method.
                *
                * @param expression a boolean expression
                * @throws IllegalArgumentException if {@code expression} is false
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>checkArgument</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>expression</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!
                                <name>expression</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Ensures the truth of an expression involving one or more parameters to the calling method.
                *
                * @param expression a boolean expression
                * @param errorMessage the exception message to use if the check fails; will be converted to a
                * string using {@link String#valueOf(Object)}
                * @throws IllegalArgumentException if {@code expression} is false
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>checkArgument</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>expression</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>errorMessage</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!
                                <name>expression</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>String</name>.
                                                                <name>valueOf</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>errorMessage</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Ensures the truth of an expression involving one or more parameters to the calling method.
                *
                * @param expression a boolean expression
                * @param errorMessageTemplate a template for the exception message should the check fail. The
                * message is formed by replacing each {@code %s} placeholder in the template with an
                * argument. These are matched by position - the first {@code %s} gets {@code
                * errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted message
                * in square braces. Unmatched placeholders will be left as-is.
                * @param errorMessageArgs the arguments to be substituted into the message template. Arguments
                * are converted to strings using {@link String#valueOf(Object)}.
                * @throws IllegalArgumentException if {@code expression} is false
                * @throws NullPointerException if the check fails and either {@code errorMessageTemplate} or
                * {@code errorMessageArgs} is null (don't let this happen)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>checkArgument</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>expression</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>String</name>
                            </type>
                            <name>errorMessageTemplate</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>...
                            </type>
                            <name>errorMessageArgs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!
                                <name>expression</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name>format</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>errorMessageTemplate</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>errorMessageArgs</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Ensures the truth of an expression involving the state of the calling instance, but not
                * involving any parameters to the calling method.
                *
                * @param expression a boolean expression
                * @throws IllegalStateException if {@code expression} is false
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>checkState</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>expression</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!
                                <name>expression</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalStateException</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Ensures the truth of an expression involving the state of the calling instance, but not
                * involving any parameters to the calling method.
                *
                * @param expression a boolean expression
                * @param errorMessage the exception message to use if the check fails; will be converted to a
                * string using {@link String#valueOf(Object)}
                * @throws IllegalStateException if {@code expression} is false
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>checkState</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>expression</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>errorMessage</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!
                                <name>expression</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalStateException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>String</name>.
                                                                <name>valueOf</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>errorMessage</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Ensures the truth of an expression involving the state of the calling instance, but not
                * involving any parameters to the calling method.
                *
                * @param expression a boolean expression
                * @param errorMessageTemplate a template for the exception message should the check fail. The
                * message is formed by replacing each {@code %s} placeholder in the template with an
                * argument. These are matched by position - the first {@code %s} gets {@code
                * errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted message
                * in square braces. Unmatched placeholders will be left as-is.
                * @param errorMessageArgs the arguments to be substituted into the message template. Arguments
                * are converted to strings using {@link String#valueOf(Object)}.
                * @throws IllegalStateException if {@code expression} is false
                * @throws NullPointerException if the check fails and either {@code errorMessageTemplate} or
                * {@code errorMessageArgs} is null (don't let this happen)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>checkState</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>expression</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>String</name>
                            </type>
                            <name>errorMessageTemplate</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>...
                            </type>
                            <name>errorMessageArgs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!
                                <name>expression</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalStateException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name>format</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>errorMessageTemplate</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>errorMessageArgs</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Ensures that an object reference passed as a parameter to the calling method is not null.
                *
                * @param reference an object reference
                * @return the non-null reference that was validated
                * @throws NullPointerException if {@code reference} is null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>T</name>
                </type>
                <name>checkNotNull</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>reference</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>reference</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NullPointerException</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>reference</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Ensures that an object reference passed as a parameter to the calling method is not null.
                *
                * @param reference an object reference
                * @param errorMessage the exception message to use if the check fails; will be converted to a
                * string using {@link String#valueOf(Object)}
                * @return the non-null reference that was validated
                * @throws NullPointerException if {@code reference} is null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>T</name>
                </type>
                <name>checkNotNull</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>reference</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>errorMessage</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>reference</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NullPointerException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>String</name>.
                                                                <name>valueOf</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>errorMessage</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>reference</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Ensures that an object reference passed as a parameter to the calling method is not null.
                *
                * @param reference an object reference
                * @param errorMessageTemplate a template for the exception message should the check fail. The
                * message is formed by replacing each {@code %s} placeholder in the template with an
                * argument. These are matched by position - the first {@code %s} gets {@code
                * errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted message
                * in square braces. Unmatched placeholders will be left as-is.
                * @param errorMessageArgs the arguments to be substituted into the message template. Arguments
                * are converted to strings using {@link String#valueOf(Object)}.
                * @return the non-null reference that was validated
                * @throws NullPointerException if {@code reference} is null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>T</name>
                </type>
                <name>checkNotNull</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>reference</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>String</name>
                            </type>
                            <name>errorMessageTemplate</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>...
                            </type>
                            <name>errorMessageArgs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>reference</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// If either of these parameters is null, the right thing happens
                                    anyway
                                </comment>
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NullPointerException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name>format</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>errorMessageTemplate</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>errorMessageArgs</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>reference</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="block">/*
                * All recent hotspots (as of 2009) *really* like to have the natural code
                *
                * if (guardExpression) {
                * throw new BadException(messageExpression);
                * }
                *
                * refactored so that messageExpression is moved to a separate String-returning method.
                *
                * if (guardExpression) {
                * throw new BadException(badMsg(...));
                * }
                *
                * The alternative natural refactorings into void or Exception-returning methods are much slower.
                * This is a big deal - we're talking factors of 2-8 in microbenchmarks, not just 10-20%. (This
                * is a hotspot optimizer bug, which should be fixed, but that's a separate, big project).
                *
                * The coding pattern above is heavily used in java.util, e.g. in ArrayList. There is a
                * RangeCheckMicroBenchmark in the JDK that was used to test this.
                *
                * But the methods in this class want to throw different exceptions, depending on the args, so it
                * appears that this pattern is not directly applicable. But we can use the ridiculous, devious
                * trick of throwing an exception in the middle of the construction of another exception. Hotspot
                * is fine with that.
                */
            </comment>

            <comment type="javadoc">/**
                * Ensures that {@code index} specifies a valid &lt;i&gt;element&lt;/i&gt; in an array, list or string of
                size
                * {@code size}. An element index may range from zero, inclusive, to {@code size}, exclusive.
                *
                * @param index a user-supplied index identifying an element of an array, list or string
                * @param size the size of that array, list or string
                * @return the value of {@code index}
                * @throws IndexOutOfBoundsException if {@code index} is negative or is not less than {@code size}
                * @throws IllegalArgumentException if {@code size} is negative
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>checkElementIndex</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>checkElementIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>size</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"index"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Ensures that {@code index} specifies a valid &lt;i&gt;element&lt;/i&gt; in an array, list or string of
                size
                * {@code size}. An element index may range from zero, inclusive, to {@code size}, exclusive.
                *
                * @param index a user-supplied index identifying an element of an array, list or string
                * @param size the size of that array, list or string
                * @param desc the text to use to describe this index in an error message
                * @return the value of {@code index}
                * @throws IndexOutOfBoundsException if {@code index} is negative or is not less than {@code size}
                * @throws IllegalArgumentException if {@code size} is negative
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>checkElementIndex</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>String</name>
                            </type>
                            <name>desc</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Carefully optimized for execution by hotspot (explanatory comment above)
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>index</name>
                                &lt; 0 || <name>index</name> &gt;=
                                <name>size</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IndexOutOfBoundsException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name>badElementIndex</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>index</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>size</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>desc</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>index</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>badElementIndex</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>desc</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>index</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>format</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"%s (%s) must not be negative"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>desc</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>index</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>size</name>
                                        &lt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>IllegalArgumentException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"negative size: " +
                                                                <name>size</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <comment type="line">// index &gt;= size</comment>
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>format</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"%s (%s) must be less than size (%s)"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>desc</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>index</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>size</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Ensures that {@code index} specifies a valid &lt;i&gt;position&lt;/i&gt; in an array, list or string
                of
                * size {@code size}. A position index may range from zero to {@code size}, inclusive.
                *
                * @param index a user-supplied index identifying a position in an array, list or string
                * @param size the size of that array, list or string
                * @return the value of {@code index}
                * @throws IndexOutOfBoundsException if {@code index} is negative or is greater than {@code size}
                * @throws IllegalArgumentException if {@code size} is negative
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>checkPositionIndex</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>checkPositionIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>index</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>size</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"index"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Ensures that {@code index} specifies a valid &lt;i&gt;position&lt;/i&gt; in an array, list or string
                of
                * size {@code size}. A position index may range from zero to {@code size}, inclusive.
                *
                * @param index a user-supplied index identifying a position in an array, list or string
                * @param size the size of that array, list or string
                * @param desc the text to use to describe this index in an error message
                * @return the value of {@code index}
                * @throws IndexOutOfBoundsException if {@code index} is negative or is greater than {@code size}
                * @throws IllegalArgumentException if {@code size} is negative
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>checkPositionIndex</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>String</name>
                            </type>
                            <name>desc</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Carefully optimized for execution by hotspot (explanatory comment above)
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>index</name>
                                &lt; 0 || <name>index</name> &gt;
                                <name>size</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IndexOutOfBoundsException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name>badPositionIndex</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>index</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>size</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>desc</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>index</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>badPositionIndex</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>index</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>desc</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>index</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>format</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"%s (%s) must not be negative"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>desc</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>index</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>size</name>
                                        &lt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>IllegalArgumentException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"negative size: " +
                                                                <name>size</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <comment type="line">// index &gt; size</comment>
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>format</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"%s (%s) must not be greater than size (%s)"</expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>desc</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>index</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>size</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Ensures that {@code start} and {@code end} specify a valid &lt;i&gt;positions&lt;/i&gt; in an array,
                list
                * or string of size {@code size}, and are in order. A position index may range from zero to
                * {@code size}, inclusive.
                *
                * @param start a user-supplied index identifying a starting position in an array, list or string
                * @param end a user-supplied index identifying a ending position in an array, list or string
                * @param size the size of that array, list or string
                * @throws IndexOutOfBoundsException if either index is negative or is greater than {@code size},
                * or if {@code end} is less than {@code start}
                * @throws IllegalArgumentException if {@code size} is negative
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>checkPositionIndexes</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Carefully optimized for execution by hotspot (explanatory comment above)
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>start</name>
                                &lt; 0 || <name>end</name> &lt; <name>start</name> || <name>end</name> &gt;
                                <name>size</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IndexOutOfBoundsException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name>badPositionIndexes</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>start</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>end</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>size</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>badPositionIndexes</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>start</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>end</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>size</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>start</name>
                                &lt; 0 || <name>start</name> &gt;
                                <name>size</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>badPositionIndex</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>start</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>size</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>"start index"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>end</name>
                                &lt; 0 || <name>end</name> &gt;
                                <name>size</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>badPositionIndex</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>end</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>size</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>"end index"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// end &lt; start</comment>
                    <return>return
                        <expr>
                            <call>
                                <name>format</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"end index (%s) must not be less than start index (%s)"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>end</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>start</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Substitutes each {@code %s} in {@code template} with an argument. These are matched by
                * position: the first {@code %s} gets {@code args[0]}, etc. If there are more arguments than
                * placeholders, the unmatched arguments will be appended to the end of the formatted message in
                * square braces.
                *
                * @param template a non-null string containing 0 or more {@code %s} placeholders.
                * @param args the arguments to be substituted into the message template. Arguments are converted
                * to strings using {@link String#valueOf(Object)}. Arguments can be null.
                */
            </comment>
            <comment type="line">// Note that this is somewhat-improperly used from Verify.java as well.</comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>format</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>template</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>...
                            </type>
                            <name>args</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>template</name>
                            =
                            <call>
                                <name><name>String</name>.
                                    <name>valueOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>template</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// null -&gt; "null"</comment>

                    <comment type="line">// start substituting the arguments into the '%s' placeholders</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuilder</name>
                            </type>
                            <name>builder</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>template</name>.
                                                            <name>length</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    + 16 *
                                                    <name><name>args</name>.
                                                        <name>length</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>templateStart</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>args</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>placeholderStart</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>template</name>.
                                                    <name>indexOf</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"%s"</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>templateStart</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>placeholderStart</name>
                                        == -1
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <break>break;</break>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>builder</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>template</name>.
                                                            <name>substring</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>templateStart</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>placeholderStart</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>builder</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>args</name>
                                                        <index>[
                                                            <expr><name>i</name>++
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>templateStart</name>
                                    = <name>placeholderStart</name> + 2
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>template</name>.
                                                    <name>substring</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>templateStart</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="line">// if we run out of placeholders, append the extra args in square braces
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>args</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>builder</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>" ["</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>builder</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>
                                                            <name>args</name>
                                                            <index>[
                                                                <expr><name>i</name>++
                                                                </expr>
                                                                ]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <while>while
                                    <condition>(
                                        <expr>
                                            <name>i</name>
                                            &lt;
                                            <name><name>args</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>builder</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>", "</expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>builder</name>.
                                                        <name>append</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>
                                                                    <name>args</name>
                                                                    <index>[
                                                                        <expr><name>i</name>++
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>builder</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>']'</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
