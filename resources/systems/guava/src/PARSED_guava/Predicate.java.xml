<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\base\Predicate.java">
    <comment type="block">/*
        * Copyright (C) 2007 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>base</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Determines a true or false value for a given input.
        *
        * &lt;p&gt;The {@link Predicates} class provides common predicates and related utilities.
        *
        * &lt;p&gt;See the Guava User Guide article on &lt;a href=
        * "https://github.com/google/guava/wiki/FunctionalExplained"&gt;the use of {@code
        * Predicate}&lt;/a&gt;.
        *
        * @author Kevin Bourrillion
        * @since 2.0
        */
    </comment>
    <class type="interface">
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        interface
        <name>
            <name>Predicate</name>
            <argument_list>&lt;
                <argument>
                    <name>T</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <block>{
            <comment type="javadoc">/**
                * Returns the result of applying this predicate to {@code input}. This method is &lt;i&gt;generally
                * expected&lt;/i&gt;, but not absolutely required, to have the following properties:
                *
                * &lt;ul&gt;
                * &lt;li&gt;Its execution does not cause any observable side effects.
                * &lt;li&gt;The computation is &lt;i&gt;consistent with equals&lt;/i&gt;; that is, {@link Objects#equal
                * Objects.equal}{@code (a, b)} implies that {@code predicate.apply(a) ==
                * predicate.apply(b))}.
                * &lt;/ul&gt;
                *
                * @throws NullPointerException if {@code input} is null and this predicate does not accept null
                * arguments
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>apply</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>T</name>
                            </type>
                            <name>input</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Indicates whether another object is equal to this predicate.
                *
                * &lt;p&gt;Most implementations will have no reason to override the behavior of {@link Object#equals}.
                * However, an implementation may also choose to return {@code true} whenever {@code object} is a
                * {@link Predicate} that it considers &lt;i&gt;interchangeable&lt;/i&gt; with this one.
                "Interchangeable"
                * &lt;i&gt;typically&lt;/i&gt; means that {@code this.apply(t) == that.apply(t)} for all {@code t} of
                type
                * {@code T}). Note that a {@code false} result from this method does not imply that the
                * predicates are known &lt;i&gt;not&lt;/i&gt; to be interchangeable.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>object</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            }
        </block>
    </class>
</unit>
