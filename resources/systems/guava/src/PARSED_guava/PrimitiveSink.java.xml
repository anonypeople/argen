<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\hash\PrimitiveSink.java">
    <comment type="block">/*
        * Copyright (C) 2011 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
        * in compliance with the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software distributed under the License
        * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
        * or implied. See the License for the specific language governing permissions and limitations under
        * the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>hash</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>nio</name>.<name>charset</name>.
            <name>Charset</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * An object which can receive a stream of primitive values.
        *
        * @author Kevin Bourrillion
        * @since 12.0 (in 11.0 as {@code Sink})
        */
    </comment>
    <class type="interface">
        <annotation>@
            <name>Beta</name>
        </annotation>
        <specifier>public</specifier>
        interface <name>PrimitiveSink</name>
        <block>{
            <comment type="javadoc">/**
                * Puts a byte into this sink.
                *
                * @param b a byte
                * @return this instance
                */
            </comment>
            <function_decl>
                <type>
                    <name>PrimitiveSink</name>
                </type>
                <name>putByte</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Puts an array of bytes into this sink.
                *
                * @param bytes a byte array
                * @return this instance
                */
            </comment>
            <function_decl>
                <type>
                    <name>PrimitiveSink</name>
                </type>
                <name>putBytes</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>bytes</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Puts a chunk of an array of bytes into this sink. {@code bytes[off]} is the first byte written,
                * {@code bytes[off + len - 1]} is the last.
                *
                * @param bytes a byte array
                * @param off the start offset in the array
                * @param len the number of bytes to write
                * @return this instance
                * @throws IndexOutOfBoundsException if {@code off &lt; 0} or {@code off + len &gt; bytes.length} or
                * {@code len &lt; 0}
                */
            </comment>
            <function_decl>
                <type>
                    <name>PrimitiveSink</name>
                </type>
                <name>putBytes</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>bytes</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>off</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>len</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Puts a short into this sink.
                */
            </comment>
            <function_decl>
                <type>
                    <name>PrimitiveSink</name>
                </type>
                <name>putShort</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>short</name>
                            </type>
                            <name>s</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Puts an int into this sink.
                */
            </comment>
            <function_decl>
                <type>
                    <name>PrimitiveSink</name>
                </type>
                <name>putInt</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Puts a long into this sink.
                */
            </comment>
            <function_decl>
                <type>
                    <name>PrimitiveSink</name>
                </type>
                <name>putLong</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>l</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Puts a float into this sink.
                */
            </comment>
            <function_decl>
                <type>
                    <name>PrimitiveSink</name>
                </type>
                <name>putFloat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>f</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Puts a double into this sink.
                */
            </comment>
            <function_decl>
                <type>
                    <name>PrimitiveSink</name>
                </type>
                <name>putDouble</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>d</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Puts a boolean into this sink.
                */
            </comment>
            <function_decl>
                <type>
                    <name>PrimitiveSink</name>
                </type>
                <name>putBoolean</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Puts a character into this sink.
                */
            </comment>
            <function_decl>
                <type>
                    <name>PrimitiveSink</name>
                </type>
                <name>putChar</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Puts each 16-bit code unit from the {@link CharSequence} into this sink.
                *
                * @since 15.0 (since 11.0 as putString(CharSequence))
                */
            </comment>
            <function_decl>
                <type>
                    <name>PrimitiveSink</name>
                </type>
                <name>putUnencodedChars</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CharSequence</name>
                            </type>
                            <name>charSequence</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Puts a string into this sink using the given charset.
                */
            </comment>
            <function_decl>
                <type>
                    <name>PrimitiveSink</name>
                </type>
                <name>putString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CharSequence</name>
                            </type>
                            <name>charSequence</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Charset</name>
                            </type>
                            <name>charset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            }
        </block>
    </class>
</unit>
