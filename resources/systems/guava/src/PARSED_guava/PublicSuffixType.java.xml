<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\thirdparty\publicsuffix\PublicSuffixType.java">
    <comment type="block">/*
        * Copyright (C) 2013 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>thirdparty</name>.
            <name>publicsuffix</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Specifies the type of a top-level domain definition.
        */
    </comment>
    <enum>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        enum <name>PublicSuffixType</name>
        <block>{

            <comment type="javadoc">/** private definition of a top-level domain */</comment>
            <expr_stmt>
                <expr>
                    <call>
                        <name>PRIVATE</name>
                        <argument_list>(
                            <argument>
                                <expr>':'</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>','</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ,
                <comment type="javadoc">/** ICANN definition of a top-level domain */</comment>
                <expr>
                    <call>
                        <name>ICANN</name>
                        <argument_list>(
                            <argument>
                                <expr>'!'</expr>
                            </argument>
                            ,
                            <argument>
                                <expr>'?'</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>

            <comment type="javadoc">/** The character used for an inner node in the trie encoding */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>char</name>
                    </type>
                    <name>innerNodeCode</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The character used for a leaf node in the trie encoding */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>char</name>
                    </type>
                    <name>leafNodeCode</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <specifier>private</specifier>
                <name>PublicSuffixType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>innerNodeCode</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>leafNodeCode</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>innerNodeCode</name>
                            </name>
                            =
                            <name>innerNodeCode</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>leafNodeCode</name>
                            </name>
                            =
                            <name>leafNodeCode</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <name>char</name>
                </type>
                <name>getLeafNodeCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>leafNodeCode</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>char</name>
                </type>
                <name>getInnerNodeCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>innerNodeCode</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Returns a PublicSuffixType of the right type according to the given code */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>PublicSuffixType</name>
                </type>
                <name>fromCode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>code</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>PublicSuffixType</name>
                                </type>
                                <name>value</name> :
                                <range>
                                    <expr>
                                        <call>
                                            <name>values</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>value</name>.
                                                <name>getInnerNodeCode</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        == <name>code</name> ||
                                        <call>
                                            <name><name>value</name>.
                                                <name>getLeafNodeCode</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                        ==
                                        <name>code</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>value</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>IllegalArgumentException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"No enum corresponding to given code: " +
                                            <name>code</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>static</specifier>
                    <name>PublicSuffixType</name>
                </type>
                <name>fromIsPrivate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>isPrivate</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>isPrivate</name>
                            ? <name>PRIVATE</name> :
                            <name>ICANN</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </enum>
</unit>
