<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\RangeMap.java">
    <comment type="block">/*
        * Copyright (C) 2012 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A mapping from disjoint nonempty ranges to non-null values. Queries look up the value
        * associated with the range (if any) that contains a specified key.
        *
        * &lt;p&gt;In contrast to {@link RangeSet}, no "coalescing" is done of {@linkplain
        * Range#isConnected(Range) connected} ranges, even if they are mapped to the same value.
        *
        * @author Louis Wasserman
        * @since 14.0
        */
    </comment>
    <class type="interface">
        <annotation>@
            <name>Beta</name>
        </annotation>
        <specifier>public</specifier>
        interface
        <name>
            <name>RangeMap</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                    <extends>extends
                        <name>Comparable</name>
                    </extends>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <block>{
            <comment type="javadoc">/**
                * Returns the value associated with the specified key, or {@code null} if there is no
                * such value.
                *
                * &lt;p&gt;Specifically, if any range in this range map contains the specified key, the value
                * associated with that range is returned.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Nullable</name>
                    </annotation>
                    <name>V</name>
                </type>
                <name>get</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the range containing this key and its associated value, if such a range is present
                * in the range map, or {@code null} otherwise.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Nullable</name>
                    </annotation>
                    <name><name>Map</name>.
                        <name>
                            <name>Entry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>Range</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>K</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                ,
                                <argument>
                                    <name>V</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </name>
                </type>
                <name>getEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the minimal range {@linkplain Range#encloses(Range) enclosing} the ranges
                * in this {@code RangeMap}.
                *
                * @throws NoSuchElementException if this range map is empty
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Range</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>span</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Maps a range to a specified value (optional operation).
                *
                * &lt;p&gt;Specifically, after a call to {@code put(range, value)}, if
                * {@link Range#contains(Comparable) range.contains(k)}, then {@link #get(Comparable) get(k)}
                * will return {@code value}.
                *
                * &lt;p&gt;If {@code range} {@linkplain Range#isEmpty() is empty}, then this is a no-op.
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>put</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Range</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>range</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Puts all the associations from {@code rangeMap} into this range map (optional operation).
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>putAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>RangeMap</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>rangeMap</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Removes all associations from this range map (optional operation).
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Removes all associations from this range map in the specified range (optional operation).
                *
                * &lt;p&gt;If {@code !range.contains(k)}, {@link #get(Comparable) get(k)} will return the same result
                * before and after a call to {@code remove(range)}. If {@code range.contains(k)}, then
                * after a call to {@code remove(range)}, {@code get(k)} will return {@code null}.
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Range</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>range</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a view of this range map as an unmodifiable {@code Map&lt;Range&lt;K&gt;, V&gt;}.
                * Modifications to this range map are guaranteed to read through to the returned {@code Map}.
                *
                * &lt;p&gt;The returned {@code Map} iterates over entries in ascending order of the bounds of the
                * {@code Range} entries.
                *
                * &lt;p&gt;It is guaranteed that no empty ranges will be in the returned {@code Map}.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Map</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Range</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>asMapOfRanges</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a view of this range map as an unmodifiable {@code Map&lt;Range&lt;K&gt;, V&gt;}.
                * Modifications to this range map are guaranteed to read through to the returned {@code Map}.
                *
                * &lt;p&gt;The returned {@code Map} iterates over entries in descending order of the bounds of the
                * {@code Range} entries.
                *
                * &lt;p&gt;It is guaranteed that no empty ranges will be in the returned {@code Map}.
                *
                * @since 19.0
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Map</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Range</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>asDescendingMapOfRanges</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a view of the part of this range map that intersects with {@code range}.
                *
                * &lt;p&gt;For example, if {@code rangeMap} had the entries
                * {@code [1, 5] =&gt; "foo", (6, 8) =&gt; "bar", (10, \u2025) =&gt; "baz"}
                * then {@code rangeMap.subRangeMap(Range.open(3, 12))} would return a range map
                * with the entries {@code (3, 5) =&gt; "foo", (6, 8) =&gt; "bar", (10, 12) =&gt; "baz"}.
                *
                * &lt;p&gt;The returned range map supports all optional operations that this range map supports,
                * except for {@code asMapOfRanges().iterator().remove()}.
                *
                * &lt;p&gt;The returned range map will throw an {@link IllegalArgumentException} on an attempt to
                * insert a range not {@linkplain Range#encloses(Range) enclosed} by {@code range}.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>RangeMap</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>subRangeMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Range</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>range</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns {@code true} if {@code obj} is another {@code RangeMap} that has an equivalent
                * {@link #asMapOfRanges()}.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>o</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns {@code asMapOfRanges().hashCode()}.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a readable string representation of this range map.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            }
        </block>
    </class>
</unit>
