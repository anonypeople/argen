<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\RangeSet.java">
    <comment type="block">/*
        * Copyright (C) 2011 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
        * in compliance with the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software distributed under the
        * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
        * express or implied. See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>NoSuchElementException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Set</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A set comprising zero or more {@linkplain Range#isEmpty nonempty},
        * {@linkplain Range#isConnected(Range) disconnected} ranges of type {@code C}.
        *
        * &lt;p&gt;Implementations that choose to support the {@link #add(Range)} operation are required to
        * ignore empty ranges and coalesce connected ranges. For example: &lt;pre&gt; {@code
        *
        * RangeSet&lt;Integer&gt; rangeSet = TreeRangeSet.create();
        * rangeSet.add(Range.closed(1, 10)); // {[1, 10]}
        * rangeSet.add(Range.closedOpen(11, 15)); // disconnected range; {[1, 10], [11, 15)}
        * rangeSet.add(Range.closedOpen(15, 20)); // connected range; {[1, 10], [11, 20)}
        * rangeSet.add(Range.openClosed(0, 0)); // empty range; {[1, 10], [11, 20)}
        * rangeSet.remove(Range.open(5, 10)); // splits [1, 10]; {[1, 5], [10, 10], [11, 20)}}&lt;/pre&gt;
        *
        * &lt;p&gt;Note that the behavior of {@link Range#isEmpty()} and {@link Range#isConnected(Range)} may
        * not be as expected on discrete ranges. See the Javadoc of those methods for details.
        *
        * &lt;p&gt;For a {@link Set} whose contents are specified by a {@link Range}, see {@link ContiguousSet}.
        *
        * @author Kevin Bourrillion
        * @author Louis Wasserman
        * @since 14.0
        */
    </comment>
    <class type="interface">
        <annotation>@
            <name>Beta</name>
        </annotation>
        <specifier>public</specifier>
        interface
        <name>
            <name>RangeSet</name>
            <argument_list>&lt;
                <argument>
                    <name>C</name>
                    <extends>extends
                        <name>Comparable</name>
                    </extends>
                </argument>
                &gt;
            </argument_list>
        </name>
        <block>{

            <comment type="line">// Query methods</comment>

            <comment type="javadoc">/**
                * Determines whether any of this range set's member ranges contains {@code value}.
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>C</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the unique range from this range set that {@linkplain Range#contains contains}
                * {@code value}, or {@code null} if this range set does not contain {@code value}.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Range</name>
                        <argument_list>&lt;
                            <argument>
                                <name>C</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>rangeContaining</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>C</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns {@code true} if there exists a member range in this range set which
                * {@linkplain Range#encloses encloses} the specified range.
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>encloses</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Range</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>C</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>otherRange</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns {@code true} if for each member range in {@code other} there exists a member range in
                * this range set which {@linkplain Range#encloses encloses} it. It follows that
                * {@code this.contains(value)} whenever {@code other.contains(value)}. Returns {@code true} if
                * {@code other} is empty.
                *
                * &lt;p&gt;This is equivalent to checking if this range set {@link #encloses} each of the ranges in
                * {@code other}.
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>enclosesAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>RangeSet</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>C</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>other</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns {@code true} if this range set contains no ranges.
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the minimal range which {@linkplain Range#encloses(Range) encloses} all ranges
                * in this range set.
                *
                * @throws NoSuchElementException if this range set is {@linkplain #isEmpty() empty}
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Range</name>
                        <argument_list>&lt;
                            <argument>
                                <name>C</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>span</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="line">// Views</comment>

            <comment type="javadoc">/**
                * Returns a view of the {@linkplain Range#isConnected disconnected} ranges that make up this
                * range set. The returned set may be empty. The iterators returned by its
                * {@link Iterable#iterator} method return the ranges in increasing order of lower bound
                * (equivalently, of upper bound).
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Range</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>C</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>asRanges</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a descending view of the {@linkplain Range#isConnected disconnected} ranges that
                * make up this range set. The returned set may be empty. The iterators returned by its
                * {@link Iterable#iterator} method return the ranges in decreasing order of lower bound
                * (equivalently, of upper bound).
                *
                * @since 19.0
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Range</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>C</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>asDescendingSetOfRanges</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a view of the complement of this {@code RangeSet}.
                *
                * &lt;p&gt;The returned view supports the {@link #add} operation if this {@code RangeSet} supports
                * {@link #remove}, and vice versa.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>RangeSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>C</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>complement</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a view of the intersection of this {@code RangeSet} with the specified range.
                *
                * &lt;p&gt;The returned view supports all optional operations supported by this {@code RangeSet}, with
                * the caveat that an {@link IllegalArgumentException} is thrown on an attempt to
                * {@linkplain #add(Range) add} any range not {@linkplain Range#encloses(Range) enclosed} by
                * {@code view}.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>RangeSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>C</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>subRangeSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Range</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>C</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>view</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="line">// Modification</comment>

            <comment type="javadoc">/**
                * Adds the specified range to this {@code RangeSet} (optional operation). That is, for equal
                * range sets a and b, the result of {@code a.add(range)} is that {@code a} will be the minimal
                * range set for which both {@code a.enclosesAll(b)} and {@code a.encloses(range)}.
                *
                * &lt;p&gt;Note that {@code range} will be {@linkplain Range#span(Range) coalesced} with any ranges in
                * the range set that are {@linkplain Range#isConnected(Range) connected} with it. Moreover,
                * if {@code range} is empty, this is a no-op.
                *
                * @throws UnsupportedOperationException if this range set does not support the {@code add}
                * operation
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Range</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>C</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>range</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Removes the specified range from this {@code RangeSet} (optional operation). After this
                * operation, if {@code range.contains(c)}, {@code this.contains(c)} will return {@code false}.
                *
                * &lt;p&gt;If {@code range} is empty, this is a no-op.
                *
                * @throws UnsupportedOperationException if this range set does not support the {@code remove}
                * operation
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Range</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>C</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>range</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Removes all ranges from this {@code RangeSet} (optional operation). After this operation,
                * {@code this.contains(c)} will return false for all {@code c}.
                *
                * &lt;p&gt;This is equivalent to {@code remove(Range.all())}.
                *
                * @throws UnsupportedOperationException if this range set does not support the {@code clear}
                * operation
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Adds all of the ranges from the specified range set to this range set (optional operation).
                * After this operation, this range set is the minimal range set that
                * {@linkplain #enclosesAll(RangeSet) encloses} both the original range set and {@code other}.
                *
                * &lt;p&gt;This is equivalent to calling {@link #add} on each of the ranges in {@code other} in turn.
                *
                * @throws UnsupportedOperationException if this range set does not support the {@code addAll}
                * operation
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>addAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>RangeSet</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>C</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>other</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Removes all of the ranges from the specified range set from this range set (optional
                * operation). After this operation, if {@code other.contains(c)}, {@code this.contains(c)} will
                * return {@code false}.
                *
                * &lt;p&gt;This is equivalent to calling {@link #remove} on each of the ranges in {@code other} in
                * turn.
                *
                * @throws UnsupportedOperationException if this range set does not support the {@code removeAll}
                * operation
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>removeAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>RangeSet</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>C</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>other</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="line">// Object methods</comment>

            <comment type="javadoc">/**
                * Returns {@code true} if {@code obj} is another {@code RangeSet} that contains the same ranges
                * according to {@link Range#equals(Object)}.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns {@code asRanges().hashCode()}.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a readable string representation of this range set. For example, if this
                * {@code RangeSet} consisted of {@code Range.closed(1, 3)} and {@code Range.greaterThan(4)},
                * this might return {@code " [1â¥3](4â¥+â)}"}.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            }
        </block>
    </class>
</unit>
