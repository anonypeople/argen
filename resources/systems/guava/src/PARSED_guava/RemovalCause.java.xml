<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\cache\RemovalCause.java">
    <comment type="block">/*
        * Copyright (C) 2011 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>cache</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ConcurrentMap</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * The reason why a cached entry was removed.
        *
        * @author Charles Fry
        * @since 10.0
        */
    </comment>
    <enum>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        enum <name>RemovalCause</name>
        <block>{
            <comment type="javadoc">/**
                * The entry was manually removed by the user. This can result from the user invoking
                * {@link Cache#invalidate}, {@link Cache#invalidateAll(Iterable)}, {@link Cache#invalidateAll()},
                * {@link Map#remove}, {@link ConcurrentMap#remove}, or {@link Iterator#remove}.
                */
            </comment>
            <expr_stmt>
                <expr>
                    <name>EXPLICIT</name>
                    <block>{
                        @
                        <expr>
                            <name>Override</name>
                            <name>boolean</name>
                            <call>
                                <name>wasEvicted</name>
                                <argument_list>()</argument_list>
                            </call>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                            </block>
                        </expr>
                    </block>
                </expr>
            </expr_stmt>
            }
        </block>
    </enum>
    },

    <comment type="javadoc">/**
        * The entry itself was not actually removed, but its value was replaced by the user. This can
        * result from the user invoking {@link Cache#put}, {@link LoadingCache#refresh}, {@link Map#put},
        * {@link Map#putAll}, {@link ConcurrentMap#replace(Object, Object)}, or
        * {@link ConcurrentMap#replace(Object, Object, Object)}.
        */
    </comment>
    <expr_stmt>
        <expr>
            <name>REPLACED</name>
            <block>{
                @
                <expr>
                    <name>Override</name>
                    <name>boolean</name>
                    <call>
                        <name>wasEvicted</name>
                        <argument_list>()</argument_list>
                    </call>
                    <block>{
                        <return>return <expr>false</expr>;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }
    },

    <comment type="javadoc">/**
        * The entry was removed automatically because its key or value was garbage-collected. This
        * can occur when using {@link CacheBuilder#weakKeys}, {@link CacheBuilder#weakValues}, or
        * {@link CacheBuilder#softValues}.
        */
    </comment>
    <expr_stmt>
        <expr>
            <name>COLLECTED</name>
            <block>{
                @
                <expr>
                    <name>Override</name>
                    <name>boolean</name>
                    <call>
                        <name>wasEvicted</name>
                        <argument_list>()</argument_list>
                    </call>
                    <block>{
                        <return>return <expr>true</expr>;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }
    },

    <comment type="javadoc">/**
        * The entry's expiration timestamp has passed. This can occur when using
        * {@link CacheBuilder#expireAfterWrite} or {@link CacheBuilder#expireAfterAccess}.
        */
    </comment>
    <expr_stmt>
        <expr>
            <name>EXPIRED</name>
            <block>{
                @
                <expr>
                    <name>Override</name>
                    <name>boolean</name>
                    <call>
                        <name>wasEvicted</name>
                        <argument_list>()</argument_list>
                    </call>
                    <block>{
                        <return>return <expr>true</expr>;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }
    },

    <comment type="javadoc">/**
        * The entry was evicted due to size constraints. This can occur when using
        * {@link CacheBuilder#maximumSize} or {@link CacheBuilder#maximumWeight}.
        */
    </comment>
    <expr_stmt>
        <expr>
            <name>SIZE</name>
            <block>{
                @
                <expr>
                    <name>Override</name>
                    <name>boolean</name>
                    <call>
                        <name>wasEvicted</name>
                        <argument_list>()</argument_list>
                    </call>
                    <block>{
                        <return>return <expr>true</expr>;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }
    }
    <empty_stmt>;</empty_stmt>

    <comment type="javadoc">/**
        * Returns {@code true} if there was an automatic removal due to eviction (the cause is neither
        * {@link #EXPLICIT} nor {@link #REPLACED}).
        */
    </comment>
    <function_decl>
        <type>
            <specifier>abstract</specifier>
            <name>boolean</name>
        </type>
        <name>wasEvicted</name>
        <parameter_list>()</parameter_list>;
    </function_decl>
    }
</unit>
