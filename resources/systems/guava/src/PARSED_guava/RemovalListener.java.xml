<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\cache\RemovalListener.java">
    <comment type="block">/*
        * Copyright (C) 2011 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>cache</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * An object that can receive a notification when an entry is removed from a cache. The removal
        * resulting in notification could have occured to an entry being manually removed or replaced, or
        * due to eviction resulting from timed expiration, exceeding a maximum size, or garbage
        * collection.
        *
        * &lt;p&gt;An instance may be called concurrently by multiple threads to process different entries.
        * Implementations of this interface should avoid performing blocking calls or synchronizing on
        * shared resources.
        *
        * @param &lt;K&gt; the most general type of keys this listener can listen for; for
        * example {@code Object} if any key is acceptable
        * @param &lt;V&gt; the most general type of values this listener can listen for; for
        * example {@code Object} if any key is acceptable
        * @author Charles Fry
        * @since 10.0
        */
    </comment>
    <class type="interface">
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        interface
        <name>
            <name>RemovalListener</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <block>{
            <comment type="javadoc">/**
                * Notifies the listener that a removal occurred at some point in the past.
                *
                * &lt;p&gt;This does not always signify that the key is now absent from the cache,
                * as it may have already been re-added.
                */
            </comment>
            <comment type="line">// Technically should accept RemovalNotification&lt;? extends K, ? extends V&gt;, but
                because
            </comment>
            <comment type="line">// RemovalNotification is guaranteed covariant, let's make users' lives simpler.
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>onRemoval</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>RemovalNotification</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>K</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>notification</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            }
        </block>
    </class>
</unit>
