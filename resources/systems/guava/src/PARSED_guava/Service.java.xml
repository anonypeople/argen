<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\util\concurrent\Service.java">
    <comment type="block">/*
        * Copyright (C) 2009 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.
            <name>concurrent</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>Executor</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>TimeUnit</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>TimeoutException</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * An object with an operational state, plus asynchronous {@link #startAsync()} and
        * {@link #stopAsync()} lifecycle methods to transition between states. Example services include
        * webservers, RPC servers and timers.
        *
        * &lt;p&gt;The normal lifecycle of a service is:
        * &lt;ul&gt;
        * &lt;li&gt;{@linkplain State#NEW NEW} -&amp;gt;
        * &lt;li&gt;{@linkplain State#STARTING STARTING} -&amp;gt;
        * &lt;li&gt;{@linkplain State#RUNNING RUNNING} -&amp;gt;
        * &lt;li&gt;{@linkplain State#STOPPING STOPPING} -&amp;gt;
        * &lt;li&gt;{@linkplain State#TERMINATED TERMINATED}
        * &lt;/ul&gt;
        *
        * &lt;p&gt;There are deviations from this if there are failures or if {@link Service#stopAsync} is called
        * before the {@link Service} reaches the {@linkplain State#RUNNING RUNNING} state. The set of legal
        * transitions form a &lt;a href="http://en.wikipedia.org/wiki/Directed_acyclic_graph"&gt;DAG&lt;/a&gt;,
        * therefore every method of the listener will be called at most once. N.B. The {@link State#FAILED}
        * and {@link State#TERMINATED} states are terminal states, once a service enters either of these
        * states it cannot ever leave them.
        *
        * &lt;p&gt;Implementors of this interface are strongly encouraged to extend one of the abstract classes
        * in this package which implement this interface and make the threading and state management
        * easier.
        *
        * @author Jesse Wilson
        * @author Luke Sandberg
        * @since 9.0 (in 1.0 as {@code com.google.common.base.Service})
        */
    </comment>
    <class type="interface">
        <annotation>@
            <name>Beta</name>
        </annotation>
        <specifier>public</specifier>
        interface <name>Service</name>
        <block>{
            <comment type="javadoc">/**
                * If the service state is {@link State#NEW}, this initiates service startup and returns
                * immediately. A stopped service may not be restarted.
                *
                * @return this
                * @throws IllegalStateException if the service is not {@link State#NEW}
                *
                * @since 15.0
                */
            </comment>
            <function_decl>
                <type>
                    <name>Service</name>
                </type>
                <name>startAsync</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns {@code true} if this service is {@linkplain State#RUNNING running}.
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>isRunning</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the lifecycle state of the service.
                */
            </comment>
            <function_decl>
                <type>
                    <name>State</name>
                </type>
                <name>state</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * If the service is {@linkplain State#STARTING starting} or {@linkplain State#RUNNING running},
                * this initiates service shutdown and returns immediately. If the service is
                * {@linkplain State#NEW new}, it is {@linkplain State#TERMINATED terminated} without having been
                * started nor stopped. If the service has already been stopped, this method returns immediately
                * without taking action.
                *
                * @return this
                * @since 15.0
                */
            </comment>
            <function_decl>
                <type>
                    <name>Service</name>
                </type>
                <name>stopAsync</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Waits for the {@link Service} to reach the {@linkplain State#RUNNING running state}.
                *
                * @throws IllegalStateException if the service reaches a state from which it is not possible to
                * enter the {@link State#RUNNING} state. e.g. if the {@code state} is
                * {@code State#TERMINATED} when this method is called then this will throw an
                * IllegalStateException.
                *
                * @since 15.0
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>awaitRunning</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Waits for the {@link Service} to reach the {@linkplain State#RUNNING running state} for no
                * more than the given time.
                *
                * @param timeout the maximum time to wait
                * @param unit the time unit of the timeout argument
                * @throws TimeoutException if the service has not reached the given state within the deadline
                * @throws IllegalStateException if the service reaches a state from which it is not possible to
                * enter the {@link State#RUNNING RUNNING} state. e.g. if the {@code state} is
                * {@code State#TERMINATED} when this method is called then this will throw an
                * IllegalStateException.
                *
                * @since 15.0
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>awaitRunning</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>timeout</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>TimeUnit</name>
                            </type>
                            <name>unit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>TimeoutException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Waits for the {@link Service} to reach the {@linkplain State#TERMINATED terminated state}.
                *
                * @throws IllegalStateException if the service {@linkplain State#FAILED fails}.
                *
                * @since 15.0
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>awaitTerminated</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Waits for the {@link Service} to reach a terminal state (either
                * {@link Service.State#TERMINATED terminated} or {@link Service.State#FAILED failed}) for no
                * more than the given time.
                *
                * @param timeout the maximum time to wait
                * @param unit the time unit of the timeout argument
                * @throws TimeoutException if the service has not reached the given state within the deadline
                * @throws IllegalStateException if the service {@linkplain State#FAILED fails}.
                * @since 15.0
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>awaitTerminated</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>timeout</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>TimeUnit</name>
                            </type>
                            <name>unit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>TimeoutException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the {@link Throwable} that caused this service to fail.
                *
                * @throws IllegalStateException if this service's state isn't {@linkplain State#FAILED FAILED}.
                *
                * @since 14.0
                */
            </comment>
            <function_decl>
                <type>
                    <name>Throwable</name>
                </type>
                <name>failureCause</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Registers a {@link Listener} to be {@linkplain Executor#execute executed} on the given
                * executor. The listener will have the corresponding transition method called whenever the
                * service changes state. The listener will not have previous state changes replayed, so it is
                * suggested that listeners are added before the service starts.
                *
                * &lt;p&gt;{@code addListener} guarantees execution ordering across calls to a given listener but not
                * across calls to multiple listeners. Specifically, a given listener will have its callbacks
                * invoked in the same order as the underlying service enters those states. Additionally, at most
                * one of the listener's callbacks will execute at once. However, multiple listeners' callbacks
                * may execute concurrently, and listeners may execute in an order different from the one in which
                * they were registered.
                *
                * &lt;p&gt;RuntimeExceptions thrown by a listener will be caught and logged. Any exception thrown
                * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException}) will be caught and
                * logged.
                *
                * @param listener the listener to run when the service changes state is complete
                * @param executor the executor in which the listeners callback methods will be run. For fast,
                * lightweight listeners that would be safe to execute in any thread, consider
                * {@link MoreExecutors#directExecutor}.
                * @since 13.0
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>addListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Listener</name>
                            </type>
                            <name>listener</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Executor</name>
                            </type>
                            <name>executor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * The lifecycle states of a service.
                *
                * &lt;p&gt;The ordering of the {@link State} enum is defined such that if there is a state transition
                * from {@code A -&gt; B} then {@code A.compareTo(B} &lt; 0}. N.B. The converse is not true, i.e. if
                * {@code A.compareTo(B} &lt; 0} then there is &lt;b&gt;not&lt;/b&gt; guaranteed to be a valid state
                transition
                * {@code A -&gt; B}.
                *
                * @since 9.0 (in 1.0 as {@code com.google.common.base.Service.State})
                */
            </comment>
            <enum>
                <annotation>@
                    <name>Beta</name>
                </annotation>
                <comment type="line">// should come out of Beta when Service does</comment>
                enum <name>State</name>
                <block>{
                    <comment type="javadoc">/**
                        * A service in this state is inactive. It does minimal work and consumes
                        * minimal resources.
                        */
                    </comment>
                    <expr_stmt>
                        <expr>
                            <name>NEW</name>
                            <block>{
                                @
                                <expr>
                                    <name>Override</name>
                                    <name>boolean</name>
                                    <call>
                                        <name>isTerminal</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                    </block>
                                </expr>
                            </block>
                        </expr>
                    </expr_stmt>
                    }
                </block>
            </enum>
            }
        </block>
    </class>
    ,

    <comment type="javadoc">/**
        * A service in this state is transitioning to {@link #RUNNING}.
        */
    </comment>
    <expr_stmt>
        <expr>
            <name>STARTING</name>
            <block>{
                @
                <expr>
                    <name>Override</name>
                    <name>boolean</name>
                    <call>
                        <name>isTerminal</name>
                        <argument_list>()</argument_list>
                    </call>
                    <block>{
                        <return>return <expr>false</expr>;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }
    },

    <comment type="javadoc">/**
        * A service in this state is operational.
        */
    </comment>
    <expr_stmt>
        <expr>
            <name>RUNNING</name>
            <block>{
                @
                <expr>
                    <name>Override</name>
                    <name>boolean</name>
                    <call>
                        <name>isTerminal</name>
                        <argument_list>()</argument_list>
                    </call>
                    <block>{
                        <return>return <expr>false</expr>;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }
    },

    <comment type="javadoc">/**
        * A service in this state is transitioning to {@link #TERMINATED}.
        */
    </comment>
    <expr_stmt>
        <expr>
            <name>STOPPING</name>
            <block>{
                @
                <expr>
                    <name>Override</name>
                    <name>boolean</name>
                    <call>
                        <name>isTerminal</name>
                        <argument_list>()</argument_list>
                    </call>
                    <block>{
                        <return>return <expr>false</expr>;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }
    },

    <comment type="javadoc">/**
        * A service in this state has completed execution normally. It does minimal work and consumes
        * minimal resources.
        */
    </comment>
    <expr_stmt>
        <expr>
            <name>TERMINATED</name>
            <block>{
                @
                <expr>
                    <name>Override</name>
                    <name>boolean</name>
                    <call>
                        <name>isTerminal</name>
                        <argument_list>()</argument_list>
                    </call>
                    <block>{
                        <return>return <expr>true</expr>;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }
    },

    <comment type="javadoc">/**
        * A service in this state has encountered a problem and may not be operational. It cannot be
        * started nor stopped.
        */
    </comment>
    <expr_stmt>
        <expr>
            <name>FAILED</name>
            <block>{
                @
                <expr>
                    <name>Override</name>
                    <name>boolean</name>
                    <call>
                        <name>isTerminal</name>
                        <argument_list>()</argument_list>
                    </call>
                    <block>{
                        <return>return <expr>true</expr>;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }
    }
    <empty_stmt>;</empty_stmt>

    <comment type="javadoc">/** Returns true if this state is terminal. */</comment>
    <function_decl>
        <type>
            <specifier>abstract</specifier>
            <name>boolean</name>
        </type>
        <name>isTerminal</name>
        <parameter_list>()</parameter_list>;
    </function_decl>
    }

    <comment type="javadoc">/**
        * A listener for the various state changes that a {@link Service} goes through in its lifecycle.
        *
        * &lt;p&gt;All methods are no-ops by default, implementors should override the ones they care about.
        *
        * @author Luke Sandberg
        * @since 15.0 (present as an interface in 13.0)
        */
    </comment>
    <class>
        <annotation>@
            <name>Beta</name>
        </annotation>
        <comment type="line">// should come out of Beta when Service does</comment>
        <specifier>abstract</specifier>
        class <name>Listener</name>
        <block>{
            <comment type="javadoc">/**
                * Called when the service transitions from {@linkplain State#NEW NEW} to
                * {@linkplain State#STARTING STARTING}. This occurs when {@link Service#startAsync} is called
                * the first time.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>starting</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </function>

            <comment type="javadoc">/**
                * Called when the service transitions from {@linkplain State#STARTING STARTING} to
                * {@linkplain State#RUNNING RUNNING}. This occurs when a service has successfully started.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>running</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </function>

            <comment type="javadoc">/**
                * Called when the service transitions to the {@linkplain State#STOPPING STOPPING} state. The
                * only valid values for {@code from} are {@linkplain State#STARTING STARTING} or
                * {@linkplain State#RUNNING RUNNING}. This occurs when {@link Service#stopAsync} is called.
                *
                * @param from The previous state that is being transitioned from.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>stopping</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>State</name>
                            </type>
                            <name>from</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{}</block>
            </function>

            <comment type="javadoc">/**
                * Called when the service transitions to the {@linkplain State#TERMINATED TERMINATED} state.
                * The {@linkplain State#TERMINATED TERMINATED} state is a terminal state in the transition
                * diagram. Therefore, if this method is called, no other methods will be called on the
                * {@link Listener}.
                *
                * @param from The previous state that is being transitioned from. The only valid values for
                * this are {@linkplain State#NEW NEW}, {@linkplain State#RUNNING RUNNING} or
                * {@linkplain State#STOPPING STOPPING}.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>terminated</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>State</name>
                            </type>
                            <name>from</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{}</block>
            </function>

            <comment type="javadoc">/**
                * Called when the service transitions to the {@linkplain State#FAILED FAILED} state. The
                * {@linkplain State#FAILED FAILED} state is a terminal state in the transition diagram.
                * Therefore, if this method is called, no other methods will be called on the {@link Listener}.
                *
                * @param from The previous state that is being transitioned from. Failure can occur in any
                * state with the exception of {@linkplain State#NEW NEW} or
                * {@linkplain State#TERMINATED TERMINATED}.
                * @param failure The exception that caused the failure.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>failed</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>State</name>
                            </type>
                            <name>from</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>failure</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{}</block>
            </function>
            }
        </block>
    </class>
    }
</unit>
