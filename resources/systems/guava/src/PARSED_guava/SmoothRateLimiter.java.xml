<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\util\concurrent\SmoothRateLimiter.java">
    <comment type="block">/*
        * Copyright (C) 2012 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.
            <name>concurrent</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>java</name>.<name>lang</name>.<name>Math</name>.
            <name>min</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeUnit</name>.
            <name>SECONDS</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>math</name>.
            <name>LongMath</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>TimeUnit</name>
        </name>
        ;
    </import>

    <class>
        <specifier>abstract</specifier>
        class <name>SmoothRateLimiter</name>
        <super>
            <extends>extends
                <name>RateLimiter</name>
            </extends>
        </super>
        <block>{
            <comment type="block">/*
                * How is the RateLimiter designed, and why?
                *
                * The primary feature of a RateLimiter is its "stable rate", the maximum rate that
                * is should allow at normal conditions. This is enforced by "throttling" incoming
                * requests as needed, i.e. compute, for an incoming request, the appropriate throttle time,
                * and make the calling thread wait as much.
                *
                * The simplest way to maintain a rate of QPS is to keep the timestamp of the last
                * granted request, and ensure that (1/QPS) seconds have elapsed since then. For example,
                * for a rate of QPS=5 (5 tokens per second), if we ensure that a request isn't granted
                * earlier than 200ms after the last one, then we achieve the intended rate.
                * If a request comes and the last request was granted only 100ms ago, then we wait for
                * another 100ms. At this rate, serving 15 fresh permits (i.e. for an acquire(15) request)
                * naturally takes 3 seconds.
                *
                * It is important to realize that such a RateLimiter has a very superficial memory
                * of the past: it only remembers the last request. What if the RateLimiter was unused for
                * a long period of time, then a request arrived and was immediately granted?
                * This RateLimiter would immediately forget about that past underutilization. This may
                * result in either underutilization or overflow, depending on the real world consequences
                * of not using the expected rate.
                *
                * Past underutilization could mean that excess resources are available. Then, the RateLimiter
                * should speed up for a while, to take advantage of these resources. This is important
                * when the rate is applied to networking (limiting bandwidth), where past underutilization
                * typically translates to "almost empty buffers", which can be filled immediately.
                *
                * On the other hand, past underutilization could mean that "the server responsible for
                * handling the request has become less ready for future requests", i.e. its caches become
                * stale, and requests become more likely to trigger expensive operations (a more extreme
                * case of this example is when a server has just booted, and it is mostly busy with getting
                * itself up to speed).
                *
                * To deal with such scenarios, we add an extra dimension, that of "past underutilization",
                * modeled by "storedPermits" variable. This variable is zero when there is no
                * underutilization, and it can grow up to maxStoredPermits, for sufficiently large
                * underutilization. So, the requested permits, by an invocation acquire(permits),
                * are served from:
                * - stored permits (if available)
                * - fresh permits (for any remaining permits)
                *
                * How this works is best explained with an example:
                *
                * For a RateLimiter that produces 1 token per second, every second
                * that goes by with the RateLimiter being unused, we increase storedPermits by 1.
                * Say we leave the RateLimiter unused for 10 seconds (i.e., we expected a request at time
                * X, but we are at time X + 10 seconds before a request actually arrives; this is
                * also related to the point made in the last paragraph), thus storedPermits
                * becomes 10.0 (assuming maxStoredPermits &gt;= 10.0). At that point, a request of acquire(3)
                * arrives. We serve this request out of storedPermits, and reduce that to 7.0 (how this is
                * translated to throttling time is discussed later). Immediately after, assume that an
                * acquire(10) request arriving. We serve the request partly from storedPermits,
                * using all the remaining 7.0 permits, and the remaining 3.0, we serve them by fresh permits
                * produced by the rate limiter.
                *
                * We already know how much time it takes to serve 3 fresh permits: if the rate is
                * "1 token per second", then this will take 3 seconds. But what does it mean to serve 7
                * stored permits? As explained above, there is no unique answer. If we are primarily
                * interested to deal with underutilization, then we want stored permits to be given out
                * /faster/ than fresh ones, because underutilization = free resources for the taking.
                * If we are primarily interested to deal with overflow, then stored permits could
                * be given out /slower/ than fresh ones. Thus, we require a (different in each case)
                * function that translates storedPermits to throtting time.
                *
                * This role is played by storedPermitsToWaitTime(double storedPermits, double permitsToTake).
                * The underlying model is a continuous function mapping storedPermits
                * (from 0.0 to maxStoredPermits) onto the 1/rate (i.e. intervals) that is effective at the given
                * storedPermits. "storedPermits" essentially measure unused time; we spend unused time
                * buying/storing permits. Rate is "permits / time", thus "1 / rate = time / permits".
                * Thus, "1/rate" (time / permits) times "permits" gives time, i.e., integrals on this
                * function (which is what storedPermitsToWaitTime() computes) correspond to minimum intervals
                * between subsequent requests, for the specified number of requested permits.
                *
                * Here is an example of storedPermitsToWaitTime:
                * If storedPermits == 10.0, and we want 3 permits, we take them from storedPermits,
                * reducing them to 7.0, and compute the throttling for these as a call to
                * storedPermitsToWaitTime(storedPermits = 10.0, permitsToTake = 3.0), which will
                * evaluate the integral of the function from 7.0 to 10.0.
                *
                * Using integrals guarantees that the effect of a single acquire(3) is equivalent
                * to { acquire(1); acquire(1); acquire(1); }, or { acquire(2); acquire(1); }, etc,
                * since the integral of the function in [7.0, 10.0] is equivalent to the sum of the
                * integrals of [7.0, 8.0], [8.0, 9.0], [9.0, 10.0] (and so on), no matter
                * what the function is. This guarantees that we handle correctly requests of varying weight
                * (permits), /no matter/ what the actual function is - so we can tweak the latter freely.
                * (The only requirement, obviously, is that we can compute its integrals).
                *
                * Note well that if, for this function, we chose a horizontal line, at height of exactly
                * (1/QPS), then the effect of the function is non-existent: we serve storedPermits at
                * exactly the same cost as fresh ones (1/QPS is the cost for each). We use this trick later.
                *
                * If we pick a function that goes /below/ that horizontal line, it means that we reduce
                * the area of the function, thus time. Thus, the RateLimiter becomes /faster/ after a
                * period of underutilization. If, on the other hand, we pick a function that
                * goes /above/ that horizontal line, then it means that the area (time) is increased,
                * thus storedPermits are more costly than fresh permits, thus the RateLimiter becomes
                * /slower/ after a period of underutilization.
                *
                * Last, but not least: consider a RateLimiter with rate of 1 permit per second, currently
                * completely unused, and an expensive acquire(100) request comes. It would be nonsensical
                * to just wait for 100 seconds, and /then/ start the actual task. Why wait without doing
                * anything? A much better approach is to /allow/ the request right away (as if it was an
                * acquire(1) request instead), and postpone /subsequent/ requests as needed. In this version,
                * we allow starting the task immediately, and postpone by 100 seconds future requests,
                * thus we allow for work to get done in the meantime instead of waiting idly.
                *
                * This has important consequences: it means that the RateLimiter doesn't remember the time
                * of the _last_ request, but it remembers the (expected) time of the _next_ request. This
                * also enables us to tell immediately (see tryAcquire(timeout)) whether a particular
                * timeout is enough to get us to the point of the next scheduling time, since we always
                * maintain that. And what we mean by "an unused RateLimiter" is also defined by that
                * notion: when we observe that the "expected arrival time of the next request" is actually
                * in the past, then the difference (now - past) is the amount of time that the RateLimiter
                * was formally unused, and it is that amount of time which we translate to storedPermits.
                * (We increase storedPermits with the amount of permits that would have been produced
                * in that idle time). So, if rate == 1 permit per second, and arrivals come exactly
                * one second after the previous, then storedPermits is _never_ increased -- we would only
                * increase it for arrivals _later_ than the expected one second.
                */
            </comment>

            <comment type="javadoc">/**
                * This implements the following function where coldInterval = coldFactor * stableInterval.
                *
                * ^ throttling
                * |
                * cold + /
                * interval | /.
                * | / .
                * | / . &lt;-- "warmup period" is the area of the trapezoid between
                * | / . thresholdPermits and maxPermits
                * | / .
                * | / .
                * | / .
                * stable +----------/ WARM .
                * interval | . UP .
                * | . PERIOD.
                * | . .
                * 0 +----------+-------+--------------&gt; storedPermits
                * 0 thresholdPermits maxPermits
                * Before going into the details of this particular function, let's keep in mind the basics:
                * 1) The state of the RateLimiter (storedPermits) is a vertical line in this figure.
                * 2) When the RateLimiter is not used, this goes right (up to maxPermits)
                * 3) When the RateLimiter is used, this goes left (down to zero), since if we have storedPermits,
                * we serve from those first
                * 4) When _unused_, we go right at a constant rate! The rate at which we move to
                * the right is chosen as maxPermits / warmupPeriod. This ensures that the time it takes to
                * go from 0 to maxPermits is equal to warmupPeriod.
                * 5) When _used_, the time it takes, as explained in the introductory class note, is
                * equal to the integral of our function, between X permits and X-K permits, assuming
                * we want to spend K saved permits.
                *
                * In summary, the time it takes to move to the left (spend K permits), is equal to the
                * area of the function of width == K.
                *
                * Assuming we have saturated demand, the time to go from maxPermits to thresholdPermits is
                * equal to warmupPeriod. And the time to go from thresholdPermits to 0 is
                * warmupPeriod/2. (The reason that this is warmupPeriod/2 is to maintain the behavior of
                * the original implementation where coldFactor was hard coded as 3.)
                *
                * It remains to calculate thresholdsPermits and maxPermits.
                *
                * - The time to go from thresholdPermits to 0 is equal to the integral of the function between
                * 0 and thresholdPermits. This is thresholdPermits * stableIntervals. By (5) it is also
                * equal to warmupPeriod/2. Therefore
                *
                * thresholdPermits = 0.5 * warmupPeriod / stableInterval.
                *
                * - The time to go from maxPermits to thresholdPermits is equal to the integral of the function
                * between thresholdPermits and maxPermits. This is the area of the pictured trapezoid, and it
                * is equal to 0.5 * (stableInterval + coldInterval) * (maxPermits - thresholdPermits). It is
                * also equal to warmupPeriod, so
                *
                * maxPermits = thresholdPermits + 2 * warmupPeriod / (stableInterval + coldInterval).
                */
            </comment>
            <class>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>SmoothWarmingUp</name>
                <super>
                    <extends>extends
                        <name>SmoothRateLimiter</name>
                    </extends>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>warmupPeriodMicros</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="javadoc">/**
                        * The slope of the line from the stable interval (when permits == 0), to the cold interval
                        * (when permits == maxPermits)
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>double</name>
                            </type>
                            <name>slope</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>double</name>
                            </type>
                            <name>thresholdPermits</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>double</name>
                            </type>
                            <name>coldFactor</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>SmoothWarmingUp</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>SleepingStopwatch</name>
                                    </type>
                                    <name>stopwatch</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>warmupPeriod</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>TimeUnit</name>
                                    </type>
                                    <name>timeUnit</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>coldFactor</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>stopwatch</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>warmupPeriodMicros</name>
                                    </name>
                                    =
                                    <call>
                                        <name><name>timeUnit</name>.
                                            <name>toMicros</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>warmupPeriod</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>coldFactor</name>
                                    </name>
                                    =
                                    <name>coldFactor</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>void</name>
                        </type>
                        <name>doSetRate</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>permitsPerSecond</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>stableIntervalMicros</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>oldMaxPermits</name> =
                                    <init>
                                        <expr>
                                            <name>maxPermits</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>coldIntervalMicros</name> =
                                    <init>
                                        <expr>
                                            <name>stableIntervalMicros</name>
                                            *
                                            <name>coldFactor</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>thresholdPermits</name>
                                    = 0.5 * <name>warmupPeriodMicros</name> /
                                    <name>stableIntervalMicros</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>maxPermits</name>
                                    =
                                    <name>thresholdPermits</name>
                                    + 2.0 * <name>warmupPeriodMicros</name> / (<name>stableIntervalMicros
                                </name> + <name>coldIntervalMicros</name>)
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>slope</name>
                                    = (<name>coldIntervalMicros</name> - <name>stableIntervalMicros</name>) / (<name>
                                    maxPermits
                                </name> - <name>thresholdPermits</name>)
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>oldMaxPermits</name>
                                        ==
                                        <name><name>Double</name>.
                                            <name>POSITIVE_INFINITY</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// if we don't special-case this, we would get
                                            storedPermits == NaN, below
                                        </comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>storedPermits</name>
                                                = 0.0
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>storedPermits</name>
                                                = (<name>oldMaxPermits</name> == 0.0)
                                                ? <name>maxPermits</name>
                                                <comment type="line">// initial state is cold</comment>
                                                : <name>storedPermits</name> * <name>maxPermits</name> /
                                                <name>oldMaxPermits</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>long</name>
                        </type>
                        <name>storedPermitsToWaitTime</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>storedPermits</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>permitsToTake</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>availablePermitsAboveThreshold</name> =
                                    <init>
                                        <expr>
                                            <name>storedPermits</name>
                                            -
                                            <name>thresholdPermits</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>micros</name> =
                                    <init>
                                        <expr>0</expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <comment type="line">// measuring the integral on the right part of the function (the
                                climbing line)
                            </comment>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>availablePermitsAboveThreshold</name>
                                        &gt; 0.0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>double</name>
                                                </type>
                                                <name>permitsAboveThresholdToTake</name> =
                                                <init>
                                                    <expr>
                                                        <call>
                                                            <name>min</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>availablePermitsAboveThreshold</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>permitsToTake</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>micros</name>
                                                =
                                                <call>(<name>long</name>)
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>permitsAboveThresholdToTake</name>
                                                                * (
                                                                <call>
                                                                    <name>permitsToTime</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>availablePermitsAboveThreshold
                                                                                </name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                                +
                                                                <call>
                                                                    <name>permitsToTime</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>availablePermitsAboveThreshold
                                                                                </name>
                                                                                -
                                                                                <name>permitsAboveThresholdToTake</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                                ) / 2.0
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>permitsToTake</name>
                                                -=
                                                <name>permitsAboveThresholdToTake</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <comment type="line">// measuring the integral on the left part of the function (the
                                horizontal line)
                            </comment>
                            <expr_stmt>
                                <expr>
                                    <name>micros</name>
                                    += (<name>stableIntervalMicros</name> * <name>permitsToTake</name>)
                                </expr>
                                ;
                            </expr_stmt>
                            <return>return
                                <expr>
                                    <name>micros</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>private</specifier>
                            <name>double</name>
                        </type>
                        <name>permitsToTime</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>permits</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>stableIntervalMicros</name>
                                    + <name>permits</name> *
                                    <name>slope</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>double</name>
                        </type>
                        <name>coolDownIntervalMicros</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>warmupPeriodMicros</name>
                                    /
                                    <name>maxPermits</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * This implements a "bursty" RateLimiter, where storedPermits are translated to
                * zero throttling. The maximum number of permits that can be saved (when the RateLimiter is
                * unused) is defined in terms of time, in this sense: if a RateLimiter is 2qps, and this
                * time is specified as 10 seconds, we can save up to 2 * 10 = 20 permits.
                */
            </comment>
            <class>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>SmoothBursty</name>
                <super>
                    <extends>extends
                        <name>SmoothRateLimiter</name>
                    </extends>
                </super>
                <block>{
                    <comment type="javadoc">/** The work (permits) of how many seconds can be saved up if this
                        RateLimiter is unused? */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>double</name>
                            </type>
                            <name>maxBurstSeconds</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>SmoothBursty</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>SleepingStopwatch</name>
                                    </type>
                                    <name>stopwatch</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>maxBurstSeconds</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>super</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>stopwatch</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>maxBurstSeconds</name>
                                    </name>
                                    =
                                    <name>maxBurstSeconds</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>void</name>
                        </type>
                        <name>doSetRate</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>permitsPerSecond</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>stableIntervalMicros</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>oldMaxPermits</name> =
                                    <init>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>maxPermits</name>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>maxPermits</name>
                                    = <name>maxBurstSeconds</name> *
                                    <name>permitsPerSecond</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>oldMaxPermits</name>
                                        ==
                                        <name><name>Double</name>.
                                            <name>POSITIVE_INFINITY</name>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// if we don't special-case this, we would get
                                            storedPermits == NaN, below
                                        </comment>
                                        <expr_stmt>
                                            <expr>
                                                <name>storedPermits</name>
                                                =
                                                <name>maxPermits</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>storedPermits</name>
                                                = (<name>oldMaxPermits</name> == 0.0)
                                                ? 0.0
                                                <comment type="line">// initial state</comment>
                                                : <name>storedPermits</name> * <name>maxPermits</name> /
                                                <name>oldMaxPermits</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </else>
                            </if>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>long</name>
                        </type>
                        <name>storedPermitsToWaitTime</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>storedPermits</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>permitsToTake</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return <expr>0L</expr>;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>double</name>
                        </type>
                        <name>coolDownIntervalMicros</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>stableIntervalMicros</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * The currently stored permits.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>double</name>
                    </type>
                    <name>storedPermits</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The maximum number of stored permits.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>double</name>
                    </type>
                    <name>maxPermits</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The interval between two unit requests, at our stable rate. E.g., a stable rate of 5 permits
                * per second has a stable interval of 200ms.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>double</name>
                    </type>
                    <name>stableIntervalMicros</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The time when the next request (no matter its size) will be granted. After granting a
                * request, this is pushed further in the future. Large requests push this further than small
                * requests.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>long</name>
                    </type>
                    <name>nextFreeTicketMicros</name> =
                    <init>
                        <expr>0L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// could be either in the past or future</comment>

            <constructor>
                <specifier>private</specifier>
                <name>SmoothRateLimiter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>SleepingStopwatch</name>
                            </type>
                            <name>stopwatch</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>stopwatch</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>doSetRate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>permitsPerSecond</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>nowMicros</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>resync</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>nowMicros</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>stableIntervalMicros</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>SECONDS</name>.
                                            <name>toMicros</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>1L</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    /
                                    <name>permitsPerSecond</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>stableIntervalMicros</name>
                            </name>
                            =
                            <name>stableIntervalMicros</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>doSetRate</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>permitsPerSecond</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>stableIntervalMicros</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function_decl>
                <type>
                    <specifier>abstract</specifier>
                    <name>void</name>
                </type>
                <name>doSetRate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>permitsPerSecond</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>stableIntervalMicros</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>final</specifier>
                    <name>double</name>
                </type>
                <name>doGetRate</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>SECONDS</name>.
                                    <name>toMicros</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>1L</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            /
                            <name>stableIntervalMicros</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>final</specifier>
                    <name>long</name>
                </type>
                <name>queryEarliestAvailable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>nowMicros</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>nextFreeTicketMicros</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>final</specifier>
                    <name>long</name>
                </type>
                <name>reserveEarliestAvailable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>requiredPermits</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>nowMicros</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>resync</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>nowMicros</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>returnValue</name> =
                            <init>
                                <expr>
                                    <name>nextFreeTicketMicros</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>storedPermitsToSpend</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>min</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>requiredPermits</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>storedPermits</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>freshPermits</name> =
                            <init>
                                <expr>
                                    <name>requiredPermits</name>
                                    -
                                    <name>storedPermitsToSpend</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>waitMicros</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>storedPermitsToWaitTime</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>storedPermits</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>storedPermitsToSpend</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    +
                                    <call>(<name>long</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>freshPermits</name>
                                                    *
                                                    <name>stableIntervalMicros</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <try>try
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>nextFreeTicketMicros</name>
                                    </name>
                                    =
                                    <call>
                                        <name><name>LongMath</name>.
                                            <name>checkedAdd</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>nextFreeTicketMicros</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>waitMicros</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>ArithmeticException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>nextFreeTicketMicros</name>
                                        </name>
                                        =
                                        <name><name>Long</name>.
                                            <name>MAX_VALUE</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </catch>
                    </try>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>storedPermits</name>
                            </name>
                            -=
                            <name>storedPermitsToSpend</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>returnValue</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Translates a specified portion of our currently stored permits which we want to
                * spend/acquire, into a throttling time. Conceptually, this evaluates the integral
                * of the underlying function we use, for the range of
                * [(storedPermits - permitsToTake), storedPermits].
                *
                * &lt;p&gt;This always holds: {@code 0 &lt;= permitsToTake &lt;= storedPermits}
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>abstract</specifier>
                    <name>long</name>
                </type>
                <name>storedPermitsToWaitTime</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>storedPermits</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>permitsToTake</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the number of microseconds during cool down that we have to wait to get a new permit.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>abstract</specifier>
                    <name>double</name>
                </type>
                <name>coolDownIntervalMicros</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Updates {@code storedPermits} and {@code nextFreeTicketMicros} based on the current time.
                */
            </comment>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>resync</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>nowMicros</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// if nextFreeTicket is in the past, resync to now</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>nowMicros</name>
                                &gt;
                                <name>nextFreeTicketMicros</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>storedPermits</name>
                                        =
                                        <call>
                                            <name>min</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>maxPermits</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>storedPermits</name>
                                                        + (<name>nowMicros</name> - <name>nextFreeTicketMicros</name>) /
                                                        <call>
                                                            <name>coolDownIntervalMicros</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>nextFreeTicketMicros</name>
                                        =
                                        <name>nowMicros</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
