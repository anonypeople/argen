<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\SortedLists.java">
    <comment type="block">/*
        * Copyright (C) 2010 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
        * in compliance with the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software distributed under the License
        * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
        * or implied. See the License for the specific language governing permissions and limitations under
        * the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Function</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collections</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Comparator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>RandomAccess</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Static methods pertaining to sorted {@link List} instances.
        *
        * In this documentation, the terms &lt;i&gt;greatest&lt;/i&gt;, &lt;i&gt;greater&lt;/i&gt;, &lt;i&gt;least&lt;/i&gt;,
        and
        * &lt;i&gt;lesser&lt;/i&gt; are considered to refer to the comparator on the elements, and the terms
        * &lt;i&gt;first&lt;/i&gt; and &lt;i&gt;last&lt;/i&gt; are considered to refer to the elements' ordering in a
        * list.
        *
        * @author Louis Wasserman
        */
    </comment>
    <class>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <annotation>@
            <name>Beta</name>
        </annotation>
        <specifier>final</specifier> class <name>SortedLists</name>
        <block>{
            <constructor>
                <specifier>private</specifier>
                <name>SortedLists</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="javadoc">/**
                * A specification for which index to return if the list contains at least one element that
                * compares as equal to the key.
                */
            </comment>
            <enum>
                <specifier>public</specifier>
                enum <name>KeyPresentBehavior</name>
                <block>{
                    <comment type="javadoc">/**
                        * Return the index of any list element that compares as equal to the key. No guarantees are
                        * made as to which index is returned, if more than one element compares as equal to the key.
                        */
                    </comment>
                    <expr_stmt>
                        <expr>
                            <name>ANY_PRESENT</name>
                            <block>{
                                @
                                <expr>
                                    <name>
                                        <name>Override</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>E</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>int</name>
                                    <call>
                                        <name>resultIndex</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>Comparator</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>?</name>
                                                                <super>super
                                                                    <name>E</name>
                                                                </super>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                    <name>comparator</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>E</name>
                                                    <name>key</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>List</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>?</name>
                                                                <extends>extends
                                                                    <name>E</name>
                                                                </extends>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                    <name>list</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>int</name>
                                                    <name>foundIndex</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>foundIndex</name>
                                            </expr>
                                            ;
                                        </return>
                                    </block>
                                </expr>
                            </block>
                        </expr>
                    </expr_stmt>
                    }
                </block>
            </enum>
            }
        </block>
    </class>
    ,
    <comment type="javadoc">/**
        * Return the index of the last list element that compares as equal to the key.
        */
    </comment>
    <expr_stmt>
        <expr>
            <name>LAST_PRESENT</name>
            <block>{
                @
                <expr>
                    <name>
                        <name>Override</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    <name>int</name>
                    <call>
                        <name>resultIndex</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>
                                        <name>Comparator</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                                <super>super
                                                    <name>E</name>
                                                </super>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>comparator</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>E</name>
                                    <name>key</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>
                                        <name>List</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                                <extends>extends
                                                    <name>E</name>
                                                </extends>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>list</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>int</name>
                                    <name>foundIndex</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <comment type="line">// Of course, we have to use binary search to find the precise</comment>
                        <comment type="line">// breakpoint...</comment>
                        <expr>
                            <name>int</name>
                            <name>lower</name> =
                            <name>foundIndex</name>
                        </expr>
                        ;
                        <expr>
                            <name>int</name>
                            <name>upper</name> =
                            <call>
                                <name><name>list</name>.
                                    <name>size</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            - 1
                        </expr>
                        ;
                        <comment type="line">// Everything between lower and upper inclusive compares at &gt;= 0.
                        </comment>
                        <while>while
                            <condition>(
                                <expr>
                                    <name>lower</name>
                                    &lt;
                                    <name>upper</name>
                                </expr>
                                )
                            </condition>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>middle</name> =
                                        <init>
                                            <expr>(<name>lower</name> + <name>upper</name> + 1) &gt;&gt;&gt; 1
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>c</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>comparator</name>.
                                                        <name>compare</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>list</name>.
                                                                        <name>get</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>middle</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>key</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>c</name>
                                            &gt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>upper</name>
                                                    = <name>middle</name> - 1
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt/>
                                        </block>
                                    </then>
                                </if>
                            </block>
                        </while>
                        }
                    </block>
                </expr>
                <else>else
                    <block>{
                        <comment type="line">// c == 0</comment>
                        <expr_stmt>
                            <expr>
                                <name>lower</name>
                                =
                                <name>middle</name>
                            </expr>
                            ;
                        </expr_stmt>
                        <expr_stmt/>
                    </block>
                </else>
                }
            </block>
        </expr>
    </expr_stmt>
    }
    return
    <expr_stmt>
        <expr>
            <name>lower</name>
        </expr>
        ;
    </expr_stmt>
    }
    },
    <comment type="javadoc">/**
        * Return the index of the first list element that compares as equal to the key.
        */
    </comment>
    <expr_stmt>
        <expr>
            <name>FIRST_PRESENT</name>
            <block>{
                @
                <expr>
                    <name>
                        <name>Override</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    <name>int</name>
                    <call>
                        <name>resultIndex</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>
                                        <name>Comparator</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                                <super>super
                                                    <name>E</name>
                                                </super>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>comparator</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>E</name>
                                    <name>key</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>
                                        <name>List</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                                <extends>extends
                                                    <name>E</name>
                                                </extends>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>list</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>int</name>
                                    <name>foundIndex</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <comment type="line">// Of course, we have to use binary search to find the precise</comment>
                        <comment type="line">// breakpoint...</comment>
                        <expr>
                            <name>int</name>
                            <name>lower</name> = 0
                        </expr>
                        ;
                        <expr>
                            <name>int</name>
                            <name>upper</name> =
                            <name>foundIndex</name>
                        </expr>
                        ;
                        <comment type="line">// Of course, we have to use binary search to find the precise
                            breakpoint...
                        </comment>
                        <comment type="line">// Everything between lower and upper inclusive compares at &lt;= 0.
                        </comment>
                        <while>while
                            <condition>(
                                <expr>
                                    <name>lower</name>
                                    &lt;
                                    <name>upper</name>
                                </expr>
                                )
                            </condition>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>middle</name> =
                                        <init>
                                            <expr>(<name>lower</name> + <name>upper</name>) &gt;&gt;&gt; 1
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>c</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>comparator</name>.
                                                        <name>compare</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>list</name>.
                                                                        <name>get</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>middle</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>key</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>c</name>
                                            &lt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>lower</name>
                                                    = <name>middle</name> + 1
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt/>
                                        </block>
                                    </then>
                                </if>
                            </block>
                        </while>
                        }
                    </block>
                </expr>
                <else>else
                    <block>{
                        <comment type="line">// c == 0</comment>
                        <expr_stmt>
                            <expr>
                                <name>upper</name>
                                =
                                <name>middle</name>
                            </expr>
                            ;
                        </expr_stmt>
                        <expr_stmt/>
                    </block>
                </else>
                }
            </block>
        </expr>
    </expr_stmt>
    }
    return
    <expr_stmt>
        <expr>
            <name>lower</name>
        </expr>
        ;
    </expr_stmt>
    }
    },
    <comment type="javadoc">/**
        * Return the index of the first list element that compares as greater than the key, or {@code
        * list.size()} if there is no such element.
        */
    </comment>
    <expr_stmt>
        <expr>
            <name>FIRST_AFTER</name>
            <block>{
                @
                <expr>
                    <name>Override</name>
                    public &lt;<name>E</name>&gt; <name>int</name>
                    <call>
                        <name>resultIndex</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>
                                        <name>Comparator</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                                <super>super
                                                    <name>E</name>
                                                </super>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>comparator</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>E</name>
                                    <name>key</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>
                                        <name>List</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                                <extends>extends
                                                    <name>E</name>
                                                </extends>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>list</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>int</name>
                                    <name>foundIndex</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name><name>LAST_PRESENT</name>.
                                        <name>resultIndex</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>comparator</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>key</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>list</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>foundIndex</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                + 1
                            </expr>
                            ;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }
    },
    <comment type="javadoc">/**
        * Return the index of the last list element that compares as less than the key, or {@code -1}
        * if there is no such element.
        */
    </comment>
    <expr_stmt>
        <expr>
            <name>LAST_BEFORE</name>
            <block>{
                @
                <expr>
                    <name>Override</name>
                    public &lt;<name>E</name>&gt; <name>int</name>
                    <call>
                        <name>resultIndex</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>
                                        <name>Comparator</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                                <super>super
                                                    <name>E</name>
                                                </super>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>comparator</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>E</name>
                                    <name>key</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>
                                        <name>List</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                                <extends>extends
                                                    <name>E</name>
                                                </extends>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>list</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>int</name>
                                    <name>foundIndex</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name><name>FIRST_PRESENT</name>.
                                        <name>resultIndex</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>comparator</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>key</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>list</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>foundIndex</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                - 1
                            </expr>
                            ;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }
    }
    <empty_stmt>;</empty_stmt>
    <function_decl>
        <type>
            <specifier>abstract</specifier>
            <argument_list>&lt;
                <argument>
                    <name>E</name>
                </argument>
                &gt;
            </argument_list>
            <name>int</name>
        </type>
        <name>resultIndex</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Comparator</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>E</name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>comparator</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>E</name>
                    </type>
                    <name>key</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>List</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>E</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>list</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>foundIndex</name>
                </decl>
            </param>
            )
        </parameter_list>
        ;
    </function_decl>
    }

    <comment type="javadoc">/**
        * A specification for which index to return if the list contains no elements that compare as
        * equal to the key.
        */
    </comment>
    <enum>
        <specifier>public</specifier>
        enum <name>KeyAbsentBehavior</name>
        <block>{
            <comment type="javadoc">/**
                * Return the index of the next lower element in the list, or {@code -1} if there is no such
                * element.
                */
            </comment>
            <expr_stmt>
                <expr>
                    <name>NEXT_LOWER</name>
                    <block>{
                        @
                        <expr>
                            <name>Override</name>
                            <name>int</name>
                            <call>
                                <name>resultIndex</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>int</name>
                                            <name>higherIndex</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>higherIndex</name>
                                        - 1
                                    </expr>
                                    ;
                                </return>
                            </block>
                        </expr>
                    </block>
                </expr>
            </expr_stmt>
            }
        </block>
    </enum>
    },
    <comment type="javadoc">/**
        * Return the index of the next higher element in the list, or {@code list.size()} if there is
        * no such element.
        */
    </comment>
    <expr_stmt>
        <expr>
            <name>NEXT_HIGHER</name>
            <block>{
                @
                <expr>
                    <name>Override</name>
                    public <name>int</name>
                    <call>
                        <name>resultIndex</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>int</name>
                                    <name>higherIndex</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <return>return
                            <expr>
                                <name>higherIndex</name>
                            </expr>
                            ;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }
    },
    <comment type="javadoc">/**
        * Return {@code ~insertionIndex}, where {@code insertionIndex} is defined as the point at
        * which the key would be inserted into the list: the index of the next higher element in the
        * list, or {@code list.size()} if there is no such element.
        *
        * &lt;p&gt;Note that the return value will be {@code &gt;= 0} if and only if there is an element of the
        * list that compares as equal to the key.
        *
        * &lt;p&gt;This is equivalent to the behavior of
        * {@link java.util.Collections#binarySearch(List, Object)} when the key isn't present, since
        * {@code ~insertionIndex} is equal to {@code -1 - insertionIndex}.
        */
    </comment>
    <expr_stmt>
        <expr>
            <name>INVERTED_INSERTION_INDEX</name>
            <block>{
                @
                <expr>
                    <name>Override</name>
                    public <name>int</name>
                    <call>
                        <name>resultIndex</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>int</name>
                                    <name>higherIndex</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <return>return
                            <expr>~
                                <name>higherIndex</name>
                            </expr>
                            ;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }
    }
    <empty_stmt>;</empty_stmt>

    <function_decl>
        <type>
            <specifier>abstract</specifier>
            <name>int</name>
        </type>
        <name>resultIndex</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>higherIndex</name>
                </decl>
            </param>
            )
        </parameter_list>
        ;
    </function_decl>
    }

    <comment type="javadoc">/**
        * Searches the specified naturally ordered list for the specified object using the binary search
        * algorithm.
        *
        * &lt;p&gt;Equivalent to {@link #binarySearch(List, Function, Object, Comparator, KeyPresentBehavior,
        * KeyAbsentBehavior)} using {@link Ordering#natural}.
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>E</name>
                    <extends>extends
                        <name>Comparable</name>
                    </extends>
                </argument>
                &gt;
            </argument_list>
            <name>int</name>
        </type>
        <name>binarySearch</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>List</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>E</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>list</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>E</name>
                    </type>
                    <name>e</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>KeyPresentBehavior</name>
                    </type>
                    <name>presentBehavior</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>KeyAbsentBehavior</name>
                    </type>
                    <name>absentBehavior</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>e</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>
                    <call>
                        <name>binarySearch</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>list</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>e</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>Ordering</name>.
                                            <name>natural</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>presentBehavior</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>absentBehavior</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Binary searches the list for the specified key, using the specified key function.
        *
        * &lt;p&gt;Equivalent to {@link #binarySearch(List, Function, Object, Comparator, KeyPresentBehavior,
        * KeyAbsentBehavior)} using {@link Ordering#natural}.
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>E</name>
                </argument>
                ,
                <argument>
                    <name>K</name>
                    <extends>extends
                        <name>Comparable</name>
                    </extends>
                </argument>
                &gt;
            </argument_list>
            <name>int</name>
        </type>
        <name>binarySearch</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>List</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>list</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Function</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>E</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>K</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>keyFunction</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>K</name>
                    </type>
                    <name>key</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>KeyPresentBehavior</name>
                    </type>
                    <name>presentBehavior</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>KeyAbsentBehavior</name>
                    </type>
                    <name>absentBehavior</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name>binarySearch</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>list</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>keyFunction</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>key</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>Ordering</name>.
                                            <name>natural</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>presentBehavior</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>absentBehavior</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Binary searches the list for the specified key, using the specified key function.
        *
        * &lt;p&gt;Equivalent to
        * {@link #binarySearch(List, Object, Comparator, KeyPresentBehavior, KeyAbsentBehavior)} using
        * {@link Lists#transform(List, Function) Lists.transform(list, keyFunction)}.
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>E</name>
                </argument>
                ,
                <argument>
                    <name>K</name>
                </argument>
                &gt;
            </argument_list>
            <name>int</name>
        </type>
        <name>binarySearch</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>List</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>list</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Function</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>E</name>
                                    </super>
                                </argument>
                                ,
                                <argument>
                                    <name>K</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>keyFunction</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>K</name>
                    </type>
                    <name>key</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Comparator</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>K</name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>keyComparator</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>KeyPresentBehavior</name>
                    </type>
                    <name>presentBehavior</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>KeyAbsentBehavior</name>
                    </type>
                    <name>absentBehavior</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name>binarySearch</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>Lists</name>.
                                            <name>transform</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>list</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>keyFunction</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>key</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>keyComparator</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>presentBehavior</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>absentBehavior</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Searches the specified list for the specified object using the binary search algorithm. The
        * list must be sorted into ascending order according to the specified comparator (as by the
        * {@link Collections#sort(List, Comparator) Collections.sort(List, Comparator)} method), prior
        * to making this call. If it is not sorted, the results are undefined.
        *
        * &lt;p&gt;If there are elements in the list which compare as equal to the key, the choice of
        * {@link KeyPresentBehavior} decides which index is returned. If no elements compare as equal to
        * the key, the choice of {@link KeyAbsentBehavior} decides which index is returned.
        *
        * &lt;p&gt;This method runs in log(n) time on random-access lists, which offer near-constant-time
        * access to each list element.
        *
        * @param list the list to be searched.
        * @param key the value to be searched for.
        * @param comparator the comparator by which the list is ordered.
        * @param presentBehavior the specification for what to do if at least one element of the list
        * compares as equal to the key.
        * @param absentBehavior the specification for what to do if no elements of the list compare as
        * equal to the key.
        * @return the index determined by the {@code KeyPresentBehavior}, if the key is in the list;
        * otherwise the index determined by the {@code KeyAbsentBehavior}.
        */
    </comment>
    <function>
        <type>
            <specifier>public</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>E</name>
                </argument>
                &gt;
            </argument_list>
            <name>int</name>
        </type>
        <name>binarySearch</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>List</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <extends>extends
                                        <name>E</name>
                                    </extends>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>list</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>E</name>
                    </type>
                    <name>key</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Comparator</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>E</name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>comparator</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>KeyPresentBehavior</name>
                    </type>
                    <name>presentBehavior</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>KeyAbsentBehavior</name>
                    </type>
                    <name>absentBehavior</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>comparator</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>list</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>presentBehavior</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>absentBehavior</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <if>if
                <condition>(
                    <expr>!(<name>list</name>
                        <name>instanceof</name>
                        <name>RandomAccess</name>)
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>list</name>
                                =
                                <call>
                                    <name><name>Lists</name>.
                                        <name>newArrayList</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>list</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </then>
            </if>
            <comment type="line">// TODO(lowasser): benchmark when it's best to do a linear search</comment>

            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>lower</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>upper</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>list</name>.
                                    <name>size</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            - 1
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <while>while
                <condition>(
                    <expr>
                        <name>lower</name>
                        &lt;=
                        <name>upper</name>
                    </expr>
                    )
                </condition>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>middle</name> =
                            <init>
                                <expr>(<name>lower</name> + <name>upper</name>) &gt;&gt;&gt; 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>c</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>comparator</name>.
                                            <name>compare</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>key</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>list</name>.
                                                            <name>get</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>middle</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>c</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>upper</name>
                                        = <name>middle</name> - 1
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>c</name>
                                        &gt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>lower</name>
                                                = <name>middle</name> + 1
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>lower</name>
                                                +
                                                <call>
                                                    <name><name>presentBehavior</name>.
                                                        <name>resultIndex</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>comparator</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>key</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>list</name>.
                                                                        <name>subList</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>lower</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>upper</name>
                                                                                + 1
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>middle</name>
                                                                -
                                                                <name>lower</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </while>
            <return>return
                <expr>
                    <call>
                        <name><name>absentBehavior</name>.
                            <name>resultIndex</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>lower</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    }
</unit>
