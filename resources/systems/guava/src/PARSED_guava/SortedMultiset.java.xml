<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\SortedMultiset.java">
    <comment type="block">/*
        * Copyright (C) 2011 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License"); you may not
        * use this file except in compliance with the License. You may obtain a copy of
        * the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
        * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
        * License for the specific language governing permissions and limitations under
        * the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collection</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Comparator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>NavigableSet</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Set</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A {@link Multiset} which maintains the ordering of its elements, according to
        * either their natural order or an explicit {@link Comparator}. This order is
        * reflected when iterating over the sorted multiset, either directly, or through
        * its {@code elementSet} or {@code entrySet} views. In all cases,
        * this implementation uses {@link Comparable#compareTo} or
        * {@link Comparator#compare} instead of {@link Object#equals} to determine
        * equivalence of instances.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; The comparison must be &lt;i&gt;consistent with equals&lt;/i&gt; as
        * explained by the {@link Comparable} class specification. Otherwise, the
        * resulting multiset will violate the {@link Collection} contract, which it is
        * specified in terms of {@link Object#equals}.
        *
        * &lt;p&gt;See the Guava User Guide article on &lt;a href=
        * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset"&gt;
        * {@code Multiset}&lt;/a&gt;.
        *
        * @author Louis Wasserman
        * @since 11.0
        */
    </comment>
    <class type="interface">
        <annotation>@
            <name>Beta</name>
        </annotation>
        <annotation>@
            <name>GwtCompatible</name>
            <argument_list>(emulated = true)</argument_list>
        </annotation>
        <specifier>public</specifier>
        interface
        <name>
            <name>SortedMultiset</name>
            <argument_list>&lt;
                <argument>
                    <name>E</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>SortedMultisetBridge</name>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                ,
                <name>
                    <name>SortedIterable</name>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <comment type="javadoc">/**
                * Returns the comparator that orders this multiset, or
                * {@link Ordering#natural()} if the natural ordering of the elements is used.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Comparator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                                <super>super
                                    <name>E</name>
                                </super>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>comparator</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the entry of the first element in this multiset, or {@code null} if
                * this multiset is empty.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>firstEntry</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the entry of the last element in this multiset, or {@code null} if
                * this multiset is empty.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>lastEntry</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns and removes the entry associated with the lowest element in this
                * multiset, or returns {@code null} if this multiset is empty.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>pollFirstEntry</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns and removes the entry associated with the greatest element in this
                * multiset, or returns {@code null} if this multiset is empty.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Entry</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>pollLastEntry</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a {@link NavigableSet} view of the distinct elements in this multiset.
                *
                * @since 14.0 (present with return type {@code SortedSet} since 11.0)
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>NavigableSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>elementSet</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * {@inheritDoc}
                *
                * &lt;p&gt;The {@code entrySet}'s iterator returns entries in ascending element
                * order according to the this multiset's comparator.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Entry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>entrySet</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * {@inheritDoc}
                *
                * &lt;p&gt;The iterator returns the elements in ascending order according to this
                * multiset's comparator.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>Iterator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>iterator</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a descending view of this multiset. Modifications made to either
                * map will be reflected in the other.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>SortedMultiset</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>descendingMultiset</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a view of this multiset restricted to the elements less than
                * {@code upperBound}, optionally including {@code upperBound} itself. The
                * returned multiset is a view of this multiset, so changes to one will be
                * reflected in the other. The returned multiset supports all operations that
                * this multiset supports.
                *
                * &lt;p&gt;The returned multiset will throw an {@link IllegalArgumentException} on
                * attempts to add elements outside its range.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>SortedMultiset</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>headMultiset</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>upperBound</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>BoundType</name>
                            </type>
                            <name>boundType</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a view of this multiset restricted to the range between
                * {@code lowerBound} and {@code upperBound}. The returned multiset is a view
                * of this multiset, so changes to one will be reflected in the other. The
                * returned multiset supports all operations that this multiset supports.
                *
                * &lt;p&gt;The returned multiset will throw an {@link IllegalArgumentException} on
                * attempts to add elements outside its range.
                *
                * &lt;p&gt;This method is equivalent to
                * {@code tailMultiset(lowerBound, lowerBoundType).headMultiset(upperBound,
                * upperBoundType)}.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>SortedMultiset</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>subMultiset</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>lowerBound</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>BoundType</name>
                            </type>
                            <name>lowerBoundType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>upperBound</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>BoundType</name>
                            </type>
                            <name>upperBoundType</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a view of this multiset restricted to the elements greater than
                * {@code lowerBound}, optionally including {@code lowerBound} itself. The
                * returned multiset is a view of this multiset, so changes to one will be
                * reflected in the other. The returned multiset supports all operations that
                * this multiset supports.
                *
                * &lt;p&gt;The returned multiset will throw an {@link IllegalArgumentException} on
                * attempts to add elements outside its range.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>SortedMultiset</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>tailMultiset</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>lowerBound</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>BoundType</name>
                            </type>
                            <name>boundType</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            }
        </block>
    </class>
</unit>
