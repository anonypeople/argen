<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\SortedSetMultimap.java">
    <comment type="block">/*
        * Copyright (C) 2007 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collection</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Comparator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Set</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>SortedSet</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A {@code SetMultimap} whose set of values for a given key are kept sorted;
        * that is, they comprise a {@link SortedSet}. It cannot hold duplicate
        * key-value pairs; adding a key-value pair that's already in the multimap has
        * no effect. This interface does not specify the ordering of the multimap's
        * keys. See the {@link Multimap} documentation for information common to all
        * multimaps.
        *
        * &lt;p&gt;The {@link #get}, {@link #removeAll}, and {@link #replaceValues} methods
        * each return a {@link SortedSet} of values, while {@link Multimap#entries()}
        * returns a {@link Set} of map entries. Though the method signature doesn't say
        * so explicitly, the map returned by {@link #asMap} has {@code SortedSet}
        * values.
        *
        * &lt;p&gt;See the Guava User Guide article on &lt;a href=
        * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap"&gt;
        * {@code Multimap}&lt;/a&gt;.
        *
        * @author Jared Levy
        * @since 2.0
        */
    </comment>
    <class type="interface">
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        interface
        <name>
            <name>SortedSetMultimap</name>
            <argument_list>&lt;
                <argument>
                    <name>K</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>SetMultimap</name>
                    <argument_list>&lt;
                        <argument>
                            <name>K</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <comment type="line">// Following Javadoc copied from Multimap.</comment>

            <comment type="javadoc">/**
                * Returns a collection view of all values associated with a key. If no
                * mappings in the multimap have the provided key, an empty collection is
                * returned.
                *
                * &lt;p&gt;Changes to the returned collection will update the underlying multimap,
                * and vice versa.
                *
                * &lt;p&gt;Because a {@code SortedSetMultimap} has unique sorted values for a given
                * key, this method returns a {@link SortedSet}, instead of the
                * {@link java.util.Collection} specified in the {@link Multimap} interface.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>SortedSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>get</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Removes all values associated with a given key.
                *
                * &lt;p&gt;Because a {@code SortedSetMultimap} has unique sorted values for a given
                * key, this method returns a {@link SortedSet}, instead of the
                * {@link java.util.Collection} specified in the {@link Multimap} interface.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>SortedSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>removeAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Stores a collection of values with the same key, replacing any existing
                * values for that key.
                *
                * &lt;p&gt;Because a {@code SortedSetMultimap} has unique sorted values for a given
                * key, this method returns a {@link SortedSet}, instead of the
                * {@link java.util.Collection} specified in the {@link Multimap} interface.
                *
                * &lt;p&gt;Any duplicates in {@code values} will be stored in the multimap once.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>SortedSet</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>replaceValues</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>K</name>
                            </type>
                            <name>key</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>values</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a map view that associates each key with the corresponding values
                * in the multimap. Changes to the returned map, such as element removal, will
                * update the underlying multimap. The map does not support {@code setValue()}
                * on its entries, {@code put}, or {@code putAll}.
                *
                * &lt;p&gt;When passed a key that is present in the map, {@code
                * asMap().get(Object)} has the same behavior as {@link #get}, returning a
                * live collection. When passed a key that is not present, however, {@code
                * asMap().get(Object)} returns {@code null} instead of an empty collection.
                *
                * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; The returned map's values are guaranteed to be of type
                * {@link SortedSet}. To obtain this map with the more specific generic type
                * {@code Map&lt;K, SortedSet&lt;V&gt;&gt;}, call
                * {@link Multimaps#asMap(SortedSetMultimap)} instead.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>
                        <name>Map</name>
                        <argument_list>&lt;
                            <argument>
                                <name>K</name>
                            </argument>
                            ,
                            <argument>
                                <name>
                                    <name>Collection</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>asMap</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the comparator that orders the multimap values, with {@code null}
                * indicating that natural ordering is used.
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Comparator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                                <super>super
                                    <name>V</name>
                                </super>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>valueComparator</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            }
        </block>
    </class>
</unit>
