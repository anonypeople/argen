<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\base\Splitter.java">
    <comment type="block">/*
        * Copyright (C) 2009 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>base</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkArgument</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtIncompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>ArrayList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collections</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>LinkedHashMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>regex</name>.
            <name>Matcher</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>regex</name>.
            <name>Pattern</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>CheckReturnValue</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Extracts non-overlapping substrings from an input string, typically by
        * recognizing appearances of a &lt;i&gt;separator&lt;/i&gt; sequence. This separator can be
        * specified as a single {@linkplain #on(char) character}, fixed {@linkplain
        * #on(String) string}, {@linkplain #onPattern regular expression} or {@link
        * #on(CharMatcher) CharMatcher} instance. Or, instead of using a separator at
        * all, a splitter can extract adjacent substrings of a given {@linkplain
        * #fixedLength fixed length}.
        *
        * &lt;p&gt;For example, this expression: &lt;pre&gt; {@code
        *
        * Splitter.on(',').split("foo,bar,qux")}&lt;/pre&gt;
        *
        * ... produces an {@code Iterable} containing {@code "foo"}, {@code "bar"} and
        * {@code "qux"}, in that order.
        *
        * &lt;p&gt;By default, {@code Splitter}'s behavior is simplistic and unassuming. The
        * following expression: &lt;pre&gt; {@code
        *
        * Splitter.on(',').split(" foo,,, bar ,")}&lt;/pre&gt;
        *
        * ... yields the substrings {@code [" foo", "", "", " bar ", ""]}. If this
        * is not the desired behavior, use configuration methods to obtain a &lt;i&gt;new&lt;/i&gt;
        * splitter instance with modified behavior: &lt;pre&gt; {@code
        *
        * private static final Splitter MY_SPLITTER = Splitter.on(',')
        * .trimResults()
        * .omitEmptyStrings();}&lt;/pre&gt;
        *
        * &lt;p&gt;Now {@code MY_SPLITTER.split("foo,,, bar ,")} returns just {@code ["foo",
        * "bar"]}. Note that the order in which these configuration methods are called
        * is never significant.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; Splitter instances are immutable. Invoking a configuration
        * method has no effect on the receiving instance; you must store and use the
        * new splitter instance it returns instead. &lt;pre&gt; {@code
        *
        * // Do NOT do this
        * Splitter splitter = Splitter.on('/');
        * splitter.trimResults(); // does nothing!
        * return splitter.split("wrong / wrong / wrong");}&lt;/pre&gt;
        *
        * &lt;p&gt;For separator-based splitters that do not use {@code omitEmptyStrings}, an
        * input string containing {@code n} occurrences of the separator naturally
        * yields an iterable of size {@code n + 1}. So if the separator does not occur
        * anywhere in the input, a single substring is returned containing the entire
        * input. Consequently, all splitters split the empty string to {@code [""]}
        * (note: even fixed-length splitters).
        *
        * &lt;p&gt;Splitter instances are thread-safe immutable, and are therefore safe to
        * store as {@code static final} constants.
        *
        * &lt;p&gt;The {@link Joiner} class provides the inverse operation to splitting, but
        * note that a round-trip between the two should be assumed to be lossy.
        *
        * &lt;p&gt;See the Guava User Guide article on &lt;a href=
        * "https://github.com/google/guava/wiki/StringsExplained#splitter"&gt;
        * {@code Splitter}&lt;/a&gt;.
        *
        * @author Julien Silland
        * @author Jesse Wilson
        * @author Kevin Bourrillion
        * @author Louis Wasserman
        * @since 1.0
        */
    </comment>
    <class>
        <annotation>@
            <name>GwtCompatible</name>
            <argument_list>(emulated = true)</argument_list>
        </annotation>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>Splitter</name>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>CharMatcher</name>
                    </type>
                    <name>trimmer</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>omitEmptyStrings</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Strategy</name>
                    </type>
                    <name>strategy</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>limit</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <specifier>private</specifier>
                <name>Splitter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Strategy</name>
                            </type>
                            <name>strategy</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>strategy</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>false</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>CharMatcher</name>.
                                                <name>NONE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Integer</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <constructor>
                <specifier>private</specifier>
                <name>Splitter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Strategy</name>
                            </type>
                            <name>strategy</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>omitEmptyStrings</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>CharMatcher</name>
                            </type>
                            <name>trimmer</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>limit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>strategy</name>
                            </name>
                            =
                            <name>strategy</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>omitEmptyStrings</name>
                            </name>
                            =
                            <name>omitEmptyStrings</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>trimmer</name>
                            </name>
                            =
                            <name>trimmer</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>limit</name>
                            </name>
                            =
                            <name>limit</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Returns a splitter that uses the given single-character separator. For
                * example, {@code Splitter.on(',').split("foo,,bar")} returns an iterable
                * containing {@code ["foo", "", "bar"]}.
                *
                * @param separator the character to recognize as a separator
                * @return a splitter, with default settings, that recognizes that separator
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Splitter</name>
                </type>
                <name>on</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>on</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>CharMatcher</name>.
                                                    <name>is</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>separator</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a splitter that considers any single character matched by the
                * given {@code CharMatcher} to be a separator. For example, {@code
                * Splitter.on(CharMatcher.anyOf(";,")).split("foo,;bar,quux")} returns an
                * iterable containing {@code ["foo", "", "bar", "quux"]}.
                *
                * @param separatorMatcher a {@link CharMatcher} that determines whether a
                * character is a separator
                * @return a splitter, with default settings, that uses this matcher
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Splitter</name>
                </type>
                <name>on</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>CharMatcher</name>
                            </type>
                            <name>separatorMatcher</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>separatorMatcher</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>new
                            <call>
                                <name>Splitter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <class>
                                                <super>
                                                    <name>Strategy</name>
                                                </super>
                                                <argument_list>()</argument_list>
                                                <block>{
                                                    <function>
                                                        <type>
                                                            <annotation>@
                                                                <name>Override</name>
                                                            </annotation>
                                                            <specifier>public</specifier>
                                                            <name>SplittingIterator</name>
                                                        </type>
                                                        <name>iterator</name>
                                                        <parameter_list>(
                                                            <param>
                                                                <decl>
                                                                    <type>
                                                                        <name>Splitter</name>
                                                                    </type>
                                                                    <name>splitter</name>
                                                                </decl>
                                                            </param>
                                                            ,
                                                            <param>
                                                                <decl>
                                                                    <type>
                                                                        <specifier>final</specifier>
                                                                        <name>CharSequence</name>
                                                                    </type>
                                                                    <name>toSplit</name>
                                                                </decl>
                                                            </param>
                                                            )
                                                        </parameter_list>
                                                        <block>{
                                                            <return>return
                                                                <expr>new
                                                                    <class>
                                                                        <super>
                                                                            <name>SplittingIterator</name>
                                                                        </super>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>splitter</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>toSplit</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                        <block>{
                                                                            <function>
                                                                                <type>
                                                                                    <annotation>@
                                                                                        <name>Override</name>
                                                                                    </annotation>
                                                                                    <name>int</name>
                                                                                </type>
                                                                                <name>separatorStart</name>
                                                                                <parameter_list>(
                                                                                    <param>
                                                                                        <decl>
                                                                                            <type>
                                                                                                <name>int</name>
                                                                                            </type>
                                                                                            <name>start</name>
                                                                                        </decl>
                                                                                    </param>
                                                                                    )
                                                                                </parameter_list>
                                                                                <block>{
                                                                                    <return>return
                                                                                        <expr>
                                                                                            <call>
                                                                                                <name><name>
                                                                                                    separatorMatcher</name>
                                                                                                    .
                                                                                                    <name>indexIn</name>
                                                                                                </name>
                                                                                                <argument_list>(
                                                                                                    <argument>
                                                                                                        <expr>
                                                                                                            <name>
                                                                                                                toSplit
                                                                                                            </name>
                                                                                                        </expr>
                                                                                                    </argument>
                                                                                                    ,
                                                                                                    <argument>
                                                                                                        <expr>
                                                                                                            <name>
                                                                                                                start
                                                                                                            </name>
                                                                                                        </expr>
                                                                                                    </argument>
                                                                                                    )
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                        ;
                                                                                    </return>
                                                                                    }
                                                                                </block>
                                                                            </function>

                                                                            <function>
                                                                                <type>
                                                                                    <annotation>@
                                                                                        <name>Override</name>
                                                                                    </annotation>
                                                                                    <name>int</name>
                                                                                </type>
                                                                                <name>separatorEnd</name>
                                                                                <parameter_list>(
                                                                                    <param>
                                                                                        <decl>
                                                                                            <type>
                                                                                                <name>int</name>
                                                                                            </type>
                                                                                            <name>separatorPosition
                                                                                            </name>
                                                                                        </decl>
                                                                                    </param>
                                                                                    )
                                                                                </parameter_list>
                                                                                <block>{
                                                                                    <return>return
                                                                                        <expr>
                                                                                            <name>separatorPosition
                                                                                            </name>
                                                                                            + 1
                                                                                        </expr>
                                                                                        ;
                                                                                    </return>
                                                                                    }
                                                                                </block>
                                                                            </function>
                                                                            }
                                                                        </block>
                                                                    </class>
                                                                </expr>
                                                                ;
                                                            </return>
                                                            }
                                                        </block>
                                                    </function>
                                                    }
                                                </block>
                                            </class>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a splitter that uses the given fixed string as a separator. For
                * example, {@code Splitter.on(", ").split("foo, bar,baz")} returns an
                * iterable containing {@code ["foo", "bar,baz"]}.
                *
                * @param separator the literal, nonempty string to recognize as a separator
                * @return a splitter, with default settings, that recognizes that separator
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Splitter</name>
                </type>
                <name>on</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>String</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>separator</name>.
                                                    <name>length</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            != 0
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"The separator may not be the empty string."</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>new
                            <call>
                                <name>Splitter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <class>
                                                <super>
                                                    <name>Strategy</name>
                                                </super>
                                                <argument_list>()</argument_list>
                                                <block>{
                                                    <function>
                                                        <type>
                                                            <annotation>@
                                                                <name>Override</name>
                                                            </annotation>
                                                            <specifier>public</specifier>
                                                            <name>SplittingIterator</name>
                                                        </type>
                                                        <name>iterator</name>
                                                        <parameter_list>(
                                                            <param>
                                                                <decl>
                                                                    <type>
                                                                        <name>Splitter</name>
                                                                    </type>
                                                                    <name>splitter</name>
                                                                </decl>
                                                            </param>
                                                            ,
                                                            <param>
                                                                <decl>
                                                                    <type>
                                                                        <name>CharSequence</name>
                                                                    </type>
                                                                    <name>toSplit</name>
                                                                </decl>
                                                            </param>
                                                            )
                                                        </parameter_list>
                                                        <block>{
                                                            <return>return
                                                                <expr>new
                                                                    <class>
                                                                        <super>
                                                                            <name>SplittingIterator</name>
                                                                        </super>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>splitter</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>toSplit</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                        <block>{
                                                                            <function>
                                                                                <type>
                                                                                    <annotation>@
                                                                                        <name>Override</name>
                                                                                    </annotation>
                                                                                    <specifier>public</specifier>
                                                                                    <name>int</name>
                                                                                </type>
                                                                                <name>separatorStart</name>
                                                                                <parameter_list>(
                                                                                    <param>
                                                                                        <decl>
                                                                                            <type>
                                                                                                <name>int</name>
                                                                                            </type>
                                                                                            <name>start</name>
                                                                                        </decl>
                                                                                    </param>
                                                                                    )
                                                                                </parameter_list>
                                                                                <block>{
                                                                                    <decl_stmt>
                                                                                        <decl>
                                                                                            <type>
                                                                                                <name>int</name>
                                                                                            </type>
                                                                                            <name>separatorLength</name> =
                                                                                            <init>
                                                                                                <expr>
                                                                                                    <call>
                                                                                                        <name><name>
                                                                                                            separator</name>
                                                                                                            .
                                                                                                            <name>
                                                                                                                length
                                                                                                            </name>
                                                                                                        </name>
                                                                                                        <argument_list>
                                                                                                            ()
                                                                                                        </argument_list>
                                                                                                    </call>
                                                                                                </expr>
                                                                                            </init>
                                                                                        </decl>
                                                                                        ;
                                                                                    </decl_stmt>

                                                                                    <label><name>positions</name>:
                                                                                    </label>
                                                                                    <for>for (
                                                                                        <init>
                                                                                            <decl>
                                                                                                <type>
                                                                                                    <name>int</name>
                                                                                                </type>
                                                                                                <name>p</name> =
                                                                                                <init>
                                                                                                    <expr>
                                                                                                        <name>start
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                </init>
                                                                                                , <name>last</name> =
                                                                                                <init>
                                                                                                    <expr>
                                                                                                        <call>
                                                                                                            <name><name>
                                                                                                                toSplit</name>
                                                                                                                .
                                                                                                                <name>
                                                                                                                    length
                                                                                                                </name>
                                                                                                            </name>
                                                                                                            <argument_list>
                                                                                                                ()
                                                                                                            </argument_list>
                                                                                                        </call>
                                                                                                        -
                                                                                                        <name>
                                                                                                            separatorLength
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                </init>
                                                                                            </decl>
                                                                                            ;
                                                                                        </init>
                                                                                        <condition>
                                                                                            <expr>
                                                                                                <name>p</name>
                                                                                                &lt;=
                                                                                                <name>last</name>
                                                                                            </expr>
                                                                                            ;
                                                                                        </condition>
                                                                                        <incr>
                                                                                            <expr><name>p</name>++
                                                                                            </expr>
                                                                                        </incr>
                                                                                        )
                                                                                        <block>{
                                                                                            <for>for (
                                                                                                <init>
                                                                                                    <decl>
                                                                                                        <type>
                                                                                                            <name>int
                                                                                                            </name>
                                                                                                        </type>
                                                                                                        <name>i</name> =
                                                                                                        <init>
                                                                                                            <expr>0
                                                                                                            </expr>
                                                                                                        </init>
                                                                                                    </decl>
                                                                                                    ;
                                                                                                </init>
                                                                                                <condition>
                                                                                                    <expr>
                                                                                                        <name>i</name>
                                                                                                        &lt;
                                                                                                        <name>
                                                                                                            separatorLength
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                    ;
                                                                                                </condition>
                                                                                                <incr>
                                                                                                    <expr><name>i</name>
                                                                                                        ++
                                                                                                    </expr>
                                                                                                </incr>
                                                                                                )
                                                                                                <block>{
                                                                                                    <if>if
                                                                                                        <condition>(
                                                                                                            <expr>
                                                                                                                <call>
                                                                                                                    <name>
                                                                                                                        <name>
                                                                                                                            toSplit</name>
                                                                                                                        .
                                                                                                                        <name>
                                                                                                                            charAt
                                                                                                                        </name>
                                                                                                                    </name>
                                                                                                                    <argument_list>
                                                                                                                        (
                                                                                                                        <argument>
                                                                                                                            <expr>
                                                                                                                                <name>
                                                                                                                                    i
                                                                                                                                </name>
                                                                                                                                +
                                                                                                                                <name>
                                                                                                                                    p
                                                                                                                                </name>
                                                                                                                            </expr>
                                                                                                                        </argument>
                                                                                                                        )
                                                                                                                    </argument_list>
                                                                                                                </call>
                                                                                                                !=
                                                                                                                <call>
                                                                                                                    <name>
                                                                                                                        <name>
                                                                                                                            separator</name>
                                                                                                                        .
                                                                                                                        <name>
                                                                                                                            charAt
                                                                                                                        </name>
                                                                                                                    </name>
                                                                                                                    <argument_list>
                                                                                                                        (
                                                                                                                        <argument>
                                                                                                                            <expr>
                                                                                                                                <name>
                                                                                                                                    i
                                                                                                                                </name>
                                                                                                                            </expr>
                                                                                                                        </argument>
                                                                                                                        )
                                                                                                                    </argument_list>
                                                                                                                </call>
                                                                                                            </expr>
                                                                                                            )
                                                                                                        </condition>
                                                                                                        <then>
                                                                                                            <block>{
                                                                                                                <continue>
                                                                                                                    continue
                                                                                                                    positions;
                                                                                                                </continue>
                                                                                                                }
                                                                                                            </block>
                                                                                                        </then>
                                                                                                    </if>
                                                                                                    }
                                                                                                </block>
                                                                                            </for>
                                                                                            <return>return
                                                                                                <expr>
                                                                                                    <name>p</name>
                                                                                                </expr>
                                                                                                ;
                                                                                            </return>
                                                                                            }
                                                                                        </block>
                                                                                    </for>
                                                                                    <return>return <expr>-1</expr>;
                                                                                    </return>
                                                                                    }
                                                                                </block>
                                                                            </function>

                                                                            <function>
                                                                                <type>
                                                                                    <annotation>@
                                                                                        <name>Override</name>
                                                                                    </annotation>
                                                                                    <specifier>public</specifier>
                                                                                    <name>int</name>
                                                                                </type>
                                                                                <name>separatorEnd</name>
                                                                                <parameter_list>(
                                                                                    <param>
                                                                                        <decl>
                                                                                            <type>
                                                                                                <name>int</name>
                                                                                            </type>
                                                                                            <name>separatorPosition
                                                                                            </name>
                                                                                        </decl>
                                                                                    </param>
                                                                                    )
                                                                                </parameter_list>
                                                                                <block>{
                                                                                    <return>return
                                                                                        <expr>
                                                                                            <name>separatorPosition
                                                                                            </name>
                                                                                            +
                                                                                            <call>
                                                                                                <name><name>
                                                                                                    separator</name>.
                                                                                                    <name>length</name>
                                                                                                </name>
                                                                                                <argument_list>()
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                        ;
                                                                                    </return>
                                                                                    }
                                                                                </block>
                                                                            </function>
                                                                            }
                                                                        </block>
                                                                    </class>
                                                                </expr>
                                                                ;
                                                            </return>
                                                            }
                                                        </block>
                                                    </function>
                                                    }
                                                </block>
                                            </class>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a splitter that considers any subsequence matching {@code
                * pattern} to be a separator. For example, {@code
                * Splitter.on(Pattern.compile("\r?\n")).split(entireFile)} splits a string
                * into lines whether it uses DOS-style or UNIX-style line terminators.
                *
                * @param separatorPattern the pattern that determines whether a subsequence
                * is a separator. This pattern may not match the empty string.
                * @return a splitter, with default settings, that uses this pattern
                * @throws IllegalArgumentException if {@code separatorPattern} matches the
                * empty string
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("java.util.regex")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Splitter</name>
                </type>
                <name>on</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Pattern</name>
                            </type>
                            <name>separatorPattern</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>separatorPattern</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>!
                                            <call>
                                                <name><name>separatorPattern</name>.
                                                    <name>matcher</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>""</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>matches</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"The pattern may not match the empty string: %s"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>separatorPattern</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>new
                            <call>
                                <name>Splitter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <class>
                                                <super>
                                                    <name>Strategy</name>
                                                </super>
                                                <argument_list>()</argument_list>
                                                <block>{
                                                    <function>
                                                        <type>
                                                            <annotation>@
                                                                <name>Override</name>
                                                            </annotation>
                                                            <specifier>public</specifier>
                                                            <name>SplittingIterator</name>
                                                        </type>
                                                        <name>iterator</name>
                                                        <parameter_list>(
                                                            <param>
                                                                <decl>
                                                                    <type>
                                                                        <specifier>final</specifier>
                                                                        <name>Splitter</name>
                                                                    </type>
                                                                    <name>splitter</name>
                                                                </decl>
                                                            </param>
                                                            ,
                                                            <param>
                                                                <decl>
                                                                    <type>
                                                                        <name>CharSequence</name>
                                                                    </type>
                                                                    <name>toSplit</name>
                                                                </decl>
                                                            </param>
                                                            )
                                                        </parameter_list>
                                                        <block>{
                                                            <decl_stmt>
                                                                <decl>
                                                                    <type>
                                                                        <specifier>final</specifier>
                                                                        <name>Matcher</name>
                                                                    </type>
                                                                    <name>matcher</name> =
                                                                    <init>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>separatorPattern</name>.
                                                                                    <name>matcher</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>toSplit</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </init>
                                                                </decl>
                                                                ;
                                                            </decl_stmt>
                                                            <return>return
                                                                <expr>new
                                                                    <class>
                                                                        <super>
                                                                            <name>SplittingIterator</name>
                                                                        </super>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>splitter</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>toSplit</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                        <block>{
                                                                            <function>
                                                                                <type>
                                                                                    <annotation>@
                                                                                        <name>Override</name>
                                                                                    </annotation>
                                                                                    <specifier>public</specifier>
                                                                                    <name>int</name>
                                                                                </type>
                                                                                <name>separatorStart</name>
                                                                                <parameter_list>(
                                                                                    <param>
                                                                                        <decl>
                                                                                            <type>
                                                                                                <name>int</name>
                                                                                            </type>
                                                                                            <name>start</name>
                                                                                        </decl>
                                                                                    </param>
                                                                                    )
                                                                                </parameter_list>
                                                                                <block>{
                                                                                    <return>return
                                                                                        <expr>
                                                                                            <call>
                                                                                                <name><name>
                                                                                                    matcher</name>.
                                                                                                    <name>find</name>
                                                                                                </name>
                                                                                                <argument_list>(
                                                                                                    <argument>
                                                                                                        <expr>
                                                                                                            <name>
                                                                                                                start
                                                                                                            </name>
                                                                                                        </expr>
                                                                                                    </argument>
                                                                                                    )
                                                                                                </argument_list>
                                                                                            </call>
                                                                                            ?
                                                                                            <call>
                                                                                                <name><name>
                                                                                                    matcher</name>.
                                                                                                    <name>start</name>
                                                                                                </name>
                                                                                                <argument_list>()
                                                                                                </argument_list>
                                                                                            </call>
                                                                                            : -1
                                                                                        </expr>
                                                                                        ;
                                                                                    </return>
                                                                                    }
                                                                                </block>
                                                                            </function>

                                                                            <function>
                                                                                <type>
                                                                                    <annotation>@
                                                                                        <name>Override</name>
                                                                                    </annotation>
                                                                                    <specifier>public</specifier>
                                                                                    <name>int</name>
                                                                                </type>
                                                                                <name>separatorEnd</name>
                                                                                <parameter_list>(
                                                                                    <param>
                                                                                        <decl>
                                                                                            <type>
                                                                                                <name>int</name>
                                                                                            </type>
                                                                                            <name>separatorPosition
                                                                                            </name>
                                                                                        </decl>
                                                                                    </param>
                                                                                    )
                                                                                </parameter_list>
                                                                                <block>{
                                                                                    <return>return
                                                                                        <expr>
                                                                                            <call>
                                                                                                <name><name>
                                                                                                    matcher</name>.
                                                                                                    <name>end</name>
                                                                                                </name>
                                                                                                <argument_list>()
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                        ;
                                                                                    </return>
                                                                                    }
                                                                                </block>
                                                                            </function>
                                                                            }
                                                                        </block>
                                                                    </class>
                                                                </expr>
                                                                ;
                                                            </return>
                                                            }
                                                        </block>
                                                    </function>
                                                    }
                                                </block>
                                            </class>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a splitter that considers any subsequence matching a given
                * pattern (regular expression) to be a separator. For example, {@code
                * Splitter.onPattern("\r?\n").split(entireFile)} splits a string into lines
                * whether it uses DOS-style or UNIX-style line terminators. This is
                * equivalent to {@code Splitter.on(Pattern.compile(pattern))}.
                *
                * @param separatorPattern the pattern that determines whether a subsequence
                * is a separator. This pattern may not match the empty string.
                * @return a splitter, with default settings, that uses this pattern
                * @throws java.util.regex.PatternSyntaxException if {@code separatorPattern}
                * is a malformed expression
                * @throws IllegalArgumentException if {@code separatorPattern} matches the
                * empty string
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("java.util.regex")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Splitter</name>
                </type>
                <name>onPattern</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separatorPattern</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>on</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Pattern</name>.
                                                    <name>compile</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>separatorPattern</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a splitter that divides strings into pieces of the given length.
                * For example, {@code Splitter.fixedLength(2).split("abcde")} returns an
                * iterable containing {@code ["ab", "cd", "e"]}. The last piece can be
                * smaller than {@code length} but will never be empty.
                *
                * &lt;p&gt;&lt;b&gt;Exception:&lt;/b&gt; for consistency with separator-based splitters, {@code
                * split("")} does not yield an empty iterable, but an iterable containing
                * {@code ""}. This is the only case in which {@code
                * Iterables.size(split(input))} does not equal {@code
                * IntMath.divide(input.length(), length, CEILING)}. To avoid this behavior,
                * use {@code omitEmptyStrings}.
                *
                * @param length the desired length of pieces after splitting, a positive
                * integer
                * @return a splitter, with default settings, that can split into fixed sized
                * pieces
                * @throws IllegalArgumentException if {@code length} is zero or negative
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Splitter</name>
                </type>
                <name>fixedLength</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>length</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>length</name>
                                            &gt; 0
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"The length may not be less than 1"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>new
                            <call>
                                <name>Splitter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <class>
                                                <super>
                                                    <name>Strategy</name>
                                                </super>
                                                <argument_list>()</argument_list>
                                                <block>{
                                                    <function>
                                                        <type>
                                                            <annotation>@
                                                                <name>Override</name>
                                                            </annotation>
                                                            <specifier>public</specifier>
                                                            <name>SplittingIterator</name>
                                                        </type>
                                                        <name>iterator</name>
                                                        <parameter_list>(
                                                            <param>
                                                                <decl>
                                                                    <type>
                                                                        <specifier>final</specifier>
                                                                        <name>Splitter</name>
                                                                    </type>
                                                                    <name>splitter</name>
                                                                </decl>
                                                            </param>
                                                            ,
                                                            <param>
                                                                <decl>
                                                                    <type>
                                                                        <name>CharSequence</name>
                                                                    </type>
                                                                    <name>toSplit</name>
                                                                </decl>
                                                            </param>
                                                            )
                                                        </parameter_list>
                                                        <block>{
                                                            <return>return
                                                                <expr>new
                                                                    <class>
                                                                        <super>
                                                                            <name>SplittingIterator</name>
                                                                        </super>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>splitter</name>
                                                                                </expr>
                                                                            </argument>
                                                                            ,
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>toSplit</name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                        <block>{
                                                                            <function>
                                                                                <type>
                                                                                    <annotation>@
                                                                                        <name>Override</name>
                                                                                    </annotation>
                                                                                    <specifier>public</specifier>
                                                                                    <name>int</name>
                                                                                </type>
                                                                                <name>separatorStart</name>
                                                                                <parameter_list>(
                                                                                    <param>
                                                                                        <decl>
                                                                                            <type>
                                                                                                <name>int</name>
                                                                                            </type>
                                                                                            <name>start</name>
                                                                                        </decl>
                                                                                    </param>
                                                                                    )
                                                                                </parameter_list>
                                                                                <block>{
                                                                                    <decl_stmt>
                                                                                        <decl>
                                                                                            <type>
                                                                                                <name>int</name>
                                                                                            </type>
                                                                                            <name>nextChunkStart</name> =
                                                                                            <init>
                                                                                                <expr>
                                                                                                    <name>start</name>
                                                                                                    +
                                                                                                    <name>length</name>
                                                                                                </expr>
                                                                                            </init>
                                                                                        </decl>
                                                                                        ;
                                                                                    </decl_stmt>
                                                                                    <return>return
                                                                                        <expr>(<name>nextChunkStart
                                                                                        </name> &lt;
                                                                                            <call>
                                                                                                <name><name>
                                                                                                    toSplit</name>.
                                                                                                    <name>length</name>
                                                                                                </name>
                                                                                                <argument_list>()
                                                                                                </argument_list>
                                                                                            </call>
                                                                                            ? <name>nextChunkStart
                                                                                            </name> : -1)
                                                                                        </expr>
                                                                                        ;
                                                                                    </return>
                                                                                    }
                                                                                </block>
                                                                            </function>

                                                                            <function>
                                                                                <type>
                                                                                    <annotation>@
                                                                                        <name>Override</name>
                                                                                    </annotation>
                                                                                    <specifier>public</specifier>
                                                                                    <name>int</name>
                                                                                </type>
                                                                                <name>separatorEnd</name>
                                                                                <parameter_list>(
                                                                                    <param>
                                                                                        <decl>
                                                                                            <type>
                                                                                                <name>int</name>
                                                                                            </type>
                                                                                            <name>separatorPosition
                                                                                            </name>
                                                                                        </decl>
                                                                                    </param>
                                                                                    )
                                                                                </parameter_list>
                                                                                <block>{
                                                                                    <return>return
                                                                                        <expr>
                                                                                            <name>separatorPosition
                                                                                            </name>
                                                                                        </expr>
                                                                                        ;
                                                                                    </return>
                                                                                    }
                                                                                </block>
                                                                            </function>
                                                                            }
                                                                        </block>
                                                                    </class>
                                                                </expr>
                                                                ;
                                                            </return>
                                                            }
                                                        </block>
                                                    </function>
                                                    }
                                                </block>
                                            </class>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a splitter that behaves equivalently to {@code this} splitter, but
                * automatically omits empty strings from the results. For example, {@code
                * Splitter.on(',').omitEmptyStrings().split(",a,,,b,c,,")} returns an
                * iterable containing only {@code ["a", "b", "c"]}.
                *
                * &lt;p&gt;If either {@code trimResults} option is also specified when creating a
                * splitter, that splitter always trims results first before checking for
                * emptiness. So, for example, {@code
                * Splitter.on(':').omitEmptyStrings().trimResults().split(": : : ")} returns
                * an empty iterable.
                *
                * &lt;p&gt;Note that it is ordinarily not possible for {@link #split(CharSequence)}
                * to return an empty iterable, but when using this option, it can (if the
                * input sequence consists of nothing but separators).
                *
                * @return a splitter with the desired configuration
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>Splitter</name>
                </type>
                <name>omitEmptyStrings</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>Splitter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>strategy</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>trimmer</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>limit</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a splitter that behaves equivalently to {@code this} splitter but
                * stops splitting after it reaches the limit.
                * The limit defines the maximum number of items returned by the iterator, or
                * the maximum size of the list returned by {@link #splitToList}.
                *
                * &lt;p&gt;For example,
                * {@code Splitter.on(',').limit(3).split("a,b,c,d")} returns an iterable
                * containing {@code ["a", "b", "c,d"]}. When omitting empty strings, the
                * omitted strings do no count. Hence,
                * {@code Splitter.on(',').limit(3).omitEmptyStrings().split("a,,,b,,,c,d")}
                * returns an iterable containing {@code ["a", "b", "c,d"}.
                * When trim is requested, all entries, including the last are trimmed. Hence
                * {@code Splitter.on(',').limit(3).trimResults().split(" a , b , c , d ")}
                * results in {@code ["a", "b", "c , d"]}.
                *
                * @param limit the maximum number of items returned
                * @return a splitter with the desired configuration
                * @since 9.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>Splitter</name>
                </type>
                <name>limit</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>limit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>limit</name>
                                            &gt; 0
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"must be greater than zero: %s"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>limit</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>new
                            <call>
                                <name>Splitter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>strategy</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>omitEmptyStrings</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>trimmer</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>limit</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a splitter that behaves equivalently to {@code this} splitter, but
                * automatically removes leading and trailing {@linkplain
                * CharMatcher#WHITESPACE whitespace} from each returned substring; equivalent
                * to {@code trimResults(CharMatcher.WHITESPACE)}. For example, {@code
                * Splitter.on(',').trimResults().split(" a, b ,c ")} returns an iterable
                * containing {@code ["a", "b", "c"]}.
                *
                * @return a splitter with the desired configuration
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>Splitter</name>
                </type>
                <name>trimResults</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>trimResults</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>CharMatcher</name>.
                                                <name>WHITESPACE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a splitter that behaves equivalently to {@code this} splitter, but
                * removes all leading or trailing characters matching the given {@code
                * CharMatcher} from each returned substring. For example, {@code
                * Splitter.on(',').trimResults(CharMatcher.is('_')).split("_a ,_b_ ,c__")}
                * returns an iterable containing {@code ["a ", "b_ ", "c"]}.
                *
                * @param trimmer a {@link CharMatcher} that determines whether a character
                * should be removed from the beginning/end of a subsequence
                * @return a splitter with the desired configuration
                */
            </comment>
            <comment type="line">// TODO(kevinb): throw if a trimmer was already specified!</comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>Splitter</name>
                </type>
                <name>trimResults</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CharMatcher</name>
                            </type>
                            <name>trimmer</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>trimmer</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>new
                            <call>
                                <name>Splitter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>strategy</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>omitEmptyStrings</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>trimmer</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>limit</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Splits {@code sequence} into string components and makes them available
                * through an {@link Iterator}, which may be lazily evaluated. If you want
                * an eagerly computed {@link List}, use {@link #splitToList(CharSequence)}.
                *
                * @param sequence the sequence of characters to split
                * @return an iteration over the segments split from the parameter.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>Iterable</name>
                        <argument_list>&lt;
                            <argument>
                                <name>String</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>split</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>CharSequence</name>
                            </type>
                            <name>sequence</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>sequence</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>new
                            <class>
                                <super>
                                    <name>
                                        <name>Iterable</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>String</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </super>
                                <argument_list>()</argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>
                                                <name>Iterator</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>String</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>iterator</name>
                                        <parameter_list>()</parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name>splittingIterator</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>sequence</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>

                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>String</name>
                                        </type>
                                        <name>toString</name>
                                        <parameter_list>()</parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>Joiner</name>.
                                                            <name>on</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>", "</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    .
                                                    <call>
                                                        <name>appendTo</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>new
                                                                    <call>
                                                                        <name>StringBuilder</name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                    .
                                                                    <call>
                                                                        <name>append</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>'['</expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>this</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    .
                                                    <call>
                                                        <name>append</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>']'</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    .
                                                    <call>
                                                        <name>toString</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>
                        <name>Iterator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>String</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>splittingIterator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CharSequence</name>
                            </type>
                            <name>sequence</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>strategy</name>.
                                    <name>iterator</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>sequence</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Splits {@code sequence} into string components and returns them as
                * an immutable list. If you want an {@link Iterable} which may be lazily
                * evaluated, use {@link #split(CharSequence)}.
                *
                * @param sequence the sequence of characters to split
                * @return an immutable list of the segments split from the parameter
                * @since 15.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>String</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>splitToList</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>CharSequence</name>
                            </type>
                            <name>sequence</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>sequence</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>iterator</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>splittingIterator</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>sequence</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>
                                            <name>ArrayList</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>String</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <while>while
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>iterator</name>.
                                        <name>hasNext</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>result</name>.
                                            <name>add</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>iterator</name>.
                                                            <name>next</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>

                    <return>return
                        <expr>
                            <call>
                                <name><name>Collections</name>.
                                    <name>unmodifiableList</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>result</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a {@code MapSplitter} which splits entries based on this splitter,
                * and splits entries into keys and values using the specified separator.
                *
                * @since 10.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>MapSplitter</name>
                </type>
                <name>withKeyValueSeparator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>withKeyValueSeparator</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>on</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>separator</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a {@code MapSplitter} which splits entries based on this splitter,
                * and splits entries into keys and values using the specified separator.
                *
                * @since 14.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>MapSplitter</name>
                </type>
                <name>withKeyValueSeparator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>withKeyValueSeparator</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>on</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>separator</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a {@code MapSplitter} which splits entries based on this splitter,
                * and splits entries into keys and values using the specified key-value
                * splitter.
                *
                * @since 10.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>MapSplitter</name>
                </type>
                <name>withKeyValueSeparator</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Splitter</name>
                            </type>
                            <name>keyValueSplitter</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>MapSplitter</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>keyValueSplitter</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * An object that splits strings into maps as {@code Splitter} splits
                * iterables and lists. Like {@code Splitter}, it is thread-safe and
                * immutable.
                *
                * @since 10.0
                */
            </comment>
            <class>
                <annotation>@
                    <name>Beta</name>
                </annotation>
                <specifier>public</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>MapSplitter</name>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>String</name>
                            </type>
                            <name>INVALID_ENTRY_MESSAGE</name> =
                            <init>
                                <expr>"Chunk [%s] is not a valid entry"</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>Splitter</name>
                            </type>
                            <name>outerSplitter</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>Splitter</name>
                            </type>
                            <name>entrySplitter</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <specifier>private</specifier>
                        <name>MapSplitter</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Splitter</name>
                                    </type>
                                    <name>outerSplitter</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>Splitter</name>
                                    </type>
                                    <name>entrySplitter</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>outerSplitter</name>
                                    </name>
                                    =
                                    <name>outerSplitter</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// only "this" is passed</comment>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>entrySplitter</name>
                                    </name>
                                    =
                                    <call>
                                        <name>checkNotNull</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>entrySplitter</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <comment type="javadoc">/**
                        * Splits {@code sequence} into substrings, splits each substring into
                        * an entry, and returns an unmodifiable map with each of the entries. For
                        * example, &lt;code&gt;
                        * Splitter.on(';').trimResults().withKeyValueSeparator("=&gt;")
                        * .split("a=&gt;b ; c=&gt;b")
                        * &lt;/code&gt; will return a mapping from {@code "a"} to {@code "b"} and
                        * {@code "c"} to {@code b}.
                        *
                        * &lt;p&gt;The returned map preserves the order of the entries from
                        * {@code sequence}.
                        *
                        * @throws IllegalArgumentException if the specified sequence does not split
                        * into valid map entries, or if there are duplicate keys
                        */
                    </comment>
                    <function>
                        <type>
                            <annotation>@
                                <name>CheckReturnValue</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>
                                <name>Map</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>String</name>
                                    </argument>
                                    ,
                                    <argument>
                                        <name>String</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>split</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>CharSequence</name>
                                    </type>
                                    <name>sequence</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Map</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>String</name>
                                                </argument>
                                                ,
                                                <argument>
                                                    <name>String</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>map</name> =
                                    <init>
                                        <expr>new
                                            <call>
                                                <name>
                                                    <name>LinkedHashMap</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>String</name>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <name>String</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>String</name>
                                        </type>
                                        <name>entry</name> :
                                        <range>
                                            <expr>
                                                <call>
                                                    <name><name>outerSplitter</name>.
                                                        <name>split</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>sequence</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </range>
                                    </decl>
                                </init>
                                )
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>Iterator</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>String</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>entryFields</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>entrySplitter</name>.
                                                            <name>splittingIterator</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>entry</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>

                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>checkArgument</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>entryFields</name>.
                                                                    <name>hasNext</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>INVALID_ENTRY_MESSAGE</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>entry</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>String</name>
                                            </type>
                                            <name>key</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>entryFields</name>.
                                                            <name>next</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>checkArgument</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>!
                                                            <call>
                                                                <name><name>map</name>.
                                                                    <name>containsKey</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>key</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>"Duplicate key [%s] found."</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>

                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>checkArgument</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>entryFields</name>.
                                                                    <name>hasNext</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>INVALID_ENTRY_MESSAGE</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>entry</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>String</name>
                                            </type>
                                            <name>value</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>entryFields</name>.
                                                            <name>next</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>map</name>.
                                                    <name>put</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>key</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>value</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>

                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>checkArgument</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>!
                                                            <call>
                                                                <name><name>entryFields</name>.
                                                                    <name>hasNext</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>INVALID_ENTRY_MESSAGE</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>entry</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </for>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>Collections</name>.
                                            <name>unmodifiableMap</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>map</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <class type="interface">
                <specifier>private</specifier>
                interface <name>Strategy</name>
                <block>{
                    <function_decl>
                        <type>
                            <name>
                                <name>Iterator</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>String</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>iterator</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Splitter</name>
                                    </type>
                                    <name>splitter</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>CharSequence</name>
                                    </type>
                                    <name>toSplit</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        ;
                    </function_decl>
                    }
                </block>
            </class>

            <class>
                <specifier>private</specifier>
                <specifier>abstract</specifier>
                <specifier>static</specifier> class <name>SplittingIterator</name>
                <super>
                    <extends>extends
                        <name>
                            <name>AbstractIterator</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>String</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </extends>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>CharSequence</name>
                            </type>
                            <name>toSplit</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>CharMatcher</name>
                            </type>
                            <name>trimmer</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>boolean</name>
                            </type>
                            <name>omitEmptyStrings</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="javadoc">/**
                        * Returns the first index in {@code toSplit} at or after {@code start}
                        * that contains the separator.
                        */
                    </comment>
                    <function_decl>
                        <type>
                            <specifier>abstract</specifier>
                            <name>int</name>
                        </type>
                        <name>separatorStart</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>start</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        ;
                    </function_decl>

                    <comment type="javadoc">/**
                        * Returns the first index in {@code toSplit} after {@code
                        * separatorPosition} that does not contain a separator. This method is only
                        * invoked after a call to {@code separatorStart}.
                        */
                    </comment>
                    <function_decl>
                        <type>
                            <specifier>abstract</specifier>
                            <name>int</name>
                        </type>
                        <name>separatorEnd</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>separatorPosition</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        ;
                    </function_decl>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>offset</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>limit</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <specifier>protected</specifier>
                        <name>SplittingIterator</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>Splitter</name>
                                    </type>
                                    <name>splitter</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>CharSequence</name>
                                    </type>
                                    <name>toSplit</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>trimmer</name>
                                    </name>
                                    =
                                    <name><name>splitter</name>.
                                        <name>trimmer</name>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>omitEmptyStrings</name>
                                    </name>
                                    =
                                    <name><name>splitter</name>.
                                        <name>omitEmptyStrings</name>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>limit</name>
                                    </name>
                                    =
                                    <name><name>splitter</name>.
                                        <name>limit</name>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>toSplit</name>
                                    </name>
                                    =
                                    <name>toSplit</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>protected</specifier>
                            <name>String</name>
                        </type>
                        <name>computeNext</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <comment type="block">/*
                                * The returned string will be from the end of the last match to the
                                * beginning of the next one. nextStart is the start position of the
                                * returned substring, while offset is the place to start looking for a
                                * separator.
                                */
                            </comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>nextStart</name> =
                                    <init>
                                        <expr>
                                            <name>offset</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <while>while
                                <condition>(
                                    <expr>
                                        <name>offset</name>
                                        != -1
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>start</name> =
                                            <init>
                                                <expr>
                                                    <name>nextStart</name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>end</name>
                                        </decl>
                                        ;
                                    </decl_stmt>

                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>separatorPosition</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name>separatorStart</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>offset</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>separatorPosition</name>
                                                == -1
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>end</name>
                                                        =
                                                        <call>
                                                            <name><name>toSplit</name>.
                                                                <name>length</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>offset</name>
                                                        = -1
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>end</name>
                                                        =
                                                        <name>separatorPosition</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>offset</name>
                                                        =
                                                        <call>
                                                            <name>separatorEnd</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>separatorPosition</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>offset</name>
                                                ==
                                                <name>nextStart</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <comment type="block">/*
                                                    * This occurs when some pattern has an empty match, even if it
                                                    * doesn't match the empty string -- for example, if it requires
                                                    * lookahead or the like. The offset must be increased to look for
                                                    * separators beyond this point, without changing the start position
                                                    * of the next returned substring -- so nextStart stays the same.
                                                    */
                                                </comment>
                                                <expr_stmt>
                                                    <expr><name>offset</name>++
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>offset</name>
                                                            &gt;=
                                                            <call>
                                                                <name><name>toSplit</name>.
                                                                    <name>length</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name>offset</name>
                                                                    = -1
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                                <continue>continue;</continue>
                                                }
                                            </block>
                                        </then>
                                    </if>

                                    <while>while
                                        <condition>(
                                            <expr>
                                                <name>start</name>
                                                &lt; <name>end</name> &amp;&amp;
                                                <call>
                                                    <name><name>trimmer</name>.
                                                        <name>matches</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>toSplit</name>.
                                                                        <name>charAt</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>start</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <block>{
                                            <expr_stmt>
                                                <expr><name>start</name>++
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </while>
                                    <while>while
                                        <condition>(
                                            <expr>
                                                <name>end</name>
                                                &gt; <name>start</name> &amp;&amp;
                                                <call>
                                                    <name><name>trimmer</name>.
                                                        <name>matches</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>
                                                                    <name><name>toSplit</name>.
                                                                        <name>charAt</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>end</name>
                                                                                - 1
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <block>{
                                            <expr_stmt>
                                                <expr><name>end</name>--
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </while>

                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>omitEmptyStrings</name>
                                                &amp;&amp; <name>start</name> ==
                                                <name>end</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <comment type="line">// Don't include the (unused) separator in next
                                                    split string.
                                                </comment>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>nextStart</name>
                                                        =
                                                        <name>offset</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <continue>continue;</continue>
                                                }
                                            </block>
                                        </then>
                                    </if>

                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>limit</name>
                                                == 1
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <comment type="line">// The limit has been reached, return the rest of
                                                    the string as the
                                                </comment>
                                                <comment type="line">// final item. This is tested after empty string
                                                    removal so that
                                                </comment>
                                                <comment type="line">// empty strings do not count towards the limit.
                                                </comment>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>end</name>
                                                        =
                                                        <call>
                                                            <name><name>toSplit</name>.
                                                                <name>length</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>offset</name>
                                                        = -1
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <comment type="line">// Since we may have changed the end, we need to
                                                    trim it again.
                                                </comment>
                                                <while>while
                                                    <condition>(
                                                        <expr>
                                                            <name>end</name>
                                                            &gt; <name>start</name> &amp;&amp;
                                                            <call>
                                                                <name><name>trimmer</name>.
                                                                    <name>matches</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>toSplit</name>.
                                                                                    <name>charAt</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>end</name>
                                                                                            - 1
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr><name>end</name>--
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </while>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <expr_stmt>
                                                    <expr><name>limit</name>--
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </else>
                                    </if>

                                    <return>return
                                        <expr>
                                            <call>
                                                <name><name>toSplit</name>.
                                                    <name>subSequence</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>start</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>end</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>toString</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </while>
                            <return>return
                                <expr>
                                    <call>
                                        <name>endOfData</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>
            }
        </block>
    </class>
</unit>
