<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\base\Stopwatch.java">
    <comment type="block">/*
        * Copyright (C) 2008 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>base</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkState</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeUnit</name>.
            <name>DAYS</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeUnit</name>.
            <name>HOURS</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeUnit</name>.
            <name>MICROSECONDS</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeUnit</name>.
            <name>MILLISECONDS</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeUnit</name>.
            <name>MINUTES</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeUnit</name>.
            <name>NANOSECONDS</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>TimeUnit</name>.
            <name>SECONDS</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtIncompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Locale</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>TimeUnit</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>CheckReturnValue</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * An object that measures elapsed time in nanoseconds. It is useful to measure
        * elapsed time using this class instead of direct calls to {@link
        * System#nanoTime} for a few reasons:
        *
        * &lt;ul&gt;
        * &lt;li&gt;An alternate time source can be substituted, for testing or performance
        * reasons.
        * &lt;li&gt;As documented by {@code nanoTime}, the value returned has no absolute
        * meaning, and can only be interpreted as relative to another timestamp
        * returned by {@code nanoTime} at a different time. {@code Stopwatch} is a
        * more effective abstraction because it exposes only these relative values,
        * not the absolute ones.
        * &lt;/ul&gt;
        *
        * &lt;p&gt;Basic usage:
        * &lt;pre&gt;
        * Stopwatch stopwatch = Stopwatch.{@link #createStarted createStarted}();
        * doSomething();
        * stopwatch.{@link #stop stop}(); // optional
        *
        * long millis = stopwatch.elapsed(MILLISECONDS);
        *
        * log.info("time: " + stopwatch); // formatted string like "12.3 ms"&lt;/pre&gt;
        *
        * &lt;p&gt;Stopwatch methods are not idempotent; it is an error to start or stop a
        * stopwatch that is already in the desired state.
        *
        * &lt;p&gt;When testing code that uses this class, use
        * {@link #createUnstarted(Ticker)} or {@link #createStarted(Ticker)} to
        * supply a fake or mock ticker.
        * &lt;!-- TODO(kevinb): restore the "such as" --&gt; This allows you to
        * simulate any valid behavior of the stopwatch.
        *
        * &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This class is not thread-safe.
        *
        * @author Kevin Bourrillion
        * @since 10.0
        */
    </comment>
    <class>
        <annotation>@
            <name>GwtCompatible</name>
            <argument_list>(emulated = true)</argument_list>
        </annotation>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>Stopwatch</name>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Ticker</name>
                    </type>
                    <name>ticker</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>boolean</name>
                    </type>
                    <name>isRunning</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>long</name>
                    </type>
                    <name>elapsedNanos</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>long</name>
                    </type>
                    <name>startTick</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Creates (but does not start) a new stopwatch using {@link System#nanoTime}
                * as its time source.
                *
                * @since 15.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Stopwatch</name>
                </type>
                <name>createUnstarted</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>Stopwatch</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates (but does not start) a new stopwatch, using the specified time
                * source.
                *
                * @since 15.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Stopwatch</name>
                </type>
                <name>createUnstarted</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Ticker</name>
                            </type>
                            <name>ticker</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>Stopwatch</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ticker</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates (and starts) a new stopwatch using {@link System#nanoTime}
                * as its time source.
                *
                * @since 15.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Stopwatch</name>
                </type>
                <name>createStarted</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>Stopwatch</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>start</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates (and starts) a new stopwatch, using the specified time
                * source.
                *
                * @since 15.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Stopwatch</name>
                </type>
                <name>createStarted</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Ticker</name>
                            </type>
                            <name>ticker</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>Stopwatch</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ticker</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>start</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <constructor>
                <name>Stopwatch</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>ticker</name>
                            </name>
                            =
                            <call>
                                <name><name>Ticker</name>.
                                    <name>systemTicker</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <constructor>
                <name>Stopwatch</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Ticker</name>
                            </type>
                            <name>ticker</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>ticker</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ticker</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"ticker"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Returns {@code true} if {@link #start()} has been called on this stopwatch,
                * and {@link #stop()} has not been called since the last call to {@code
                * start()}.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isRunning</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>isRunning</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Starts the stopwatch.
                *
                * @return this {@code Stopwatch} instance
                * @throws IllegalStateException if the stopwatch is already running.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Stopwatch</name>
                </type>
                <name>start</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkState</name>
                                <argument_list>(
                                    <argument>
                                        <expr>!
                                            <name>isRunning</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"This stopwatch is already running."</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>isRunning</name>
                            = true
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>startTick</name>
                            =
                            <call>
                                <name><name>ticker</name>.
                                    <name>read</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Stops the stopwatch. Future reads will return the fixed duration that had
                * elapsed up to this point.
                *
                * @return this {@code Stopwatch} instance
                * @throws IllegalStateException if the stopwatch is already stopped.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Stopwatch</name>
                </type>
                <name>stop</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>tick</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ticker</name>.
                                            <name>read</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkState</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>isRunning</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"This stopwatch is already stopped."</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>isRunning</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>elapsedNanos</name>
                            += <name>tick</name> -
                            <name>startTick</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the elapsed time for this stopwatch to zero,
                * and places it in a stopped state.
                *
                * @return this {@code Stopwatch} instance
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Stopwatch</name>
                </type>
                <name>reset</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>elapsedNanos</name>
                            = 0
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>isRunning</name>
                            = false
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>long</name>
                </type>
                <name>elapsedNanos</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>isRunning</name>
                            ?
                            <call>
                                <name><name>ticker</name>.
                                    <name>read</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            - <name>startTick</name> + <name>elapsedNanos</name> :
                            <name>elapsedNanos</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the current elapsed time shown on this stopwatch, expressed
                * in the desired time unit, with any fraction rounded down.
                *
                * &lt;p&gt;Note that the overhead of measurement can be more than a microsecond, so
                * it is generally not useful to specify {@link TimeUnit#NANOSECONDS}
                * precision here.
                *
                * @since 14.0 (since 10.0 as {@code elapsedTime()})
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>elapsed</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>TimeUnit</name>
                            </type>
                            <name>desiredUnit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>desiredUnit</name>.
                                    <name>convert</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>elapsedNanos</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>NANOSECONDS</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a string representation of the current elapsed time.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("String.format()")</argument_list>
                    </annotation>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>nanos</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>elapsedNanos</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>TimeUnit</name>
                            </type>
                            <name>unit</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>chooseUnit</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>nanos</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>value</name> =
                            <init>
                                <expr>(<name>double</name>) <name>nanos</name> /
                                    <call>
                                        <name><name>NANOSECONDS</name>.
                                            <name>convert</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>1</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>unit</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <comment type="line">// Too bad this functionality is not exposed as a regular method call</comment>
                    <return>return
                        <expr>
                            <call>
                                <name><name>String</name>.
                                    <name>format</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Locale</name>.
                                                <name>ROOT</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"%.4g %s"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>abbreviate</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>unit</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>TimeUnit</name>
                </type>
                <name>chooseUnit</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>nanos</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>DAYS</name>.
                                        <name>convert</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>nanos</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>NANOSECONDS</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>DAYS</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>HOURS</name>.
                                        <name>convert</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>nanos</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>NANOSECONDS</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>HOURS</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>MINUTES</name>.
                                        <name>convert</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>nanos</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>NANOSECONDS</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>MINUTES</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>SECONDS</name>.
                                        <name>convert</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>nanos</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>NANOSECONDS</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>SECONDS</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>MILLISECONDS</name>.
                                        <name>convert</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>nanos</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>NANOSECONDS</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>MILLISECONDS</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>MICROSECONDS</name>.
                                        <name>convert</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>nanos</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>NANOSECONDS</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>MICROSECONDS</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>NANOSECONDS</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>abbreviate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>TimeUnit</name>
                            </type>
                            <name>unit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <switch>switch
                        <condition>(
                            <expr>
                                <name>unit</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name>NANOSECONDS</name>
                                </expr>
                                :
                                <return>return <expr>"ns"</expr>;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>MICROSECONDS</name>
                                </expr>
                                :
                                <return>return <expr>"\u03bcs"</expr>;
                                </return>
                                <comment type="line">// Î¼s</comment>
                            </case>
                            <case>case
                                <expr>
                                    <name>MILLISECONDS</name>
                                </expr>
                                :
                                <return>return <expr>"ms"</expr>;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>SECONDS</name>
                                </expr>
                                :
                                <return>return <expr>"s"</expr>;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>MINUTES</name>
                                </expr>
                                :
                                <return>return <expr>"min"</expr>;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>HOURS</name>
                                </expr>
                                :
                                <return>return <expr>"h"</expr>;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name>DAYS</name>
                                </expr>
                                :
                                <return>return <expr>"d"</expr>;
                                </return>
                            </case>
                            <default>default:
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>AssertionError</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
