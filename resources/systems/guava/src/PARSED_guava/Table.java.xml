<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\Table.java">
    <comment type="block">/*
        * Copyright (C) 2008 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Objects</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collection</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Set</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A collection that associates an ordered pair of keys, called a row key and a
        * column key, with a single value. A table may be sparse, with only a small
        * fraction of row key / column key pairs possessing a corresponding value.
        *
        * &lt;p&gt;The mappings corresponding to a given row key may be viewed as a {@link
        * Map} whose keys are the columns. The reverse is also available, associating a
        * column with a row key / value map. Note that, in some implementations, data
        * access by column key may have fewer supported operations or worse performance
        * than data access by row key.
        *
        * &lt;p&gt;The methods returning collections or maps always return views of the
        * underlying table. Updating the table can change the contents of those
        * collections, and updating the collections will change the table.
        *
        * &lt;p&gt;All methods that modify the table are optional, and the views returned by
        * the table may or may not be modifiable. When modification isn't supported,
        * those methods will throw an {@link UnsupportedOperationException}.
        *
        * &lt;p&gt;See the Guava User Guide article on &lt;a href=
        * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#table"&gt;
        * {@code Table}&lt;/a&gt;.
        *
        * @author Jared Levy
        * @param &lt;R&gt; the type of the table row keys
        * @param &lt;C&gt; the type of the table column keys
        * @param &lt;V&gt; the type of the mapped values
        * @since 7.0
        */
    </comment>
    <class type="interface">
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        interface
        <name>
            <name>Table</name>
            <argument_list>&lt;
                <argument>
                    <name>R</name>
                </argument>
                ,
                <argument>
                    <name>C</name>
                </argument>
                ,
                <argument>
                    <name>V</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <block>{
            <comment type="line">// TODO(jlevy): Consider adding methods similar to ConcurrentMap methods.</comment>

            <comment type="line">// Accessors</comment>

            <comment type="javadoc">/**
                * Returns {@code true} if the table contains a mapping with the specified
                * row and column keys.
                *
                * @param rowKey key of row to search for
                * @param columnKey key of column to search for
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>rowKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>columnKey</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns {@code true} if the table contains a mapping with the specified
                * row key.
                *
                * @param rowKey key of row to search for
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>containsRow</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>rowKey</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns {@code true} if the table contains a mapping with the specified
                * column.
                *
                * @param columnKey key of column to search for
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>containsColumn</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>columnKey</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns {@code true} if the table contains a mapping with the specified
                * value.
                *
                * @param value value to search for
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>containsValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the value corresponding to the given row and column keys, or
                * {@code null} if no such mapping exists.
                *
                * @param rowKey key of row to search for
                * @param columnKey key of column to search for
                */
            </comment>
            <function_decl>
                <type>
                    <name>V</name>
                </type>
                <name>get</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>rowKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>columnKey</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/** Returns {@code true} if the table contains no mappings. */</comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>isEmpty</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the number of row key / column key / value mappings in the table.
                */
            </comment>
            <function_decl>
                <type>
                    <name>int</name>
                </type>
                <name>size</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Compares the specified object with this table for equality. Two tables are
                * equal when their cell views, as returned by {@link #cellSet}, are equal.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the hash code for this table. The hash code of a table is defined
                * as the hash code of its cell view, as returned by {@link #cellSet}.
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="line">// Mutators</comment>

            <comment type="javadoc">/** Removes all mappings from the table. */</comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>clear</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Associates the specified value with the specified keys. If the table
                * already contained a mapping for those keys, the old value is replaced with
                * the specified value.
                *
                * @param rowKey row key that the value should be associated with
                * @param columnKey column key that the value should be associated with
                * @param value value to be associated with the specified keys
                * @return the value previously associated with the keys, or {@code null} if
                * no mapping existed for the keys
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Nullable</name>
                    </annotation>
                    <name>V</name>
                </type>
                <name>put</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>R</name>
                            </type>
                            <name>rowKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>C</name>
                            </type>
                            <name>columnKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>V</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Copies all mappings from the specified table to this table. The effect is
                * equivalent to calling {@link #put} with each row key / column key / value
                * mapping in {@code table}.
                *
                * @param table the table to add to this table
                */
            </comment>
            <function_decl>
                <type>
                    <name>void</name>
                </type>
                <name>putAll</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Table</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>R</name>
                                            </extends>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>C</name>
                                            </extends>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>V</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>table</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Removes the mapping, if any, associated with the given keys.
                *
                * @param rowKey row key of mapping to be removed
                * @param columnKey column key of mapping to be removed
                * @return the value previously associated with the keys, or {@code null} if
                * no such value existed
                */
            </comment>
            <function_decl>
                <type>
                    <annotation>@
                        <name>Nullable</name>
                    </annotation>
                    <name>V</name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>rowKey</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>columnKey</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="line">// Views</comment>

            <comment type="javadoc">/**
                * Returns a view of all mappings that have the given row key. For each row
                * key / column key / value mapping in the table with that row key, the
                * returned map associates the column key with the value. If no mappings in
                * the table have the provided row key, an empty map is returned.
                *
                * &lt;p&gt;Changes to the returned map will update the underlying table, and vice
                * versa.
                *
                * @param rowKey key of row to search for in the table
                * @return the corresponding map from column keys to values
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Map</name>
                        <argument_list>&lt;
                            <argument>
                                <name>C</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>row</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>R</name>
                            </type>
                            <name>rowKey</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a view of all mappings that have the given column key. For each row
                * key / column key / value mapping in the table with that column key, the
                * returned map associates the row key with the value. If no mappings in the
                * table have the provided column key, an empty map is returned.
                *
                * &lt;p&gt;Changes to the returned map will update the underlying table, and vice
                * versa.
                *
                * @param columnKey key of column to search for in the table
                * @return the corresponding map from row keys to values
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Map</name>
                        <argument_list>&lt;
                            <argument>
                                <name>R</name>
                            </argument>
                            ,
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>column</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>C</name>
                            </type>
                            <name>columnKey</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a set of all row key / column key / value triplets. Changes to the
                * returned set will update the underlying table, and vice versa. The cell set
                * does not support the {@code add} or {@code addAll} methods.
                *
                * @return set of table cells consisting of row key / column key / value
                * triplets
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>
                                    <name>Cell</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>R</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>C</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>cellSet</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a set of row keys that have one or more values in the table.
                * Changes to the set will update the underlying table, and vice versa.
                *
                * @return set of row keys
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>R</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>rowKeySet</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a set of column keys that have one or more values in the table.
                * Changes to the set will update the underlying table, and vice versa.
                *
                * @return set of column keys
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Set</name>
                        <argument_list>&lt;
                            <argument>
                                <name>C</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>columnKeySet</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a collection of all values, which may contain duplicates. Changes
                * to the returned collection will update the underlying table, and vice
                * versa.
                *
                * @return collection of values
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Collection</name>
                        <argument_list>&lt;
                            <argument>
                                <name>V</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>values</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a view that associates each row key with the corresponding map from
                * column keys to values. Changes to the returned map will update this table.
                * The returned map does not support {@code put()} or {@code putAll()}, or
                * {@code setValue()} on its entries.
                *
                * &lt;p&gt;In contrast, the maps returned by {@code rowMap().get()} have the same
                * behavior as those returned by {@link #row}. Those maps may support {@code
                * setValue()}, {@code put()}, and {@code putAll()}.
                *
                * @return a map view from each row key to a secondary map from column keys to
                * values
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Map</name>
                        <argument_list>&lt;
                            <argument>
                                <name>R</name>
                            </argument>
                            ,
                            <argument>
                                <name>
                                    <name>Map</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>C</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>rowMap</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a view that associates each column key with the corresponding map
                * from row keys to values. Changes to the returned map will update this
                * table. The returned map does not support {@code put()} or {@code putAll()},
                * or {@code setValue()} on its entries.
                *
                * &lt;p&gt;In contrast, the maps returned by {@code columnMap().get()} have the
                * same behavior as those returned by {@link #column}. Those maps may support
                * {@code setValue()}, {@code put()}, and {@code putAll()}.
                *
                * @return a map view from each column key to a secondary map from row keys to
                * values
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Map</name>
                        <argument_list>&lt;
                            <argument>
                                <name>C</name>
                            </argument>
                            ,
                            <argument>
                                <name>
                                    <name>Map</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>R</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>V</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>columnMap</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Row key / column key / value triplet corresponding to a mapping in a table.
                *
                * @since 7.0
                */
            </comment>
            <class type="interface">interface
                <name>
                    <name>Cell</name>
                    <argument_list>&lt;
                        <argument>
                            <name>R</name>
                        </argument>
                        ,
                        <argument>
                            <name>C</name>
                        </argument>
                        ,
                        <argument>
                            <name>V</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <block>{
                    <comment type="javadoc">/**
                        * Returns the row key of this cell.
                        */
                    </comment>
                    <function_decl>
                        <type>
                            <annotation>@
                                <name>Nullable</name>
                            </annotation>
                            <name>R</name>
                        </type>
                        <name>getRowKey</name>
                        <parameter_list>()</parameter_list>;
                    </function_decl>

                    <comment type="javadoc">/**
                        * Returns the column key of this cell.
                        */
                    </comment>
                    <function_decl>
                        <type>
                            <annotation>@
                                <name>Nullable</name>
                            </annotation>
                            <name>C</name>
                        </type>
                        <name>getColumnKey</name>
                        <parameter_list>()</parameter_list>;
                    </function_decl>

                    <comment type="javadoc">/**
                        * Returns the value of this cell.
                        */
                    </comment>
                    <function_decl>
                        <type>
                            <annotation>@
                                <name>Nullable</name>
                            </annotation>
                            <name>V</name>
                        </type>
                        <name>getValue</name>
                        <parameter_list>()</parameter_list>;
                    </function_decl>

                    <comment type="javadoc">/**
                        * Compares the specified object with this cell for equality. Two cells are
                        * equal when they have equal row keys, column keys, and values.
                        */
                    </comment>
                    <function_decl>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>boolean</name>
                        </type>
                        <name>equals</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <annotation>@
                                            <name>Nullable</name>
                                        </annotation>
                                        <name>Object</name>
                                    </type>
                                    <name>obj</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        ;
                    </function_decl>

                    <comment type="javadoc">/**
                        * Returns the hash code of this cell.
                        *
                        * &lt;p&gt;The hash code of a table cell is equal to {@link
                        * Objects#hashCode}{@code (e.getRowKey(), e.getColumnKey(), e.getValue())}.
                        */
                    </comment>
                    <function_decl>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <name>int</name>
                        </type>
                        <name>hashCode</name>
                        <parameter_list>()</parameter_list>;
                    </function_decl>
                    }
                </block>
            </class>
            }
        </block>
    </class>
</unit>
