<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\util\concurrent\ThreadFactoryBuilder.java">
    <comment type="block">/*
        * Copyright (C) 2010 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.
            <name>concurrent</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkArgument</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>lang</name>.<name>Thread</name>.
            <name>UncaughtExceptionHandler</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Locale</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>Executors</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>ThreadFactory</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.
            <name>AtomicLong</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A ThreadFactory builder, providing any combination of these features:
        * &lt;ul&gt;
        * &lt;li&gt; whether threads should be marked as {@linkplain Thread#setDaemon daemon}
        * threads
        * &lt;li&gt; a {@linkplain ThreadFactoryBuilder#setNameFormat naming format}
        * &lt;li&gt; a {@linkplain Thread#setPriority thread priority}
        * &lt;li&gt; an {@linkplain Thread#setUncaughtExceptionHandler uncaught exception
        * handler}
        * &lt;li&gt; a {@linkplain ThreadFactory#newThread backing thread factory}
        * &lt;/ul&gt;
        * &lt;p&gt;If no backing thread factory is provided, a default backing thread factory is
        * used as if by calling {@code setThreadFactory(}{@link
        * Executors#defaultThreadFactory()}{@code )}.
        *
        * @author Kurt Alfred Kluever
        * @since 4.0
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>ThreadFactoryBuilder</name>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>nameFormat</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>Boolean</name>
                    </type>
                    <name>daemon</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>Integer</name>
                    </type>
                    <name>priority</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>UncaughtExceptionHandler</name>
                    </type>
                    <name>uncaughtExceptionHandler</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>ThreadFactory</name>
                    </type>
                    <name>backingThreadFactory</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Creates a new {@link ThreadFactory} builder.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>ThreadFactoryBuilder</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="javadoc">/**
                * Sets the naming format to use when naming threads ({@link Thread#setName})
                * which are created with this ThreadFactory.
                *
                * @param nameFormat a {@link String#format(String, Object...)}-compatible
                * format String, to which a unique integer (0, 1, etc.) will be supplied
                * as the single parameter. This integer will be unique to the built
                * instance of the ThreadFactory and will be assigned sequentially. For
                * example, {@code "rpc-pool-%d"} will generate thread names like
                * {@code "rpc-pool-0"}, {@code "rpc-pool-1"}, {@code "rpc-pool-2"}, etc.
                * @return this for the builder pattern
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("ReturnValueIgnored")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>ThreadFactoryBuilder</name>
                </type>
                <name>setNameFormat</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>nameFormat</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>format</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>nameFormat</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// fail fast if the format is bad or null</comment>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>nameFormat</name>
                            </name>
                            =
                            <name>nameFormat</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets daemon or not for new threads created with this ThreadFactory.
                *
                * @param daemon whether or not new Threads created with this ThreadFactory
                * will be daemon threads
                * @return this for the builder pattern
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>ThreadFactoryBuilder</name>
                </type>
                <name>setDaemon</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>daemon</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>daemon</name>
                            </name>
                            =
                            <name>daemon</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the priority for new threads created with this ThreadFactory.
                *
                * @param priority the priority for new Threads created with this
                * ThreadFactory
                * @return this for the builder pattern
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>ThreadFactoryBuilder</name>
                </type>
                <name>setPriority</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>priority</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// Thread#setPriority() already checks for validity. These error messages
                    </comment>
                    <comment type="line">// are nicer though and will fail-fast.</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>priority</name>
                                            &gt;=
                                            <name><name>Thread</name>.
                                                <name>MIN_PRIORITY</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Thread priority (%s) must be &gt;= %s"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>priority</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Thread</name>.
                                                <name>MIN_PRIORITY</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>priority</name>
                                            &lt;=
                                            <name><name>Thread</name>.
                                                <name>MAX_PRIORITY</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Thread priority (%s) must be &lt;= %s"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>priority</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Thread</name>.
                                                <name>MAX_PRIORITY</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>priority</name>
                            </name>
                            =
                            <name>priority</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the {@link UncaughtExceptionHandler} for new threads created with this
                * ThreadFactory.
                *
                * @param uncaughtExceptionHandler the uncaught exception handler for new
                * Threads created with this ThreadFactory
                * @return this for the builder pattern
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>ThreadFactoryBuilder</name>
                </type>
                <name>setUncaughtExceptionHandler</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>UncaughtExceptionHandler</name>
                            </type>
                            <name>uncaughtExceptionHandler</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>uncaughtExceptionHandler</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>uncaughtExceptionHandler</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the backing {@link ThreadFactory} for new threads created with this
                * ThreadFactory. Threads will be created by invoking #newThread(Runnable) on
                * this backing {@link ThreadFactory}.
                *
                * @param backingThreadFactory the backing {@link ThreadFactory} which will
                * be delegated to during thread creation.
                * @return this for the builder pattern
                *
                * @see MoreExecutors
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>ThreadFactoryBuilder</name>
                </type>
                <name>setThreadFactory</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ThreadFactory</name>
                            </type>
                            <name>backingThreadFactory</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>backingThreadFactory</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>backingThreadFactory</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a new thread factory using the options supplied during the building
                * process. After building, it is still possible to change the options used to
                * build the ThreadFactory and/or build again. State is not shared amongst
                * built instances.
                *
                * @return the fully constructed {@link ThreadFactory}
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>ThreadFactory</name>
                </type>
                <name>build</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>build</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>ThreadFactory</name>
                </type>
                <name>build</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ThreadFactoryBuilder</name>
                            </type>
                            <name>builder</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>String</name>
                            </type>
                            <name>nameFormat</name> =
                            <init>
                                <expr>
                                    <name><name>builder</name>.
                                        <name>nameFormat</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Boolean</name>
                            </type>
                            <name>daemon</name> =
                            <init>
                                <expr>
                                    <name><name>builder</name>.
                                        <name>daemon</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Integer</name>
                            </type>
                            <name>priority</name> =
                            <init>
                                <expr>
                                    <name><name>builder</name>.
                                        <name>priority</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>UncaughtExceptionHandler</name>
                            </type>
                            <name>uncaughtExceptionHandler</name> =
                            <init>
                                <expr>
                                    <name><name>builder</name>.
                                        <name>uncaughtExceptionHandler</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>ThreadFactory</name>
                            </type>
                            <name>backingThreadFactory</name> =
                            <init>
                                <expr>(
                                    <name><name>builder</name>.
                                        <name>backingThreadFactory</name>
                                    </name>
                                    != <name>null</name>)
                                    ?
                                    <name><name>builder</name>.
                                        <name>backingThreadFactory</name>
                                    </name>
                                    :
                                    <call>
                                        <name><name>Executors</name>.
                                            <name>defaultThreadFactory</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>AtomicLong</name>
                            </type>
                            <name>count</name> =
                            <init>
                                <expr>(<name>nameFormat</name> != <name>null</name>) ? new
                                    <call>
                                        <name>AtomicLong</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>0</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    :
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>new
                            <class>
                                <super>
                                    <name>ThreadFactory</name>
                                </super>
                                <argument_list>()</argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>Thread</name>
                                        </type>
                                        <name>newThread</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>Runnable</name>
                                                    </type>
                                                    <name>runnable</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>Thread</name>
                                                    </type>
                                                    <name>thread</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>backingThreadFactory</name>.
                                                                    <name>newThread</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>runnable</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>nameFormat</name>
                                                        !=
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>thread</name>.
                                                                        <name>setName</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <call>
                                                                                    <name>format</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <name>nameFormat</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        ,
                                                                                        <argument>
                                                                                            <expr>
                                                                                                <call>
                                                                                                    <name><name>
                                                                                                        count</name>.
                                                                                                        <name>
                                                                                                            getAndIncrement
                                                                                                        </name>
                                                                                                    </name>
                                                                                                    <argument_list>()
                                                                                                    </argument_list>
                                                                                                </call>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>daemon</name>
                                                        !=
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>thread</name>.
                                                                        <name>setDaemon</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>daemon</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>priority</name>
                                                        !=
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>thread</name>.
                                                                        <name>setPriority</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>priority</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>uncaughtExceptionHandler</name>
                                                        !=
                                                        <name>null</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name><name>thread</name>.
                                                                        <name>setUncaughtExceptionHandler</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>uncaughtExceptionHandler</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            <return>return
                                                <expr>
                                                    <name>thread</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>format</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>format</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type><name>Object</name>...
                            </type>
                            <name>args</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>String</name>.
                                    <name>format</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Locale</name>.
                                                <name>ROOT</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>format</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>args</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
