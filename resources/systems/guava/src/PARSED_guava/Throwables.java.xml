<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\base\Throwables.java">
    <comment type="block">/*
        * Copyright (C) 2007 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>base</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>util</name>.<name>Arrays</name>.
            <name>asList</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>java</name>.<name>util</name>.<name>Collections</name>.
            <name>unmodifiableList</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>VisibleForTesting</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>PrintWriter</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>StringWriter</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>InvocationTargetException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Method</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>AbstractList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>ArrayList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collections</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>CheckReturnValue</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Static utility methods pertaining to instances of {@link Throwable}.
        *
        * &lt;p&gt;See the Guava User Guide entry on &lt;a href=
        * "https://github.com/google/guava/wiki/ThrowablesExplained"&gt;Throwables&lt;/a&gt;.
        *
        * @author Kevin Bourrillion
        * @author Ben Yu
        * @since 1.0
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>Throwables</name>
        <block>{
            <constructor>
                <specifier>private</specifier>
                <name>Throwables</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="javadoc">/**
                * Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@code
                * declaredType}. Example usage:
                * &lt;pre&gt;
                * try {
                * someMethodThatCouldThrowAnything();
                * } catch (IKnowWhatToDoWithThisException e) {
                * handle(e);
                * } catch (Throwable t) {
                * Throwables.propagateIfInstanceOf(t, IOException.class);
                * Throwables.propagateIfInstanceOf(t, SQLException.class);
                * throw Throwables.propagate(t);
                * }
                * &lt;/pre&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>X</name>
                            <extends>extends
                                <name>Throwable</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>void</name>
                </type>
                <name>propagateIfInstanceOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Throwable</name>
                            </type>
                            <name>throwable</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>declaredType</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>X</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <comment type="line">// Check for null is needed to avoid frequent JNI calls to isInstance().
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>throwable</name>
                                != <name>null</name> &amp;&amp;
                                <call>
                                    <name><name>declaredType</name>.
                                        <name>isInstance</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>throwable</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>
                                        <call>
                                            <name><name>declaredType</name>.
                                                <name>cast</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>throwable</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link
                * RuntimeException} or {@link Error}. Example usage:
                * &lt;pre&gt;
                * try {
                * someMethodThatCouldThrowAnything();
                * } catch (IKnowWhatToDoWithThisException e) {
                * handle(e);
                * } catch (Throwable t) {
                * Throwables.propagateIfPossible(t);
                * throw new RuntimeException("unexpected", t);
                * }
                * &lt;/pre&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>propagateIfPossible</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Throwable</name>
                            </type>
                            <name>throwable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>propagateIfInstanceOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>throwable</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Error</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>propagateIfInstanceOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>throwable</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>RuntimeException</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link
                * RuntimeException}, {@link Error}, or {@code declaredType}. Example usage:
                * &lt;pre&gt;
                * try {
                * someMethodThatCouldThrowAnything();
                * } catch (IKnowWhatToDoWithThisException e) {
                * handle(e);
                * } catch (Throwable t) {
                * Throwables.propagateIfPossible(t, OtherException.class);
                * throw new RuntimeException("unexpected", t);
                * }
                * &lt;/pre&gt;
                *
                * @param throwable the Throwable to possibly propagate
                * @param declaredType the single checked exception type declared by the calling method
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>X</name>
                            <extends>extends
                                <name>Throwable</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>void</name>
                </type>
                <name>propagateIfPossible</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Throwable</name>
                            </type>
                            <name>throwable</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>X</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>declaredType</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>X</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>propagateIfInstanceOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>throwable</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>declaredType</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>propagateIfPossible</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>throwable</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link
                * RuntimeException}, {@link Error}, {@code declaredType1}, or {@code declaredType2}. In the
                * unlikely case that you have three or more declared checked exception types, you can handle them
                * all by invoking these methods repeatedly. See usage example in {@link
                * #propagateIfPossible(Throwable, Class)}.
                *
                * @param throwable the Throwable to possibly propagate
                * @param declaredType1 any checked exception type declared by the calling method
                * @param declaredType2 any other checked exception type declared by the calling method
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>X1</name>
                            <extends>extends
                                <name>Throwable</name>
                            </extends>
                        </argument>
                        ,
                        <argument>
                            <name>X2</name>
                            <extends>extends
                                <name>Throwable</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>void</name>
                </type>
                <name>propagateIfPossible</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Throwable</name>
                            </type>
                            <name>throwable</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>X1</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>declaredType1</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>X2</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>declaredType2</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>X1</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>X2</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>declaredType2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>propagateIfInstanceOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>throwable</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>declaredType1</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>propagateIfPossible</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>throwable</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>declaredType2</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Propagates {@code throwable} as-is if it is an instance of {@link RuntimeException} or {@link
                * Error}, or else as a last resort, wraps it in a {@code RuntimeException} and then propagates.
                * &lt;p&gt;
                * This method always throws an exception. The {@code RuntimeException} return type is only for
                * client code to make Java type system happy in case a return value is required by the enclosing
                * method. Example usage:
                * &lt;pre&gt;
                * T doSomething() {
                * try {
                * return someMethodThatCouldThrowAnything();
                * } catch (IKnowWhatToDoWithThisException e) {
                * return handle(e);
                * } catch (Throwable t) {
                * throw Throwables.propagate(t);
                * }
                * }
                * &lt;/pre&gt;
                *
                * @param throwable the Throwable to propagate
                * @return nothing will ever be returned; this return type is only for your convenience, as
                * illustrated in the example above
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>RuntimeException</name>
                </type>
                <name>propagate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>throwable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>propagateIfPossible</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>checkNotNull</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>throwable</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <throw>throw
                        <expr>new
                            <call>
                                <name>RuntimeException</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>throwable</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </throw>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the innermost cause of {@code throwable}. The first throwable in a
                * chain provides context from when the error or exception was initially
                * detected. Example usage:
                * &lt;pre&gt;
                * assertEquals("Unable to assign a customer id", Throwables.getRootCause(e).getMessage());
                * &lt;/pre&gt;
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>Throwable</name>
                </type>
                <name>getRootCause</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>throwable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>cause</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>(<name>cause</name> =
                                <call>
                                    <name><name>throwable</name>.
                                        <name>getCause</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                ) !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>throwable</name>
                                    =
                                    <name>cause</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <return>return
                        <expr>
                            <name>throwable</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Gets a {@code Throwable} cause chain as a list. The first entry in the list will be {@code
                * throwable} followed by its cause hierarchy. Note that this is a snapshot of the cause chain
                * and will not reflect any subsequent changes to the cause chain.
                *
                * &lt;p&gt;Here's an example of how it can be used to find specific types of exceptions in the cause
                * chain:
                *
                * &lt;pre&gt;
                * Iterables.filter(Throwables.getCausalChain(e), IOException.class));
                * &lt;/pre&gt;
                *
                * @param throwable the non-null {@code Throwable} to extract causes from
                * @return an unmodifiable list containing the cause chain starting with {@code throwable}
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <comment type="line">// TODO(kevinb): decide best return type</comment>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Throwable</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getCausalChain</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>throwable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>throwable</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>List</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Throwable</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>causes</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>
                                            <name>ArrayList</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>Throwable</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>4</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <name>throwable</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>causes</name>.
                                            <name>add</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>throwable</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>throwable</name>
                                    =
                                    <call>
                                        <name><name>throwable</name>.
                                            <name>getCause</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </while>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Collections</name>.
                                    <name>unmodifiableList</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>causes</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a string containing the result of {@link Throwable#toString() toString()}, followed by
                * the full, recursive stack trace of {@code throwable}. Note that you probably should not be
                * parsing the resulting string; if you need programmatic access to the stack frames, you can call
                * {@link Throwable#getStackTrace()}.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>getStackTraceAsString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>throwable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringWriter</name>
                            </type>
                            <name>stringWriter</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringWriter</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>throwable</name>.
                                    <name>printStackTrace</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>PrintWriter</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>stringWriter</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>stringWriter</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the stack trace of {@code throwable}, possibly providing slower iteration over the full
                * trace but faster iteration over parts of the trace. Here, "slower" and "faster" are defined in
                * comparison to the normal way to access the stack trace, {@link Throwable#getStackTrace()
                * throwable.getStackTrace()}. Note, however, that this method's special implementation is not
                * available for all platforms and configurations. If that implementation is unavailable, this
                * method falls back to {@code getStackTrace}. Callers that require the special implementation can
                * check its availability with {@link #lazyStackTraceIsLazy()}.
                *
                * &lt;p&gt;The expected (but not guaranteed) performance of the special implementation differs from
                * {@code getStackTrace} in one main way: The {@code lazyStackTrace} call itself returns quickly
                * by delaying the per-stack-frame work until each element is accessed. Roughly speaking:
                *
                * &lt;ul&gt;
                * &lt;li&gt;{@code getStackTrace} takes {@code stackSize} time to return but then negligible time to
                * retrieve each element of the returned list.
                * &lt;li&gt;{@code lazyStackTrace} takes negligible time to return but then {@code 1/stackSize} time to
                * retrieve each element of the returned list (probably slightly more than {@code 1/stackSize}).
                * &lt;/ul&gt;
                *
                * &lt;p&gt;Note: The special implementation does not respect calls to {@link Throwable#setStackTrace
                * throwable.setStackTrace}. Instead, it always reflects the original stack trace from the
                * exception's creation.
                *
                * @since 19.0
                */
            </comment>
            <comment type="line">// TODO(cpovirk): Say something about the possibility that List access could fail at
                runtime?
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>StackTraceElement</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>lazyStackTrace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Throwable</name>
                            </type>
                            <name>throwable</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>lazyStackTraceIsLazy</name>
                                <argument_list>()</argument_list>
                            </call>
                            ?
                            <call>
                                <name>jlaStackTrace</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>throwable</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            :
                            <call>
                                <name>unmodifiableList</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>asList</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>throwable</name>.
                                                                    <name>getStackTrace</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns whether {@link #lazyStackTrace} will use the special implementation described in its
                * documentation.
                *
                * @since 19.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>lazyStackTraceIsLazy</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>getStackTraceElementMethod</name>
                            != <name>null</name> &amp; <name>getStackTraceDepthMethod</name> !=
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>StackTraceElement</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>jlaStackTrace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>Throwable</name>
                            </type>
                            <name>t</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>t</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="block">/*
                        * TODO(cpovirk): Consider optimizing iterator() to catch IOOBE instead of doing bounds checks.
                        *
                        * TODO(cpovirk): Consider the UnsignedBytes pattern if it performs faster and doesn't cause
                        * AOSP grief.
                        */
                    </comment>
                    <return>return
                        <expr>new
                            <class>
                                <super>
                                    <name>
                                        <name>AbstractList</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>StackTraceElement</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </super>
                                <argument_list>()</argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>StackTraceElement</name>
                                        </type>
                                        <name>get</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>n</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>(<name>StackTraceElement</name>)
                                                    <call>
                                                        <name>invokeAccessibleNonThrowingMethod</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>getStackTraceElementMethod</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>jla</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>t</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>n</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>

                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>int</name>
                                        </type>
                                        <name>size</name>
                                        <parameter_list>()</parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>(<name>Integer</name>)
                                                    <call>
                                                        <name>invokeAccessibleNonThrowingMethod</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>getStackTraceDepthMethod</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>jla</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>t</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>invokeAccessibleNonThrowingMethod</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Method</name>
                            </type>
                            <name>method</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>receiver</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type><name>Object</name>...
                            </type>
                            <name>params</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <try>try
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>method</name>.
                                            <name>invoke</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>receiver</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>params</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IllegalAccessException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>RuntimeException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>InvocationTargetException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>
                                        <call>
                                            <name>propagate</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>e</name>.
                                                                <name>getCause</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/** JavaLangAccess class name to load using reflection */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>JAVA_LANG_ACCESS_CLASSNAME</name> =
                    <init>
                        <expr>"sun.misc.JavaLangAccess"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** SharedSecrets class name to load using reflection */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>VisibleForTesting</name>
                        </annotation>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>SHARED_SECRETS_CLASSNAME</name> =
                    <init>
                        <expr>"sun.misc.SharedSecrets"</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Access to some fancy internal JVM internals. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Object</name>
                    </type>
                    <name>jla</name> =
                    <init>
                        <expr>
                            <call>
                                <name>getJLA</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The "getStackTraceElementMethod" method, only available on some JDKs so we use reflection to
                * find it when available. When this is null, use the slow way.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Method</name>
                    </type>
                    <name>getStackTraceElementMethod</name> =
                    <init>
                        <expr>(<name>jla</name> == <name>null</name>) ? <name>null</name> :
                            <call>
                                <name>getGetMethod</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The "getStackTraceDepth" method, only available on some JDKs so we use reflection to find it
                * when available. When this is null, use the slow way.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Method</name>
                    </type>
                    <name>getStackTraceDepthMethod</name> =
                    <init>
                        <expr>(<name>jla</name> == <name>null</name>) ? <name>null</name> :
                            <call>
                                <name>getSizeMethod</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Returns the JavaLangAccess class that is present in all Sun JDKs. It is not whitelisted for
                * AppEngine, and not present in non-Sun JDKs.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Nullable</name>
                    </annotation>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>Object</name>
                </type>
                <name>getJLA</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <try>try
                        <block>{
                            <comment type="block">/*
                                * We load sun.misc.* classes using reflection since Android doesn't support these
                                classes and
                                * would result in compilation failure if we directly refer to these classes.
                                */
                            </comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Class</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>sharedSecrets</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>Class</name>.
                                                    <name>forName</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>SHARED_SECRETS_CLASSNAME</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>false</expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Method</name>
                                    </type>
                                    <name>langAccess</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>sharedSecrets</name>.
                                                    <name>getMethod</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"getJavaLangAccess"</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>langAccess</name>.
                                            <name>invoke</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>null</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>ThreadDeath</name>
                                    </type>
                                    <name>death</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>
                                        <name>death</name>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>Throwable</name>
                                    </type>
                                    <name>t</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="block">/*
                                    * This is not one of AppEngine's whitelisted classes, so even in Sun JDKs, this can
                                    fail with
                                    * a NoClassDefFoundError. Other apps might deny access to sun.misc packages.
                                    */
                                </comment>
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the Method that can be used to resolve an individual StackTraceElement, or null if that
                * method cannot be found (it is only to be found in fairly recent JDKs).
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Nullable</name>
                    </annotation>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>Method</name>
                </type>
                <name>getGetMethod</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getJlaMethod</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"getStackTraceElement"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Throwable</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>int</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the Method that can be used to return the size of a stack, or null if that method
                * cannot be found (it is only to be found in fairly recent JDKs).
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Nullable</name>
                    </annotation>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>Method</name>
                </type>
                <name>getSizeMethod</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>getJlaMethod</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"getStackTraceDepth"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Throwable</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Nullable</name>
                    </annotation>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>Method</name>
                </type>
                <name>getJlaMethod</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                ...
                            </type>
                            <name>parameterTypes</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ThreadDeath</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <try>try
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>Class</name>.
                                            <name>forName</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>JAVA_LANG_ACCESS_CLASSNAME</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>false</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>null</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>getMethod</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>name</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>parameterTypes</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>ThreadDeath</name>
                                    </type>
                                    <name>death</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>
                                        <name>death</name>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>Throwable</name>
                                    </type>
                                    <name>t</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <comment type="block">/*
                                    * Either the JavaLangAccess class itself is not found, or the method is not
                                    supported on the
                                    * JVM.
                                    */
                                </comment>
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
