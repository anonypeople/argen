<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\util\concurrent\TimeLimiter.java">
    <comment type="block">/*
        * Copyright (C) 2006 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>util</name>.
            <name>concurrent</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>Callable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.
            <name>TimeUnit</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Produces proxies that impose a time limit on method
        * calls to the proxied object. For example, to return the value of
        * {@code target.someMethod()}, but substitute {@code DEFAULT_VALUE} if this
        * method call takes over 50 ms, you can use this code:
        * &lt;pre&gt;
        * TimeLimiter limiter = . . .;
        * TargetType proxy = limiter.newProxy(
        * target, TargetType.class, 50, TimeUnit.MILLISECONDS);
        * try {
        * return proxy.someMethod();
        * } catch (UncheckedTimeoutException e) {
        * return DEFAULT_VALUE;
        * }
        * &lt;/pre&gt;
        * &lt;p&gt;Please see {@code SimpleTimeLimiterTest} for more usage examples.
        *
        * @author Kevin Bourrillion
        * @since 1.0
        */
    </comment>
    <class type="interface">
        <annotation>@
            <name>Beta</name>
        </annotation>
        <specifier>public</specifier>
        interface <name>TimeLimiter</name>
        <block>{

            <comment type="javadoc">/**
                * Returns an instance of {@code interfaceType} that delegates all method
                * calls to the {@code target} object, enforcing the specified time limit on
                * each call. This time-limited delegation is also performed for calls to
                * {@link Object#equals}, {@link Object#hashCode}, and
                * {@link Object#toString}.
                * &lt;p&gt;
                * If the target method call finishes before the limit is reached, the return
                * value or exception is propagated to the caller exactly as-is. If, on the
                * other hand, the time limit is reached, the proxy will attempt to abort the
                * call to the target, and will throw an {@link UncheckedTimeoutException} to
                * the caller.
                * &lt;p&gt;
                * It is important to note that the primary purpose of the proxy object is to
                * return control to the caller when the timeout elapses; aborting the target
                * method call is of secondary concern. The particular nature and strength
                * of the guarantees made by the proxy is implementation-dependent. However,
                * it is important that each of the methods on the target object behaves
                * appropriately when its thread is interrupted.
                *
                * @param target the object to proxy
                * @param interfaceType the interface you wish the returned proxy to
                * implement
                * @param timeoutDuration with timeoutUnit, the maximum length of time that
                * callers are willing to wait on each method call to the proxy
                * @param timeoutUnit with timeoutDuration, the maximum length of time that
                * callers are willing to wait on each method call to the proxy
                * @return a time-limiting proxy
                * @throws IllegalArgumentException if {@code interfaceType} is a regular
                * class, enum, or annotation type, rather than an interface
                */
            </comment>
            <function_decl>
                <type>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>T</name>
                </type>
                <name>newProxy</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>target</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>interfaceType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>timeoutDuration</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>TimeUnit</name>
                            </type>
                            <name>timeoutUnit</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Invokes a specified Callable, timing out after the specified time limit.
                * If the target method call finished before the limit is reached, the return
                * value or exception is propagated to the caller exactly as-is. If, on the
                * other hand, the time limit is reached, we attempt to abort the call to the
                * target, and throw an {@link UncheckedTimeoutException} to the caller.
                * &lt;p&gt;
                * &lt;b&gt;Warning:&lt;/b&gt; The future of this method is in doubt. It may be nuked, or
                * changed significantly.
                *
                * @param callable the Callable to execute
                * @param timeoutDuration with timeoutUnit, the maximum length of time to wait
                * @param timeoutUnit with timeoutDuration, the maximum length of time to wait
                * @param interruptible whether to respond to thread interruption by aborting
                * the operation and throwing InterruptedException; if false, the
                * operation is allowed to complete or time out, and the current thread's
                * interrupt status is re-asserted.
                * @return the result returned by the Callable
                * @throws InterruptedException if {@code interruptible} is true and our
                * thread is interrupted during execution
                * @throws UncheckedTimeoutException if the time limit is reached
                * @throws Exception
                */
            </comment>
            <function_decl>
                <type>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>T</name>
                </type>
                <name>callWithTimeout</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Callable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>T</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>callable</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>timeoutDuration</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>TimeUnit</name>
                            </type>
                            <name>timeoutUnit</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>interruptible</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>Exception</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>
            }
        </block>
    </class>
</unit>
