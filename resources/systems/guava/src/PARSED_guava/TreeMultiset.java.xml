<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\collect\TreeMultiset.java">
    <comment type="block">/*
        * Copyright (C) 2007 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>collect</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkArgument</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkState</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>
            CollectPreconditions</name>.
            <name>checkNonnegative</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>
            CollectPreconditions</name>.
            <name>checkRemove</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtIncompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>MoreObjects</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>primitives</name>.
            <name>Ints</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>ObjectInputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>ObjectOutputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Comparator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>ConcurrentModificationException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>NoSuchElementException</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A multiset which maintains the ordering of its elements, according to either their natural order
        * or an explicit {@link Comparator}. In all cases, this implementation uses
        * {@link Comparable#compareTo} or {@link Comparator#compare} instead of {@link Object#equals} to
        * determine equivalence of instances.
        *
        * &lt;p&gt;&lt;b&gt;Warning:&lt;/b&gt; The comparison must be &lt;i&gt;consistent with equals&lt;/i&gt; as
        explained by the
        * {@link Comparable} class specification. Otherwise, the resulting multiset will violate the
        * {@link java.util.Collection} contract, which is specified in terms of {@link Object#equals}.
        *
        * &lt;p&gt;See the Guava User Guide article on &lt;a href=
        * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset"&gt;
        * {@code Multiset}&lt;/a&gt;.
        *
        * @author Louis Wasserman
        * @author Jared Levy
        * @since 2.0
        */
    </comment>
    <class>
        <annotation>@
            <name>GwtCompatible</name>
            <argument_list>(emulated = true)</argument_list>
        </annotation>
        <specifier>public</specifier>
        <specifier>final</specifier> class
        <name>
            <name>TreeMultiset</name>
            <argument_list>&lt;
                <argument>
                    <name>E</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends
                <name>
                    <name>AbstractSortedMultiset</name>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
            <implements>implements
                <name>Serializable</name>
            </implements>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Creates a new, empty multiset, sorted according to the elements' natural order. All elements
                * inserted into the multiset must implement the {@code Comparable} interface. Furthermore, all
                * such elements must be &lt;i&gt;mutually comparable&lt;/i&gt;: {@code e1.compareTo(e2)} must not throw
                a
                * {@code ClassCastException} for any elements {@code e1} and {@code e2} in the multiset. If the
                * user attempts to add an element to the multiset that violates this constraint (for example,
                * the user attempts to add a string element to a set whose elements are integers), the
                * {@code add(Object)} call will throw a {@code ClassCastException}.
                *
                * &lt;p&gt;The type specification is {@code &lt;E extends Comparable&gt;}, instead of the more specific
                * {@code &lt;E extends Comparable&lt;? super E&gt;&gt;}, to support classes defined without generics.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                            <extends>extends
                                <name>Comparable</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>TreeMultiset</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>create</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>
                                    <name>TreeMultiset</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Ordering</name>.
                                                    <name>natural</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates a new, empty multiset, sorted according to the specified comparator. All elements
                * inserted into the multiset must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator:
                * {@code comparator.compare(e1,
                * e2)} must not throw a {@code ClassCastException} for any elements {@code e1} and {@code e2} in
                * the multiset. If the user attempts to add an element to the multiset that violates this
                * constraint, the {@code add(Object)} call will throw a {@code ClassCastException}.
                *
                * @param comparator
                * the comparator that will be used to sort this multiset. A null value indicates that
                * the elements' &lt;i&gt;natural ordering&lt;/i&gt; should be used.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>SuppressWarnings</name>
                        <argument_list>("unchecked")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>TreeMultiset</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>create</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>
                                    <name>Comparator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>E</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>comparator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>comparator</name> == <name>null</name>)
                            ? new
                            <call>
                                <name>
                                    <name>TreeMultiset</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>Comparator</name>)
                                            <call>
                                                <name><name>Ordering</name>.
                                                    <name>natural</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            : new
                            <call>
                                <name>
                                    <name>TreeMultiset</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>comparator</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates an empty multiset containing the given initial elements, sorted according to the
                * elements' natural order.
                *
                * &lt;p&gt;This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.
                *
                * &lt;p&gt;The type specification is {@code &lt;E extends Comparable&gt;}, instead of the more specific
                * {@code &lt;E extends Comparable&lt;? super E&gt;&gt;}, to support classes defined without generics.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                            <extends>extends
                                <name>Comparable</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>
                        <name>TreeMultiset</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>create</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Iterable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <extends>extends
                                                <name>E</name>
                                            </extends>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>elements</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>TreeMultiset</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>multiset</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>create</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>Iterables</name>.
                                    <name>addAll</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>multiset</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>elements</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>multiset</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>transient</name>
                        <name>
                            <name>Reference</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>AvlNode</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>E</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>rootReference</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>transient</name>
                        <name>
                            <name>GeneralRange</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>range</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>transient</name>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>header</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>TreeMultiset</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Reference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>AvlNode</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>E</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>rootReference</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>GeneralRange</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>range</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>AvlNode</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>endLink</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>range</name>.
                                                    <name>comparator</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>rootReference</name>
                            </name>
                            =
                            <name>rootReference</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>range</name>
                            </name>
                            =
                            <name>range</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>header</name>
                            </name>
                            =
                            <name>endLink</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <constructor>
                <name>TreeMultiset</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Comparator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>E</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>comparator</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>comparator</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>range</name>
                            </name>
                            =
                            <call>
                                <name><name>GeneralRange</name>.
                                    <name>all</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>comparator</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>header</name>
                            </name>
                            = new
                            <call>
                                <name>
                                    <name>AvlNode</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>1</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>successor</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>header</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>header</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>rootReference</name>
                            </name>
                            = new
                            <call>
                                <name>
                                    <name>Reference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>AvlNode</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>E</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * A function which can be summed across a subtree.
                */
            </comment>
            <enum>
                <specifier>private</specifier>
                enum <name>Aggregate</name>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>SIZE</name>
                            <block>{
                                @
                                <expr>
                                    <name>Override</name>
                                    <name>int</name>
                                    <call>
                                        <name>nodeAggregate</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>AvlNode</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>?</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                    <name>node</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name><name>node</name>.
                                                    <name>elemCount</name>
                                                </name>
                                            </expr>
                                            ;
                                        </return>
                                    </block>
                                </expr>
                            </block>
                        </expr>
                    </expr_stmt>
                    }
                </block>
            </enum>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <name>long</name>
                </type>
                <name>treeAggregate</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>
                                    <name>AvlNode</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>root</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>root</name> == <name>null</name>) ? 0 :
                            <name><name>root</name>.
                                <name>totalCount</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
    ,
    <expr_stmt>
        <expr>
            <name>DISTINCT</name>
            <block>{
                @
                <expr>
                    <name>Override</name>
                    <name>int</name>
                    <call>
                        <name>nodeAggregate</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>
                                        <name>AvlNode</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>node</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <return>return <expr>1</expr>;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }

    @
    <function>
        <type>
            <name>Override</name>
            <name>long</name>
        </type>
        <name>treeAggregate</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>root</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>(<name>root</name> == <name>null</name>) ? 0 :
                    <name><name>root</name>.
                        <name>distinctElements</name>
                    </name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    };
    <function_decl>
        <type>
            <specifier>abstract</specifier>
            <name>int</name>
        </type>
        <name>nodeAggregate</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>node</name>
                </decl>
            </param>
            )
        </parameter_list>
        ;
    </function_decl>

    <function_decl>
        <type>
            <specifier>abstract</specifier>
            <name>long</name>
        </type>
        <name>treeAggregate</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>root</name>
                </decl>
            </param>
            )
        </parameter_list>
        ;
    </function_decl>
    }

    private
    <function>
        <type>
            <name>long</name>
        </type>
        <name>aggregateForEntries</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Aggregate</name>
                    </type>
                    <name>aggr</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>root</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>rootReference</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>long</name>
                    </type>
                    <name>total</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>aggr</name>.
                                    <name>treeAggregate</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>root</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <if>if
                <condition>(
                    <expr>
                        <call>
                            <name><name>range</name>.
                                <name>hasLowerBound</name>
                            </name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>total</name>
                                -=
                                <call>
                                    <name>aggregateBelowRange</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>aggr</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>root</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </then>
            </if>
            <if>if
                <condition>(
                    <expr>
                        <call>
                            <name><name>range</name>.
                                <name>hasUpperBound</name>
                            </name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>total</name>
                                -=
                                <call>
                                    <name>aggregateAboveRange</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>aggr</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>root</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </then>
            </if>
            <return>return
                <expr>
                    <name>total</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>private</specifier>
            <name>long</name>
        </type>
        <name>aggregateBelowRange</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Aggregate</name>
                    </type>
                    <name>aggr</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>node</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>
                        <name>node</name>
                        ==
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return <expr>0</expr>;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>cmp</name> =
                    <init>
                        <expr>
                            <call>
                                <name>comparator</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>compare</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>range</name>.
                                                    <name>getLowerEndpoint</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>node</name>.
                                                <name>elem</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <if>if
                <condition>(
                    <expr>
                        <name>cmp</name>
                        &lt; 0
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name>aggregateBelowRange</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>aggr</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name><name>node</name>.
                                                    <name>left</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
                <else>else
                    <if>if
                        <condition>(
                            <expr>
                                <name>cmp</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <switch>switch
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>range</name>.
                                                    <name>getLowerBoundType</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <case>case
                                            <expr>
                                                <name>OPEN</name>
                                            </expr>
                                            :
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>aggr</name>.
                                                            <name>nodeAggregate</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>node</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    +
                                                    <call>
                                                        <name><name>aggr</name>.
                                                            <name>treeAggregate</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>node</name>.
                                                                        <name>left</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                        </case>
                                        <case>case
                                            <expr>
                                                <name>CLOSED</name>
                                            </expr>
                                            :
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>aggr</name>.
                                                            <name>treeAggregate</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>node</name>.
                                                                        <name>left</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                        </case>
                                        <default>default:
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>AssertionError</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                        </default>
                                        }
                                    </block>
                                </switch>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>aggr</name>.
                                                <name>treeAggregate</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>node</name>.
                                                            <name>left</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        +
                                        <call>
                                            <name><name>aggr</name>.
                                                <name>nodeAggregate</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>node</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        +
                                        <call>
                                            <name>aggregateBelowRange</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>aggr</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>node</name>.
                                                            <name>right</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                </else>
            </if>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>private</specifier>
            <name>long</name>
        </type>
        <name>aggregateAboveRange</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Aggregate</name>
                    </type>
                    <name>aggr</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>node</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <if>if
                <condition>(
                    <expr>
                        <name>node</name>
                        ==
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return <expr>0</expr>;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>cmp</name> =
                    <init>
                        <expr>
                            <call>
                                <name>comparator</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>compare</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>range</name>.
                                                    <name>getUpperEndpoint</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>node</name>.
                                                <name>elem</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <if>if
                <condition>(
                    <expr>
                        <name>cmp</name>
                        &gt; 0
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name>aggregateAboveRange</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>aggr</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name><name>node</name>.
                                                    <name>right</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
                <else>else
                    <if>if
                        <condition>(
                            <expr>
                                <name>cmp</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <switch>switch
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>range</name>.
                                                    <name>getUpperBoundType</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <case>case
                                            <expr>
                                                <name>OPEN</name>
                                            </expr>
                                            :
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>aggr</name>.
                                                            <name>nodeAggregate</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>node</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    +
                                                    <call>
                                                        <name><name>aggr</name>.
                                                            <name>treeAggregate</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>node</name>.
                                                                        <name>right</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                        </case>
                                        <case>case
                                            <expr>
                                                <name>CLOSED</name>
                                            </expr>
                                            :
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>aggr</name>.
                                                            <name>treeAggregate</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>node</name>.
                                                                        <name>right</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                        </case>
                                        <default>default:
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>AssertionError</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                        </default>
                                        }
                                    </block>
                                </switch>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>aggr</name>.
                                                <name>treeAggregate</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>node</name>.
                                                            <name>right</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        +
                                        <call>
                                            <name><name>aggr</name>.
                                                <name>nodeAggregate</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>node</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        +
                                        <call>
                                            <name>aggregateAboveRange</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>aggr</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>node</name>.
                                                            <name>left</name>
                                                        </name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                </else>
            </if>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>int</name>
        </type>
        <name>size</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>Ints</name>.
                            <name>saturatedCast</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>aggregateForEntries</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Aggregate</name>.
                                                        <name>SIZE</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <name>int</name>
        </type>
        <name>distinctElements</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>Ints</name>.
                            <name>saturatedCast</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>aggregateForEntries</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Aggregate</name>.
                                                        <name>DISTINCT</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>int</name>
        </type>
        <name>count</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>Object</name>
                    </type>
                    <name>element</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <try>try
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>SuppressWarnings</name>
                                    <argument_list>("unchecked")</argument_list>
                                </annotation>
                                <name>E</name>
                            </type>
                            <name>e</name> =
                            <init>
                                <expr>(<name>E</name>)
                                    <name>element</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>AvlNode</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>root</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>rootReference</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>range</name>.
                                        <name>contains</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>e</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                || <name>root</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>0</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>root</name>.
                                    <name>count</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>comparator</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>e</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
                <catch>catch (
                    <param>
                        <decl>
                            <type>
                                <name>ClassCastException</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                    <block>{
                        <return>return <expr>0</expr>;
                        </return>
                        }
                    </block>
                </catch>
                <catch>catch (
                    <param>
                        <decl>
                            <type>
                                <name>NullPointerException</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                    <block>{
                        <return>return <expr>0</expr>;
                        </return>
                        }
                    </block>
                </catch>
            </try>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>int</name>
        </type>
        <name>add</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>E</name>
                    </type>
                    <name>element</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>occurrences</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNonnegative</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>occurrences</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>"occurrences"</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <if>if
                <condition>(
                    <expr>
                        <name>occurrences</name>
                        == 0
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name>count</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>element</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkArgument</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>range</name>.
                                            <name>contains</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>element</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>root</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>rootReference</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <if>if
                <condition>(
                    <expr>
                        <name>root</name>
                        ==
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <expr_stmt>
                            <expr>
                                <call>
                                    <name>comparator</name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>compare</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>element</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>element</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        <decl_stmt>
                            <decl>
                                <type>
                                    <name>
                                        <name>AvlNode</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>E</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>newRoot</name> =
                                <init>
                                    <expr>new
                                        <call>
                                            <name>
                                                <name>AvlNode</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>E</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>element</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>occurrences</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </decl_stmt>
                        <expr_stmt>
                            <expr>
                                <call>
                                    <name>successor</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>header</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>newRoot</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>header</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        <expr_stmt>
                            <expr>
                                <call>
                                    <name><name>rootReference</name>.
                                        <name>checkAndSet</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>root</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>newRoot</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        <return>return <expr>0</expr>;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                        <index>[]</index>
                    </type>
                    <name>result</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>int</name>
                                <index>[<expr>1</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// used as a mutable int reference to hold result</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>newRoot</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>root</name>.
                                    <name>add</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>comparator</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>element</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>occurrences</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>result</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>rootReference</name>.
                            <name>checkAndSet</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>root</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>newRoot</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>
                    <name>
                        <name>result</name>
                        <index>[<expr>0</expr>]
                        </index>
                    </name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>int</name>
        </type>
        <name>remove</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>Object</name>
                    </type>
                    <name>element</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>occurrences</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNonnegative</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>occurrences</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>"occurrences"</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <if>if
                <condition>(
                    <expr>
                        <name>occurrences</name>
                        == 0
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name>count</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>element</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>root</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>rootReference</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                        <index>[]</index>
                    </type>
                    <name>result</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>int</name>
                                <index>[<expr>1</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// used as a mutable int reference to hold result</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>newRoot</name>
                </decl>
                ;
            </decl_stmt>
            <try>try
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>SuppressWarnings</name>
                                    <argument_list>("unchecked")</argument_list>
                                </annotation>
                                <name>E</name>
                            </type>
                            <name>e</name> =
                            <init>
                                <expr>(<name>E</name>)
                                    <name>element</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>range</name>.
                                        <name>contains</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>e</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                || <name>root</name> ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>0</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>newRoot</name>
                            =
                            <call>
                                <name><name>root</name>.
                                    <name>remove</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>comparator</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>e</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>occurrences</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>result</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
                <catch>catch (
                    <param>
                        <decl>
                            <type>
                                <name>ClassCastException</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                    <block>{
                        <return>return <expr>0</expr>;
                        </return>
                        }
                    </block>
                </catch>
                <catch>catch (
                    <param>
                        <decl>
                            <type>
                                <name>NullPointerException</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                    <block>{
                        <return>return <expr>0</expr>;
                        </return>
                        }
                    </block>
                </catch>
            </try>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>rootReference</name>.
                            <name>checkAndSet</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>root</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>newRoot</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>
                    <name>
                        <name>result</name>
                        <index>[<expr>0</expr>]
                        </index>
                    </name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>int</name>
        </type>
        <name>setCount</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>E</name>
                    </type>
                    <name>element</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>count</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNonnegative</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>count</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>"count"</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <if>if
                <condition>(
                    <expr>!
                        <call>
                            <name><name>range</name>.
                                <name>contains</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name>element</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <expr_stmt>
                            <expr>
                                <call>
                                    <name>checkArgument</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>count</name>
                                                == 0
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        <return>return <expr>0</expr>;
                        </return>
                        }
                    </block>
                </then>
            </if>

            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>root</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>rootReference</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <if>if
                <condition>(
                    <expr>
                        <name>root</name>
                        ==
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <if>if
                            <condition>(
                                <expr>
                                    <name>count</name>
                                    &gt; 0
                                </expr>
                                )
                            </condition>
                            <then>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>add</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>element</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>count</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </then>
                        </if>
                        <return>return <expr>0</expr>;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                        <index>[]</index>
                    </type>
                    <name>result</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>int</name>
                                <index>[<expr>1</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// used as a mutable int reference to hold result</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>newRoot</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>root</name>.
                                    <name>setCount</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>comparator</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>element</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>count</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>result</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>rootReference</name>.
                            <name>checkAndSet</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>root</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>newRoot</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>
                    <name>
                        <name>result</name>
                        <index>[<expr>0</expr>]
                        </index>
                    </name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>boolean</name>
        </type>
        <name>setCount</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>E</name>
                    </type>
                    <name>element</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>oldCount</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>newCount</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNonnegative</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>newCount</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>"newCount"</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNonnegative</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>oldCount</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>"oldCount"</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkArgument</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>range</name>.
                                            <name>contains</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>element</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>root</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>rootReference</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <if>if
                <condition>(
                    <expr>
                        <name>root</name>
                        ==
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <if>if
                            <condition>(
                                <expr>
                                    <name>oldCount</name>
                                    == 0
                                </expr>
                                )
                            </condition>
                            <then>
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>newCount</name>
                                                &gt; 0
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>add</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>element</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>newCount</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <return>return <expr>true</expr>;
                                    </return>
                                    }
                                </block>
                            </then>
                            <else>else
                                <block>{
                                    <return>return <expr>false</expr>;
                                    </return>
                                    }
                                </block>
                            </else>
                        </if>
                        }
                    </block>
                </then>
            </if>
            <decl_stmt>
                <decl>
                    <type>
                        <name>int</name>
                        <index>[]</index>
                    </type>
                    <name>result</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>int</name>
                                <index>[<expr>1</expr>]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// used as a mutable int reference to hold result</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>newRoot</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>root</name>.
                                    <name>setCount</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>comparator</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>element</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>oldCount</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>newCount</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>result</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>rootReference</name>.
                            <name>checkAndSet</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>root</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>newRoot</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>
                    <name>
                        <name>result</name>
                        <index>[<expr>0</expr>]
                        </index>
                    </name>
                    ==
                    <name>oldCount</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>private</specifier>
            <name>
                <name>Entry</name>
                <argument_list>&lt;
                    <argument>
                        <name>E</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>wrapEntry</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>baseEntry</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <class>
                        <super>
                            <name><name>Multisets</name>.
                                <name>
                                    <name>AbstractEntry</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </name>
                        </super>
                        <argument_list>()</argument_list>
                        <block>{
                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>E</name>
                                </type>
                                <name>getElement</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name><name>baseEntry</name>.
                                                    <name>getElement</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>int</name>
                                </type>
                                <name>getCount</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>result</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>baseEntry</name>.
                                                            <name>getCount</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>result</name>
                                                == 0
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <call>
                                                            <name>count</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name>getElement</name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <name>result</name>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </class>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns the first node in the tree that is in range.
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>Nullable</name>
            </annotation>
            <specifier>private</specifier>
            <name>
                <name>AvlNode</name>
                <argument_list>&lt;
                    <argument>
                        <name>E</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>firstNode</name>
        <parameter_list>()</parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>root</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>rootReference</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <if>if
                <condition>(
                    <expr>
                        <name>root</name>
                        ==
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <name>null</name>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>node</name>
                </decl>
                ;
            </decl_stmt>
            <if>if
                <condition>(
                    <expr>
                        <call>
                            <name><name>range</name>.
                                <name>hasLowerBound</name>
                            </name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <decl_stmt>
                            <decl>
                                <type>
                                    <name>E</name>
                                </type>
                                <name>endpoint</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>range</name>.
                                                <name>getLowerEndpoint</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </decl_stmt>
                        <expr_stmt>
                            <expr>
                                <name>node</name>
                                =
                                <call>
                                    <name><name>rootReference</name>.
                                        <name>get</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>ceiling</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name>comparator</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>endpoint</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        <if>if
                            <condition>(
                                <expr>
                                    <name>node</name>
                                    ==
                                    <name>null</name>
                                </expr>
                                )
                            </condition>
                            <then>
                                <block>{
                                    <return>return
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </then>
                        </if>
                        <if>if
                            <condition>(
                                <expr>
                                    <call>
                                        <name><name>range</name>.
                                            <name>getLowerBoundType</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    ==
                                    <name><name>BoundType</name>.
                                        <name>OPEN</name>
                                    </name>
                                    &amp;&amp;
                                    <call>
                                        <name>comparator</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>compare</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>endpoint</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>node</name>.
                                                            <name>getElement</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    == 0
                                </expr>
                                )
                            </condition>
                            <then>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>node</name>
                                            =
                                            <name><name>node</name>.
                                                <name>succ</name>
                                            </name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </then>
                        </if>
                        }
                    </block>
                </then>
                <else>else
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>node</name>
                                =
                                <name><name>header</name>.
                                    <name>succ</name>
                                </name>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </else>
            </if>
            <return>return
                <expr>(<name>node</name> == <name>header</name> || !
                    <call>
                        <name><name>range</name>.
                            <name>contains</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>node</name>.
                                            <name>getElement</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    ) ? <name>null</name> :
                    <name>node</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Nullable</name>
            </annotation>
            <specifier>private</specifier>
            <name>
                <name>AvlNode</name>
                <argument_list>&lt;
                    <argument>
                        <name>E</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>lastNode</name>
        <parameter_list>()</parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>root</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>rootReference</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <if>if
                <condition>(
                    <expr>
                        <name>root</name>
                        ==
                        <name>null</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <return>return
                            <expr>
                                <name>null</name>
                            </expr>
                            ;
                        </return>
                        }
                    </block>
                </then>
            </if>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>node</name>
                </decl>
                ;
            </decl_stmt>
            <if>if
                <condition>(
                    <expr>
                        <call>
                            <name><name>range</name>.
                                <name>hasUpperBound</name>
                            </name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <decl_stmt>
                            <decl>
                                <type>
                                    <name>E</name>
                                </type>
                                <name>endpoint</name> =
                                <init>
                                    <expr>
                                        <call>
                                            <name><name>range</name>.
                                                <name>getUpperEndpoint</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </decl_stmt>
                        <expr_stmt>
                            <expr>
                                <name>node</name>
                                =
                                <call>
                                    <name><name>rootReference</name>.
                                        <name>get</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                .
                                <call>
                                    <name>floor</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <call>
                                                    <name>comparator</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>endpoint</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        <if>if
                            <condition>(
                                <expr>
                                    <name>node</name>
                                    ==
                                    <name>null</name>
                                </expr>
                                )
                            </condition>
                            <then>
                                <block>{
                                    <return>return
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </then>
                        </if>
                        <if>if
                            <condition>(
                                <expr>
                                    <call>
                                        <name><name>range</name>.
                                            <name>getUpperBoundType</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    ==
                                    <name><name>BoundType</name>.
                                        <name>OPEN</name>
                                    </name>
                                    &amp;&amp;
                                    <call>
                                        <name>comparator</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>compare</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>endpoint</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>node</name>.
                                                            <name>getElement</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    == 0
                                </expr>
                                )
                            </condition>
                            <then>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <name>node</name>
                                            =
                                            <name><name>node</name>.
                                                <name>pred</name>
                                            </name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </then>
                        </if>
                        }
                    </block>
                </then>
                <else>else
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>node</name>
                                =
                                <name><name>header</name>.
                                    <name>pred</name>
                                </name>
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </else>
            </if>
            <return>return
                <expr>(<name>node</name> == <name>header</name> || !
                    <call>
                        <name><name>range</name>.
                            <name>contains</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>node</name>.
                                            <name>getElement</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    ) ? <name>null</name> :
                    <name>node</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <name>
                <name>Iterator</name>
                <argument_list>&lt;
                    <argument>
                        <name>
                            <name>Entry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>entryIterator</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>new
                    <class>
                        <super>
                            <name>
                                <name>Iterator</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>
                                            <name>Entry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>E</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </super>
                        <argument_list>()</argument_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>AvlNode</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>E</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>current</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>firstNode</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Entry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>E</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>prevEntry</name>
                                </decl>
                                ;
                            </decl_stmt>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>boolean</name>
                                </type>
                                <name>hasNext</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>current</name>
                                                ==
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return <expr>false</expr>;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <call>
                                                            <name><name>range</name>.
                                                                <name>tooHigh</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>current</name>.
                                                                                <name>getElement</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>current</name>
                                                                =
                                                                <name>null</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <return>return <expr>false</expr>;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <return>return <expr>true</expr>;
                                                        </return>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                        </else>
                                    </if>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>E</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>next</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>!
                                                <call>
                                                    <name>hasNext</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <throw>throw
                                                    <expr>new
                                                        <call>
                                                            <name>NoSuchElementException</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </throw>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>Entry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>E</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>result</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name>wrapEntry</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>current</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <name>prevEntry</name>
                                            =
                                            <name>result</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name><name>current</name>.
                                                    <name>succ</name>
                                                </name>
                                                ==
                                                <name>header</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>current</name>
                                                        =
                                                        <name>null</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>current</name>
                                                        =
                                                        <name><name>current</name>.
                                                            <name>succ</name>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                    <return>return
                                        <expr>
                                            <name>result</name>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>void</name>
                                </type>
                                <name>remove</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>checkRemove</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>prevEntry</name>
                                                            !=
                                                            <name>null</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>setCount</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>prevEntry</name>.
                                                                    <name>getElement</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>0</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <name>prevEntry</name>
                                            =
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </class>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <name>
                <name>Iterator</name>
                <argument_list>&lt;
                    <argument>
                        <name>
                            <name>Entry</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>descendingEntryIterator</name>
        <parameter_list>()</parameter_list>
        <block>{
            <return>return
                <expr>new
                    <class>
                        <super>
                            <name>
                                <name>Iterator</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>
                                            <name>Entry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>E</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </super>
                        <argument_list>()</argument_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>AvlNode</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>E</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>current</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>lastNode</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>
                                            <name>Entry</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>E</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                    </type>
                                    <name>prevEntry</name> =
                                    <init>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>boolean</name>
                                </type>
                                <name>hasNext</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>current</name>
                                                ==
                                                <name>null</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return <expr>false</expr>;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <call>
                                                            <name><name>range</name>.
                                                                <name>tooLow</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>current</name>.
                                                                                <name>getElement</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>current</name>
                                                                =
                                                                <name>null</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <return>return <expr>false</expr>;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <return>return <expr>true</expr>;
                                                        </return>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                        </else>
                                    </if>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>
                                        <name>Entry</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>E</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>next</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>!
                                                <call>
                                                    <name>hasNext</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <throw>throw
                                                    <expr>new
                                                        <call>
                                                            <name>NoSuchElementException</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </throw>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>Entry</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>E</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>result</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name>wrapEntry</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>current</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <name>prevEntry</name>
                                            =
                                            <name>result</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name><name>current</name>.
                                                    <name>pred</name>
                                                </name>
                                                ==
                                                <name>header</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>current</name>
                                                        =
                                                        <name>null</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <name>current</name>
                                                        =
                                                        <name><name>current</name>.
                                                            <name>pred</name>
                                                        </name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                    <return>return
                                        <expr>
                                            <name>result</name>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>void</name>
                                </type>
                                <name>remove</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>checkRemove</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>prevEntry</name>
                                                            !=
                                                            <name>null</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name>setCount</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>prevEntry</name>.
                                                                    <name>getElement</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>0</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <name>prevEntry</name>
                                            =
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </class>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>
                <name>SortedMultiset</name>
                <argument_list>&lt;
                    <argument>
                        <name>E</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>headMultiset</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>E</name>
                    </type>
                    <name>upperBound</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>BoundType</name>
                    </type>
                    <name>boundType</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>TreeMultiset</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>rootReference</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>range</name>.
                                            <name>intersect</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>GeneralRange</name>.
                                                            <name>upTo</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name>comparator</name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>upperBound</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>boundType</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>header</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <specifier>public</specifier>
            <name>
                <name>SortedMultiset</name>
                <argument_list>&lt;
                    <argument>
                        <name>E</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>tailMultiset</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>E</name>
                    </type>
                    <name>lowerBound</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>BoundType</name>
                    </type>
                    <name>boundType</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>
                            <name>TreeMultiset</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>rootReference</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>range</name>.
                                            <name>intersect</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>GeneralRange</name>.
                                                            <name>downTo</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name>comparator</name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>lowerBound</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>boundType</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>header</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>static</specifier>
            <name>int</name>
        </type>
        <name>distinctElements</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>node</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>(<name>node</name> == <name>null</name>) ? 0 :
                    <name><name>node</name>.
                        <name>distinctElements</name>
                    </name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <class>
        <specifier>private</specifier>
        <specifier>static</specifier>
        <specifier>final</specifier> class
        <name>
            <name>Reference</name>
            <argument_list>&lt;
                <argument>
                    <name>T</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <specifier>private</specifier>
                        <name>T</name>
                    </type>
                    <name>value</name>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <annotation>@
                        <name>Nullable</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>T</name>
                </type>
                <name>get</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>value</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>checkAndSet</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>T</name>
                            </type>
                            <name>expected</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>newValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                !=
                                <name>expected</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ConcurrentModificationException</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>value</name>
                            =
                            <name>newValue</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <specifier>private</specifier>
        <specifier>static</specifier>
        <specifier>final</specifier> class
        <name>
            <name>AvlNode</name>
            <argument_list>&lt;
                <argument>
                    <name>E</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <super>
            <extends>extends <name>Multisets</name>.
                <name>
                    <name>AbstractEntry</name>
                    <argument_list>&lt;
                        <argument>
                            <name>E</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </extends>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>Nullable</name>
                        </annotation>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>E</name>
                    </type>
                    <name>elem</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// elemCount is 0 iff this node has been deleted.</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>elemCount</name>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>distinctElements</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>long</name>
                    </type>
                    <name>totalCount</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>int</name>
                    </type>
                    <name>height</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>left</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>right</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>pred</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>succ</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>AvlNode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>E</name>
                            </type>
                            <name>elem</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>elemCount</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>elemCount</name>
                                            &gt; 0
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>elem</name>
                            </name>
                            =
                            <name>elem</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>elemCount</name>
                            </name>
                            =
                            <name>elemCount</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>totalCount</name>
                            </name>
                            =
                            <name>elemCount</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>distinctElements</name>
                            </name>
                            = 1
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>height</name>
                            </name>
                            = 1
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>left</name>
                            </name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>right</name>
                            </name>
                            =
                            <name>null</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>count</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Comparator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>E</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>comparator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>cmp</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>comparator</name>.
                                            <name>compare</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>e</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>elem</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>cmp</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>(<name>left</name> == <name>null</name>) ? 0 :
                                        <call>
                                            <name><name>left</name>.
                                                <name>count</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>comparator</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>cmp</name>
                                        &gt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>(<name>right</name> == <name>null</name>) ? 0 :
                                                <call>
                                                    <name><name>right</name>.
                                                        <name>count</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>comparator</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>e</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>elemCount</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>
                        <name>AvlNode</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>addRightChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>right</name>
                            = new
                            <call>
                                <name>
                                    <name>AvlNode</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>e</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>count</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>successor</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>right</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>succ</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>height</name>
                            =
                            <call>
                                <name><name>Math</name>.
                                    <name>max</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>2</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>height</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr><name>distinctElements</name>++
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>totalCount</name>
                            +=
                            <name>count</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>
                        <name>AvlNode</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>addLeftChild</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>left</name>
                            = new
                            <call>
                                <name>
                                    <name>AvlNode</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>e</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>count</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>successor</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>pred</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>left</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>this</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>height</name>
                            =
                            <call>
                                <name><name>Math</name>.
                                    <name>max</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>2</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>height</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr><name>distinctElements</name>++
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>totalCount</name>
                            +=
                            <name>count</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>
                        <name>AvlNode</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>add</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Comparator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>E</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>comparator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>E</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>result</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="block">/*
                        * It speeds things up considerably to unconditionally add count to totalCount here,
                        * but that destroys failure atomicity in the case of count overflow. =(
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>cmp</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>comparator</name>.
                                            <name>compare</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>e</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>elem</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>cmp</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>AvlNode</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>E</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>initLeft</name> =
                                        <init>
                                            <expr>
                                                <name>left</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>initLeft</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>
                                                        <name>result</name>
                                                        <index>[<expr>0</expr>]
                                                        </index>
                                                    </name>
                                                    = 0
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name>addLeftChild</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>e</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>count</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>initHeight</name> =
                                        <init>
                                            <expr>
                                                <name><name>initLeft</name>.
                                                    <name>height</name>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <expr_stmt>
                                    <expr>
                                        <name>left</name>
                                        =
                                        <call>
                                            <name><name>initLeft</name>.
                                                <name>add</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>comparator</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>count</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>result</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>
                                                <name>result</name>
                                                <index>[<expr>0</expr>]
                                                </index>
                                            </name>
                                            == 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr><name>distinctElements</name>++
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>totalCount</name>
                                        </name>
                                        +=
                                        <name>count</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>(
                                        <name><name>left</name>.
                                            <name>height</name>
                                        </name>
                                        == <name>initHeight</name>) ? <name>this</name> :
                                        <call>
                                            <name>rebalance</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>cmp</name>
                                        &gt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>
                                                        <name>AvlNode</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>E</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </type>
                                                <name>initRight</name> =
                                                <init>
                                                    <expr>
                                                        <name>right</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>initRight</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>
                                                                <name>result</name>
                                                                <index>[<expr>0</expr>]
                                                                </index>
                                                            </name>
                                                            = 0
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <return>return
                                                        <expr>
                                                            <call>
                                                                <name>addRightChild</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>e</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>count</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>initHeight</name> =
                                                <init>
                                                    <expr>
                                                        <name><name>initRight</name>.
                                                            <name>height</name>
                                                        </name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>

                                        <expr_stmt>
                                            <expr>
                                                <name>right</name>
                                                =
                                                <call>
                                                    <name><name>initRight</name>.
                                                        <name>add</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>comparator</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>e</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>count</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>result</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>
                                                        <name>result</name>
                                                        <index>[<expr>0</expr>]
                                                        </index>
                                                    </name>
                                                    == 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr><name>distinctElements</name>++
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>totalCount</name>
                                                </name>
                                                +=
                                                <name>count</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return
                                            <expr>(
                                                <name><name>right</name>.
                                                    <name>height</name>
                                                </name>
                                                == <name>initHeight</name>) ? <name>this</name> :
                                                <call>
                                                    <name>rebalance</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>

                    <comment type="line">// adding count to me! No rebalance possible.</comment>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>result</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                            =
                            <name>elemCount</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>resultCount</name> =
                            <init>
                                <expr>(<name>long</name>) <name>elemCount</name> +
                                    <name>count</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>resultCount</name>
                                            &lt;=
                                            <name><name>Integer</name>.
                                                <name>MAX_VALUE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>elemCount</name>
                            </name>
                            +=
                            <name>count</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>totalCount</name>
                            </name>
                            +=
                            <name>count</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>
                        <name>AvlNode</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>remove</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Comparator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>E</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>comparator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>E</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>result</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>cmp</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>comparator</name>.
                                            <name>compare</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>e</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>elem</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>cmp</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>AvlNode</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>E</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>initLeft</name> =
                                        <init>
                                            <expr>
                                                <name>left</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>initLeft</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>
                                                        <name>result</name>
                                                        <index>[<expr>0</expr>]
                                                        </index>
                                                    </name>
                                                    = 0
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <return>return
                                                <expr>
                                                    <name>this</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <expr_stmt>
                                    <expr>
                                        <name>left</name>
                                        =
                                        <call>
                                            <name><name>initLeft</name>.
                                                <name>remove</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>comparator</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>count</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>result</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>
                                                <name>result</name>
                                                <index>[<expr>0</expr>]
                                                </index>
                                            </name>
                                            &gt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>count</name>
                                                        &gt;=
                                                        <name>
                                                            <name>result</name>
                                                            <index>[<expr>0</expr>]
                                                            </index>
                                                        </name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>distinctElements</name>
                                                                </name>
                                                                --
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>totalCount</name>
                                                                </name>
                                                                -=
                                                                <name>
                                                                    <name>result</name>
                                                                    <index>[<expr>0</expr>]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>totalCount</name>
                                                                </name>
                                                                -=
                                                                <name>count</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </else>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <return>return
                                    <expr>(
                                        <name>
                                            <name>result</name>
                                            <index>[<expr>0</expr>]
                                            </index>
                                        </name>
                                        == 0) ? <name>this</name> :
                                        <call>
                                            <name>rebalance</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>cmp</name>
                                        &gt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>
                                                        <name>AvlNode</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>E</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </type>
                                                <name>initRight</name> =
                                                <init>
                                                    <expr>
                                                        <name>right</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>initRight</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>
                                                                <name>result</name>
                                                                <index>[<expr>0</expr>]
                                                                </index>
                                                            </name>
                                                            = 0
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <return>return
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>

                                        <expr_stmt>
                                            <expr>
                                                <name>right</name>
                                                =
                                                <call>
                                                    <name><name>initRight</name>.
                                                        <name>remove</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>comparator</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>e</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>count</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>result</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>
                                                        <name>result</name>
                                                        <index>[<expr>0</expr>]
                                                        </index>
                                                    </name>
                                                    &gt; 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>count</name>
                                                                &gt;=
                                                                <name>
                                                                    <name>result</name>
                                                                    <index>[<expr>0</expr>]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name><name>this</name>.
                                                                            <name>distinctElements</name>
                                                                        </name>
                                                                        --
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name><name>this</name>.
                                                                            <name>totalCount</name>
                                                                        </name>
                                                                        -=
                                                                        <name>
                                                                            <name>result</name>
                                                                            <index>[<expr>0</expr>]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                        <else>else
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name><name>this</name>.
                                                                            <name>totalCount</name>
                                                                        </name>
                                                                        -=
                                                                        <name>count</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </else>
                                                    </if>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>rebalance</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>

                    <comment type="line">// removing count from me!</comment>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>result</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                            =
                            <name>elemCount</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>count</name>
                                &gt;=
                                <name>elemCount</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>deleteMe</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>elemCount</name>
                                        </name>
                                        -=
                                        <name>count</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>totalCount</name>
                                        </name>
                                        -=
                                        <name>count</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>
                        <name>AvlNode</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>setCount</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Comparator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>E</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>comparator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>E</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>count</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>result</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>cmp</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>comparator</name>.
                                            <name>compare</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>e</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>elem</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>cmp</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>AvlNode</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>E</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>initLeft</name> =
                                        <init>
                                            <expr>
                                                <name>left</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>initLeft</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>
                                                        <name>result</name>
                                                        <index>[<expr>0</expr>]
                                                        </index>
                                                    </name>
                                                    = 0
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <return>return
                                                <expr>(<name>count</name> &gt; 0) ?
                                                    <call>
                                                        <name>addLeftChild</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>e</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>count</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    :
                                                    <name>this</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <expr_stmt>
                                    <expr>
                                        <name>left</name>
                                        =
                                        <call>
                                            <name><name>initLeft</name>.
                                                <name>setCount</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>comparator</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>count</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>result</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>count</name>
                                            == 0 &amp;&amp;
                                            <name>
                                                <name>result</name>
                                                <index>[<expr>0</expr>]
                                                </index>
                                            </name>
                                            != 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>distinctElements</name>
                                                    </name>
                                                    --
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>count</name>
                                                    &gt; 0 &amp;&amp;
                                                    <name>
                                                        <name>result</name>
                                                        <index>[<expr>0</expr>]
                                                        </index>
                                                    </name>
                                                    == 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name><name>this</name>.
                                                                <name>distinctElements</name>
                                                            </name>
                                                            ++
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                    </else>
                                </if>

                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>totalCount</name>
                                        </name>
                                        += <name>count</name> -
                                        <name>
                                            <name>result</name>
                                            <index>[<expr>0</expr>]
                                            </index>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name>rebalance</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>cmp</name>
                                        &gt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>
                                                        <name>AvlNode</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>E</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </type>
                                                <name>initRight</name> =
                                                <init>
                                                    <expr>
                                                        <name>right</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>initRight</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>
                                                                <name>result</name>
                                                                <index>[<expr>0</expr>]
                                                                </index>
                                                            </name>
                                                            = 0
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <return>return
                                                        <expr>(<name>count</name> &gt; 0) ?
                                                            <call>
                                                                <name>addRightChild</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>e</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>count</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            :
                                                            <name>this</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>

                                        <expr_stmt>
                                            <expr>
                                                <name>right</name>
                                                =
                                                <call>
                                                    <name><name>initRight</name>.
                                                        <name>setCount</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>comparator</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>e</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>count</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>result</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>count</name>
                                                    == 0 &amp;&amp;
                                                    <name>
                                                        <name>result</name>
                                                        <index>[<expr>0</expr>]
                                                        </index>
                                                    </name>
                                                    != 0
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name><name>this</name>.
                                                                <name>distinctElements</name>
                                                            </name>
                                                            --
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <name>count</name>
                                                            &gt; 0 &amp;&amp;
                                                            <name>
                                                                <name>result</name>
                                                                <index>[<expr>0</expr>]
                                                                </index>
                                                            </name>
                                                            == 0
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <block>{
                                                            <expr_stmt>
                                                                <expr>
                                                                    <name><name>this</name>.
                                                                        <name>distinctElements</name>
                                                                    </name>
                                                                    ++
                                                                </expr>
                                                                ;
                                                            </expr_stmt>
                                                            }
                                                        </block>
                                                    </then>
                                                </if>
                                            </else>
                                        </if>

                                        <expr_stmt>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>totalCount</name>
                                                </name>
                                                += <name>count</name> -
                                                <name>
                                                    <name>result</name>
                                                    <index>[<expr>0</expr>]
                                                    </index>
                                                </name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>rebalance</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>

                    <comment type="line">// setting my count</comment>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>result</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                            =
                            <name>elemCount</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>count</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>deleteMe</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>totalCount</name>
                            </name>
                            += <name>count</name> -
                            <name>elemCount</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>elemCount</name>
                            </name>
                            =
                            <name>count</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>
                        <name>AvlNode</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>setCount</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Comparator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>E</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>comparator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>E</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>expectedCount</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>newCount</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>int</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>result</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>cmp</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>comparator</name>.
                                            <name>compare</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>e</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>elem</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>cmp</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>AvlNode</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>E</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>initLeft</name> =
                                        <init>
                                            <expr>
                                                <name>left</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>initLeft</name>
                                            ==
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>
                                                        <name>result</name>
                                                        <index>[<expr>0</expr>]
                                                        </index>
                                                    </name>
                                                    = 0
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>expectedCount</name>
                                                        == 0 &amp;&amp; <name>newCount</name> &gt; 0
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return
                                                            <expr>
                                                                <call>
                                                                    <name>addLeftChild</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>e</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>newCount</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            <return>return
                                                <expr>
                                                    <name>this</name>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <expr_stmt>
                                    <expr>
                                        <name>left</name>
                                        =
                                        <call>
                                            <name><name>initLeft</name>.
                                                <name>setCount</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>comparator</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>expectedCount</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>newCount</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>result</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>
                                                <name>result</name>
                                                <index>[<expr>0</expr>]
                                                </index>
                                            </name>
                                            ==
                                            <name>expectedCount</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>newCount</name>
                                                        == 0 &amp;&amp;
                                                        <name>
                                                            <name>result</name>
                                                            <index>[<expr>0</expr>]
                                                            </index>
                                                        </name>
                                                        != 0
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>distinctElements</name>
                                                                </name>
                                                                --
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>newCount</name>
                                                                &gt; 0 &amp;&amp;
                                                                <name>
                                                                    <name>result</name>
                                                                    <index>[<expr>0</expr>]
                                                                    </index>
                                                                </name>
                                                                == 0
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name><name>this</name>.
                                                                            <name>distinctElements</name>
                                                                        </name>
                                                                        ++
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                </else>
                                            </if>
                                            <expr_stmt>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>totalCount</name>
                                                    </name>
                                                    += <name>newCount</name> -
                                                    <name>
                                                        <name>result</name>
                                                        <index>[<expr>0</expr>]
                                                        </index>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <return>return
                                    <expr>
                                        <call>
                                            <name>rebalance</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>cmp</name>
                                        &gt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <decl_stmt>
                                            <decl>
                                                <type>
                                                    <name>
                                                        <name>AvlNode</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>E</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </type>
                                                <name>initRight</name> =
                                                <init>
                                                    <expr>
                                                        <name>right</name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </decl_stmt>
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>initRight</name>
                                                    ==
                                                    <name>null</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>
                                                                <name>result</name>
                                                                <index>[<expr>0</expr>]
                                                                </index>
                                                            </name>
                                                            = 0
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>expectedCount</name>
                                                                == 0 &amp;&amp; <name>newCount</name> &gt; 0
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <return>return
                                                                    <expr>
                                                                        <call>
                                                                            <name>addRightChild</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>e</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                ,
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>newCount</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </return>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    <return>return
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>

                                        <expr_stmt>
                                            <expr>
                                                <name>right</name>
                                                =
                                                <call>
                                                    <name><name>initRight</name>.
                                                        <name>setCount</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>comparator</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>e</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>expectedCount</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>newCount</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>result</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>

                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>
                                                        <name>result</name>
                                                        <index>[<expr>0</expr>]
                                                        </index>
                                                    </name>
                                                    ==
                                                    <name>expectedCount</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>newCount</name>
                                                                == 0 &amp;&amp;
                                                                <name>
                                                                    <name>result</name>
                                                                    <index>[<expr>0</expr>]
                                                                    </index>
                                                                </name>
                                                                != 0
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name><name>this</name>.
                                                                            <name>distinctElements</name>
                                                                        </name>
                                                                        --
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                        <else>else
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>newCount</name>
                                                                        &gt; 0 &amp;&amp;
                                                                        <name>
                                                                            <name>result</name>
                                                                            <index>[<expr>0</expr>]
                                                                            </index>
                                                                        </name>
                                                                        == 0
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name><name>this</name>.
                                                                                    <name>distinctElements</name>
                                                                                </name>
                                                                                ++
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        }
                                                                    </block>
                                                                </then>
                                                            </if>
                                                        </else>
                                                    </if>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name><name>this</name>.
                                                                <name>totalCount</name>
                                                            </name>
                                                            += <name>newCount</name> -
                                                            <name>
                                                                <name>result</name>
                                                                <index>[<expr>0</expr>]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>rebalance</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                        </else>
                    </if>

                    <comment type="line">// setting my count</comment>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>result</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                            =
                            <name>elemCount</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>expectedCount</name>
                                ==
                                <name>elemCount</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>newCount</name>
                                            == 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name>deleteMe</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>totalCount</name>
                                        </name>
                                        += <name>newCount</name> -
                                        <name>elemCount</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>elemCount</name>
                                        </name>
                                        =
                                        <name>newCount</name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>this</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>
                        <name>AvlNode</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>deleteMe</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>oldElemCount</name> =
                            <init>
                                <expr>
                                    <name><name>this</name>.
                                        <name>elemCount</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>elemCount</name>
                            </name>
                            = 0
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>successor</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>pred</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>succ</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>left</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>right</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>right</name>
                                        ==
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>left</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name><name>left</name>.
                                                    <name>height</name>
                                                </name>
                                                &gt;=
                                                <name><name>right</name>.
                                                    <name>height</name>
                                                </name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>
                                                                <name>AvlNode</name>
                                                                <argument_list>&lt;
                                                                    <argument>
                                                                        <name>E</name>
                                                                    </argument>
                                                                    &gt;
                                                                </argument_list>
                                                            </name>
                                                        </type>
                                                        <name>newTop</name> =
                                                        <init>
                                                            <expr>
                                                                <name>pred</name>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <comment type="line">// newTop is the maximum node in my left subtree
                                                </comment>
                                                <expr_stmt>
                                                    <expr>
                                                        <name><name>newTop</name>.
                                                            <name>left</name>
                                                        </name>
                                                        =
                                                        <call>
                                                            <name><name>left</name>.
                                                                <name>removeMax</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>newTop</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name><name>newTop</name>.
                                                            <name>right</name>
                                                        </name>
                                                        =
                                                        <name>right</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name><name>newTop</name>.
                                                            <name>distinctElements</name>
                                                        </name>
                                                        = <name>distinctElements</name> - 1
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name><name>newTop</name>.
                                                            <name>totalCount</name>
                                                        </name>
                                                        = <name>totalCount</name> -
                                                        <name>oldElemCount</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <return>return
                                                    <expr>
                                                        <call>
                                                            <name><name>newTop</name>.
                                                                <name>rebalance</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <block>{
                                                <decl_stmt>
                                                    <decl>
                                                        <type>
                                                            <name>
                                                                <name>AvlNode</name>
                                                                <argument_list>&lt;
                                                                    <argument>
                                                                        <name>E</name>
                                                                    </argument>
                                                                    &gt;
                                                                </argument_list>
                                                            </name>
                                                        </type>
                                                        <name>newTop</name> =
                                                        <init>
                                                            <expr>
                                                                <name>succ</name>
                                                            </expr>
                                                        </init>
                                                    </decl>
                                                    ;
                                                </decl_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name><name>newTop</name>.
                                                            <name>right</name>
                                                        </name>
                                                        =
                                                        <call>
                                                            <name><name>right</name>.
                                                                <name>removeMin</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>newTop</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name><name>newTop</name>.
                                                            <name>left</name>
                                                        </name>
                                                        =
                                                        <name>left</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name><name>newTop</name>.
                                                            <name>distinctElements</name>
                                                        </name>
                                                        = <name>distinctElements</name> - 1
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <expr_stmt>
                                                    <expr>
                                                        <name><name>newTop</name>.
                                                            <name>totalCount</name>
                                                        </name>
                                                        = <name>totalCount</name> -
                                                        <name>oldElemCount</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                <return>return
                                                    <expr>
                                                        <call>
                                                            <name><name>newTop</name>.
                                                                <name>rebalance</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </else>
                                    </if>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="line">// Removes the minimum node from this subtree to be reused elsewhere</comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>
                        <name>AvlNode</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>removeMin</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>AvlNode</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>left</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>right</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>left</name>
                                        =
                                        <call>
                                            <name><name>left</name>.
                                                <name>removeMin</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>node</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr><name>distinctElements</name>--
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>totalCount</name>
                                        -=
                                        <name><name>node</name>.
                                            <name>elemCount</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name>rebalance</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="line">// Removes the maximum node from this subtree to be reused elsewhere</comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>
                        <name>AvlNode</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>removeMax</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>AvlNode</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>right</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>left</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>right</name>
                                        =
                                        <call>
                                            <name><name>right</name>.
                                                <name>removeMax</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>node</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr><name>distinctElements</name>--
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>totalCount</name>
                                        -=
                                        <name><name>node</name>.
                                            <name>elemCount</name>
                                        </name>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name>rebalance</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>recomputeMultiset</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>distinctElements</name>
                            </name>
                            = 1 +
                            <call>
                                <name><name>TreeMultiset</name>.
                                    <name>distinctElements</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>left</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            +
                            <call>
                                <name><name>TreeMultiset</name>.
                                    <name>distinctElements</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>right</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>totalCount</name>
                            </name>
                            = <name>elemCount</name> +
                            <call>
                                <name>totalCount</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>left</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            +
                            <call>
                                <name>totalCount</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>right</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>recomputeHeight</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>height</name>
                            </name>
                            = 1 +
                            <call>
                                <name><name>Math</name>.
                                    <name>max</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>height</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>left</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>height</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>right</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>recompute</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>recomputeMultiset</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>recomputeHeight</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>
                        <name>AvlNode</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>rebalance</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <switch>switch
                        <condition>(
                            <expr>
                                <call>
                                    <name>balanceFactor</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case <expr>-2</expr>:
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>right</name>.
                                                    <name>balanceFactor</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &gt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>right</name>
                                                    =
                                                    <call>
                                                        <name><name>right</name>.
                                                            <name>rotateRight</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <return>return
                                    <expr>
                                        <call>
                                            <name>rotateLeft</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case <expr>2</expr>:
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>left</name>.
                                                    <name>balanceFactor</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &lt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>left</name>
                                                    =
                                                    <call>
                                                        <name><name>left</name>.
                                                            <name>rotateLeft</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <return>return
                                    <expr>
                                        <call>
                                            <name>rotateRight</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <default>default:
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>recomputeHeight</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>
                                        <name>this</name>
                                    </expr>
                                    ;
                                </return>
                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>int</name>
                </type>
                <name>balanceFactor</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>height</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>left</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            -
                            <call>
                                <name>height</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>right</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>
                        <name>AvlNode</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>rotateLeft</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkState</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>right</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>AvlNode</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>newTop</name> =
                            <init>
                                <expr>
                                    <name>right</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>right</name>
                            </name>
                            =
                            <name><name>newTop</name>.
                                <name>left</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>newTop</name>.
                                <name>left</name>
                            </name>
                            =
                            <name>this</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>newTop</name>.
                                <name>totalCount</name>
                            </name>
                            =
                            <name><name>this</name>.
                                <name>totalCount</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>newTop</name>.
                                <name>distinctElements</name>
                            </name>
                            =
                            <name><name>this</name>.
                                <name>distinctElements</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>recompute</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>newTop</name>.
                                    <name>recomputeHeight</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>newTop</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>
                        <name>AvlNode</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>rotateRight</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkState</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>left</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>
                                    <name>AvlNode</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>newTop</name> =
                            <init>
                                <expr>
                                    <name>left</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>left</name>
                            </name>
                            =
                            <name><name>newTop</name>.
                                <name>right</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>newTop</name>.
                                <name>right</name>
                            </name>
                            =
                            <name>this</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>newTop</name>.
                                <name>totalCount</name>
                            </name>
                            =
                            <name><name>this</name>.
                                <name>totalCount</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>newTop</name>.
                                <name>distinctElements</name>
                            </name>
                            =
                            <name><name>this</name>.
                                <name>distinctElements</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.
                                    <name>recompute</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>newTop</name>.
                                    <name>recomputeHeight</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>newTop</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>totalCount</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>
                                    <name>AvlNode</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>node</name> == <name>null</name>) ? 0 :
                            <name><name>node</name>.
                                <name>totalCount</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>height</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>
                                    <name>AvlNode</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>node</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>node</name> == <name>null</name>) ? 0 :
                            <name><name>node</name>.
                                <name>height</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Nullable</name>
                    </annotation>
                    <specifier>private</specifier>
                    <name>
                        <name>AvlNode</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>ceiling</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Comparator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>E</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>comparator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>cmp</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>comparator</name>.
                                            <name>compare</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>e</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>elem</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>cmp</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>(<name>left</name> == <name>null</name>) ? <name>this</name> :
                                        <call>
                                            <name><name>MoreObjects</name>.
                                                <name>firstNonNull</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>left</name>.
                                                                <name>ceiling</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>comparator</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>e</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>this</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>cmp</name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>this</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <return>return
                                            <expr>(<name>right</name> == <name>null</name>) ? <name>null</name> :
                                                <call>
                                                    <name><name>right</name>.
                                                        <name>ceiling</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>comparator</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>e</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Nullable</name>
                    </annotation>
                    <specifier>private</specifier>
                    <name>
                        <name>AvlNode</name>
                        <argument_list>&lt;
                            <argument>
                                <name>E</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>floor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Comparator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                            <super>super
                                                <name>E</name>
                                            </super>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>comparator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>E</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>cmp</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>comparator</name>.
                                            <name>compare</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>e</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>elem</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>cmp</name>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>(<name>right</name> == <name>null</name>) ? <name>this</name> :
                                        <call>
                                            <name><name>MoreObjects</name>.
                                                <name>firstNonNull</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>right</name>.
                                                                <name>floor</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>comparator</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>e</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>this</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>cmp</name>
                                        == 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <name>this</name>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <return>return
                                            <expr>(<name>left</name> == <name>null</name>) ? <name>null</name> :
                                                <call>
                                                    <name><name>left</name>.
                                                        <name>floor</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>comparator</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>e</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </else>
                            </if>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>E</name>
                </type>
                <name>getElement</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>elem</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>getCount</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>elemCount</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Multisets</name>.
                                    <name>immutableEntry</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getElement</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getCount</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>toString</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <function>
        <type>
            <specifier>private</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>T</name>
                </argument>
                &gt;
            </argument_list>
            <name>void</name>
        </type>
        <name>successor</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>T</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>a</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>T</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>b</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <name><name>a</name>.
                        <name>succ</name>
                    </name>
                    =
                    <name>b</name>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <name><name>b</name>.
                        <name>pred</name>
                    </name>
                    =
                    <name>a</name>
                </expr>
                ;
            </expr_stmt>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>private</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>T</name>
                </argument>
                &gt;
            </argument_list>
            <name>void</name>
        </type>
        <name>successor</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>T</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>a</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>T</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>b</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>T</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>c</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>successor</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>a</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>b</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>successor</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>b</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>c</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            }
        </block>
    </function>

    <comment type="block">/*
        * TODO(jlevy): Decide whether entrySet() should return entries with an equals() method that
        * calls the comparator to compare the two keys. If that change is made,
        * AbstractMultiset.equals() can simply check whether two multisets have equal entry sets.
        */
    </comment>

    <comment type="javadoc">/**
        * @serialData the comparator, the number of distinct elements, the first element, its count, the
        * second element, its count, and so on
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>GwtIncompatible</name>
                <argument_list>("java.io.ObjectOutputStream")</argument_list>
            </annotation>
            <specifier>private</specifier>
            <name>void</name>
        </type>
        <name>writeObject</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>ObjectOutputStream</name>
                    </type>
                    <name>stream</name>
                </decl>
            </param>
            )
        </parameter_list>
        <throws>throws
            <argument>
                <expr>
                    <name>IOException</name>
                </expr>
            </argument>
        </throws>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>stream</name>.
                            <name>defaultWriteObject</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>stream</name>.
                            <name>writeObject</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <call>
                                        <name>elementSet</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>comparator</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>Serialization</name>.
                            <name>writeMultiset</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>this</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>stream</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>GwtIncompatible</name>
                <argument_list>("java.io.ObjectInputStream")</argument_list>
            </annotation>
            <specifier>private</specifier>
            <name>void</name>
        </type>
        <name>readObject</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>ObjectInputStream</name>
                    </type>
                    <name>stream</name>
                </decl>
            </param>
            )
        </parameter_list>
        <throws>throws
            <argument>
                <expr>
                    <name>IOException</name>
                </expr>
            </argument>
            ,
            <argument>
                <expr>
                    <name>ClassNotFoundException</name>
                </expr>
            </argument>
        </throws>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>stream</name>.
                            <name>defaultReadObject</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>SuppressWarnings</name>
                            <argument_list>("unchecked")</argument_list>
                        </annotation>
                        <comment type="line">// reading data stored by writeObject</comment>
                        <name>
                            <name>Comparator</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                    <super>super
                                        <name>E</name>
                                    </super>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>comparator</name> =
                    <init>
                        <expr>(
                            <name>
                                <name>Comparator</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>?</name>
                                        <super>super
                                            <name>E</name>
                                        </super>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                            )
                            <call>
                                <name><name>stream</name>.
                                    <name>readObject</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>Serialization</name>.
                            <name>getFieldSetter</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name><name>AbstractSortedMultiset</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    class
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>"comparator"</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    .
                    <call>
                        <name>set</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>this</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>comparator</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>Serialization</name>.
                            <name>getFieldSetter</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name><name>TreeMultiset</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    class
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>"range"</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    .
                    <call>
                        <name>set</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>this</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>GeneralRange</name>.
                                            <name>all</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>comparator</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>Serialization</name>.
                            <name>getFieldSetter</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name><name>TreeMultiset</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    class
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>"rootReference"</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    .
                    <call>
                        <name>set</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>this</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>new
                                    <call>
                                        <name>
                                            <name>Reference</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>
                                                        <name>AvlNode</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>E</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>AvlNode</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>E</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>header</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>
                                    <name>AvlNode</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>E</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>1</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>Serialization</name>.
                            <name>getFieldSetter</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name><name>TreeMultiset</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    class
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>"header"</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    .
                    <call>
                        <name>set</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>this</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>header</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name>successor</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>header</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>header</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <expr_stmt>
                <expr>
                    <call>
                        <name><name>Serialization</name>.
                            <name>populateMultiset</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>this</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>stream</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            }
        </block>
    </function>

    <decl_stmt>
        <decl>
            <type>
                <annotation>@
                    <name>GwtIncompatible</name>
                    <argument_list>("not needed in emulated source")</argument_list>
                </annotation>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier>
                <name>long</name>
            </type>
            <name>serialVersionUID</name> =
            <init>
                <expr>1</expr>
            </init>
        </decl>
        ;
    </decl_stmt>
    }
</unit>
