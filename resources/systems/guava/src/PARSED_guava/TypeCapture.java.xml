<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\reflect\TypeCapture.java">
    <comment type="block">/*
        * Copyright (C) 2012 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>reflect</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkArgument</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>ParameterizedType</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Type</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Captures the actual type of {@code T}.
        *
        * @author Ben Yu
        */
    </comment>
    <class>
        <specifier>abstract</specifier>
        class
        <name>
            <name>TypeCapture</name>
            <argument_list>&lt;
                <argument>
                    <name>T</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <block>{

            <comment type="javadoc">/** Returns the captured type. */</comment>
            <function>
                <type>
                    <specifier>final</specifier>
                    <name>Type</name>
                </type>
                <name>capture</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Type</name>
                            </type>
                            <name>superclass</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getClass</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>getGenericSuperclass</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>superclass</name>
                                            <name>instanceof</name>
                                            <name>ParameterizedType</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"%s isn't parameterized"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>superclass</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>((<name>ParameterizedType</name>) <name>superclass</name>).
                            <call>
                                <name>getActualTypeArguments</name>
                                <argument_list>()</argument_list>
                            </call>
                            <index>[<expr>0</expr>]
                            </index>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
