<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\reflect\TypeVisitor.java">
    <comment type="block">/*
        * Copyright (C) 2013 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>reflect</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.
            <name>Sets</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>GenericArrayType</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>ParameterizedType</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Type</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>TypeVariable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>WildcardType</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Set</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.<name>concurrent</name>.
            <name>NotThreadSafe</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Based on what a {@link Type} is, dispatch it to the corresponding {@code visit*} method. By
        * default, no recursion is done for type arguments or type bounds. But subclasses can opt to do
        * recursion by calling {@link #visit} for any {@code Type} while visitation is in progress. For
        * example, this can be used to reject wildcards or type variables contained in a type as in:
        *
        * &lt;pre&gt; {@code
        * new TypeVisitor() {
        * protected void visitParameterizedType(ParameterizedType t) {
        * visit(t.getOwnerType());
        * visit(t.getActualTypeArguments());
        * }
        * protected void visitGenericArrayType(GenericArrayType t) {
        * visit(t.getGenericComponentType());
        * }
        * protected void visitTypeVariable(TypeVariable&lt;?&gt; t) {
        * throw new IllegalArgumentException("Cannot contain type variable.");
        * }
        * protected void visitWildcardType(WildcardType t) {
        * throw new IllegalArgumentException("Cannot contain wildcard type.");
        * }
        * }.visit(type);}&lt;/pre&gt;
        *
        * &lt;p&gt;One {@code Type} is visited at most once. The second time the same type is visited, it's
        * ignored by {@link #visit}. This avoids infinite recursion caused by recursive type bounds.
        *
        * &lt;p&gt;This class is &lt;em&gt;not&lt;/em&gt; thread safe.
        *
        * @author Ben Yu
        */
    </comment>
    <class>
        <annotation>@
            <name>NotThreadSafe</name>
        </annotation>
        <specifier>abstract</specifier>
        class <name>TypeVisitor</name>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>Set</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Type</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>visited</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Sets</name>.
                                    <name>newHashSet</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Visits the given types. Null types are ignored. This allows subclasses to call
                * {@code visit(parameterizedType.getOwnerType())} safely without having to check nulls.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>final</specifier>
                    <name>void</name>
                </type>
                <name>visit</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type><name>Type</name>...
                            </type>
                            <name>types</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Type</name>
                                </type>
                                <name>type</name> :
                                <range>
                                    <expr>
                                        <name>types</name>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>type</name>
                                        == <name>null</name> || !
                                        <call>
                                            <name><name>visited</name>.
                                                <name>add</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>type</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <comment type="line">// null owner type, or already visited;</comment>
                                        <continue>continue;</continue>
                                        }
                                    </block>
                                </then>
                            </if>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>boolean</name>
                                    </type>
                                    <name>succeeded</name> =
                                    <init>
                                        <expr>false</expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <try>try
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>type</name>
                                                <name>instanceof</name>
                                                <name>TypeVariable</name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <expr_stmt>
                                                    <expr>
                                                        <call>
                                                            <name>visitTypeVariable</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>(
                                                                        <name>
                                                                            <name>TypeVariable</name>
                                                                            <argument_list>&lt;
                                                                                <argument>
                                                                                    <name>?</name>
                                                                                </argument>
                                                                                &gt;
                                                                            </argument_list>
                                                                        </name>
                                                                        )
                                                                        <name>type</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                                }
                                            </block>
                                        </then>
                                        <else>else
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>type</name>
                                                        <name>instanceof</name>
                                                        <name>WildcardType</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <expr_stmt>
                                                            <expr>
                                                                <call>
                                                                    <name>visitWildcardType</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>(<name>WildcardType</name>)
                                                                                <name>type</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                        }
                                                    </block>
                                                </then>
                                                <else>else
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>type</name>
                                                                <name>instanceof</name>
                                                                <name>ParameterizedType</name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <call>
                                                                            <name>visitParameterizedType</name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>(<name>
                                                                                        ParameterizedType</name>)
                                                                                        <name>type</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                }
                                                            </block>
                                                        </then>
                                                        <else>else
                                                            <if>if
                                                                <condition>(
                                                                    <expr>
                                                                        <name>type</name>
                                                                        <name>instanceof</name>
                                                                        <name>Class</name>
                                                                    </expr>
                                                                    )
                                                                </condition>
                                                                <then>
                                                                    <block>{
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <call>
                                                                                    <name>visitClass</name>
                                                                                    <argument_list>(
                                                                                        <argument>
                                                                                            <expr>(
                                                                                                <name>
                                                                                                    <name>Class</name>
                                                                                                    <argument_list>&lt;
                                                                                                        <argument>
                                                                                                            <name>?
                                                                                                            </name>
                                                                                                        </argument>
                                                                                                        &gt;
                                                                                                    </argument_list>
                                                                                                </name>
                                                                                                )
                                                                                                <name>type</name>
                                                                                            </expr>
                                                                                        </argument>
                                                                                        )
                                                                                    </argument_list>
                                                                                </call>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                        }
                                                                    </block>
                                                                </then>
                                                                <else>else
                                                                    <if>if
                                                                        <condition>(
                                                                            <expr>
                                                                                <name>type</name>
                                                                                <name>instanceof</name>
                                                                                <name>GenericArrayType</name>
                                                                            </expr>
                                                                            )
                                                                        </condition>
                                                                        <then>
                                                                            <block>{
                                                                                <expr_stmt>
                                                                                    <expr>
                                                                                        <call>
                                                                                            <name>
                                                                                                visitGenericArrayType
                                                                                            </name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>(<name>
                                                                                                        GenericArrayType</name>)
                                                                                                        <name>type
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                    ;
                                                                                </expr_stmt>
                                                                                }
                                                                            </block>
                                                                        </then>
                                                                        <else>else
                                                                            <block>{
                                                                                <throw>throw
                                                                                    <expr>new
                                                                                        <call>
                                                                                            <name>AssertionError</name>
                                                                                            <argument_list>(
                                                                                                <argument>
                                                                                                    <expr>"Unknown type:
                                                                                                        " +
                                                                                                        <name>type
                                                                                                        </name>
                                                                                                    </expr>
                                                                                                </argument>
                                                                                                )
                                                                                            </argument_list>
                                                                                        </call>
                                                                                    </expr>
                                                                                    ;
                                                                                </throw>
                                                                                }
                                                                            </block>
                                                                        </else>
                                                                    </if>
                                                                </else>
                                                            </if>
                                                        </else>
                                                    </if>
                                                </else>
                                            </if>
                                        </else>
                                    </if>
                                    <expr_stmt>
                                        <expr>
                                            <name>succeeded</name>
                                            = true
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                                <finally>finally
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>!
                                                    <name>succeeded</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <comment type="line">// When the visitation failed, we don't want to
                                                        ignore the second.
                                                    </comment>
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>visited</name>.
                                                                    <name>remove</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>type</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        }
                                    </block>
                                </finally>
                            </try>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <function>
                <type>
                    <name>void</name>
                </type>
                <name>visitClass</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>t</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{}</block>
            </function>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>visitGenericArrayType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>GenericArrayType</name>
                            </type>
                            <name>t</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{}</block>
            </function>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>visitParameterizedType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ParameterizedType</name>
                            </type>
                            <name>t</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{}</block>
            </function>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>visitTypeVariable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>TypeVariable</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>t</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{}</block>
            </function>
            <function>
                <type>
                    <name>void</name>
                </type>
                <name>visitWildcardType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>WildcardType</name>
                            </type>
                            <name>t</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{}</block>
            </function>
            }
        </block>
    </class>
</unit>
