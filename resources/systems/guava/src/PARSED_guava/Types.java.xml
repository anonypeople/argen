<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\reflect\Types.java">
    <comment type="block">/*
        * Copyright (C) 2011 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>reflect</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkArgument</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.<name>Iterables</name>.
            <name>transform</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>VisibleForTesting</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Function</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Joiner</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Objects</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.
            <name>Predicates</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.
            <name>ImmutableList</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.
            <name>ImmutableMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>collect</name>.
            <name>Iterables</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>AnnotatedElement</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Array</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>GenericArrayType</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>GenericDeclaration</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>InvocationHandler</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>InvocationTargetException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Method</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>ParameterizedType</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Proxy</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>Type</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>TypeVariable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>reflect</name>.
            <name>WildcardType</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>security</name>.
            <name>AccessControlException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Arrays</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collection</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>concurrent</name>.<name>atomic</name>.
            <name>AtomicReference</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Utilities for working with {@link Type}.
        *
        * @author Ben Yu
        */
    </comment>
    <class>
        <specifier>final</specifier>
        class <name>Types</name>
        <block>{

            <comment type="javadoc">/** Class#toString without the "class " and "interface " prefixes */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>Function</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Type</name>
                                </argument>
                                ,
                                <argument>
                                    <name>String</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>TYPE_NAME</name> =
                    <init>
                        <expr>new
                            <class>
                                <super>
                                    <name>
                                        <name>Function</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>Type</name>
                                            </argument>
                                            ,
                                            <argument>
                                                <name>String</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </super>
                                <argument_list>()</argument_list>
                                <block>{
                                    <function>
                                        <type>
                                            <annotation>@
                                                <name>Override</name>
                                            </annotation>
                                            <specifier>public</specifier>
                                            <name>String</name>
                                        </type>
                                        <name>apply</name>
                                        <parameter_list>(
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>Type</name>
                                                    </type>
                                                    <name>from</name>
                                                </decl>
                                            </param>
                                            )
                                        </parameter_list>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>JavaVersion</name>.<name>CURRENT</name>.
                                                            <name>typeName</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>from</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </function>
                                    }
                                </block>
                            </class>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>Joiner</name>
                    </type>
                    <name>COMMA_JOINER</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Joiner</name>.
                                    <name>on</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>", "</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>useForNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"null"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Returns the array type of {@code componentType}. */</comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>Type</name>
                </type>
                <name>newArrayType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Type</name>
                            </type>
                            <name>componentType</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>componentType</name>
                                <name>instanceof</name>
                                <name>WildcardType</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>WildcardType</name>
                                        </type>
                                        <name>wildcard</name> =
                                        <init>
                                            <expr>(<name>WildcardType</name>)
                                                <name>componentType</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>Type</name>
                                            <index>[]</index>
                                        </type>
                                        <name>lowerBounds</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>wildcard</name>.
                                                        <name>getLowerBounds</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>checkArgument</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name><name>lowerBounds</name>.
                                                            <name>length</name>
                                                        </name>
                                                        &lt;= 1
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>"Wildcard cannot have more than one lower bounds."</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name><name>lowerBounds</name>.
                                                <name>length</name>
                                            </name>
                                            == 1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name>supertypeOf</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name>newArrayType</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>
                                                                                        <name>lowerBounds</name>
                                                                                        <index>[<expr>0</expr>]
                                                                                        </index>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>Type</name>
                                                        <index>[]</index>
                                                    </type>
                                                    <name>upperBounds</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>wildcard</name>.
                                                                    <name>getUpperBounds</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name>checkArgument</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>upperBounds</name>.
                                                                        <name>length</name>
                                                                    </name>
                                                                    == 1
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>"Wildcard should have only one upper bound."
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name>subtypeOf</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name>newArrayType</name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>
                                                                                    <name>
                                                                                        <name>upperBounds</name>
                                                                                        <index>[<expr>0</expr>]
                                                                                        </index>
                                                                                    </name>
                                                                                </expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <call>
                                <name><name>JavaVersion</name>.<name>CURRENT</name>.
                                    <name>newArrayType</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>componentType</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a type where {@code rawType} is parameterized by
                * {@code arguments} and is owned by {@code ownerType}.
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>ParameterizedType</name>
                </type>
                <name>newParameterizedTypeWithOwner</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Type</name>
                            </type>
                            <name>ownerType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>rawType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type><name>Type</name>...
                            </type>
                            <name>arguments</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>ownerType</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>newParameterizedType</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>rawType</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>arguments</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <comment type="line">// ParameterizedTypeImpl constructor already checks, but we want to throw NPE
                        before IAE
                    </comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>arguments</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>rawType</name>.
                                                    <name>getEnclosingClass</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            !=
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"Owner type for unenclosed %s"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>rawType</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>new
                            <call>
                                <name>ParameterizedTypeImpl</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ownerType</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>rawType</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>arguments</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a type where {@code rawType} is parameterized by
                * {@code arguments}.
                */
            </comment>
            <function>
                <type>
                    <specifier>static</specifier>
                    <name>ParameterizedType</name>
                </type>
                <name>newParameterizedType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>rawType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type><name>Type</name>...
                            </type>
                            <name>arguments</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>ParameterizedTypeImpl</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ClassOwnership</name>.<name>JVM_BEHAVIOR</name>.
                                                    <name>getOwnerType</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>rawType</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>rawType</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>arguments</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/** Decides what owner type to use for constructing {@link ParameterizedType} from a
                raw class. */
            </comment>
            <enum>
                <specifier>private</specifier>
                enum <name>ClassOwnership</name>
                <block>{

                    <expr_stmt>
                        <expr>
                            <name>OWNED_BY_ENCLOSING_CLASS</name>
                            <block>{
                                @
                                <expr>
                                    <name>Nullable</name>
                                    @
                                    <name>Override</name>
                                    <name>
                                        <name>Class</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <call>
                                        <name>getOwnerType</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>Class</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>?</name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                    <name>rawType</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>rawType</name>.
                                                        <name>getEnclosingClass</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                    </block>
                                </expr>
                            </block>
                        </expr>
                    </expr_stmt>
                    }
                </block>
            </enum>
            }
        </block>
    </class>
    ,
    <expr_stmt>
        <expr>
            <name>LOCAL_CLASS_HAS_NO_OWNER</name>
            <block>{
                @
                <expr>
                    <name>Nullable</name>
                    @
                    <name>Override</name>
                    <name>
                        <name>Class</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    <call>
                        <name>getOwnerType</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>
                                        <name>Class</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                    <name>rawType</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <if>if
                            <condition>(
                                <expr>
                                    <call>
                                        <name><name>rawType</name>.
                                            <name>isLocalClass</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                )
                            </condition>
                            <then>
                                <block>{
                                    <return>return
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                        ;
                                    </return>
                                    <expr_stmt/>
                                </block>
                            </then>
                        </if>
                        }
                    </block>
                </expr>
                <else>else
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name><name>rawType</name>.
                                        <name>getEnclosingClass</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        <expr_stmt/>
                    </block>
                </else>
                }
            </block>
        </expr>
    </expr_stmt>
    }
    }
    <empty_stmt>;</empty_stmt>

    <function_decl>
        <type>
            <annotation>@
                <name>Nullable</name>
            </annotation>
            <specifier>abstract</specifier>
            <name>
                <name>Class</name>
                <argument_list>&lt;
                    <argument>
                        <name>?</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>getOwnerType</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Class</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>rawType</name>
                </decl>
            </param>
            )
        </parameter_list>
        ;
    </function_decl>

    <decl_stmt>
        <decl>
            <type>
                <specifier>static</specifier>
                <specifier>final</specifier>
                <name>ClassOwnership</name>
            </type>
            <name>JVM_BEHAVIOR</name> =
            <init>
                <expr>
                    <call>
                        <name>detectJvmBehavior</name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>

    <function>
        <type>
            <specifier>private</specifier>
            <specifier>static</specifier>
            <name>ClassOwnership</name>
        </type>
        <name>detectJvmBehavior</name>
        <parameter_list>()</parameter_list>
        <block>{
            <class>class
                <name>
                    <name>LocalClass</name>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
                <block>{}</block>
            </class>
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>Class</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>subclass</name> =
                    <init>
                        <expr>new
                            <class>
                                <super>
                                    <name>
                                        <name>LocalClass</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>String</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </super>
                                <argument_list>()</argument_list>
                                <block>{}</block>
                            </class>
                            .
                            <call>
                                <name>getClass</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <name>ParameterizedType</name>
                    </type>
                    <name>parameterizedType</name> =
                    <init>
                        <expr>(<name>ParameterizedType</name>)
                            <call>
                                <name><name>subclass</name>.
                                    <name>getGenericSuperclass</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <for>for (
                <init>
                    <decl>
                        <type>
                            <name>ClassOwnership</name>
                        </type>
                        <name>behavior</name> :
                        <range>
                            <expr>
                                <call>
                                    <name><name>ClassOwnership</name>.
                                        <name>values</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </range>
                    </decl>
                </init>
                )
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>behavior</name>.
                                        <name>getOwnerType</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>LocalClass</name>.
                                                    <name>
                                                        <name/>
                                                    </name>
                                                </name>
                                                class
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                ==
                                <call>
                                    <name><name>parameterizedType</name>.
                                        <name>getOwnerType</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>behavior</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </for>
            <throw>throw
                <expr>new
                    <call>
                        <name>AssertionError</name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </throw>
            }
        </block>
    </function>
    }

    <comment type="javadoc">/**
        * Returns a new {@link TypeVariable} that belongs to {@code declaration} with
        * {@code name} and {@code bounds}.
        */
    </comment>
    <function>
        <type>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>D</name>
                    <extends>extends
                        <name>GenericDeclaration</name>
                    </extends>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>TypeVariable</name>
                <argument_list>&lt;
                    <argument>
                        <name>D</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>newArtificialTypeVariable</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>D</name>
                    </type>
                    <name>declaration</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>String</name>
                    </type>
                    <name>name</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type><name>Type</name>...
                    </type>
                    <name>bounds</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name>newTypeVariableImpl</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>declaration</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <name>name</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>(
                                    <name><name>bounds</name>.
                                        <name>length</name>
                                    </name>
                                    == 0)
                                    ? new
                                    <name>
                                        <name>Type</name>
                                        <index>[]</index>
                                    </name>
                                    <block>{
                                        <expr>
                                            <name><name>Object</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class
                                        </expr>
                                        }
                                    </block>
                                    :
                                    <name>bounds</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/** Returns a new {@link WildcardType} with {@code upperBound}. */</comment>
    <function>
        <type>
            <annotation>@
                <name>VisibleForTesting</name>
            </annotation>
            <specifier>static</specifier>
            <name>WildcardType</name>
        </type>
        <name>subtypeOf</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Type</name>
                    </type>
                    <name>upperBound</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>WildcardTypeImpl</name>
                        <argument_list>(
                            <argument>
                                <expr>new
                                    <name>
                                        <name>Type</name>
                                        <index>[<expr>0</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>new
                                    <name>
                                        <name>Type</name>
                                        <index>[]</index>
                                    </name>
                                    <block>{
                                        <expr>
                                            <name>upperBound</name>
                                        </expr>
                                        }
                                    </block>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/** Returns a new {@link WildcardType} with {@code lowerBound}. */</comment>
    <function>
        <type>
            <annotation>@
                <name>VisibleForTesting</name>
            </annotation>
            <specifier>static</specifier>
            <name>WildcardType</name>
        </type>
        <name>supertypeOf</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Type</name>
                    </type>
                    <name>lowerBound</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>new
                    <call>
                        <name>WildcardTypeImpl</name>
                        <argument_list>(
                            <argument>
                                <expr>new
                                    <name>
                                        <name>Type</name>
                                        <index>[]</index>
                                    </name>
                                    <block>{
                                        <expr>
                                            <name>lowerBound</name>
                                        </expr>
                                        }
                                    </block>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>new
                                    <name>
                                        <name>Type</name>
                                        <index>[]</index>
                                    </name>
                                    <block>{
                                        <expr>
                                            <name><name>Object</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class
                                        </expr>
                                        }
                                    </block>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns human readable string representation of {@code type}.
        * &lt;ul&gt;
        * &lt;li&gt; For array type {@code Foo[]}, {@code "com.mypackage.Foo[]"} are
        * returned.
        * &lt;li&gt; For any class, {@code theClass.getName()} are returned.
        * &lt;li&gt; For all other types, {@code type.toString()} are returned.
        * &lt;/ul&gt;
        */
    </comment>
    <function>
        <type>
            <specifier>static</specifier>
            <name>String</name>
        </type>
        <name>toString</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Type</name>
                    </type>
                    <name>type</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>(<name>type</name>
                    <name>instanceof</name>
                    <name>Class</name>)
                    ? ((
                    <name>
                        <name>Class</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                    ) <name>type</name>).
                    <call>
                        <name>getName</name>
                        <argument_list>()</argument_list>
                    </call>
                    :
                    <call>
                        <name><name>type</name>.
                            <name>toString</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <annotation>@
                <name>Nullable</name>
            </annotation>
            <specifier>static</specifier>
            <name>Type</name>
        </type>
        <name>getComponentType</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Type</name>
                    </type>
                    <name>type</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>type</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>final</specifier>
                        <name>
                            <name>AtomicReference</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Type</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>result</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>
                                    <name>AtomicReference</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>Type</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <expr_stmt>
                <expr>new
                    <class>
                        <super>
                            <name>TypeVisitor</name>
                        </super>
                        <argument_list>()</argument_list>
                        <block>{
                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <name>void</name>
                                </type>
                                <name>visitTypeVariable</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>TypeVariable</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>t</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>result</name>.
                                                    <name>set</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>subtypeOfComponentType</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>t</name>.
                                                                                    <name>getBounds</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </function>
                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <name>void</name>
                                </type>
                                <name>visitWildcardType</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>WildcardType</name>
                                            </type>
                                            <name>t</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>result</name>.
                                                    <name>set</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>subtypeOfComponentType</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>t</name>.
                                                                                    <name>getUpperBounds</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </function>
                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <name>void</name>
                                </type>
                                <name>visitGenericArrayType</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>GenericArrayType</name>
                                            </type>
                                            <name>t</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>result</name>.
                                                    <name>set</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>t</name>.
                                                                    <name>getGenericComponentType</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </function>
                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <name>void</name>
                                </type>
                                <name>visitClass</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>Class</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>t</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>result</name>.
                                                    <name>set</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>t</name>.
                                                                    <name>getComponentType</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </class>
                    .
                    <call>
                        <name>visit</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>type</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <return>return
                <expr>
                    <call>
                        <name><name>result</name>.
                            <name>get</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Returns {@code ? extends X} if any of {@code bounds} is a subtype of {@code X[]}; or null
        * otherwise.
        */
    </comment>
    <function>
        <type>
            <annotation>@
                <name>Nullable</name>
            </annotation>
            <specifier>private</specifier>
            <specifier>static</specifier>
            <name>Type</name>
        </type>
        <name>subtypeOfComponentType</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Type</name>
                            <index>[]</index>
                        </name>
                    </type>
                    <name>bounds</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <for>for (
                <init>
                    <decl>
                        <type>
                            <name>Type</name>
                        </type>
                        <name>bound</name> :
                        <range>
                            <expr>
                                <name>bounds</name>
                            </expr>
                        </range>
                    </decl>
                </init>
                )
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Type</name>
                            </type>
                            <name>componentType</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getComponentType</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>bound</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>componentType</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// Only the first bound can be a class or array.</comment>
                                <comment type="line">// Bounds after the first can only be interfaces.</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>componentType</name>
                                            <name>instanceof</name>
                                            <name>Class</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>
                                                            <name>Class</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>?</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                    </type>
                                                    <name>componentClass</name> =
                                                    <init>
                                                        <expr>(
                                                            <name>
                                                                <name>Class</name>
                                                                <argument_list>&lt;
                                                                    <argument>
                                                                        <name>?</name>
                                                                    </argument>
                                                                    &gt;
                                                                </argument_list>
                                                            </name>
                                                            )
                                                            <name>componentType</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <call>
                                                            <name><name>componentClass</name>.
                                                                <name>isPrimitive</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return
                                                            <expr>
                                                                <name>componentClass</name>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <return>return
                                    <expr>
                                        <call>
                                            <name>subtypeOf</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>componentType</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </for>
            <return>return
                <expr>
                    <name>null</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <class>
        <specifier>private</specifier>
        <specifier>static</specifier>
        <specifier>final</specifier> class
        <name>GenericArrayTypeImpl</name>
        <super>
            <implements>implements <name>GenericArrayType</name>,
                <name>Serializable</name>
            </implements>
        </super>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Type</name>
                    </type>
                    <name>componentType</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>GenericArrayTypeImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Type</name>
                            </type>
                            <name>componentType</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>componentType</name>
                            </name>
                            =
                            <call>
                                <name><name>JavaVersion</name>.<name>CURRENT</name>.
                                    <name>usedInGenericType</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>componentType</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>Type</name>
                </type>
                <name>getGenericComponentType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>componentType</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Types</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>componentType</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            + "[]"
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>componentType</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>obj</name>
                                <name>instanceof</name>
                                <name>GenericArrayType</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>GenericArrayType</name>
                                        </type>
                                        <name>that</name> =
                                        <init>
                                            <expr>(<name>GenericArrayType</name>)
                                                <name>obj</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>Objects</name>.
                                                <name>equal</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name>getGenericComponentType</name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>that</name>.
                                                                <name>getGenericComponentType</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            }
        </block>
    </class>

    <class>
        <specifier>private</specifier>
        <specifier>static</specifier>
        <specifier>final</specifier> class
        <name>ParameterizedTypeImpl</name>
        <super>
            <implements>implements <name>ParameterizedType</name>,
                <name>Serializable</name>
            </implements>
        </super>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Type</name>
                    </type>
                    <name>ownerType</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>ImmutableList</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Type</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>argumentsList</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>Class</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>rawType</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>ParameterizedTypeImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Type</name>
                            </type>
                            <name>ownerType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Class</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>rawType</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Type</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>typeArguments</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>rawType</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>typeArguments</name>.
                                                <name>length</name>
                                            </name>
                                            ==
                                            <call>
                                                <name><name>rawType</name>.
                                                    <name>getTypeParameters</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <name>length</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>disallowPrimitiveType</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>typeArguments</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"type parameter"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>ownerType</name>
                            </name>
                            =
                            <name>ownerType</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>rawType</name>
                            </name>
                            =
                            <name>rawType</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>argumentsList</name>
                            </name>
                            =
                            <call>
                                <name><name>JavaVersion</name>.<name>CURRENT</name>.
                                    <name>usedInGenericType</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>typeArguments</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>Type</name>
                    <index>[]</index>
                </type>
                <name>getActualTypeArguments</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toArray</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>argumentsList</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>Type</name>
                </type>
                <name>getRawType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>rawType</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>Type</name>
                </type>
                <name>getOwnerType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>ownerType</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuilder</name>
                            </type>
                            <name>builder</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuilder</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>ownerType</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>builder</name>.
                                                <name>append</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>JavaVersion</name>.<name>CURRENT</name>.
                                                                <name>typeName</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>ownerType</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        .
                                        <call>
                                            <name>append</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>'.'</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>rawType</name>.
                                                    <name>getName</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>append</name>
                                <argument_list>(
                                    <argument>
                                        <expr>'&lt;'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>append</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>COMMA_JOINER</name>.
                                                    <name>join</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>transform</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>argumentsList</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>TYPE_NAME</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            .
                            <call>
                                <name>append</name>
                                <argument_list>(
                                    <argument>
                                        <expr>'&gt;'</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>ownerType</name> == <name>null</name> ? 0 :
                            <call>
                                <name><name>ownerType</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            )
                            ^
                            <call>
                                <name><name>argumentsList</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ^
                            <call>
                                <name><name>rawType</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>other</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>!(<name>other</name>
                                <name>instanceof</name>
                                <name>ParameterizedType</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ParameterizedType</name>
                            </type>
                            <name>that</name> =
                            <init>
                                <expr>(<name>ParameterizedType</name>)
                                    <name>other</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>getRawType</name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>equals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>that</name>.
                                                    <name>getRawType</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &amp;&amp;
                            <call>
                                <name><name>Objects</name>.
                                    <name>equal</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getOwnerType</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>that</name>.
                                                    <name>getOwnerType</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &amp;&amp;
                            <call>
                                <name><name>Arrays</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>getActualTypeArguments</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>that</name>.
                                                    <name>getActualTypeArguments</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            }
        </block>
    </class>

    <function>
        <type>
            <specifier>private</specifier>
            <specifier>static</specifier>
            <argument_list>&lt;
                <argument>
                    <name>D</name>
                    <extends>extends
                        <name>GenericDeclaration</name>
                    </extends>
                </argument>
                &gt;
            </argument_list>
            <name>
                <name>TypeVariable</name>
                <argument_list>&lt;
                    <argument>
                        <name>D</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>newTypeVariableImpl</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>D</name>
                    </type>
                    <name>genericDeclaration</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>String</name>
                    </type>
                    <name>name</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Type</name>
                            <index>[]</index>
                        </name>
                    </type>
                    <name>bounds</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name>
                            <name>TypeVariableImpl</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>D</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>typeVariableImpl</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>
                                    <name>TypeVariableImpl</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>D</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>genericDeclaration</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>bounds</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <annotation>@
                            <name>SuppressWarnings</name>
                            <argument_list>("unchecked")</argument_list>
                        </annotation>
                        <name>
                            <name>TypeVariable</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>D</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>typeVariable</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Reflection</name>.
                                    <name>newProxy</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>TypeVariable</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>TypeVariableInvocationHandler</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>typeVariableImpl</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <return>return
                <expr>
                    <name>typeVariable</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="javadoc">/**
        * Invocation handler to work around a compatibility problem between Java 7 and Java 8.
        *
        * &lt;p&gt;Java 8 introduced a new method {@code getAnnotatedBounds()} in the {@link TypeVariable}
        * interface, whose return type {@code AnnotatedType[]} is also new in Java 8. That means that we
        * cannot implement that interface in source code in a way that will compile on both Java 7 and
        * Java 8. If we include the {@code getAnnotatedBounds()} method then its return type means
        * it won't compile on Java 7, while if we don't include the method then the compiler will
        * complain that an abstract method is unimplemented. So instead we use a dynamic proxy to
        * get an implementation. If the method being called on the {@code TypeVariable} instance has
        * the same name as one of the public methods of {@link TypeVariableImpl}, the proxy calls
        * the same method on its instance of {@code TypeVariableImpl}. Otherwise it throws {@link
        * UnsupportedOperationException}; this should only apply to {@code getAnnotatedBounds()}. This
        * does mean that users on Java 8 who obtain an instance of {@code TypeVariable} from {@link
        * TypeResolver#resolveType} will not be able to call {@code getAnnotatedBounds()} on it, but that
        * should hopefully be rare.
        *
        * &lt;p&gt;This workaround should be removed at a distant future time when we no longer support Java
        * versions earlier than 8.
        */
    </comment>
    <class>
        <specifier>private</specifier>
        <specifier>static</specifier>
        <specifier>final</specifier> class <name>TypeVariableInvocationHandler</name>
        <super>
            <implements>implements
                <name>InvocationHandler</name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>ImmutableMap</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>String</name>
                                </argument>
                                ,
                                <argument>
                                    <name>Method</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>typeVariableMethods</name>
                </decl>
                ;
            </decl_stmt>
            static
            <block>{
                <decl_stmt>
                    <decl>
                        <type>
                            <name><name>ImmutableMap</name>.
                                <name>
                                    <name>Builder</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>String</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>Method</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </name>
                        </type>
                        <name>builder</name> =
                        <init>
                            <expr>
                                <call>
                                    <name><name>ImmutableMap</name>.
                                        <name>builder</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </init>
                    </decl>
                    ;
                </decl_stmt>
                <for>for (
                    <init>
                        <decl>
                            <type>
                                <name>Method</name>
                            </type>
                            <name>method</name> :
                            <range>
                                <expr>
                                    <name><name>TypeVariableImpl</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    class.
                                    <call>
                                        <name>getMethods</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </range>
                        </decl>
                    </init>
                    )
                    <block>{
                        <if>if
                            <condition>(
                                <expr>
                                    <call>
                                        <name><name>method</name>.
                                            <name>getDeclaringClass</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>equals</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>TypeVariableImpl</name>.
                                                        <name>
                                                            <name/>
                                                        </name>
                                                    </name>
                                                    class
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                )
                            </condition>
                            <then>
                                <block>{
                                    <try>try
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>method</name>.
                                                            <name>setAccessible</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>true</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                        <catch>catch (
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>AccessControlException</name>
                                                    </type>
                                                    <name>e</name>
                                                </decl>
                                            </param>
                                            )
                                            <block>{
                                                <comment type="line">// OK: the method is accessible to us anyway. The
                                                    setAccessible call is only for
                                                </comment>
                                                <comment type="line">// unusual execution environments where that might
                                                    not be true.
                                                </comment>
                                                }
                                            </block>
                                        </catch>
                                    </try>
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>builder</name>.
                                                    <name>put</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>method</name>.
                                                                    <name>getName</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>method</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </then>
                        </if>
                        }
                    </block>
                </for>
                <expr_stmt>
                    <expr>
                        <name>typeVariableMethods</name>
                        =
                        <call>
                            <name><name>builder</name>.
                                <name>build</name>
                            </name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                }
            </block>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>TypeVariableImpl</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>typeVariableImpl</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>TypeVariableInvocationHandler</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>TypeVariableImpl</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>?</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>typeVariableImpl</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>typeVariableImpl</name>
                            </name>
                            =
                            <name>typeVariableImpl</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>invoke</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>proxy</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Method</name>
                            </type>
                            <name>method</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Object</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>args</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>Throwable</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>methodName</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>method</name>.
                                            <name>getName</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Method</name>
                            </type>
                            <name>typeVariableMethod</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>typeVariableMethods</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>methodName</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>typeVariableMethod</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>UnsupportedOperationException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>methodName</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <try>try
                                    <block>{
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name><name>typeVariableMethod</name>.
                                                        <name>invoke</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>typeVariableImpl</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>args</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                    <catch>catch (
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>InvocationTargetException</name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            <throw>throw
                                                <expr>
                                                    <call>
                                                        <name><name>e</name>.
                                                            <name>getCause</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </catch>
                                </try>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <specifier>private</specifier>
        <specifier>static</specifier>
        <specifier>final</specifier> class
        <name>
            <name>TypeVariableImpl</name>
            <argument_list>&lt;
                <argument>
                    <name>D</name>
                    <extends>extends
                        <name>GenericDeclaration</name>
                    </extends>
                </argument>
                &gt;
            </argument_list>
        </name>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>D</name>
                    </type>
                    <name>genericDeclaration</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>String</name>
                    </type>
                    <name>name</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>ImmutableList</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Type</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>bounds</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>TypeVariableImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>D</name>
                            </type>
                            <name>genericDeclaration</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Type</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>bounds</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>disallowPrimitiveType</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bounds</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"bound for type variable"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>genericDeclaration</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>genericDeclaration</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>name</name>
                            </name>
                            =
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>bounds</name>
                            </name>
                            =
                            <call>
                                <name><name>ImmutableList</name>.
                                    <name>copyOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bounds</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Type</name>
                    <index>[]</index>
                </type>
                <name>getBounds</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toArray</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bounds</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>D</name>
                </type>
                <name>getGenericDeclaration</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>genericDeclaration</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getName</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>name</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getTypeName</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>name</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>name</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>genericDeclaration</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ^
                            <call>
                                <name><name>name</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>NativeTypeVariableEquals</name>.
                                    <name>NATIVE_TYPE_VARIABLE_ONLY</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// equal only to our TypeVariable implementation with identical
                                    bounds
                                </comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>obj</name>
                                            !=
                                            <name>null</name>
                                            &amp;&amp;
                                            <call>
                                                <name><name>Proxy</name>.
                                                    <name>isProxyClass</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>obj</name>.
                                                                    <name>getClass</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            &amp;&amp;
                                            <call>
                                                <name><name>Proxy</name>.
                                                    <name>getInvocationHandler</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>obj</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            <name>instanceof</name>
                                            <name>TypeVariableInvocationHandler</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>TypeVariableInvocationHandler</name>
                                                    </type>
                                                    <name>typeVariableInvocationHandler</name> =
                                                    <init>
                                                        <expr>(<name>TypeVariableInvocationHandler</name>)
                                                            <call>
                                                                <name><name>Proxy</name>.
                                                                    <name>getInvocationHandler</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>obj</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>
                                                            <name>TypeVariableImpl</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>?</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                    </type>
                                                    <name>that</name> =
                                                    <init>
                                                        <expr>
                                                            <name><name>typeVariableInvocationHandler</name>.
                                                                <name>typeVariableImpl</name>
                                                            </name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>name</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>that</name>.
                                                                            <name>getName</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    &amp;&amp;
                                                    <call>
                                                        <name><name>genericDeclaration</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>that</name>.
                                                                            <name>getGenericDeclaration</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    &amp;&amp;
                                                    <call>
                                                        <name><name>bounds</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>that</name>.
                                                                        <name>bounds</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <comment type="line">// equal to any TypeVariable implementation regardless of bounds
                                </comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>obj</name>
                                            <name>instanceof</name>
                                            <name>TypeVariable</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>
                                                            <name>TypeVariable</name>
                                                            <argument_list>&lt;
                                                                <argument>
                                                                    <name>?</name>
                                                                </argument>
                                                                &gt;
                                                            </argument_list>
                                                        </name>
                                                    </type>
                                                    <name>that</name> =
                                                    <init>
                                                        <expr>(
                                                            <name>
                                                                <name>TypeVariable</name>
                                                                <argument_list>&lt;
                                                                    <argument>
                                                                        <name>?</name>
                                                                    </argument>
                                                                    &gt;
                                                                </argument_list>
                                                            </name>
                                                            )
                                                            <name>obj</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>name</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>that</name>.
                                                                            <name>getName</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                    &amp;&amp;
                                                    <call>
                                                        <name><name>genericDeclaration</name>.
                                                            <name>equals</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>that</name>.
                                                                            <name>getGenericDeclaration</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>
            }
        </block>
    </class>

    <class>
        <specifier>static</specifier>
        <specifier>final</specifier> class <name>WildcardTypeImpl</name>
        <super>
            <implements>implements <name>WildcardType</name>,
                <name>Serializable</name>
            </implements>
        </super>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>ImmutableList</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Type</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>lowerBounds</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>
                            <name>ImmutableList</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Type</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>upperBounds</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <name>WildcardTypeImpl</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Type</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>lowerBounds</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Type</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>upperBounds</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>disallowPrimitiveType</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>lowerBounds</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"lower bound for wildcard"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>disallowPrimitiveType</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>upperBounds</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"upper bound for wildcard"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>lowerBounds</name>
                            </name>
                            =
                            <call>
                                <name><name>JavaVersion</name>.<name>CURRENT</name>.
                                    <name>usedInGenericType</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>lowerBounds</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>upperBounds</name>
                            </name>
                            =
                            <call>
                                <name><name>JavaVersion</name>.<name>CURRENT</name>.
                                    <name>usedInGenericType</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>upperBounds</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>Type</name>
                    <index>[]</index>
                </type>
                <name>getLowerBounds</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toArray</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>lowerBounds</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>Type</name>
                    <index>[]</index>
                </type>
                <name>getUpperBounds</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toArray</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>upperBounds</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>obj</name>
                                <name>instanceof</name>
                                <name>WildcardType</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>WildcardType</name>
                                        </type>
                                        <name>that</name> =
                                        <init>
                                            <expr>(<name>WildcardType</name>)
                                                <name>obj</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <call>
                                            <name><name>lowerBounds</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>Arrays</name>.
                                                                <name>asList</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>that</name>.
                                                                                <name>getLowerBounds</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        &amp;&amp;
                                        <call>
                                            <name><name>upperBounds</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>Arrays</name>.
                                                                <name>asList</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>that</name>.
                                                                                <name>getUpperBounds</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>lowerBounds</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            ^
                            <call>
                                <name><name>upperBounds</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuilder</name>
                            </type>
                            <name>builder</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"?"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Type</name>
                                </type>
                                <name>lowerBound</name> :
                                <range>
                                    <expr>
                                        <name>lowerBounds</name>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>builder</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>" super "</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>JavaVersion</name>.<name>CURRENT</name>.
                                                            <name>typeName</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>lowerBound</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>Type</name>
                                </type>
                                <name>upperBound</name> :
                                <range>
                                    <expr>
                                        <call>
                                            <name>filterUpperBounds</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>upperBounds</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>builder</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>" extends "</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>JavaVersion</name>.<name>CURRENT</name>.
                                                            <name>typeName</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>upperBound</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            }
        </block>
    </class>

    <function>
        <type>
            <specifier>private</specifier>
            <specifier>static</specifier>
            <name>Type</name>
            <index>[]</index>
        </type>
        <name>toArray</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Collection</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Type</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>types</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>types</name>.
                            <name>toArray</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>new
                                    <name>
                                        <name>Type</name>
                                        <index>[
                                            <expr>
                                                <call>
                                                    <name><name>types</name>.
                                                        <name>size</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>private</specifier>
            <specifier>static</specifier>
            <name>
                <name>Iterable</name>
                <argument_list>&lt;
                    <argument>
                        <name>Type</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>filterUpperBounds</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Iterable</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>Type</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>bounds</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>Iterables</name>.
                            <name>filter</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>bounds</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>
                                    <call>
                                        <name><name>Predicates</name>.
                                            <name>not</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>Predicates</name>.
                                                        <name>
                                                            <name/>
                                                        </name>
                                                    </name>
                                                    &lt;<name>Type</name>&gt;
                                                    <call>
                                                        <name>equalTo</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>Object</name>.
                                                                        <name>
                                                                            <name/>
                                                                        </name>
                                                                    </name>
                                                                    class
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>private</specifier>
            <specifier>static</specifier>
            <name>void</name>
        </type>
        <name>disallowPrimitiveType</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Type</name>
                            <index>[]</index>
                        </name>
                    </type>
                    <name>types</name>
                </decl>
            </param>
            ,
            <param>
                <decl>
                    <type>
                        <name>String</name>
                    </type>
                    <name>usedAs</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <for>for (
                <init>
                    <decl>
                        <type>
                            <name>Type</name>
                        </type>
                        <name>type</name> :
                        <range>
                            <expr>
                                <name>types</name>
                            </expr>
                        </range>
                    </decl>
                </init>
                )
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>type</name>
                                <name>instanceof</name>
                                <name>Class</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>
                                                <name>Class</name>
                                                <argument_list>&lt;
                                                    <argument>
                                                        <name>?</name>
                                                    </argument>
                                                    &gt;
                                                </argument_list>
                                            </name>
                                        </type>
                                        <name>cls</name> =
                                        <init>
                                            <expr>(
                                                <name>
                                                    <name>Class</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                                )
                                                <name>type</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>checkArgument</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>!
                                                        <call>
                                                            <name><name>cls</name>.
                                                                <name>isPrimitive</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>"Primitive type '%s' used as %s"</expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>cls</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>usedAs</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </for>
            }
        </block>
    </function>

    <comment type="javadoc">/** Returns the {@code Class} object of arrays with {@code componentType}. */</comment>
    <function>
        <type>
            <specifier>static</specifier>
            <name>
                <name>Class</name>
                <argument_list>&lt;
                    <argument>
                        <name>?</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>getArrayClass</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Class</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>?</name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>componentType</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <comment type="line">// TODO(user): This is not the most efficient way to handle generic</comment>
            <comment type="line">// arrays, but is there another way to extract the array class in a</comment>
            <comment type="line">// non-hacky way (i.e. using String value class names- "[L...")?</comment>
            <return>return
                <expr>
                    <call>
                        <name><name>Array</name>.
                            <name>newInstance</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>componentType</name>
                                </expr>
                            </argument>
                            ,
                            <argument>
                                <expr>0</expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    .
                    <call>
                        <name>getClass</name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <comment type="line">// TODO(benyu): Once we are on Java 8, delete this abstraction</comment>
    <enum>enum <name>JavaVersion</name>
        <block>{

            <expr_stmt>
                <expr>
                    <name>JAVA6</name>
                    <block>{
                        @
                        <expr>
                            <name>Override</name>
                            <name>GenericArrayType</name>
                            <call>
                                <name>newArrayType</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>Type</name>
                                            <name>componentType</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            <block>{
                                <return>return
                                    <expr>new
                                        <call>
                                            <name>GenericArrayTypeImpl</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>componentType</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </block>
                        </expr>
                    </block>
                </expr>
            </expr_stmt>
            }
        </block>
    </enum>
    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <name>Type</name>
        </type>
        <name>usedInGenericType</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Type</name>
                    </type>
                    <name>type</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <expr_stmt>
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>type</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </expr_stmt>
            <if>if
                <condition>(
                    <expr>
                        <name>type</name>
                        <name>instanceof</name>
                        <name>Class</name>
                    </expr>
                    )
                </condition>
                <then>
                    <block>{
                        <decl_stmt>
                            <decl>
                                <type>
                                    <name>
                                        <name>Class</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>?</name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </type>
                                <name>cls</name> =
                                <init>
                                    <expr>(
                                        <name>
                                            <name>Class</name>
                                            <argument_list>&lt;
                                                <argument>
                                                    <name>?</name>
                                                </argument>
                                                &gt;
                                            </argument_list>
                                        </name>
                                        )
                                        <name>type</name>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </decl_stmt>
                        <if>if
                            <condition>(
                                <expr>
                                    <call>
                                        <name><name>cls</name>.
                                            <name>isArray</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                )
                            </condition>
                            <then>
                                <block>{
                                    <return>return
                                        <expr>new
                                            <call>
                                                <name>GenericArrayTypeImpl</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>cls</name>.
                                                                    <name>getComponentType</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </then>
                        </if>
                        }
                    </block>
                </then>
            </if>
            <return>return
                <expr>
                    <name>type</name>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    },
    <expr_stmt>
        <expr>
            <name>JAVA7</name>
            <block>{
                @
                <expr>
                    <name>Override</name>
                    <name>Type</name>
                    <call>
                        <name>newArrayType</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>Type</name>
                                    <name>componentType</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <if>if
                            <condition>(
                                <expr>
                                    <name>componentType</name>
                                    <name>instanceof</name>
                                    <name>Class</name>
                                </expr>
                                )
                            </condition>
                            <then>
                                <block>{
                                    <return>return
                                        <expr>
                                            <call>
                                                <name>getArrayClass</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>(
                                                            <name>
                                                                <name>Class</name>
                                                                <argument_list>&lt;
                                                                    <argument>
                                                                        <name>?</name>
                                                                    </argument>
                                                                    &gt;
                                                                </argument_list>
                                                            </name>
                                                            )
                                                            <name>componentType</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    <expr_stmt/>
                                </block>
                            </then>
                        </if>
                        }
                    </block>
                </expr>
                <else>else
                    <block>{
                        <return>return
                            <expr>new
                                <call>
                                    <name>GenericArrayTypeImpl</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>componentType</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                        <expr_stmt/>
                    </block>
                </else>
                }
            </block>
        </expr>
    </expr_stmt>
    }
    @
    <function>
        <type>
            <name>Override</name>
            <name>Type</name>
        </type>
        <name>usedInGenericType</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Type</name>
                    </type>
                    <name>type</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name>checkNotNull</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>type</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    },
    <expr_stmt>
        <expr>
            <name>JAVA8</name>
            <block>{
                @
                <expr>
                    <name>Override</name>
                    <name>Type</name>
                    <call>
                        <name>newArrayType</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>Type</name>
                                    <name>componentType</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                    <block>{
                        <return>return
                            <expr>
                                <call>
                                    <name><name>JAVA7</name>.
                                        <name>newArrayType</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>componentType</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </return>
                    </block>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    }
    @
    <function>
        <type>
            <name>Override</name>
            <name>Type</name>
        </type>
        <name>usedInGenericType</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Type</name>
                    </type>
                    <name>type</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>JAVA7</name>.
                            <name>usedInGenericType</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>type</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    <function>
        <type>
            <annotation>@
                <name>Override</name>
            </annotation>
            <name>String</name>
        </type>
        <name>typeName</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Type</name>
                    </type>
                    <name>type</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <try>try
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Method</name>
                            </type>
                            <name>getTypeName</name> =
                            <init>
                                <expr>
                                    <name><name>Type</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    class.
                                    <call>
                                        <name>getMethod</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"getTypeName"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>(<name>String</name>)
                            <call>
                                <name><name>getTypeName</name>.
                                    <name>invoke</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>type</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
                <catch>catch (
                    <param>
                        <decl>
                            <type>
                                <name>NoSuchMethodException</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                    <block>{
                        <throw>throw
                            <expr>new
                                <call>
                                    <name>AssertionError</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"Type.getTypeName should be available in Java 8"</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </throw>
                        }
                    </block>
                </catch>
                <catch>catch (
                    <param>
                        <decl>
                            <type>
                                <name>InvocationTargetException</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                    <block>{
                        <throw>throw
                            <expr>new
                                <call>
                                    <name>RuntimeException</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>e</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </throw>
                        }
                    </block>
                </catch>
                <catch>catch (
                    <param>
                        <decl>
                            <type>
                                <name>IllegalAccessException</name>
                            </type>
                            <name>e</name>
                        </decl>
                    </param>
                    )
                    <block>{
                        <throw>throw
                            <expr>new
                                <call>
                                    <name>RuntimeException</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>e</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </throw>
                        }
                    </block>
                </catch>
            </try>
            }
        </block>
    </function>
    }
    ;

    <decl_stmt>
        <decl>
            <type>
                <specifier>static</specifier>
                <specifier>final</specifier>
                <name>JavaVersion</name>
            </type>
            <name>CURRENT</name>
        </decl>
        ;
    </decl_stmt>
    static
    <block>{
        <if>if
            <condition>(
                <expr>
                    <name><name>AnnotatedElement</name>.
                        <name>
                            <name/>
                        </name>
                    </name>
                    class.
                    <call>
                        <name>isAssignableFrom</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name><name>TypeVariable</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    class
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                )
            </condition>
            <then>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>CURRENT</name>
                            =
                            <name>JAVA8</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </then>
            <else>else
                <if>if
                    <condition>(
                        <expr>new
                            <class>
                                <super>
                                    <name>
                                        <name>TypeCapture</name>
                                        <argument_list>&lt;
                                            <argument>
                                                <name>
                                                    <name>int</name>
                                                    <index>[]</index>
                                                </name>
                                            </argument>
                                            &gt;
                                        </argument_list>
                                    </name>
                                </super>
                                <argument_list>()</argument_list>
                            </class>
                        </expr>
                    </condition>
                    <then>
                        <block>{}</block>
                    </then>
                </if>
            </else>
        </if>
        <expr_stmt>
            <expr>.
                <call>
                    <name>capture</name>
                    <argument_list>()</argument_list>
                </call>
                <name>instanceof</name>
                <name>Class</name>
            </expr>
        </expr_stmt>
        )
    </block>
    <block>{
        <expr_stmt>
            <expr>
                <name>CURRENT</name>
                =
                <name>JAVA7</name>
            </expr>
            ;
        </expr_stmt>
        }
    </block>
    <else>else
        <block>{
            <expr_stmt>
                <expr>
                    <name>CURRENT</name>
                    =
                    <name>JAVA6</name>
                </expr>
                ;
            </expr_stmt>
            }
        </block>
    </else>
    }

    abstract
    <function_decl>
        <type>
            <name>Type</name>
        </type>
        <name>newArrayType</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Type</name>
                    </type>
                    <name>componentType</name>
                </decl>
            </param>
            )
        </parameter_list>
        ;
    </function_decl>
    <function_decl>
        <type>
            <specifier>abstract</specifier>
            <name>Type</name>
        </type>
        <name>usedInGenericType</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Type</name>
                    </type>
                    <name>type</name>
                </decl>
            </param>
            )
        </parameter_list>
        ;
    </function_decl>
    <function>
        <type>
            <name>String</name>
        </type>
        <name>typeName</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>Type</name>
                    </type>
                    <name>type</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <return>return
                <expr>
                    <call>
                        <name><name>Types</name>.
                            <name>toString</name>
                        </name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <name>type</name>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>final</specifier>
            <name>
                <name>ImmutableList</name>
                <argument_list>&lt;
                    <argument>
                        <name>Type</name>
                    </argument>
                    &gt;
                </argument_list>
            </name>
        </type>
        <name>usedInGenericType</name>
        <parameter_list>(
            <param>
                <decl>
                    <type>
                        <name>
                            <name>Type</name>
                            <index>[]</index>
                        </name>
                    </type>
                    <name>types</name>
                </decl>
            </param>
            )
        </parameter_list>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <name><name>ImmutableList</name>.
                            <name>
                                <name>Builder</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>Type</name>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </name>
                    </type>
                    <name>builder</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>ImmutableList</name>.
                                    <name>builder</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <for>for (
                <init>
                    <decl>
                        <type>
                            <name>Type</name>
                        </type>
                        <name>type</name> :
                        <range>
                            <expr>
                                <name>types</name>
                            </expr>
                        </range>
                    </decl>
                </init>
                )
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>add</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>usedInGenericType</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>type</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </for>
            <return>return
                <expr>
                    <call>
                        <name><name>builder</name>.
                            <name>build</name>
                        </name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
                ;
            </return>
            }
        </block>
    </function>
    }

    <comment type="javadoc">/**
        * Per https://code.google.com/p/guava-libraries/issues/detail?id=1635,
        * In JDK 1.7.0_51-b13, TypeVariableImpl.equals() is changed to no longer be equal to custom
        * TypeVariable implementations. As a result, we need to make sure our TypeVariable implementation
        * respects symmetry.
        * Moreover, we don't want to reconstruct a native type variable &lt;A&gt; using our implementation
        * unless some of its bounds have changed in resolution. This avoids creating unequal TypeVariable
        * implementation unnecessarily. When the bounds do change, however, it's fine for the synthetic
        * TypeVariable to be unequal to any native TypeVariable anyway.
        */
    </comment>
    <class>
        <specifier>static</specifier>
        <specifier>final</specifier> class
        <name>
            <name>NativeTypeVariableEquals</name>
            <argument_list>&lt;
                <argument>
                    <name>X</name>
                </argument>
                &gt;
            </argument_list>
        </name>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>NATIVE_TYPE_VARIABLE_ONLY</name> =
                    <init>
                        <expr>!
                            <name><name>NativeTypeVariableEquals</name>.
                                <name>
                                    <name/>
                                </name>
                            </name>
                            class.
                            <call>
                                <name>getTypeParameters</name>
                                <argument_list>()</argument_list>
                            </call>
                            <index>[<expr>0</expr>]
                            </index>
                            .
                            <call>
                                <name>equals</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>newArtificialTypeVariable</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>NativeTypeVariableEquals</name>.
                                                                <name>
                                                                    <name/>
                                                                </name>
                                                            </name>
                                                            class
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>"X"</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            }
        </block>
    </class>

    <constructor>
        <specifier>private</specifier>
        <name>Types</name>
        <parameter_list>()</parameter_list>
        <block>{}</block>
    </constructor>
    }
</unit>
