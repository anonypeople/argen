<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\primitives\UnsignedBytes.java">
    <comment type="block">/*
        * Copyright (C) 2009 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>primitives</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkArgument</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>VisibleForTesting</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>sun</name>.<name>misc</name>.
            <name>Unsafe</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>nio</name>.
            <name>ByteOrder</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Comparator</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>CheckReturnValue</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Static utility methods pertaining to {@code byte} primitives that interpret
        * values as &lt;i&gt;unsigned&lt;/i&gt; (that is, any negative value {@code b} is treated
        * as the positive value {@code 256 + b}). The corresponding methods that treat
        * the values as signed are found in {@link SignedBytes}, and the methods for
        * which signedness is not an issue are in {@link Bytes}.
        *
        * &lt;p&gt;See the Guava User Guide article on &lt;a href=
        * "https://github.com/google/guava/wiki/PrimitivesExplained"&gt;
        * primitive utilities&lt;/a&gt;.
        *
        * @author Kevin Bourrillion
        * @author Martin Buchholz
        * @author Hiroshi Yamauchi
        * @author Louis Wasserman
        * @since 1.0
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>UnsignedBytes</name>
        <block>{
            <constructor>
                <specifier>private</specifier>
                <name>UnsignedBytes</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <comment type="javadoc">/**
                * The largest power of two that can be represented as an unsigned {@code
                * byte}.
                *
                * @since 10.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>MAX_POWER_OF_TWO</name> =
                    <init>
                        <expr>(<name>byte</name>) 0x80
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The largest value that fits into an unsigned byte.
                *
                * @since 13.0
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>byte</name>
                    </type>
                    <name>MAX_VALUE</name> =
                    <init>
                        <expr>(<name>byte</name>) 0xFF
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>UNSIGNED_MASK</name> =
                    <init>
                        <expr>0xFF</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Returns the value of the given byte as an integer, when treated as
                * unsigned. That is, returns {@code value + 256} if {@code value} is
                * negative; {@code value} itself otherwise.
                *
                * @since 6.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>toInt</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>value</name>
                            &amp;
                            <name>UNSIGNED_MASK</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the {@code byte} value that, when treated as unsigned, is equal to
                * {@code value}, if possible.
                *
                * @param value a value between 0 and 255 inclusive
                * @return the {@code byte} value that, when treated as unsigned, equals
                * {@code value}
                * @throws IllegalArgumentException if {@code value} is negative or greater
                * than 255
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                </type>
                <name>checkedCast</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>(<name>value</name> &gt;&gt;
                                <name><name>Byte</name>.
                                    <name>SIZE</name>
                                </name>
                                ) != 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// don't use checkArgument here, to avoid boxing</comment>
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Out of range: " +
                                                        <name>value</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(<name>byte</name>)
                            <name>value</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the {@code byte} value that, when treated as unsigned, is nearest
                * in value to {@code value}.
                *
                * @param value any {@code long} value
                * @return {@code (byte) 255} if {@code value &gt;= 255}, {@code (byte) 0} if
                * {@code value &lt;= 0}, and {@code value} cast to {@code byte} otherwise
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                </type>
                <name>saturatedCast</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                &gt;
                                <call>
                                    <name>toInt</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>MAX_VALUE</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>MAX_VALUE</name>
                                    </expr>
                                    ;
                                </return>
                                <comment type="line">// -1</comment>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>value</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>(<name>byte</name>) 0
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>(<name>byte</name>)
                            <name>value</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Compares the two specified {@code byte} values, treating them as unsigned
                * values between 0 and 255 inclusive. For example, {@code (byte) -127} is
                * considered greater than {@code (byte) 127} because it is seen as having
                * the value of positive {@code 129}.
                *
                * @param a the first {@code byte} to compare
                * @param b the second {@code byte} to compare
                * @return a negative value if {@code a} is less than {@code b}; a positive
                * value if {@code a} is greater than {@code b}; or zero if they are equal
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>compare</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>a</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toInt</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>a</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            -
                            <call>
                                <name>toInt</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>b</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the least value present in {@code array}.
                *
                * @param array a &lt;i&gt;nonempty&lt;/i&gt; array of {@code byte} values
                * @return the value present in {@code array} that is less than or equal to
                * every other value in the array
                * @throws IllegalArgumentException if {@code array} is empty
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                </type>
                <name>min</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type><name>byte</name>...
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>array</name>.
                                                <name>length</name>
                                            </name>
                                            &gt; 0
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>min</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>toInt</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>array</name>
                                                        <index>[<expr>0</expr>]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>1</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>next</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>toInt</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>
                                                                <name>array</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>next</name>
                                        &lt;
                                        <name>min</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>min</name>
                                                =
                                                <name>next</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>(<name>byte</name>)
                            <name>min</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the greatest value present in {@code array}.
                *
                * @param array a &lt;i&gt;nonempty&lt;/i&gt; array of {@code byte} values
                * @return the value present in {@code array} that is greater than or equal
                * to every other value in the array
                * @throws IllegalArgumentException if {@code array} is empty
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                </type>
                <name>max</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type><name>byte</name>...
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>array</name>.
                                                <name>length</name>
                                            </name>
                                            &gt; 0
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>max</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>toInt</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>array</name>
                                                        <index>[<expr>0</expr>]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>1</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>next</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>toInt</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>
                                                                <name>array</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>next</name>
                                        &gt;
                                        <name>max</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>max</name>
                                                =
                                                <name>next</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>(<name>byte</name>)
                            <name>max</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a string representation of x, where x is treated as unsigned.
                *
                * @since 13.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toString</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>x</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>10</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a string representation of {@code x} for the given radix, where {@code x} is treated
                * as unsigned.
                *
                * @param x the value to convert to a string.
                * @param radix the radix to use while working with {@code x}
                * @throws IllegalArgumentException if {@code radix} is not between {@link Character#MIN_RADIX}
                * and {@link Character#MAX_RADIX}.
                * @since 13.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>byte</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>radix</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>radix</name>
                                            &gt;=
                                            <name><name>Character</name>.
                                                <name>MIN_RADIX</name>
                                            </name>
                                            &amp;&amp; <name>radix</name> &lt;=
                                            <name><name>Character</name>.
                                                <name>MAX_RADIX</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"radix (%s) must be between Character.MIN_RADIX and Character.MAX_RADIX"
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>radix</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// Benchmarks indicate this is probably not worth optimizing.</comment>
                    <return>return
                        <expr>
                            <call>
                                <name><name>Integer</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>toInt</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>x</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>radix</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the unsigned {@code byte} value represented by the given decimal string.
                *
                * @throws NumberFormatException if the string does not contain a valid unsigned {@code byte}
                * value
                * @throws NullPointerException if {@code s} is null
                * (in contrast to {@link Byte#parseByte(String)})
                * @since 13.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                </type>
                <name>parseUnsignedByte</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>string</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>parseUnsignedByte</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>string</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>10</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the unsigned {@code byte} value represented by a string with the given radix.
                *
                * @param string the string containing the unsigned {@code byte} representation to be parsed.
                * @param radix the radix to use while parsing {@code string}
                * @throws NumberFormatException if the string does not contain a valid unsigned {@code byte}
                * with the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX}
                * and {@link Character#MAX_RADIX}.
                * @throws NullPointerException if {@code s} is null
                * (in contrast to {@link Byte#parseByte(String)})
                * @since 13.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Beta</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                </type>
                <name>parseUnsignedByte</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>string</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>radix</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>parse</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Integer</name>.
                                            <name>parseInt</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>checkNotNull</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>string</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>radix</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// We need to throw a NumberFormatException, so we have to duplicate
                        checkedCast. =(
                    </comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>parse</name>
                                &gt;&gt;
                                <name><name>Byte</name>.
                                    <name>SIZE</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>(<name>byte</name>)
                                        <name>parse</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NumberFormatException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"out of range: " +
                                                        <name>parse</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a string containing the supplied {@code byte} values separated by
                * {@code separator}. For example, {@code join(":", (byte) 1, (byte) 2,
                * (byte) 255)} returns the string {@code "1:2:255"}.
                *
                * @param separator the text that should appear between consecutive values in
                * the resulting string (but not at the start or end)
                * @param array an array of {@code byte} values, possibly empty
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>join</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type><name>byte</name>...
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>separator</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>""</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// For pre-sizing a builder, just get the right order of magnitude</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuilder</name>
                            </type>
                            <name>builder</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>array</name>.
                                                        <name>length</name>
                                                    </name>
                                                    * (3 +
                                                    <call>
                                                        <name><name>separator</name>.
                                                            <name>length</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    )
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>toInt</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>
                                                                <name>array</name>
                                                                <index>[<expr>0</expr>]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>1</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>builder</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>separator</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>toString</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>
                                                                        <name>array</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>i</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a comparator that compares two {@code byte} arrays
                * lexicographically. That is, it compares, using {@link
                * #compare(byte, byte)}), the first pair of values that follow any common
                * prefix, or when one array is a prefix of the other, treats the shorter
                * array as the lesser. For example, {@code [] &lt; [0x01] &lt; [0x01, 0x7F] &lt;
                * [0x01, 0x80] &lt; [0x02]}. Values are treated as unsigned.
                *
                * &lt;p&gt;The returned comparator is inconsistent with {@link
                * Object#equals(Object)} (since arrays support only identity equality), but
                * it is consistent with {@link java.util.Arrays#equals(byte[], byte[])}.
                *
                * @see &lt;a href="http://en.wikipedia.org/wiki/Lexicographical_order"&gt;
                * Lexicographical order article at Wikipedia&lt;/a&gt;
                * @since 2.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>
                        <name>Comparator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>byte</name>
                                <index>[]</index>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>lexicographicalComparator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>LexicographicalComparatorHolder</name>.
                                <name>BEST_COMPARATOR</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>VisibleForTesting</name>
                    </annotation>
                    <specifier>static</specifier>
                    <name>
                        <name>Comparator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>byte</name>
                                <index>[]</index>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>lexicographicalComparatorJavaImpl</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>LexicographicalComparatorHolder</name>.<name>PureJavaComparator</name>.
                                <name>INSTANCE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Provides a lexicographical comparator implementation; either a Java
                * implementation or a faster implementation based on {@link Unsafe}.
                *
                * &lt;p&gt;Uses reflection to gracefully fall back to the Java implementation if
                * {@code Unsafe} isn't available.
                */
            </comment>
            <class>
                <annotation>@
                    <name>VisibleForTesting</name>
                </annotation>
                <specifier>static</specifier>
                class <name>LexicographicalComparatorHolder</name>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>String</name>
                            </type>
                            <name>UNSAFE_COMPARATOR_NAME</name> =
                            <init>
                                <expr>
                                    <name><name>LexicographicalComparatorHolder</name>.
                                        <name>
                                            <name/>
                                        </name>
                                    </name>
                                    class.
                                    <call>
                                        <name>getName</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    + "$UnsafeComparator"
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>
                                    <name>Comparator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>byte</name>
                                            <index>[]</index>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>BEST_COMPARATOR</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getBestComparator</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <enum>
                        <annotation>@
                            <name>VisibleForTesting</name>
                        </annotation>
                        enum <name>UnsafeComparator</name>
                        <super>
                            <implements>implements
                                <name>
                                    <name>Comparator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>byte</name>
                                                <index>[]</index>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </implements>
                        </super>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>INSTANCE</name>
                                </expr>
                                ;
                            </expr_stmt>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <specifier>static</specifier>
                                        <specifier>final</specifier>
                                        <name>boolean</name>
                                    </type>
                                    <name>BIG_ENDIAN</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>ByteOrder</name>.
                                                    <name>nativeOrder</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            .
                                            <call>
                                                <name>equals</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>ByteOrder</name>.
                                                                <name>BIG_ENDIAN</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <comment type="block">/*
                                * The following static final fields exist for performance reasons.
                                *
                                * In UnsignedBytesBenchmark, accessing the following objects via static
                                * final fields is the fastest (more than twice as fast as the Java
                                * implementation, vs ~1.5x with non-final static fields, on x86_32)
                                * under the Hotspot server compiler. The reason is obviously that the
                                * non-final fields need to be reloaded inside the loop.
                                *
                                * And, no, defining (final or not) local variables out of the loop still
                                * isn't as good because the null check on the theUnsafe object remains
                                * inside the loop and BYTE_ARRAY_BASE_OFFSET doesn't get
                                * constant-folded.
                                *
                                * The compiler can treat static final fields as compile-time constants
                                * and can constant-fold them while (final or not) local variables are
                                * run time values.
                                */
                            </comment>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <specifier>static</specifier>
                                        <specifier>final</specifier>
                                        <name>Unsafe</name>
                                    </type>
                                    <name>theUnsafe</name>
                                </decl>
                                ;
                            </decl_stmt>

                            <comment type="javadoc">/** The offset to the first element in a byte array. */</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <specifier>static</specifier>
                                        <specifier>final</specifier>
                                        <name>int</name>
                                    </type>
                                    <name>BYTE_ARRAY_BASE_OFFSET</name>
                                </decl>
                                ;
                            </decl_stmt>

                            static
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>theUnsafe</name>
                                        =
                                        <call>
                                            <name>getUnsafe</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <expr_stmt>
                                    <expr>
                                        <name>BYTE_ARRAY_BASE_OFFSET</name>
                                        =
                                        <call>
                                            <name><name>theUnsafe</name>.
                                                <name>arrayBaseOffset</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>
                                                            <name>byte</name>
                                                            <index>[]</index>
                                                        </name>
                                                        .class
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>

                                <comment type="line">// sanity check - this should never fail</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name><name>theUnsafe</name>.
                                                    <name>arrayIndexScale</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>
                                                                <name>byte</name>
                                                                <index>[]</index>
                                                            </name>
                                                            .class
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            != 1
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <throw>throw
                                                <expr>new
                                                    <call>
                                                        <name>AssertionError</name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </throw>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>

                            <comment type="javadoc">/**
                                * Returns a sun.misc.Unsafe. Suitable for use in a 3rd party package.
                                * Replace with a simple call to Unsafe.getUnsafe when integrating
                                * into a jdk.
                                *
                                * @return a sun.misc.Unsafe
                                */
                            </comment>
                            <function>
                                <type>
                                    <specifier>private</specifier>
                                    <specifier>static</specifier>
                                    <name><name>sun</name>.<name>misc</name>.
                                        <name>Unsafe</name>
                                    </name>
                                </type>
                                <name>getUnsafe</name>
                                <parameter_list>()</parameter_list>
                                <block>{
                                    <try>try
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>sun</name>.<name>misc</name>.<name>Unsafe</name>.
                                                            <name>getUnsafe</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                        <catch>catch (
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name>SecurityException</name>
                                                    </type>
                                                    <name>e</name>
                                                </decl>
                                            </param>
                                            )
                                            <block>{
                                                <comment type="line">// that's okay; try reflection instead</comment>
                                                }
                                            </block>
                                        </catch>
                                    </try>
                                    <try>try
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <call>
                                                        <name><name>java</name>.<name>security</name>.<name>
                                                            AccessController</name>.
                                                            <name>doPrivileged</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>new
                                                                    <class>
                                                                        <super>
                                                                            <name><name>java</name>.<name>
                                                                                security</name>.
                                                                                <name>
                                                                                    <name>PrivilegedExceptionAction
                                                                                    </name>
                                                                                    <argument_list>&lt;
                                                                                        <argument>
                                                                                            <name><name>sun</name>
                                                                                                .<name>misc</name>.
                                                                                                <name>Unsafe</name>
                                                                                            </name>
                                                                                        </argument>
                                                                                        &gt;
                                                                                    </argument_list>
                                                                                </name>
                                                                            </name>
                                                                        </super>
                                                                        <argument_list>()</argument_list>
                                                                        <block>{
                                                                            <function>
                                                                                <type>
                                                                                    <specifier>public</specifier>
                                                                                    <name><name>sun</name>.<name>
                                                                                        misc</name>.
                                                                                        <name>Unsafe</name>
                                                                                    </name>
                                                                                </type>
                                                                                <name>run</name>
                                                                                <parameter_list>()</parameter_list>
                                                                                <throws>throws
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>Exception</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                </throws>
                                                                                <block>{
                                                                                    <decl_stmt>
                                                                                        <decl>
                                                                                            <type>
                                                                                                <name>
                                                                                                    <name>Class</name>
                                                                                                    <argument_list>&lt;
                                                                                                        <argument>
                                                                                                            <name><name>
                                                                                                                sun</name>
                                                                                                                .<name>
                                                                                                                    misc</name>.
                                                                                                                <name>
                                                                                                                    Unsafe
                                                                                                                </name>
                                                                                                            </name>
                                                                                                        </argument>
                                                                                                        &gt;
                                                                                                    </argument_list>
                                                                                                </name>
                                                                                            </type>
                                                                                            <name>k</name> =
                                                                                            <init>
                                                                                                <expr>
                                                                                                    <name><name>
                                                                                                        sun</name>
                                                                                                        .<name>
                                                                                                            misc</name>.<name>
                                                                                                            Unsafe</name>.
                                                                                                        <name>
                                                                                                            <name/>
                                                                                                        </name>
                                                                                                    </name>
                                                                                                    class
                                                                                                </expr>
                                                                                            </init>
                                                                                        </decl>
                                                                                        ;
                                                                                    </decl_stmt>
                                                                                    <for>for (
                                                                                        <init>
                                                                                            <decl>
                                                                                                <type>
                                                                                                    <name><name>
                                                                                                        java</name>
                                                                                                        .<name>
                                                                                                            lang</name>.<name>
                                                                                                            reflect</name>.
                                                                                                        <name>Field
                                                                                                        </name>
                                                                                                    </name>
                                                                                                </type>
                                                                                                <name>f</name> :
                                                                                                <range>
                                                                                                    <expr>
                                                                                                        <call>
                                                                                                            <name><name>
                                                                                                                k</name>
                                                                                                                .
                                                                                                                <name>
                                                                                                                    getDeclaredFields
                                                                                                                </name>
                                                                                                            </name>
                                                                                                            <argument_list>
                                                                                                                ()
                                                                                                            </argument_list>
                                                                                                        </call>
                                                                                                    </expr>
                                                                                                </range>
                                                                                            </decl>
                                                                                        </init>
                                                                                        )
                                                                                        <block>{
                                                                                            <expr_stmt>
                                                                                                <expr>
                                                                                                    <call>
                                                                                                        <name><name>
                                                                                                            f</name>.
                                                                                                            <name>
                                                                                                                setAccessible
                                                                                                            </name>
                                                                                                        </name>
                                                                                                        <argument_list>(
                                                                                                            <argument>
                                                                                                                <expr>
                                                                                                                    true
                                                                                                                </expr>
                                                                                                            </argument>
                                                                                                            )
                                                                                                        </argument_list>
                                                                                                    </call>
                                                                                                </expr>
                                                                                                ;
                                                                                            </expr_stmt>
                                                                                            <decl_stmt>
                                                                                                <decl>
                                                                                                    <type>
                                                                                                        <name>Object
                                                                                                        </name>
                                                                                                    </type>
                                                                                                    <name>x</name> =
                                                                                                    <init>
                                                                                                        <expr>
                                                                                                            <call>
                                                                                                                <name>
                                                                                                                    <name>
                                                                                                                        f</name>
                                                                                                                    .
                                                                                                                    <name>
                                                                                                                        get
                                                                                                                    </name>
                                                                                                                </name>
                                                                                                                <argument_list>
                                                                                                                    (
                                                                                                                    <argument>
                                                                                                                        <expr>
                                                                                                                            <name>
                                                                                                                                null
                                                                                                                            </name>
                                                                                                                        </expr>
                                                                                                                    </argument>
                                                                                                                    )
                                                                                                                </argument_list>
                                                                                                            </call>
                                                                                                        </expr>
                                                                                                    </init>
                                                                                                </decl>
                                                                                                ;
                                                                                            </decl_stmt>
                                                                                            <if>if
                                                                                                <condition>(
                                                                                                    <expr>
                                                                                                        <call>
                                                                                                            <name><name>
                                                                                                                k</name>
                                                                                                                .
                                                                                                                <name>
                                                                                                                    isInstance
                                                                                                                </name>
                                                                                                            </name>
                                                                                                            <argument_list>
                                                                                                                (
                                                                                                                <argument>
                                                                                                                    <expr>
                                                                                                                        <name>
                                                                                                                            x
                                                                                                                        </name>
                                                                                                                    </expr>
                                                                                                                </argument>
                                                                                                                )
                                                                                                            </argument_list>
                                                                                                        </call>
                                                                                                    </expr>
                                                                                                    )
                                                                                                </condition>
                                                                                                <then>
                                                                                                    <block>{
                                                                                                        <return>return
                                                                                                            <expr>
                                                                                                                <call>
                                                                                                                    <name>
                                                                                                                        <name>
                                                                                                                            k</name>
                                                                                                                        .
                                                                                                                        <name>
                                                                                                                            cast
                                                                                                                        </name>
                                                                                                                    </name>
                                                                                                                    <argument_list>
                                                                                                                        (
                                                                                                                        <argument>
                                                                                                                            <expr>
                                                                                                                                <name>
                                                                                                                                    x
                                                                                                                                </name>
                                                                                                                            </expr>
                                                                                                                        </argument>
                                                                                                                        )
                                                                                                                    </argument_list>
                                                                                                                </call>
                                                                                                            </expr>
                                                                                                            ;
                                                                                                        </return>
                                                                                                        }
                                                                                                    </block>
                                                                                                </then>
                                                                                            </if>
                                                                                            }
                                                                                        </block>
                                                                                    </for>
                                                                                    <throw>throw
                                                                                        <expr>new
                                                                                            <call>
                                                                                                <name>NoSuchFieldError
                                                                                                </name>
                                                                                                <argument_list>(
                                                                                                    <argument>
                                                                                                        <expr>"the
                                                                                                            Unsafe"
                                                                                                        </expr>
                                                                                                    </argument>
                                                                                                    )
                                                                                                </argument_list>
                                                                                            </call>
                                                                                        </expr>
                                                                                        ;
                                                                                    </throw>
                                                                                    }
                                                                                </block>
                                                                            </function>
                                                                            }
                                                                        </block>
                                                                    </class>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </return>
                                            }
                                        </block>
                                        <catch>catch (
                                            <param>
                                                <decl>
                                                    <type>
                                                        <name><name>java</name>.<name>security</name>.
                                                            <name>PrivilegedActionException</name>
                                                        </name>
                                                    </type>
                                                    <name>e</name>
                                                </decl>
                                            </param>
                                            )
                                            <block>{
                                                <throw>throw
                                                    <expr>new
                                                        <call>
                                                            <name>RuntimeException</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>"Could not initialize intrinsics"</expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>e</name>.
                                                                                <name>getCause</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </throw>
                                                }
                                            </block>
                                        </catch>
                                    </try>
                                    }
                                </block>
                            </function>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>int</name>
                                </type>
                                <name>compare</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>byte</name>
                                                    <index>[]</index>
                                                </name>
                                            </type>
                                            <name>left</name>
                                        </decl>
                                    </param>
                                    ,
                                    <param>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>byte</name>
                                                    <index>[]</index>
                                                </name>
                                            </type>
                                            <name>right</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>minLength</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>Math</name>.
                                                            <name>min</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>left</name>.
                                                                        <name>length</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name><name>right</name>.
                                                                        <name>length</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>minWords</name> =
                                            <init>
                                                <expr>
                                                    <name>minLength</name>
                                                    /
                                                    <name><name>Longs</name>.
                                                        <name>BYTES</name>
                                                    </name>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>

                                    <comment type="block">/*
                                        * Compare 8 bytes at a time. Benchmarking shows comparing 8 bytes at a
                                        * time is no slower than comparing 4 bytes at a time even on 32-bit.
                                        * On the other hand, it is substantially faster on 64-bit.
                                        */
                                    </comment>
                                    <for>for (
                                        <init>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>i</name> =
                                                <init>
                                                    <expr>0</expr>
                                                </init>
                                            </decl>
                                            ;
                                        </init>
                                        <condition>
                                            <expr>
                                                <name>i</name>
                                                &lt; <name>minWords</name> *
                                                <name><name>Longs</name>.
                                                    <name>BYTES</name>
                                                </name>
                                            </expr>
                                            ;
                                        </condition>
                                        <incr>
                                            <expr>
                                                <name>i</name>
                                                +=
                                                <name><name>Longs</name>.
                                                    <name>BYTES</name>
                                                </name>
                                            </expr>
                                        </incr>
                                        )
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>long</name>
                                                    </type>
                                                    <name>lw</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>theUnsafe</name>.
                                                                    <name>getLong</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>left</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>BYTE_ARRAY_BASE_OFFSET</name>
                                                                            + (<name>long</name>)
                                                                            <name>i</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>long</name>
                                                    </type>
                                                    <name>rw</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>theUnsafe</name>.
                                                                    <name>getLong</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>right</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>BYTE_ARRAY_BASE_OFFSET</name>
                                                                            + (<name>long</name>)
                                                                            <name>i</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>lw</name>
                                                        !=
                                                        <name>rw</name>
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <name>BIG_ENDIAN</name>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <block>{
                                                                    <return>return
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>UnsignedLongs</name>.
                                                                                    <name>compare</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>lw</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    ,
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>rw</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        ;
                                                                    </return>
                                                                    }
                                                                </block>
                                                            </then>
                                                        </if>

                                                        <comment type="block">/*
                                                            * We want to compare only the first index where left[index]
                                                            != right[index].
                                                            * This corresponds to the least significant nonzero byte in
                                                            lw ^ rw, since lw
                                                            * and rw are little-endian. Long.numberOfTrailingZeros(diff)
                                                            tells us the least
                                                            * significant nonzero bit, and zeroing out the first three
                                                            bits of L.nTZ gives us the
                                                            * shift to get that least significant nonzero byte.
                                                            */
                                                        </comment>
                                                        <decl_stmt>
                                                            <decl>
                                                                <type>
                                                                    <name>int</name>
                                                                </type>
                                                                <name>n</name> =
                                                                <init>
                                                                    <expr>
                                                                        <call>
                                                                            <name><name>Long</name>.
                                                                                <name>numberOfTrailingZeros</name>
                                                                            </name>
                                                                            <argument_list>(
                                                                                <argument>
                                                                                    <expr>
                                                                                        <name>lw</name>
                                                                                        ^
                                                                                        <name>rw</name>
                                                                                    </expr>
                                                                                </argument>
                                                                                )
                                                                            </argument_list>
                                                                        </call>
                                                                        &amp; ~0x7
                                                                    </expr>
                                                                </init>
                                                            </decl>
                                                            ;
                                                        </decl_stmt>
                                                        <return>return
                                                            <expr>
                                                                <call>(<name>int</name>)
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>((<name>lw</name> &gt;&gt;&gt; <name>
                                                                                n</name>) &amp; <name>
                                                                                UNSIGNED_MASK</name>) - ((<name>rw
                                                                            </name> &gt;&gt;&gt; <name>n</name>)
                                                                                &amp; <name>UNSIGNED_MASK</name>)
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </for>

                                    <comment type="line">// The epilogue to cover the last (minLength % 8) elements.
                                    </comment>
                                    <for>for (
                                        <init>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>i</name> =
                                                <init>
                                                    <expr>
                                                        <name>minWords</name>
                                                        *
                                                        <name><name>Longs</name>.
                                                            <name>BYTES</name>
                                                        </name>
                                                    </expr>
                                                </init>
                                            </decl>
                                            ;
                                        </init>
                                        <condition>
                                            <expr>
                                                <name>i</name>
                                                &lt;
                                                <name>minLength</name>
                                            </expr>
                                            ;
                                        </condition>
                                        <incr>
                                            <expr><name>i</name>++
                                            </expr>
                                        </incr>
                                        )
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>result</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>UnsignedBytes</name>.
                                                                    <name>compare</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>
                                                                                <name>left</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>
                                                                                <name>right</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>result</name>
                                                        != 0
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return
                                                            <expr>
                                                                <name>result</name>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </for>
                                    <return>return
                                        <expr>
                                            <name><name>left</name>.
                                                <name>length</name>
                                            </name>
                                            -
                                            <name><name>right</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </enum>

                    <enum>enum <name>PureJavaComparator</name>
                        <super>
                            <implements>implements
                                <name>
                                    <name>Comparator</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>
                                                <name>byte</name>
                                                <index>[]</index>
                                            </name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </implements>
                        </super>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>INSTANCE</name>
                                </expr>
                                ;
                            </expr_stmt>

                            <function>
                                <type>
                                    <annotation>@
                                        <name>Override</name>
                                    </annotation>
                                    <specifier>public</specifier>
                                    <name>int</name>
                                </type>
                                <name>compare</name>
                                <parameter_list>(
                                    <param>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>byte</name>
                                                    <index>[]</index>
                                                </name>
                                            </type>
                                            <name>left</name>
                                        </decl>
                                    </param>
                                    ,
                                    <param>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>byte</name>
                                                    <index>[]</index>
                                                </name>
                                            </type>
                                            <name>right</name>
                                        </decl>
                                    </param>
                                    )
                                </parameter_list>
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>minLength</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>Math</name>.
                                                            <name>min</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name><name>left</name>.
                                                                        <name>length</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name><name>right</name>.
                                                                        <name>length</name>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <for>for (
                                        <init>
                                            <decl>
                                                <type>
                                                    <name>int</name>
                                                </type>
                                                <name>i</name> =
                                                <init>
                                                    <expr>0</expr>
                                                </init>
                                            </decl>
                                            ;
                                        </init>
                                        <condition>
                                            <expr>
                                                <name>i</name>
                                                &lt;
                                                <name>minLength</name>
                                            </expr>
                                            ;
                                        </condition>
                                        <incr>
                                            <expr><name>i</name>++
                                            </expr>
                                        </incr>
                                        )
                                        <block>{
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>int</name>
                                                    </type>
                                                    <name>result</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name><name>UnsignedBytes</name>.
                                                                    <name>compare</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>
                                                                                <name>left</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>
                                                                                <name>right</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>i</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <if>if
                                                <condition>(
                                                    <expr>
                                                        <name>result</name>
                                                        != 0
                                                    </expr>
                                                    )
                                                </condition>
                                                <then>
                                                    <block>{
                                                        <return>return
                                                            <expr>
                                                                <name>result</name>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </then>
                                            </if>
                                            }
                                        </block>
                                    </for>
                                    <return>return
                                        <expr>
                                            <name><name>left</name>.
                                                <name>length</name>
                                            </name>
                                            -
                                            <name><name>right</name>.
                                                <name>length</name>
                                            </name>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </function>
                            }
                        </block>
                    </enum>

                    <comment type="javadoc">/**
                        * Returns the Unsafe-using Comparator, or falls back to the pure-Java
                        * implementation if unable to do so.
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>static</specifier>
                            <name>
                                <name>Comparator</name>
                                <argument_list>&lt;
                                    <argument>
                                        <name>byte</name>
                                        <index>[]</index>
                                    </argument>
                                    &gt;
                                </argument_list>
                            </name>
                        </type>
                        <name>getBestComparator</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <try>try
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>
                                                    <name>Class</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>?</name>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>theClass</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>Class</name>.
                                                            <name>forName</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>UNSAFE_COMPARATOR_NAME</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>

                                    <comment type="line">// yes, UnsafeComparator does implement Comparator&lt;byte[]&gt;</comment>
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <annotation>@
                                                    <name>SuppressWarnings</name>
                                                    <argument_list>("unchecked")</argument_list>
                                                </annotation>
                                                <name>
                                                    <name>Comparator</name>
                                                    <argument_list>&lt;
                                                        <argument>
                                                            <name>byte</name>
                                                            <index>[]</index>
                                                        </argument>
                                                        &gt;
                                                    </argument_list>
                                                </name>
                                            </type>
                                            <name>comparator</name> =
                                            <init>
                                                <expr>(
                                                    <name>
                                                        <name>Comparator</name>
                                                        <argument_list>&lt;
                                                            <argument>
                                                                <name>
                                                                    <name>byte</name>
                                                                    <index>[]</index>
                                                                </name>
                                                            </argument>
                                                            &gt;
                                                        </argument_list>
                                                    </name>
                                                    )
                                                    <call>
                                                        <name><name>theClass</name>.
                                                            <name>getEnumConstants</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    <index>[<expr>0</expr>]
                                                    </index>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <return>return
                                        <expr>
                                            <name>comparator</name>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                                <catch>catch (
                                    <param>
                                        <decl>
                                            <type>
                                                <name>Throwable</name>
                                            </type>
                                            <name>t</name>
                                        </decl>
                                    </param>
                                    )
                                    <block>{
                                        <comment type="line">// ensure we really catch *everything*</comment>
                                        <return>return
                                            <expr>
                                                <call>
                                                    <name>lexicographicalComparatorJavaImpl</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </return>
                                        }
                                    </block>
                                </catch>
                            </try>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>
            }
        </block>
    </class>
</unit>
