<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\primitives\UnsignedInteger.java">
    <comment type="block">/*
        * Copyright (C) 2011 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
        * in compliance with the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software distributed under the
        * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
        * express or implied. See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>primitives</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkArgument</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>primitives</name>.<name>UnsignedInts</name>.
            <name>INT_MASK</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>primitives</name>.<name>UnsignedInts</name>.
            <name>compare</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>primitives</name>.<name>UnsignedInts</name>.
            <name>toLong</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtIncompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>math</name>.
            <name>BigInteger</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>CheckReturnValue</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>Nullable</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A wrapper class for unsigned {@code int} values, supporting arithmetic operations.
        *
        * &lt;p&gt;In some cases, when speed is more important than code readability, it may be faster simply to
        * treat primitive {@code int} values as unsigned, using the methods from {@link UnsignedInts}.
        *
        * &lt;p&gt;See the Guava User Guide article on &lt;a href=
        * "https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support"&gt;
        * unsigned primitive utilities&lt;/a&gt;.
        *
        * @author Louis Wasserman
        * @since 11.0
        */
    </comment>
    <class>
        <annotation>@
            <name>CheckReturnValue</name>
        </annotation>
        <annotation>@
            <name>GwtCompatible</name>
            <argument_list>(emulated = true)</argument_list>
        </annotation>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>UnsignedInteger</name>
        <super>
            <extends>extends
                <name>Number</name>
            </extends>
            <implements>implements
                <name>
                    <name>Comparable</name>
                    <argument_list>&lt;
                        <argument>
                            <name>UnsignedInteger</name>
                        </argument>
                        &gt;
                    </argument_list>
                </name>
            </implements>
        </super>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>UnsignedInteger</name>
                    </type>
                    <name>ZERO</name> =
                    <init>
                        <expr>
                            <call>
                                <name>fromIntBits</name>
                                <argument_list>(
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>UnsignedInteger</name>
                    </type>
                    <name>ONE</name> =
                    <init>
                        <expr>
                            <call>
                                <name>fromIntBits</name>
                                <argument_list>(
                                    <argument>
                                        <expr>1</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>UnsignedInteger</name>
                    </type>
                    <name>MAX_VALUE</name> =
                    <init>
                        <expr>
                            <call>
                                <name>fromIntBits</name>
                                <argument_list>(
                                    <argument>
                                        <expr>-1</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>value</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <specifier>private</specifier>
                <name>UnsignedInteger</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// GWT doesn't consistently overflow values to make them 32-bit, so we need to
                        force it.
                    </comment>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>value</name>
                            </name>
                            = <name>value</name> &amp; 0xffffffff
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Returns an {@code UnsignedInteger} corresponding to a given bit representation.
                * The argument is interpreted as an unsigned 32-bit value. Specifically, the sign bit
                * of {@code bits} is interpreted as a normal bit, and all other bits are treated as usual.
                *
                * &lt;p&gt;If the argument is nonnegative, the returned result will be equal to {@code bits},
                * otherwise, the result will be equal to {@code 2^32 + bits}.
                *
                * &lt;p&gt;To represent unsigned decimal constants, consider {@link #valueOf(long)} instead.
                *
                * @since 14.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>UnsignedInteger</name>
                </type>
                <name>fromIntBits</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>bits</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>UnsignedInteger</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bits</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an {@code UnsignedInteger} that is equal to {@code value},
                * if possible. The inverse operation of {@link #longValue()}.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>UnsignedInteger</name>
                </type>
                <name>valueOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>value</name> &amp; <name>INT_MASK</name>) ==
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"value (%s) is outside the range for an unsigned integer value"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>fromIntBits</name>
                                <argument_list>(
                                    <argument>
                                        <expr>(<name>int</name>)
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a {@code UnsignedInteger} representing the same value as the specified
                * {@link BigInteger}. This is the inverse operation of {@link #bigIntegerValue()}.
                *
                * @throws IllegalArgumentException if {@code value} is negative or {@code value &gt;= 2^32}
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>UnsignedInteger</name>
                </type>
                <name>valueOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BigInteger</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>value</name>.
                                                    <name>signum</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &gt;= 0 &amp;&amp;
                                            <call>
                                                <name><name>value</name>.
                                                    <name>bitLength</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            &lt;=
                                            <name><name>Integer</name>.
                                                <name>SIZE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"value (%s) is outside the range for an unsigned integer value"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>fromIntBits</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>value</name>.
                                                    <name>intValue</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed
                * as an unsigned {@code int} value.
                *
                * @throws NumberFormatException if the string does not contain a parsable unsigned {@code int}
                * value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>UnsignedInteger</name>
                </type>
                <name>valueOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>string</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>valueOf</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>string</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>10</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed
                * as an unsigned {@code int} value in the specified radix.
                *
                * @throws NumberFormatException if the string does not contain a parsable unsigned {@code int}
                * value
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>UnsignedInteger</name>
                </type>
                <name>valueOf</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>string</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>radix</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>fromIntBits</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>UnsignedInts</name>.
                                                    <name>parseUnsignedInt</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>string</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>radix</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the result of adding this and {@code val}. If the result would have more than 32 bits,
                * returns the low 32 bits of the result.
                *
                * @since 14.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>UnsignedInteger</name>
                </type>
                <name>plus</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>UnsignedInteger</name>
                            </type>
                            <name>val</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>fromIntBits</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>value</name>
                                            </name>
                                            +
                                            <call>
                                                <name>checkNotNull</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>val</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            .
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the result of subtracting this and {@code val}. If the result would be negative,
                * returns the low 32 bits of the result.
                *
                * @since 14.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>UnsignedInteger</name>
                </type>
                <name>minus</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>UnsignedInteger</name>
                            </type>
                            <name>val</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>fromIntBits</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                            -
                                            <call>
                                                <name>checkNotNull</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>val</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            .
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the result of multiplying this and {@code val}. If the result would have more than 32
                * bits, returns the low 32 bits of the result.
                *
                * @since 14.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>GwtIncompatible</name>
                        <argument_list>("Does not truncate correctly")</argument_list>
                    </annotation>
                    <specifier>public</specifier>
                    <name>UnsignedInteger</name>
                </type>
                <name>times</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>UnsignedInteger</name>
                            </type>
                            <name>val</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// TODO(lowasser): make this GWT-compatible</comment>
                    <return>return
                        <expr>
                            <call>
                                <name>fromIntBits</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                            *
                                            <call>
                                                <name>checkNotNull</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>val</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            .
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the result of dividing this by {@code val}.
                *
                * @throws ArithmeticException if {@code val} is zero
                * @since 14.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>UnsignedInteger</name>
                </type>
                <name>dividedBy</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>UnsignedInteger</name>
                            </type>
                            <name>val</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>fromIntBits</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>UnsignedInts</name>.
                                                    <name>divide</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>value</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>checkNotNull</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>val</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            .
                                                            <name>value</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns this mod {@code val}.
                *
                * @throws ArithmeticException if {@code val} is zero
                * @since 14.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>UnsignedInteger</name>
                </type>
                <name>mod</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>UnsignedInteger</name>
                            </type>
                            <name>val</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>fromIntBits</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>UnsignedInts</name>.
                                                    <name>remainder</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>value</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name>checkNotNull</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>val</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                            .
                                                            <name>value</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the value of this {@code UnsignedInteger} as an {@code int}. This is an inverse
                * operation to {@link #fromIntBits}.
                *
                * &lt;p&gt;Note that if this {@code UnsignedInteger} holds a value {@code &gt;= 2^31}, the returned
                value
                * will be equal to {@code this - 2^32}.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>intValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>value</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the value of this {@code UnsignedInteger} as a {@code long}.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>long</name>
                </type>
                <name>longValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toLong</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the value of this {@code UnsignedInteger} as a {@code float}, analogous to a widening
                * primitive conversion from {@code int} to {@code float}, and correctly rounded.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>float</name>
                </type>
                <name>floatValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>longValue</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the value of this {@code UnsignedInteger} as a {@code float}, analogous to a widening
                * primitive conversion from {@code int} to {@code double}, and correctly rounded.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>double</name>
                </type>
                <name>doubleValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>longValue</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the value of this {@code UnsignedInteger} as a {@link BigInteger}.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>BigInteger</name>
                </type>
                <name>bigIntegerValue</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>BigInteger</name>.
                                    <name>valueOf</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>longValue</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Compares this unsigned integer to another unsigned integer.
                * Returns {@code 0} if they are equal, a negative number if {@code this &lt; other},
                * and a positive number if {@code this &gt; other}.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>compareTo</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>UnsignedInteger</name>
                            </type>
                            <name>other</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>other</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>compare</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>other</name>.
                                                <name>value</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>value</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <annotation>@
                                    <name>Nullable</name>
                                </annotation>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>obj</name>
                                <name>instanceof</name>
                                <name>UnsignedInteger</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>UnsignedInteger</name>
                                        </type>
                                        <name>other</name> =
                                        <init>
                                            <expr>(<name>UnsignedInteger</name>)
                                                <name>obj</name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <return>return
                                    <expr>
                                        <name>value</name>
                                        ==
                                        <name><name>other</name>.
                                            <name>value</name>
                                        </name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a string representation of the {@code UnsignedInteger} value, in base 10.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toString</name>
                                <argument_list>(
                                    <argument>
                                        <expr>10</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a string representation of the {@code UnsignedInteger} value, in base {@code radix}.
                * If {@code radix &lt; Character.MIN_RADIX} or {@code radix &gt; Character.MAX_RADIX}, the radix
                * {@code 10} is used.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>radix</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>UnsignedInts</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>radix</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
