<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\guava\src\com\google\common\primitives\UnsignedLongs.java">
    <comment type="block">/*
        * Copyright (C) 2011 The Guava Authors
        *
        * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
        * in compliance with the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software distributed under the
        * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
        * express or implied. See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>

    <package>package
        <name><name>com</name>.<name>google</name>.<name>common</name>.
            <name>primitives</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkArgument</name>
        </name>
        ;
    </import>
    <import>import static
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>base</name>.<name>Preconditions</name>.
            <name>checkNotNull</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>Beta</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>com</name>.<name>google</name>.<name>common</name>.<name>annotations</name>.
            <name>GwtCompatible</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>math</name>.
            <name>BigInteger</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Arrays</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Comparator</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>annotation</name>.
            <name>CheckReturnValue</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Static utility methods pertaining to {@code long} primitives that interpret values as
        * &lt;i&gt;unsigned&lt;/i&gt; (that is, any negative value {@code x} is treated as the positive value
        * {@code 2^64 + x}). The methods for which signedness is not an issue are in {@link Longs}, as
        * well as signed versions of methods for which signedness is an issue.
        *
        * &lt;p&gt;In addition, this class provides several static methods for converting a {@code long} to a
        * {@code String} and a {@code String} to a {@code long} that treat the {@code long} as an unsigned
        * number.
        *
        * &lt;p&gt;Users of these utilities must be &lt;i&gt;extremely careful&lt;/i&gt; not to mix up signed and
        unsigned
        * {@code long} values. When possible, it is recommended that the {@link UnsignedLong} wrapper
        * class be used, at a small efficiency penalty, to enforce the distinction in the type system.
        *
        * &lt;p&gt;See the Guava User Guide article on &lt;a href=
        * "https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support"&gt;
        * unsigned primitive utilities&lt;/a&gt;.
        *
        * @author Louis Wasserman
        * @author Brian Milch
        * @author Colin Evans
        * @since 10.0
        */
    </comment>
    <class>
        <annotation>@
            <name>Beta</name>
        </annotation>
        <annotation>@
            <name>GwtCompatible</name>
        </annotation>
        <specifier>public</specifier>
        <specifier>final</specifier> class <name>UnsignedLongs</name>
        <block>{
            <constructor>
                <specifier>private</specifier>
                <name>UnsignedLongs</name>
                <parameter_list>()</parameter_list>
                <block>{}</block>
            </constructor>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>public</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>MAX_VALUE</name> =
                    <init>
                        <expr>-1L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <comment type="line">// Equivalent to 2^64 - 1</comment>

            <comment type="javadoc">/**
                * A (self-inverse) bijection which converts the ordering on unsigned longs to the ordering on
                * longs, that is, {@code a &lt;= b} as unsigned longs if and only if {@code flip(a) &lt;= flip(b)}
                * as signed longs.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>flip</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>a</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>a</name>
                            ^
                            <name><name>Long</name>.
                                <name>MIN_VALUE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Compares the two specified {@code long} values, treating them as unsigned values between
                * {@code 0} and {@code 2^64 - 1} inclusive.
                *
                * @param a the first unsigned {@code long} to compare
                * @param b the second unsigned {@code long} to compare
                * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is
                * greater than {@code b}; or zero if they are equal
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>int</name>
                </type>
                <name>compare</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>a</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>b</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Longs</name>.
                                    <name>compare</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>flip</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>a</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>flip</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>b</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the least value present in {@code array}, treating values as unsigned.
                *
                * @param array a &lt;i&gt;nonempty&lt;/i&gt; array of unsigned {@code long} values
                * @return the value present in {@code array} that is less than or equal to every other value in
                * the array according to {@link #compare}
                * @throws IllegalArgumentException if {@code array} is empty
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>min</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type><name>long</name>...
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>array</name>.
                                                <name>length</name>
                                            </name>
                                            &gt; 0
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>min</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>flip</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>array</name>
                                                        <index>[<expr>0</expr>]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>1</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>next</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>flip</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>
                                                                <name>array</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>next</name>
                                        &lt;
                                        <name>min</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>min</name>
                                                =
                                                <name>next</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name>flip</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>min</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the greatest value present in {@code array}, treating values as unsigned.
                *
                * @param array a &lt;i&gt;nonempty&lt;/i&gt; array of unsigned {@code long} values
                * @return the value present in {@code array} that is greater than or equal to every other value
                * in the array according to {@link #compare}
                * @throws IllegalArgumentException if {@code array} is empty
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>max</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type><name>long</name>...
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>array</name>.
                                                <name>length</name>
                                            </name>
                                            &gt; 0
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>max</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>flip</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>
                                                        <name>array</name>
                                                        <index>[<expr>0</expr>]
                                                        </index>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>1</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>next</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>flip</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>
                                                                <name>array</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>next</name>
                                        &gt;
                                        <name>max</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>max</name>
                                                =
                                                <name>next</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name>flip</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>max</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a string containing the supplied unsigned {@code long} values separated by
                * {@code separator}. For example, {@code join("-", 1, 2, 3)} returns the string {@code "1-2-3"}.
                *
                * @param separator the text that should appear between consecutive values in the resulting
                * string (but not at the start or end)
                * @param array an array of unsigned {@code long} values, possibly empty
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>join</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>separator</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type><name>long</name>...
                            </type>
                            <name>array</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>separator</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>""</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// For pre-sizing a builder, just get the right order of magnitude</comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>StringBuilder</name>
                            </type>
                            <name>builder</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>StringBuilder</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>array</name>.
                                                        <name>length</name>
                                                    </name>
                                                    * 5
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>append</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>toString</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>
                                                                <name>array</name>
                                                                <index>[<expr>0</expr>]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>1</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>array</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>builder</name>.
                                            <name>append</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>separator</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>append</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name>toString</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>
                                                                        <name>array</name>
                                                                        <index>[
                                                                            <expr>
                                                                                <name>i</name>
                                                                            </expr>
                                                                            ]
                                                                        </index>
                                                                    </name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <return>return
                        <expr>
                            <call>
                                <name><name>builder</name>.
                                    <name>toString</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a comparator that compares two arrays of unsigned {@code long} values
                * lexicographically. That is, it compares, using {@link #compare(long, long)}), the first pair of
                * values that follow any common prefix, or when one array is a prefix of the other, treats the
                * shorter array as the lesser. For example, {@code [] &lt; [1L] &lt; [1L, 2L] &lt; [2L] &lt; [1L &lt;&lt;
                63]}.
                *
                * &lt;p&gt;The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays
                * support only identity equality), but it is consistent with
                * {@link Arrays#equals(long[], long[])}.
                *
                * @see &lt;a href="http://en.wikipedia.org/wiki/Lexicographical_order"&gt;Lexicographical order
                * article at Wikipedia&lt;/a&gt;
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>
                        <name>Comparator</name>
                        <argument_list>&lt;
                            <argument>
                                <name>long</name>
                                <index>[]</index>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>lexicographicalComparator</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>LexicographicalComparator</name>.
                                <name>INSTANCE</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <enum>enum <name>LexicographicalComparator</name>
                <super>
                    <implements>implements
                        <name>
                            <name>Comparator</name>
                            <argument_list>&lt;
                                <argument>
                                    <name>
                                        <name>long</name>
                                        <index>[]</index>
                                    </name>
                                </argument>
                                &gt;
                            </argument_list>
                        </name>
                    </implements>
                </super>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>INSTANCE</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>compare</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>long</name>
                                            <index>[]</index>
                                        </name>
                                    </type>
                                    <name>left</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>long</name>
                                            <index>[]</index>
                                        </name>
                                    </type>
                                    <name>right</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>minLength</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>min</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name><name>left</name>.
                                                                <name>length</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name><name>right</name>.
                                                                <name>length</name>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <for>for (
                                <init>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>0</expr>
                                        </init>
                                    </decl>
                                    ;
                                </init>
                                <condition>
                                    <expr>
                                        <name>i</name>
                                        &lt;
                                        <name>minLength</name>
                                    </expr>
                                    ;
                                </condition>
                                <incr>
                                    <expr><name>i</name>++
                                    </expr>
                                </incr>
                                )
                                <block>{
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>
                                                    <name>left</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                !=
                                                <name>
                                                    <name>right</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <return>return
                                                    <expr>
                                                        <call>
                                                            <name><name>UnsignedLongs</name>.
                                                                <name>compare</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>
                                                                            <name>left</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>
                                                                            <name>right</name>
                                                                            <index>[
                                                                                <expr>
                                                                                    <name>i</name>
                                                                                </expr>
                                                                                ]
                                                                            </index>
                                                                        </name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </return>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    }
                                </block>
                            </for>
                            <return>return
                                <expr>
                                    <name><name>left</name>.
                                        <name>length</name>
                                    </name>
                                    -
                                    <name><name>right</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </enum>

            <comment type="javadoc">/**
                * Returns dividend / divisor, where the dividend and divisor are treated as unsigned 64-bit
                * quantities.
                *
                * @param dividend the dividend (numerator)
                * @param divisor the divisor (denominator)
                * @throws ArithmeticException if divisor is 0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>divide</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>dividend</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>divisor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>divisor</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// i.e., divisor &gt;= 2^63:</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name>compare</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>dividend</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>divisor</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            &lt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>0</expr>;
                                            </return>
                                            <comment type="line">// dividend &lt; divisor</comment>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <return>return <expr>1</expr>;
                                            </return>
                                            <comment type="line">// dividend &gt;= divisor</comment>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Optimization - use signed division if dividend &lt; 2^63</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>dividend</name>
                                &gt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>dividend</name>
                                        /
                                        <name>divisor</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="block">/*
                        * Otherwise, approximate the quotient, check, and correct if necessary. Our approximation is
                        * guaranteed to be either exact or one less than the correct value. This follows from fact
                        * that floor(floor(x)/i) == floor(x/i) for any real x and integer i != 0. The proof is not
                        * quite trivial.
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>quotient</name> =
                            <init>
                                <expr>((<name>dividend</name> &gt;&gt;&gt; 1) / <name>divisor</name>) &lt;&lt; 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>rem</name> =
                            <init>
                                <expr>
                                    <name>dividend</name>
                                    - <name>quotient</name> *
                                    <name>divisor</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>quotient</name>
                            + (
                            <call>
                                <name>compare</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>rem</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>divisor</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &gt;= 0 ? 1 : 0)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns dividend % divisor, where the dividend and divisor are treated as unsigned 64-bit
                * quantities.
                *
                * @param dividend the dividend (numerator)
                * @param divisor the divisor (denominator)
                * @throws ArithmeticException if divisor is 0
                * @since 11.0
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>remainder</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>dividend</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>divisor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>divisor</name>
                                &lt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// i.e., divisor &gt;= 2^63:</comment>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <call>
                                                <name>compare</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>dividend</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>divisor</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            &lt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>dividend</name>
                                                </expr>
                                                ;
                                            </return>
                                            <comment type="line">// dividend &lt; divisor</comment>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <return>return
                                                <expr>
                                                    <name>dividend</name>
                                                    -
                                                    <name>divisor</name>
                                                </expr>
                                                ;
                                            </return>
                                            <comment type="line">// dividend &gt;= divisor</comment>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// Optimization - use signed modulus if dividend &lt; 2^63</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name>dividend</name>
                                &gt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>dividend</name>
                                        %
                                        <name>divisor</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="block">/*
                        * Otherwise, approximate the quotient, check, and correct if necessary. Our approximation is
                        * guaranteed to be either exact or one less than the correct value. This follows from fact
                        * that floor(floor(x)/i) == floor(x/i) for any real x and integer i != 0. The proof is not
                        * quite trivial.
                        */
                    </comment>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>quotient</name> =
                            <init>
                                <expr>((<name>dividend</name> &gt;&gt;&gt; 1) / <name>divisor</name>) &lt;&lt; 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>rem</name> =
                            <init>
                                <expr>
                                    <name>dividend</name>
                                    - <name>quotient</name> *
                                    <name>divisor</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>rem</name>
                            - (
                            <call>
                                <name>compare</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>rem</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>divisor</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            &gt;= 0 ? <name>divisor</name> : 0)
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the unsigned {@code long} value represented by the given decimal string.
                *
                * @throws NumberFormatException if the string does not contain a valid unsigned {@code long}
                * value
                * @throws NullPointerException if {@code s} is null
                * (in contrast to {@link Long#parseLong(String)})
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>parseUnsignedLong</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>s</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>parseUnsignedLong</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>s</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>10</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the unsigned {@code long} value represented by the given string.
                *
                * Accepts a decimal, hexadecimal, or octal number given by specifying the following prefix:
                *
                * &lt;ul&gt;
                * &lt;li&gt;{@code 0x}&lt;i&gt;HexDigits&lt;/i&gt;
                * &lt;li&gt;{@code 0X}&lt;i&gt;HexDigits&lt;/i&gt;
                * &lt;li&gt;{@code #}&lt;i&gt;HexDigits&lt;/i&gt;
                * &lt;li&gt;{@code 0}&lt;i&gt;OctalDigits&lt;/i&gt;
                * &lt;/ul&gt;
                *
                * @throws NumberFormatException if the string does not contain a valid unsigned {@code long}
                * value
                * @since 13.0
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>decode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>stringValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ParseRequest</name>
                            </type>
                            <name>request</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ParseRequest</name>.
                                            <name>fromString</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>stringValue</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <try>try
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name>parseUnsignedLong</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>request</name>.
                                                        <name>rawValue</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>request</name>.
                                                        <name>radix</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>NumberFormatException</name>
                                    </type>
                                    <name>e</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>NumberFormatException</name>
                                        </type>
                                        <name>decodeException</name> =
                                        <init>
                                            <expr>new
                                                <call>
                                                    <name>NumberFormatException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"Error parsing value: " +
                                                                <name>stringValue</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>decodeException</name>.
                                                <name>initCause</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>e</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <throw>throw
                                    <expr>
                                        <name>decodeException</name>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the unsigned {@code long} value represented by a string with the given radix.
                *
                * @param s the string containing the unsigned {@code long} representation to be parsed.
                * @param radix the radix to use while parsing {@code s}
                * @throws NumberFormatException if the string does not contain a valid unsigned {@code long}
                * with the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX}
                * and {@link Character#MAX_RADIX}.
                * @throws NullPointerException if {@code s} is null
                * (in contrast to {@link Long#parseLong(String)})
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>parseUnsignedLong</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>s</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>radix</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkNotNull</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>s</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>s</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NumberFormatException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"empty string"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>radix</name>
                                &lt;
                                <name><name>Character</name>.
                                    <name>MIN_RADIX</name>
                                </name>
                                || <name>radix</name> &gt;
                                <name><name>Character</name>.
                                    <name>MAX_RADIX</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>NumberFormatException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"illegal radix: " +
                                                        <name>radix</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>max_safe_pos</name> =
                            <init>
                                <expr>
                                    <name>
                                        <name>maxSafeDigits</name>
                                        <index>[
                                            <expr>
                                                <name>radix</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    - 1
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>value</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>pos</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>pos</name>
                                &lt;
                                <call>
                                    <name><name>s</name>.
                                        <name>length</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>pos</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>digit</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>Character</name>.
                                                    <name>digit</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>s</name>.
                                                                    <name>charAt</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>pos</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>radix</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>digit</name>
                                        == -1
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>NumberFormatException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>s</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>pos</name>
                                        &gt; <name>max_safe_pos</name> &amp;&amp;
                                        <call>
                                            <name>overflowInParse</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>value</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>digit</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>radix</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <throw>throw
                                            <expr>new
                                                <call>
                                                    <name>NumberFormatException</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>"Too large for unsigned long: " +
                                                                <name>s</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </throw>
                                        }
                                    </block>
                                </then>
                            </if>
                            <expr_stmt>
                                <expr>
                                    <name>value</name>
                                    = (<name>value</name> * <name>radix</name>) +
                                    <name>digit</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <return>return
                        <expr>
                            <name>value</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns true if (current * radix) + digit is a number too large to be represented by an
                * unsigned long. This is useful for detecting overflow while parsing a string representation of
                * a number. Does not verify whether supplied radix is valid, passing an invalid radix will give
                * undefined results or an ArrayIndexOutOfBoundsException.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>overflowInParse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>current</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>digit</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>radix</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>current</name>
                                &gt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>current</name>
                                            &lt;
                                            <name>
                                                <name>maxValueDivs</name>
                                                <index>[
                                                    <expr>
                                                        <name>radix</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>false</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>current</name>
                                            &gt;
                                            <name>
                                                <name>maxValueDivs</name>
                                                <index>[
                                                    <expr>
                                                        <name>radix</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <return>return <expr>true</expr>;
                                            </return>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <comment type="line">// current == maxValueDivs[radix]</comment>
                                <return>return
                                    <expr>(<name>digit</name> &gt;
                                        <name>
                                            <name>maxValueMods</name>
                                            <index>[
                                                <expr>
                                                    <name>radix</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        )
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <comment type="line">// current &lt; 0: high bit is set</comment>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a string representation of x, where x is treated as unsigned.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>toString</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>x</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>10</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a string representation of {@code x} for the given radix, where {@code x} is treated
                * as unsigned.
                *
                * @param x the value to convert to a string.
                * @param radix the radix to use while working with {@code x}
                * @throws IllegalArgumentException if {@code radix} is not between {@link Character#MIN_RADIX}
                * and {@link Character#MAX_RADIX}.
                */
            </comment>
            <function>
                <type>
                    <annotation>@
                        <name>CheckReturnValue</name>
                    </annotation>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>String</name>
                </type>
                <name>toString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>x</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>radix</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>checkArgument</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>radix</name>
                                            &gt;=
                                            <name><name>Character</name>.
                                                <name>MIN_RADIX</name>
                                            </name>
                                            &amp;&amp; <name>radix</name> &lt;=
                                            <name><name>Character</name>.
                                                <name>MAX_RADIX</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"radix (%s) must be between Character.MIN_RADIX and Character.MAX_RADIX"
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>radix</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>x</name>
                                == 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// Simply return "0"</comment>
                                <return>return <expr>"0"</expr>;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>char</name>
                                            <index>[]</index>
                                        </type>
                                        <name>buf</name> =
                                        <init>
                                            <expr>new
                                                <name>
                                                    <name>char</name>
                                                    <index>[<expr>64</expr>]
                                                    </index>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>i</name> =
                                        <init>
                                            <expr>
                                                <name><name>buf</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>x</name>
                                            &lt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// Separate off the last digit using unsigned division.
                                                That will leave
                                            </comment>
                                            <comment type="line">// a number that is nonnegative as a signed integer.
                                            </comment>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>long</name>
                                                    </type>
                                                    <name>quotient</name> =
                                                    <init>
                                                        <expr>
                                                            <call>
                                                                <name>divide</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>x</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>radix</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <decl_stmt>
                                                <decl>
                                                    <type>
                                                        <name>long</name>
                                                    </type>
                                                    <name>rem</name> =
                                                    <init>
                                                        <expr>
                                                            <name>x</name>
                                                            - <name>quotient</name> *
                                                            <name>radix</name>
                                                        </expr>
                                                    </init>
                                                </decl>
                                                ;
                                            </decl_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>
                                                        <name>buf</name>
                                                        <index>[
                                                            <expr>--
                                                                <name>i</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                    =
                                                    <call>
                                                        <name><name>Character</name>.
                                                            <name>forDigit</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>(<name>int</name>)
                                                                    <name>rem</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>radix</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            <expr_stmt>
                                                <expr>
                                                    <name>x</name>
                                                    =
                                                    <name>quotient</name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                <comment type="line">// Simple modulo/division approach</comment>
                                <while>while
                                    <condition>(
                                        <expr>
                                            <name>x</name>
                                            &gt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>
                                                    <name>buf</name>
                                                    <index>[
                                                        <expr>--
                                                            <name>i</name>
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                =
                                                <call>
                                                    <name><name>Character</name>.
                                                        <name>forDigit</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <call>(<name>int</name>)
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>x</name>
                                                                                %
                                                                                <name>radix</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>radix</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>x</name>
                                                /=
                                                <name>radix</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                <comment type="line">// Generate string</comment>
                                <return>return
                                    <expr>new
                                        <call>
                                            <name>String</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>buf</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name><name>buf</name>.
                                                            <name>length</name>
                                                        </name>
                                                        -
                                                        <name>i</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="line">// calculated as 0xffffffffffffffff / radix</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                        <index>[]</index>
                    </type>
                    <name>maxValueDivs</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>long</name>
                                <index>[
                                    <expr>
                                        <name><name>Character</name>.
                                            <name>MAX_RADIX</name>
                                        </name>
                                        + 1
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                        <index>[]</index>
                    </type>
                    <name>maxValueMods</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>int</name>
                                <index>[
                                    <expr>
                                        <name><name>Character</name>.
                                            <name>MAX_RADIX</name>
                                        </name>
                                        + 1
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                        <index>[]</index>
                    </type>
                    <name>maxSafeDigits</name> =
                    <init>
                        <expr>new
                            <name>
                                <name>int</name>
                                <index>[
                                    <expr>
                                        <name><name>Character</name>.
                                            <name>MAX_RADIX</name>
                                        </name>
                                        + 1
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            static
            <block>{
                <decl_stmt>
                    <decl>
                        <type>
                            <name>BigInteger</name>
                        </type>
                        <name>overflow</name> =
                        <init>
                            <expr>new
                                <call>
                                    <name>BigInteger</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>"10000000000000000"</expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>16</expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                        </init>
                    </decl>
                    ;
                </decl_stmt>
                <for>for (
                    <init>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>i</name> =
                            <init>
                                <expr>
                                    <name><name>Character</name>.
                                        <name>MIN_RADIX</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </init>
                    <condition>
                        <expr>
                            <name>i</name>
                            &lt;=
                            <name><name>Character</name>.
                                <name>MAX_RADIX</name>
                            </name>
                        </expr>
                        ;
                    </condition>
                    <incr>
                        <expr><name>i</name>++
                        </expr>
                    </incr>
                    )
                    <block>{
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>maxValueDivs</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                =
                                <call>
                                    <name>divide</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>MAX_VALUE</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>maxValueMods</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                = (<name>int</name>)
                                <call>
                                    <name>remainder</name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>MAX_VALUE</name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            ;
                        </expr_stmt>
                        <expr_stmt>
                            <expr>
                                <name>
                                    <name>maxSafeDigits</name>
                                    <index>[
                                        <expr>
                                            <name>i</name>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                =
                                <call>
                                    <name><name>overflow</name>.
                                        <name>toString</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                .
                                <call>
                                    <name>length</name>
                                    <argument_list>()</argument_list>
                                </call>
                                - 1
                            </expr>
                            ;
                        </expr_stmt>
                        }
                    </block>
                </for>
                }
            </block>
            }
        </block>
    </class>
</unit>
